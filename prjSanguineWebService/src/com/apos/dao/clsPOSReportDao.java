package com.apos.dao;

import java.lang.reflect.Array;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.net.InetAddress;
import java.sql.Time;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import javax.print.attribute.HashPrintRequestAttributeSet;
import javax.print.attribute.HashPrintServiceAttributeSet;
import javax.print.attribute.PrintRequestAttributeSet;
import javax.print.attribute.PrintServiceAttributeSet;
import javax.print.attribute.standard.Copies;
import javax.print.attribute.standard.MediaSizeName;
import javax.print.attribute.standard.PrinterName;

import org.codehaus.jettison.json.JSONArray;
import org.codehaus.jettison.json.JSONException;
import org.codehaus.jettison.json.JSONObject;
import org.hibernate.Query;
import org.hibernate.SessionFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import com.apos.bean.clsAPCReportBean;
import com.apos.bean.clsAdvOrderItemDtl;
import com.apos.bean.clsBillDtl;
import com.apos.bean.clsBillDtlBean;
import com.apos.bean.clsBillItemDtl;
import com.apos.bean.clsBillItemDtlBean;
import com.apos.bean.clsBillSettlementDtl;
import com.apos.bean.clsCommonBeanDtl;
import com.apos.bean.clsCounterComparator;
import com.apos.bean.clsCounterDtlBean;
import com.apos.bean.clsDebitCardDetailBean;
import com.apos.bean.clsGenericBean;
import com.apos.bean.clsGroupSubGroupWiseSales;
import com.apos.bean.clsItemWiseConsumptionBean;
import com.apos.bean.clsOperatorComparator;
import com.apos.bean.clsOperatorDtl;
import com.apos.bean.clsPOSSettelementOptionsBean;
import com.apos.bean.clsPOSWiseReportBean;
import com.apos.bean.clsReprintDocsBean;
import com.apos.bean.clsSalesFlashColumns;
import com.apos.bean.clsTaxCalculationDtls;
import com.apos.bean.clsWaiterWiseSalesComparator;
import com.apos.service.clsPOSMasterService;
import com.apos.service.clsSetupService;
import com.apos.util.clsGlobalFunctions;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.webservice.util.clsUtilityFunctions;

@Repository("clsPOSReportDao")
@Transactional(value = "webPOSTransactionManager")
public class clsPOSReportDao 
{

	@Autowired
	private SessionFactory webPOSSessionFactory;

	@Autowired
	private clsSetupService objSetupService;
	
	@Autowired
	private clsPOSMasterService objPOS;
	
	@Autowired
	private clsUtilityFunctions objUtilityFunctions;
	
	Map<String, List<Map<String, clsBillSettlementDtl>>> mapPOSDtlForSettlement;
	private Map<String, Map<String, clsBillItemDtl>> mapPOSItemDtl;
	private Map<String, Map<String, clsBillItemDtl>> mapPOSMenuHeadDtl;
	private Map<String, List<Map<String, clsGroupSubGroupWiseSales>>> mapPOSDtlForGroupSubGroup;
	private Map<String, Map<String, clsCommonBeanDtl>> mapPOSWaiterWiseSales;
	private Map<String, Map<String, clsCommonBeanDtl>> mapPOSDeliveryBoyWise;
	private Map<String, Map<String, clsCommonBeanDtl>> mapPOSCostCenterWiseSales;
	private Map<String, Map<String, clsCommonBeanDtl>> mapPOSTableWiseSales;
	private Map<String, Map<String, clsCommonBeanDtl>> mapPOSHourlyWiseSales;
	private Map<String, Map<String, clsCommonBeanDtl>> mapPOSAreaWiseSales;
	private Map<String, clsCommonBeanDtl> mapPOSDayWiseSales;
	private Map<String, Map<String, clsCommonBeanDtl>> mapPOSModifierWiseSales;
	private Map<String, Map<String, clsCommonBeanDtl>> mapPOSMonthWiseSales;
	private Map<String, List<clsOperatorDtl>> mapOperatorDtls;

	double TotSale = 0;

	public JSONObject funGroupWiseReportDtl(String fromDate, String toDate,
			String strPOSCode, String strSGCode, String strShiftNo,
			String strUserCode) {
		List listRet = new ArrayList();
		StringBuilder sbSqlLive = new StringBuilder();
		StringBuilder sbSqlQFile = new StringBuilder();
		StringBuilder sbSqlFilters = new StringBuilder();
		JSONArray jArr = new JSONArray();
		JSONObject jOBjRet = new JSONObject();

		sbSqlLive.setLength(0);
		sbSqlQFile.setLength(0);
		sbSqlFilters.setLength(0);

		try {
			sbSqlQFile
					.append("SELECT c.strGroupCode,c.strGroupName,sum( b.dblQuantity)"
							+ ",sum( b.dblAmount)-sum(b.dblDiscountAmt) "
							+ ",f.strPosName, '"
							+ strUserCode
							+ "',b.dblRate ,sum(b.dblAmount),sum(b.dblDiscountAmt),a.strPOSCode,"
							+ "sum( b.dblAmount)-sum(b.dblDiscountAmt)+sum(b.dblTaxAmount)  "
							+ "FROM tblqbillhd a,tblqbilldtl b,tblgrouphd c,tblsubgrouphd d"
							+ ",tblitemmaster e,tblposmaster f "
							+ "where a.strBillNo=b.strBillNo and a.strPOSCode=f.strPOSCode  and a.strClientCode=b.strClientCode "
							+ "and b.strItemCode=e.strItemCode "
							+ "and c.strGroupCode=d.strGroupCode and d.strSubGroupCode=e.strSubGroupCode ");

			sbSqlLive
					.append("SELECT c.strGroupCode,c.strGroupName,sum( b.dblQuantity)"
							+ ",sum( b.dblAmount)-sum(b.dblDiscountAmt) "
							+ ",f.strPosName, '"
							+ strUserCode
							+ "',b.dblRate ,sum(b.dblAmount),sum(b.dblDiscountAmt),a.strPOSCode,"
							+ " sum( b.dblAmount)-sum(b.dblDiscountAmt)+sum(b.dblTaxAmount)  "
							+ "FROM tblbillhd a,tblbilldtl b,tblgrouphd c,tblsubgrouphd d"
							+ ",tblitemmaster e,tblposmaster f "
							+ "where a.strBillNo=b.strBillNo and a.strPOSCode=f.strPOSCode  and a.strClientCode=b.strClientCode   "
							+ "and b.strItemCode=e.strItemCode "
							+ "and c.strGroupCode=d.strGroupCode and d.strSubGroupCode=e.strSubGroupCode ");

			String sqlModLive = "select c.strGroupCode,c.strGroupName"
					+ ",sum(b.dblQuantity),sum(b.dblAmount)-sum(b.dblDiscAmt),f.strPOSName"
					+ ",'"
					+ strUserCode
					+ "','0' ,sum(b.dblAmount),sum(b.dblDiscAmt),a.strPOSCode,"
					+ " sum(b.dblAmount)-sum(b.dblDiscAmt)  "
					+ " from tblbillmodifierdtl b,tblbillhd a,tblposmaster f,tblitemmaster d"
					+ ",tblsubgrouphd e,tblgrouphd c "
					+ " where a.strBillNo=b.strBillNo and a.strPOSCode=f.strPosCode  and a.strClientCode=b.strClientCode  "
					+ " and LEFT(b.strItemCode,7)=d.strItemCode "
					+ " and d.strSubGroupCode=e.strSubGroupCode and e.strGroupCode=c.strGroupCode "
					+ " and b.dblamount>0 ";

			String sqlModQFile = "select c.strGroupCode,c.strGroupName"
					+ ",sum(b.dblQuantity),sum(b.dblAmount)-sum(b.dblDiscAmt),f.strPOSName"
					+ ",'"
					+ strUserCode
					+ "','0' ,sum(b.dblAmount),sum(b.dblDiscAmt),a.strPOSCode,"
					+ " sum(b.dblAmount)-sum(b.dblDiscAmt) "
					+ " from tblqbillmodifierdtl b,tblqbillhd a,tblposmaster f,tblitemmaster d"
					+ ",tblsubgrouphd e,tblgrouphd c "
					+ " where a.strBillNo=b.strBillNo and a.strPOSCode=f.strPosCode   and a.strClientCode=b.strClientCode   "
					+ " and LEFT(b.strItemCode,7)=d.strItemCode "
					+ " and d.strSubGroupCode=e.strSubGroupCode and e.strGroupCode=c.strGroupCode "
					+ " and b.dblamount>0 ";

			sbSqlFilters.append(" and date( a.dteBillDate ) BETWEEN '"
					+ fromDate + "' AND '" + toDate + "' ");
			if (!strPOSCode.equalsIgnoreCase("All")) {
				sbSqlFilters
						.append(" AND a.strPOSCode = '" + strPOSCode + "' ");
			}

			// if (clsGlobalVarClass.gEnableShiftYN)
			// {
			// if (clsGlobalVarClass.gEnableShiftYN &&
			// (!strShiftNo.equalsIgnoreCase("All")))
			// {
			sbSqlFilters.append(" and a.intShiftCode = '" + strShiftNo + "' ");
			// }
			// }

			if (!strSGCode.equalsIgnoreCase("All")) {
				sbSqlFilters.append("AND d.strSubGroupCode='" + strSGCode
						+ "' ");
			}
			sbSqlFilters
					.append(" Group BY c.strGroupCode, c.strGroupName, a.strPoscode ");

			sbSqlLive.append(sbSqlFilters);
			sbSqlQFile.append(sbSqlFilters);
			sqlModLive += " " + sbSqlFilters;
			sqlModQFile += " " + sbSqlFilters;

			Query querySqlLive = webPOSSessionFactory.getCurrentSession()
					.createSQLQuery(sbSqlLive.toString());
			List listSqlLive = querySqlLive.list();
			if (listSqlLive.size() > 0) {

				for (int i = 0; i < listSqlLive.size(); i++) {
					Object[] obj = (Object[]) listSqlLive.get(i);
					JSONObject jObj = new JSONObject();
					jObj.put("strGroupCode", obj[0].toString());
					jObj.put("strGroupName", obj[1].toString());
					jObj.put("dblQuantity", obj[2].toString());
					jObj.put("dblAmtLessDis", obj[3].toString());
					jObj.put("strPOSName", obj[4].toString());
					jObj.put("strUserCode", obj[5].toString());
					jObj.put("dblRate", obj[6].toString());
					jObj.put("dblAmount", obj[7].toString());
					jObj.put("dblDiscountAmt", obj[8].toString());
					jObj.put("strPOSCode", obj[9].toString());
					jObj.put("dblAmtWithTax", obj[10].toString());
					jArr.put(jObj);
				}
				// jOBjRet.put("jArr", jArr);
			}
			// listRet.add(listSqlLive);

			Query queryQFile = webPOSSessionFactory.getCurrentSession()
					.createSQLQuery(sbSqlQFile.toString());
			List listSqlQFile = queryQFile.list();
			if (listSqlQFile.size() > 0) {

				for (int i = 0; i < listSqlQFile.size(); i++) {
					Object[] obj = (Object[]) listSqlQFile.get(i);
					JSONObject jObj = new JSONObject();
					jObj.put("strGroupCode", obj[0].toString());
					jObj.put("strGroupName", obj[1].toString());
					jObj.put("dblQuantity", obj[2].toString());
					jObj.put("dblAmtLessDis", obj[3].toString());
					jObj.put("strPOSName", obj[4].toString());
					jObj.put("strUserCode", obj[5].toString());
					jObj.put("dblRate", obj[6].toString());
					jObj.put("dblAmount", obj[7].toString());
					jObj.put("dblDiscountAmt", obj[8].toString());
					jObj.put("strPOSCode", obj[9].toString());
					jObj.put("dblAmtWithTax", obj[10].toString());
					jArr.put(jObj);
				}
				// jOBjRet.put("jArr", jArr);
			}
			// listRet.add(listSqlQFile);

			Query querySqlModLive = webPOSSessionFactory.getCurrentSession()
					.createSQLQuery(sqlModLive.toString());
			List listSqlModLive = querySqlModLive.list();
			if (listSqlModLive.size() > 0) {

				for (int i = 0; i < listSqlModLive.size(); i++) {
					Object[] obj = (Object[]) listSqlModLive.get(i);
					JSONObject jObj = new JSONObject();
					jObj.put("strGroupCode", obj[0].toString());
					jObj.put("strGroupName", obj[1].toString());
					jObj.put("dblQuantity", obj[2].toString());
					jObj.put("dblAmtLessDis", obj[3].toString());
					jObj.put("strPOSName", obj[4].toString());
					jObj.put("strUserCode", obj[5].toString());
					jObj.put("dblRate", obj[6].toString());
					jObj.put("dblAmount", obj[7].toString());
					jObj.put("dblDiscountAmt", obj[8].toString());
					jObj.put("strPOSCode", obj[9].toString());
					jObj.put("dblAmtWithTax", obj[10].toString());
					jArr.put(jObj);
				}
				// jOBjRet.put("jArr", jArr);
			}
			// listRet.add(listSqlModLive);

			Query querySqlModQFile = webPOSSessionFactory.getCurrentSession()
					.createSQLQuery(sqlModQFile.toString());
			List listSqlModQFile = querySqlModQFile.list();
			if (listSqlModQFile.size() > 0) {

				for (int i = 0; i < listSqlModQFile.size(); i++) {
					Object[] obj = (Object[]) listSqlModQFile.get(i);
					JSONObject jObj = new JSONObject();
					jObj.put("strGroupCode", obj[0].toString());
					jObj.put("strGroupName", obj[1].toString());
					jObj.put("dblQuantity", obj[2].toString());
					jObj.put("dblAmtLessDis", obj[3].toString());
					jObj.put("strPOSName", obj[4].toString());
					jObj.put("strUserCode", obj[5].toString());
					jObj.put("dblRate", obj[6].toString());
					jObj.put("dblAmount", obj[7].toString());
					jObj.put("dblDiscountAmt", obj[8].toString());
					jObj.put("strPOSCode", obj[9].toString());
					jObj.put("dblAmtWithTax", obj[10].toString());
					jArr.put(jObj);
				}
				// jOBjRet.put("jArr", jArr);
			}

			// listRet.add(listSqlModQFile);
			jOBjRet.put("jArr", jArr);
		} catch (Exception ex) {
			ex.printStackTrace();
		}

		return jOBjRet;

	}

	// funItemWiseReportDtl

	public JSONObject funItemWiseReportDtl(String fromDate, String toDate,
			String strPOSCode, String strShiftNo, String strUserCode) {
		List listRet = new ArrayList();
		StringBuilder sbSqlLive = new StringBuilder();
		StringBuilder sbSqlQFile = new StringBuilder();
		StringBuilder sbSqlFilters = new StringBuilder();
		JSONArray jArr = new JSONArray();
		JSONObject jOBjRet = new JSONObject();

		sbSqlLive.setLength(0);
		sbSqlQFile.setLength(0);
		sbSqlFilters.setLength(0);

		try {

			sbSqlQFile
					.append("select a.strItemCode,a.strItemName,c.strPOSName"
							+ ",sum(a.dblQuantity),sum(a.dblTaxAmount)\n"
							+ ",sum(a.dblAmount),sum(a.dblAmount)-sum(a.dblDiscountAmt),"
							+ " sum(a.dblDiscountAmt),DATE_FORMAT(date(a.dteBillDate),'%d-%m-%Y'),"
							+ "'"
							+ strUserCode
							+ "'\n"
							+ " from tblqbilldtl a,tblqbillhd b,tblposmaster c\n"
							+ " where a.strBillNo=b.strBillNo and b.strPOSCode=c.strPosCode "
							+ " and date( b.dteBillDate ) BETWEEN '" + fromDate
							+ "' AND '" + toDate + "' "
							+ " and a.strClientCode=b.strClientCode ");

			sbSqlLive
					.append("select a.strItemCode,a.strItemName,c.strPOSName"
							+ ",sum(a.dblQuantity),sum(a.dblTaxAmount)\n"
							+ ",sum(a.dblAmount),sum(a.dblAmount)-sum(a.dblDiscountAmt),"
							+ " sum(a.dblDiscountAmt),DATE_FORMAT(date(a.dteBillDate),'%d-%m-%Y'),"
							+ "'"
							+ strUserCode
							+ "'\n"
							+ " from tblbilldtl a,tblbillhd b,tblposmaster c\n"
							+ " where a.strBillNo=b.strBillNo and b.strPOSCode=c.strPosCode "
							+ " and date( b.dteBillDate ) BETWEEN '" + fromDate
							+ "' AND '" + toDate + "' "
							+ " and a.strClientCode=b.strClientCode ");

			String sqlModLive = "select a.strItemCode,a.strModifierName,c.strPOSName"
					+ ",sum(a.dblQuantity),'0',sum(a.dblAmount),sum(a.dblAmount)-sum(a.dblDiscAmt),"
					+ " sum(a.dblDiscAmt),DATE_FORMAT(date(b.dteBillDate),'%d-%m-%Y'),"
					+ "'"
					+ strUserCode
					+ "'\n"
					+ " from tblbillmodifierdtl a,tblbillhd b,tblposmaster c\n"
					+ " where a.strBillNo=b.strBillNo and b.strPOSCode=c.strPosCode and a.dblamount>0 \n"
					+ " and date( b.dteBillDate ) BETWEEN '"
					+ fromDate
					+ "' AND '"
					+ toDate
					+ "'"
					+ " and a.strClientCode=b.strClientCode  ";

			String sqlModQFile = "select a.strItemCode,a.strModifierName,c.strPOSName"
					+ ",sum(a.dblQuantity),'0',sum(a.dblAmount),sum(a.dblAmount)-sum(a.dblDiscAmt),"
					+ " sum(a.dblDiscAmt),DATE_FORMAT(date(b.dteBillDate),'%d-%m-%Y'),"
					+ "'"
					+ strUserCode
					+ "'\n"
					+ " from tblqbillmodifierdtl a,tblqbillhd b,tblposmaster c\n"
					+ " where a.strBillNo=b.strBillNo and b.strPOSCode=c.strPosCode and a.dblamount>0 \n"
					+ " and date( b.dteBillDate ) BETWEEN '"
					+ fromDate
					+ "' AND '"
					+ toDate
					+ "'"
					+ " and a.strClientCode=b.strClientCode  ";

			/*
			 * sbSqlFilters.append(" and date( a.dteBillDate ) BETWEEN '" +
			 * fromDate + "' AND '" + toDate + "' "); if
			 * (!strPOSCode.equalsIgnoreCase("All")) {
			 * sbSqlFilters.append(" AND a.strPOSCode = '" + strPOSCode + "' ");
			 * }
			 * 
			 * sbSqlFilters.append(" and a.intShiftCode = '" + strShiftNo +
			 * "' ");
			 * 
			 * sbSqlFilters.append(" Group BY  a.strPoscode ");
			 * 
			 * sbSqlLive.append(sbSqlFilters); sbSqlQFile.append(sbSqlFilters);
			 * sqlModLive += " " + sbSqlFilters; sqlModQFile += " " +
			 * sbSqlFilters;
			 */

			if (!strPOSCode.equals("All")) {
				sbSqlFilters
						.append(" AND b.strPOSCode = '" + strPOSCode + "' ");
			}
			sbSqlFilters.append(" AND b.intShiftCode = '" + strShiftNo + "' ");

			// sbSqlFilters.append(" Group BY  a.strPoscode ");

			// sbSqlFilters.append("GROUP BY a.strItemCode,a.strItemName ");

			sbSqlLive.append(sbSqlFilters).append(
					" GROUP BY a.strItemCode,a.strItemName ");
			sbSqlQFile.append(sbSqlFilters).append(
					" GROUP BY a.strItemCode,a.strItemName ");
			sqlModLive += " " + sbSqlFilters
					+ "  GROUP BY a.strItemCode,a.strModifierName ";
			sqlModQFile += " " + sbSqlFilters
					+ "  GROUP BY a.strItemCode,a.strModifierName ";

			/*
			 * sqlLive = sqlLive + " " + sqlFilters +
			 * "  GROUP BY a.strItemCode,a.strItemName "; sqlQFile = sqlQFile +
			 * " " + sqlFilters + "  GROUP BY a.strItemCode,a.strItemName ";
			 * 
			 * sqlModLive = sqlModLive + " " + sqlFilters +
			 * "  GROUP BY a.strItemCode,a.strModifierName "; sqlModQFile =
			 * sqlModQFile + " " + sqlFilters +
			 * "  GROUP BY a.strItemCode,a.strModifierName ";
			 */

			Query querySqlLive = webPOSSessionFactory.getCurrentSession()
					.createSQLQuery(sbSqlLive.toString());
			List listSqlLive = querySqlLive.list();
			if (listSqlLive.size() > 0) {

				for (int i = 0; i < listSqlLive.size(); i++) {
					Object[] obj = (Object[]) listSqlLive.get(i);
					JSONObject jObj = new JSONObject();
					jObj.put("strItemCode", obj[0].toString());
					jObj.put("strItemName", obj[1].toString());
					jObj.put("strPOSName", obj[2].toString());
					jObj.put("dblQuantity", obj[3].toString());
					jObj.put("dblTaxAmount", obj[4].toString());
					jObj.put("dblAmount", obj[5].toString());
					jObj.put("dblSubTotal", obj[6].toString());
					jObj.put("dblDiscountAmt", obj[7].toString());
					jObj.put("dteBillDate", obj[8].toString());
					jArr.put(jObj);
				}
				// jOBjRet.put("jArr", jArr);
			}
			// listRet.add(listSqlLive);

			Query queryQFile = webPOSSessionFactory.getCurrentSession()
					.createSQLQuery(sbSqlQFile.toString());
			List listSqlQFile = queryQFile.list();
			if (listSqlQFile.size() > 0) {

				for (int i = 0; i < listSqlQFile.size(); i++) {
					Object[] obj = (Object[]) listSqlQFile.get(i);
					JSONObject jObj = new JSONObject();
					jObj.put("strItemCode", obj[0].toString());
					jObj.put("strItemName", obj[1].toString());
					jObj.put("strPOSName", obj[2].toString());
					jObj.put("dblQuantity", obj[3].toString());
					jObj.put("dblTaxAmount", obj[4].toString());
					jObj.put("dblAmount", obj[5].toString());
					jObj.put("dblSubTotal", obj[6].toString());
					jObj.put("dblDiscountAmt", obj[7].toString());
					jObj.put("dteBillDate", obj[8].toString());
					jArr.put(jObj);
				}
				// jOBjRet.put("jArr", jArr);
			}
			// listRet.add(listSqlQFile);

			Query querySqlModLive = webPOSSessionFactory.getCurrentSession()
					.createSQLQuery(sqlModLive.toString());
			List listSqlModLive = querySqlModLive.list();
			if (listSqlModLive.size() > 0) {

				for (int i = 0; i < listSqlModLive.size(); i++) {
					Object[] obj = (Object[]) listSqlModLive.get(i);
					JSONObject jObj = new JSONObject();
					jObj.put("strItemCode", obj[0].toString());
					jObj.put("strItemName", obj[1].toString());
					jObj.put("strPOSName", obj[2].toString());
					jObj.put("dblQuantity", obj[3].toString());
					jObj.put("dblTaxAmount", obj[4].toString());
					jObj.put("dblAmount", obj[5].toString());
					jObj.put("dblSubTotal", obj[6].toString());
					jObj.put("dblDiscountAmt", obj[7].toString());
					jObj.put("dteBillDate", obj[8].toString());
					jArr.put(jObj);
				}
				// jOBjRet.put("jArr", jArr);
			}
			// listRet.add(listSqlModLive);

			Query querySqlModQFile = webPOSSessionFactory.getCurrentSession()
					.createSQLQuery(sqlModQFile.toString());
			List listSqlModQFile = querySqlModQFile.list();
			if (listSqlModQFile.size() > 0) {

				for (int i = 0; i < listSqlModQFile.size(); i++) {
					Object[] obj = (Object[]) listSqlModQFile.get(i);
					JSONObject jObj = new JSONObject();
					jObj.put("strItemCode", obj[0].toString());
					jObj.put("strItemName", obj[1].toString());
					jObj.put("strPOSName", obj[2].toString());
					jObj.put("dblQuantity", obj[3].toString());
					jObj.put("dblTaxAmount", obj[4].toString());
					jObj.put("dblAmount", obj[5].toString());
					jObj.put("dblSubTotal", obj[6].toString());
					jObj.put("dblDiscountAmt", obj[7].toString());
					jObj.put("dteBillDate", obj[8].toString());
					jArr.put(jObj);
				}
				// jOBjRet.put("jArr", jArr);
			}

			// listRet.add(listSqlModQFile);
			jOBjRet.put("jArr", jArr);
		} catch (Exception ex) {
			ex.printStackTrace();
		}

		return jOBjRet;

	}

	public JSONObject funTaxWiseReportDtl(String fromDate, String toDate,
			String strPOSCode, String strShiftNo, String strUserCode) {
		List listRet = new ArrayList();
		StringBuilder sbSqlLive = new StringBuilder();
		StringBuilder sbSqlQFile = new StringBuilder();
		StringBuilder sbSqlFilters = new StringBuilder();
		JSONArray jArr = new JSONArray();
		JSONObject jOBjRet = new JSONObject();

		sbSqlLive.setLength(0);
		sbSqlQFile.setLength(0);
		sbSqlFilters.setLength(0);

		try {

			sbSqlLive
					.append("SELECT a.strBillNo,DATE_FORMAT(a.dteBillDate,'%d-%m-%Y') as dteBillDate, b.strTaxCode, c.strTaxDesc, a.strPOSCode, b.dblTaxableAmount, b.dblTaxAmount, a.dblGrandTotal,d.strposname\n"
							+ "FROM tblBillHd a\n"
							+ "INNER JOIN tblBillTaxDtl b ON a.strBillNo = b.strBillNo\n"
							+ "INNER JOIN tblTaxHd c ON b.strTaxCode = c.strTaxCode\n"
							+ "LEFT OUTER\n"
							+ "JOIN tblposmaster d ON a.strposcode=d.strposcode\n"
							+ "WHERE DATE(a.dteBillDate) BETWEEN '"
							+ fromDate
							+ "' and  '" + toDate + "' ");

			sbSqlQFile
					.append("SELECT a.strBillNo,DATE_FORMAT(a.dteBillDate,'%d-%m-%Y') as dteBillDate, b.strTaxCode, c.strTaxDesc, a.strPOSCode, b.dblTaxableAmount, b.dblTaxAmount, a.dblGrandTotal,d.strposname\n"
							+ "FROM tblBillHd a\n"
							+ "INNER JOIN tblBillTaxDtl b ON a.strBillNo = b.strBillNo\n"
							+ "INNER JOIN tblTaxHd c ON b.strTaxCode = c.strTaxCode\n"
							+ "LEFT OUTER\n"
							+ "JOIN tblposmaster d ON a.strposcode=d.strposcode\n"
							+ "WHERE DATE(a.dteBillDate) BETWEEN '"
							+ fromDate
							+ "' and  '" + toDate + "' ");

			sbSqlFilters.append(" and date( a.dteBillDate ) BETWEEN '"
					+ fromDate + "' AND '" + toDate + "' ");
			if (!strPOSCode.equalsIgnoreCase("All")) {
				sbSqlFilters
						.append(" AND a.strPOSCode = '" + strPOSCode + "' ");
			}

			// if (clsGlobalVarClass.gEnableShiftYN)
			// {
			// if (clsGlobalVarClass.gEnableShiftYN &&
			// (!strShiftNo.equalsIgnoreCase("All")))
			// {
			sbSqlFilters.append(" and a.intShiftCode = '" + strShiftNo + "' ");
			// }
			// }

			/*
			 * if (!strSGCode.equalsIgnoreCase("All")) {
			 * sbSqlFilters.append("AND d.strSubGroupCode='" + strSGCode +
			 * "' "); }
			 */
			// sbSqlFilters.append(" Group BY c.strBillNo, c.strTaxCode, a.strPoscode ");

			sbSqlLive.append(sbSqlFilters);
			sbSqlQFile.append(sbSqlFilters);

			Query querySqlLive = webPOSSessionFactory.getCurrentSession()
					.createSQLQuery(sbSqlLive.toString());
			List listSqlLive = querySqlLive.list();
			if (listSqlLive.size() > 0) {

				for (int i = 0; i < listSqlLive.size(); i++) {
					Object[] obj = (Object[]) listSqlLive.get(i);
					JSONObject jObj = new JSONObject();
					jObj.put("strBillNo", obj[0].toString());
					jObj.put("dteBillDate", obj[1].toString());
					jObj.put("strTaxCode", obj[2].toString());
					jObj.put("strTaxDesc", obj[3].toString());
					jObj.put("strPOSName", obj[4].toString());
					jObj.put("dblTaxableAmount", obj[5].toString());
					jObj.put("dblTaxAmount", obj[6].toString());
					jArr.put(jObj);
				}
				// jOBjRet.put("jArr", jArr);
			}
			// listRet.add(listSqlLive);

			Query queryQFile = webPOSSessionFactory.getCurrentSession()
					.createSQLQuery(sbSqlQFile.toString());
			List listSqlQFile = queryQFile.list();
			if (listSqlQFile.size() > 0) {

				for (int i = 0; i < listSqlQFile.size(); i++) {
					Object[] obj = (Object[]) listSqlQFile.get(i);
					JSONObject jObj = new JSONObject();
					jObj.put("strBillNo", obj[0].toString());
					jObj.put("dteBillDate", obj[1].toString());
					jObj.put("strTaxCode", obj[2].toString());
					jObj.put("strTaxDesc", obj[3].toString());
					jObj.put("strPOSName", obj[4].toString());
					jObj.put("dblTaxableAmount", obj[5].toString());
					jObj.put("dblTaxAmount", obj[6].toString());
					jArr.put(jObj);
				}
				// jOBjRet.put("jArr", jArr);
			}

			jOBjRet.put("jArr", jArr);
		} catch (Exception ex) {
			ex.printStackTrace();
		}

		return jOBjRet;

	}

	public JSONObject funComplimentarySettlementReportDtl(String fromDate,
			String toDate, String strPOSCode, String strShiftNo,
			String strReasonCode, String strViewType, String strUserCode) {
		List listRet = new ArrayList();
		StringBuilder sbSqlLive = new StringBuilder();
		StringBuilder sbSqlQFile = new StringBuilder();
		StringBuilder sbSqlFilters = new StringBuilder();
		JSONArray jArr = new JSONArray();
		JSONObject jOBjRet = new JSONObject();

		sbSqlLive.setLength(0);
		sbSqlQFile.setLength(0);
		sbSqlFilters.setLength(0);
		if (strViewType.equalsIgnoreCase("Group Wise")) {
			try {

				sbSqlLive
						.append(" select e.strPosName,h.strGroupCode,h.strGroupName,b.strItemCode,b.strItemName,b.dblRate,sum(b.dblQuantity)as dblQnty,ifnull((b.dblRate*sum(b.dblQuantity)),0) as dblAmount"
								+ " from tblbillhd a,tblbilldtl b,tblbillsettlementdtl c,tblsettelmenthd d,tblposmaster e "
								+ " ,tblitemmaster f,tblsubgrouphd g,tblgrouphd h"
								+ " where a.strBillNo = b.strBillNo"
								+ " and  a.strBillNo = c.strBillNo"
								+ " and c.strSettlementCode = d.strSettelmentCode"
								+ " and  a.strPOSCode=e.strPosCode"
								+ " and b.strItemCode=f.strItemCode"
								+ " and f.strSubGroupCode=g.strSubGroupCode"
								+ " and g.strGroupCode=h.strGroupCode"
								+ " and d.strSettelmentType='Complementary'");

				sbSqlQFile
						.append("select e.strPosName,h.strGroupCode,h.strGroupName,b.strItemCode,b.strItemName,b.dblRate,sum(b.dblQuantity)as dblQnty,ifnull((b.dblRate*sum(b.dblQuantity)),0) as dblAmount"
								+ " from tblqbillhd a,tblqbilldtl b,tblqbillsettlementdtl c,tblsettelmenthd d,tblposmaster e "
								+ " ,tblitemmaster f,tblsubgrouphd g,tblgrouphd h"
								+ " where a.strBillNo = b.strBillNo "
								+ " and  a.strBillNo = c.strBillNo "
								+ " and c.strSettlementCode = d.strSettelmentCode "
								+ " and  a.strPOSCode=e.strPosCode  "
								+ " and b.strItemCode=f.strItemCode"
								+ " and f.strSubGroupCode=g.strSubGroupCode"
								+ " and g.strGroupCode=h.strGroupCode"
								+ " and d.strSettelmentType='Complementary' ");

				String sqlModLive = " select e.strPosName,h.strGroupCode,h.strGroupName,b.strItemCode,b.strModifierName,b.dblRate,sum(b.dblQuantity),ifnull((b.dblRate*sum(b.dblQuantity)),0) as dblAmount"
						+ " from tblbillhd a,tblbillmodifierdtl b,tblbillsettlementdtl c,tblsettelmenthd d,tblposmaster e "
						+ " ,tblitemmaster f,tblsubgrouphd g,tblgrouphd h"
						+ " where a.strBillNo = b.strBillNo "
						+ " and  a.strBillNo = c.strBillNo "
						+ " and c.strSettlementCode = d.strSettelmentCode "
						+ " and  a.strPOSCode=e.strPosCode  "
						+ " and left(b.strItemCode,7)=f.strItemCode"
						+ " and f.strSubGroupCode=g.strSubGroupCode"
						+ " and g.strGroupCode=h.strGroupCode"
						+ " and d.strSettelmentType='Complementary' ";

				String sqlModQFile = "select e.strPosName,h.strGroupCode,h.strGroupName,b.strItemCode,b.strModifierName,b.dblRate,sum(b.dblQuantity),ifnull((b.dblRate*sum(b.dblQuantity)),0) as dblAmount"
						+ " from tblqbillhd a,tblqbillmodifierdtl b,tblqbillsettlementdtl c,tblsettelmenthd d,tblposmaster e \n"
						+ " ,tblitemmaster f,tblsubgrouphd g,tblgrouphd h"
						+ " where a.strBillNo = b.strBillNo "
						+ " and  a.strBillNo = c.strBillNo "
						+ " and c.strSettlementCode = d.strSettelmentCode "
						+ " and  a.strPOSCode=e.strPosCode  "
						+ " and left(b.strItemCode,7)=f.strItemCode"
						+ " and f.strSubGroupCode=g.strSubGroupCode"
						+ " and g.strGroupCode=h.strGroupCode"
						+ " and d.strSettelmentType='Complementary'";

				sbSqlFilters.append(" and date( a.dteBillDate ) BETWEEN '"
						+ fromDate + "' AND '" + toDate + "' ");
				if (!strPOSCode.equalsIgnoreCase("All")) {
					sbSqlFilters.append(" AND a.strPOSCode = '" + strPOSCode
							+ "' ");
				}

				// if (clsGlobalVarClass.gEnableShiftYN)
				// {
				// if (clsGlobalVarClass.gEnableShiftYN &&
				// (!strShiftNo.equalsIgnoreCase("All")))
				// {
				sbSqlFilters.append(" and a.intShiftCode = '" + strShiftNo
						+ "' ");
				// }
				// }strReasonCode

				if (!strReasonCode.equalsIgnoreCase("All")) {
					sbSqlFilters.append("and a.strReasonCode='" + strReasonCode
							+ "' ");
				}

				sbSqlFilters.append(" group by h.strGroupCode,b.strItemCode"
						+ " order by h.strGroupCode,b.strItemCode;");
				String sbModSqlFilters = "group by h.strGroupCode,b.strItemCode,b.strModifierName"
						+ " order by h.strGroupCode,b.strItemCode;";

				sbSqlLive.append(sbSqlFilters);
				sbSqlQFile.append(sbSqlFilters);

				sqlModLive += " " + sbModSqlFilters;
				sqlModQFile += " " + sbModSqlFilters;

				Query querySqlLive = webPOSSessionFactory.getCurrentSession()
						.createSQLQuery(sbSqlLive.toString());
				List listSqlLive = querySqlLive.list();
				if (listSqlLive.size() > 0) {

					for (int i = 0; i < listSqlLive.size(); i++) {
						Object[] obj = (Object[]) listSqlLive.get(i);
						JSONObject jObj = new JSONObject();
						jObj.put("strPosName", obj[0].toString());
						jObj.put("strGroupCode", obj[1].toString());
						jObj.put("strGroupName", obj[2].toString());
						jObj.put("strItemCode", obj[3].toString());
						jObj.put("strItemName", obj[4].toString());
						jObj.put("dblRate", obj[5].toString());
						jObj.put("dblQnty", obj[6].toString());
						jObj.put("dblAmount", obj[7].toString());

						jArr.put(jObj);
					}
					// jOBjRet.put("jArr", jArr);
				}
				// listRet.add(listSqlLive);

				Query queryQFile = webPOSSessionFactory.getCurrentSession()
						.createSQLQuery(sbSqlQFile.toString());
				List listSqlQFile = queryQFile.list();
				if (listSqlQFile.size() > 0) {

					for (int i = 0; i < listSqlQFile.size(); i++) {
						Object[] obj = (Object[]) listSqlQFile.get(i);
						JSONObject jObj = new JSONObject();
						jObj.put("strPosName", obj[0].toString());
						jObj.put("strGroupCode", obj[1].toString());
						jObj.put("strGroupName", obj[2].toString());
						jObj.put("strItemCode", obj[3].toString());
						jObj.put("strItemName", obj[4].toString());
						jObj.put("dblRate", obj[5].toString());
						jObj.put("dblQnty", obj[6].toString());
						jObj.put("dblAmount", obj[7].toString());
						jArr.put(jObj);
					}
					// jOBjRet.put("jArr", jArr);
				}
				// listRet.add(listSqlQFile);

				Query querySqlModLive = webPOSSessionFactory
						.getCurrentSession().createSQLQuery(
								sqlModLive.toString());
				List listSqlModLive = querySqlModLive.list();
				if (listSqlModLive.size() > 0) {

					for (int i = 0; i < listSqlModLive.size(); i++) {
						Object[] obj = (Object[]) listSqlModLive.get(i);
						JSONObject jObj = new JSONObject();
						jObj.put("strPosName", obj[0].toString());
						jObj.put("strGroupCode", obj[1].toString());
						jObj.put("strGroupName", obj[2].toString());
						jObj.put("strItemCode", obj[3].toString());
						jObj.put("strItemName", obj[4].toString());
						jObj.put("dblRate", obj[5].toString());
						jObj.put("dblQnty", obj[6].toString());
						jObj.put("dblAmount", obj[7].toString());
						jArr.put(jObj);
					}
					// jOBjRet.put("jArr", jArr);
				}
				// listRet.add(listSqlModLive);

				Query querySqlModQFile = webPOSSessionFactory
						.getCurrentSession().createSQLQuery(
								sqlModQFile.toString());
				List listSqlModQFile = querySqlModQFile.list();
				if (listSqlModQFile.size() > 0) {

					for (int i = 0; i < listSqlModQFile.size(); i++) {
						Object[] obj = (Object[]) listSqlModQFile.get(i);
						JSONObject jObj = new JSONObject();
						jObj.put("strPosName", obj[0].toString());
						jObj.put("strGroupCode", obj[1].toString());
						jObj.put("strGroupName", obj[2].toString());
						jObj.put("strItemCode", obj[3].toString());
						jObj.put("strItemName", obj[4].toString());
						jObj.put("dblRate", obj[5].toString());
						jObj.put("dblQnty", obj[6].toString());
						jObj.put("dblAmount", obj[7].toString());
						jArr.put(jObj);
					}
					// jOBjRet.put("jArr", jArr);
				}

				// listRet.add(listSqlModQFile);
				jOBjRet.put("jArr", jArr);
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		} else if (strViewType.equalsIgnoreCase("Detail")) {
			try {

				sbSqlLive
						.append(" select ifnull(a.strBillNo,''), DATE_FORMAT(date(a.dteBillDate),'%d-%m-%Y') as dteBillDate,ifnull(b.strItemName,'')\n"
								+ ",b.dblQuantity,b.dblRate,(b.dblQuantity*b.dblRate) as dblAmount ,ifnull(f.strPosName,'')\n"
								+ ",ifnull(g.strWShortName,'NA') as strWShortName, ifnull(e.strReasonName,''), ifnull(a.strRemarks,'')\n"
								+ ",ifnull(i.strGroupName,'') as strGroupName, ifnull(b.strKOTNo,'')\n"
								+ ",a.strPOSCode,ifnull(h.strTableName,'') as strTableName,ifnull(b.strItemCode,'        ')  "
								+ "from tblbillhd a  "
								+ "left outer join  tblbilldtl b on a.strBillNo = b.strBillNo "
								+ "left outer join  tblbillsettlementdtl c on a.strBillNo = c.strBillNo "
								+ "left outer join  tblsettelmenthd d on c.strSettlementCode = d.strSettelmentCode "
								+ "left outer join tblreasonmaster e on  a.strReasonCode = e.strReasonCode  "
								+ "left outer join tblposmaster f on a.strPOSCode=f.strPosCode  "
								+ "left outer join tblwaitermaster g on a.strWaiterNo=g.strWaiterNo "
								+ "left outer join tbltablemaster h on  a.strTableNo=h.strTableNo "
								+ "left outer join tblitemcurrentstk i on b.strItemCode=i.strItemCode "
								+ "where d.strSettelmentType = 'Complementary'");

				sbSqlQFile
						.append("select ifnull(a.strBillNo,''), DATE_FORMAT(date(a.dteBillDate),'%d-%m-%Y') as dteBillDate,ifnull(b.strItemName,'')\n"
								+ ",b.dblQuantity,b.dblRate,(b.dblQuantity*b.dblRate) as dblAmount ,ifnull(f.strPosName,'')\n"
								+ ",ifnull(g.strWShortName,'NA') as strWShortName, ifnull(e.strReasonName,''), ifnull(a.strRemarks,'')\n"
								+ ",ifnull(i.strGroupName,'') as strGroupName, ifnull(b.strKOTNo,'')\n"
								+ ",a.strPOSCode,ifnull(h.strTableName,'') as strTableName,ifnull(b.strItemCode,'        ')  "
								+ "from tblqbillhd a  "
								+ "left outer join  tblqbilldtl b on a.strBillNo = b.strBillNo "
								+ "left outer join  tblqbillsettlementdtl c on a.strBillNo = c.strBillNo "
								+ "left outer join  tblsettelmenthd d on c.strSettlementCode = d.strSettelmentCode "
								+ "left outer join tblreasonmaster e on  a.strReasonCode = e.strReasonCode  "
								+ "left outer join tblposmaster f on a.strPOSCode=f.strPosCode  "
								+ "left outer join tblwaitermaster g on a.strWaiterNo=g.strWaiterNo "
								+ "left outer join tbltablemaster h on  a.strTableNo=h.strTableNo "
								+ "left outer join tblitemcurrentstk i on b.strItemCode=i.strItemCode "
								+ "where d.strSettelmentType = 'Complementary'  ");

				String sqlModLive = "select ifnull(a.strBillNo,''),DATE_FORMAT(date(a.dteBillDate),'%d-%m-%Y') as dteBillDate,b.strModifierName, b.dblQuantity, b.dblRate,(b.dblQuantity*b.dblRate) as dblAmount"
						+ " ,ifnull(f.strPosName,''),ifnull(g.strWShortName,'NA') as strWShortName, ifnull(e.strReasonName,'') as strReasonName, a.strRemarks,ifnull(i.strGroupName,'') as strGroupName, "
						+ " ifnull(j.strKOTNo,''),a.strPOSCode,ifnull(h.strTableName,'') as strTableName,ifnull(b.strItemCode,'        ')  "
						+ " from tblbillhd a"
						+ " INNER JOIN  tblbillmodifierdtl b on a.strBillNo = b.strBillNo"
						+ " left outer join  tblbillsettlementdtl c on a.strBillNo = c.strBillNo"
						+ " left outer join  tblsettelmenthd d on c.strSettlementCode = d.strSettelmentCode "
						+ " left outer join tblreasonmaster e on  a.strReasonCode = e.strReasonCode "
						+ " left outer join tblposmaster f on a.strPOSCode=f.strPosCode "
						+ " left outer join tblwaitermaster g on a.strWaiterNo=g.strWaiterNo"
						+ " left outer join tbltablemaster h on  a.strTableNo=h.strTableNo"
						+ " left outer join tblitemcurrentstk i on left(b.strItemCode,7)=i.strItemCode"
						+ " left outer join  tblbilldtl j on b.strBillNo = j.strBillNo  "
						+ " where d.strSettelmentType = 'Complementary'  ";

				String sqlModQFile = "select ifnull(a.strBillNo,''),DATE_FORMAT(date(a.dteBillDate),'%d-%m-%Y') as dteBillDate,b.strModifierName, b.dblQuantity, b.dblRate,ifnull(b.dblQuantity*b.dblRate,0) as dblAmount,ifnull(f.strPosName,''),ifnull(g.strWShortName,'NA') as strWShortName,ifnull(e.strReasonName,'') as strReasonName, a.strRemarks,ifnull(i.strGroupName,'') as strGroupName,\n"
						+ "ifnull(j.strKOTNo,''),a.strPOSCode,ifnull(h.strTableName,'') as strTableName,ifnull(b.strItemCode,'        ')  "
						+ " from tblqbillhd a"
						+ " INNER JOIN  tblqbillmodifierdtl b on a.strBillNo = b.strBillNo"
						+ " left outer join  tblqbillsettlementdtl c on a.strBillNo = c.strBillNo"
						+ " left outer join  tblsettelmenthd d on c.strSettlementCode = d.strSettelmentCode "
						+ " left outer join tblreasonmaster e on  a.strReasonCode = e.strReasonCode "
						+ " left outer join tblposmaster f on a.strPOSCode=f.strPosCode "
						+ " left outer join tblwaitermaster g on a.strWaiterNo=g.strWaiterNo"
						+ " left outer join tbltablemaster h on  a.strTableNo=h.strTableNo"
						+ " left outer join tblitemcurrentstk i on left(b.strItemCode,7)=i.strItemCode"
						+ " left outer join  tblqbilldtl j on b.strBillNo = j.strBillNo  "
						+ " where d.strSettelmentType = 'Complementary' ";

				sbSqlFilters.append(" and date( a.dteBillDate ) BETWEEN '"
						+ fromDate + "' AND '" + toDate + "' ");
				if (!strPOSCode.equalsIgnoreCase("All")) {
					sbSqlFilters.append(" AND a.strPOSCode = '" + strPOSCode
							+ "' ");
				}

				// if (clsGlobalVarClass.gEnableShiftYN)
				// {
				// if (clsGlobalVarClass.gEnableShiftYN &&
				// (!strShiftNo.equalsIgnoreCase("All")))
				// {
				sbSqlFilters.append(" and a.intShiftCode = '" + strShiftNo
						+ "' ");
				// }
				// }strReasonCode

				if (!strReasonCode.equalsIgnoreCase("All")) {
					sbSqlFilters.append("and a.strReasonCode='" + strReasonCode
							+ "' ");
				}

				sbSqlFilters
						.append(" group by a.strPOSCode,a.strBillNo,b.strKOTNo,b.strItemCode "
								+ " order by a.strPOSCode,a.strBillNo,b.strKOTNo,b.strItemCode");
				String sbModSqlFilters = " group by a.strPOSCode,a.strBillNo,left(b.strItemCode,7),b.strModifierName "
						+ " order by a.strPOSCode,a.strBillNo,left(b.strItemCode,7),b.strModifierName ";

				sbSqlLive.append(sbSqlFilters);
				sbSqlQFile.append(sbSqlFilters);

				sqlModLive += " " + sbModSqlFilters;
				sqlModQFile += " " + sbModSqlFilters;

				Query querySqlLive = webPOSSessionFactory.getCurrentSession()
						.createSQLQuery(sbSqlLive.toString());
				List listSqlLive = querySqlLive.list();
				if (listSqlLive.size() > 0) {

					for (int i = 0; i < listSqlLive.size(); i++) {
						Object[] obj = (Object[]) listSqlLive.get(i);
						JSONObject jObj = new JSONObject();
						jObj.put("strBillNo", obj[0].toString());
						jObj.put("dteBillDate", obj[1].toString());
						jObj.put("strItemName", obj[2].toString());
						jObj.put("dblQuantity", obj[3].toString());
						jObj.put("dblRate", obj[4].toString());
						jObj.put("dblAmount", obj[5].toString());
						jObj.put("strPosName", obj[6].toString());
						jObj.put("strWShortName", obj[7].toString());
						jObj.put("strReasonName", obj[8].toString());
						jObj.put("strRemarks", obj[9].toString());
						jObj.put("strGroupName", obj[10].toString());
						jObj.put("strKOTNo", obj[11].toString());
						jObj.put("strPOSCode", obj[12].toString());
						jObj.put("strTableName", obj[13].toString());
						jObj.put("strItemCode", obj[14].toString());
						jArr.put(jObj);
					}
					// jOBjRet.put("jArr", jArr);
				}
				// listRet.add(listSqlLive);

				Query queryQFile = webPOSSessionFactory.getCurrentSession()
						.createSQLQuery(sbSqlQFile.toString());
				List listSqlQFile = queryQFile.list();
				if (listSqlQFile.size() > 0) {

					for (int i = 0; i < listSqlQFile.size(); i++) {
						Object[] obj = (Object[]) listSqlQFile.get(i);
						JSONObject jObj = new JSONObject();
						jObj.put("strBillNo", obj[0].toString());
						jObj.put("dteBillDate", obj[1].toString());
						jObj.put("strItemName", obj[2].toString());
						jObj.put("dblQuantity", obj[3].toString());
						jObj.put("dblRate", obj[4].toString());
						jObj.put("dblAmount", obj[5].toString());
						jObj.put("strPosName", obj[6].toString());
						jObj.put("strWShortName", obj[7].toString());
						jObj.put("strReasonName", obj[8].toString());
						jObj.put("strRemarks", obj[9].toString());
						jObj.put("strGroupName", obj[10].toString());
						jObj.put("strKOTNo", obj[11].toString());
						jObj.put("strPOSCode", obj[12].toString());
						jObj.put("strTableName", obj[13].toString());
						jObj.put("strItemCode", obj[14].toString());
						jArr.put(jObj);
					}
					// jOBjRet.put("jArr", jArr);
				}
				// listRet.add(listSqlQFile);

				Query querySqlModLive = webPOSSessionFactory
						.getCurrentSession().createSQLQuery(
								sqlModLive.toString());
				List listSqlModLive = querySqlModLive.list();
				if (listSqlModLive.size() > 0) {

					for (int i = 0; i < listSqlModLive.size(); i++) {

						Object[] obj = (Object[]) listSqlModLive.get(i);
						JSONObject jObj = new JSONObject();
						jObj.put("strBillNo", obj[0].toString());
						jObj.put("dteBillDate", obj[1].toString());
						jObj.put("strItemName", obj[2].toString());
						jObj.put("dblQuantity", obj[3].toString());
						jObj.put("dblRate", obj[4].toString());
						jObj.put("dblAmount", obj[5].toString());
						jObj.put("strPosName", obj[6].toString());
						jObj.put("strWShortName", obj[7].toString());
						jObj.put("strReasonName", obj[8].toString());
						jObj.put("strRemarks", obj[9].toString());
						jObj.put("strGroupName", obj[10].toString());
						jObj.put("strKOTNo", obj[11].toString());
						jObj.put("strPOSCode", obj[12].toString());
						jObj.put("strTableName", obj[13].toString());
						jObj.put("strItemCode", obj[14].toString());
						jArr.put(jObj);
					}
					// jOBjRet.put("jArr", jArr);
				}
				// listRet.add(listSqlModLive);

				Query querySqlModQFile = webPOSSessionFactory
						.getCurrentSession().createSQLQuery(
								sqlModQFile.toString());
				List listSqlModQFile = querySqlModQFile.list();
				if (listSqlModQFile.size() > 0) {

					for (int i = 0; i < listSqlModQFile.size(); i++) {
						Object[] obj = (Object[]) listSqlModQFile.get(i);
						JSONObject jObj = new JSONObject();
						jObj.put("strBillNo", obj[0].toString());
						jObj.put("dteBillDate", obj[1].toString());
						jObj.put("strItemName", obj[2].toString());
						jObj.put("dblQuantity", obj[3].toString());
						jObj.put("dblRate", obj[4].toString());
						jObj.put("dblAmount", obj[5].toString());
						jObj.put("strPosName", obj[6].toString());
						jObj.put("strWShortName", obj[7].toString());
						jObj.put("strReasonName", obj[8].toString());
						jObj.put("strRemarks", obj[9].toString());
						jObj.put("strGroupName", obj[10].toString());
						jObj.put("strKOTNo", obj[11].toString());
						jObj.put("strPOSCode", obj[12].toString());
						jObj.put("strTableName", obj[13].toString());
						jObj.put("strItemCode", obj[14].toString());
						jArr.put(jObj);
					}
					// jOBjRet.put("jArr", jArr);
				}

				// listRet.add(listSqlModQFile);
				jOBjRet.put("jArr", jArr);
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		} else {
			try {

				sbSqlLive
						.append(" select ifnull(a.strBillNo,'')as strBillNo, ifnull(DATE_FORMAT(date(a.dteBillDate),'%d-%m-%Y'),'') as dteBillDate,ifnull(sum(b.dblRate*b.dblQuantity), 0) as dblAmount ,ifnull(f.strPosName,'') as strPosName,ifnull(g.strWShortName,'NA') as strWShortName, ifnull(e.strReasonName,'') as strReasonName, ifnull(a.strRemarks,'') as strRemarks "
								+ "from tblbillhd a  "
								+ "left outer join  tblbilldtl b on a.strBillNo = b.strBillNo "
								+ "left outer join  tblbillsettlementdtl c on a.strBillNo = c.strBillNo "
								+ "left outer join  tblsettelmenthd d on c.strSettlementCode = d.strSettelmentCode "
								+ "left outer join tblreasonmaster e on  a.strReasonCode = e.strReasonCode  "
								+ "left outer join tblposmaster f on a.strPOSCode=f.strPosCode  "
								+ "left outer join tblwaitermaster g on a.strWaiterNo=g.strWaiterNo "
								+ "left outer join tbltablemaster h on  a.strTableNo=h.strTableNo "
								+ "left outer join tblitemcurrentstk i on b.strItemCode=i.strItemCode "
								+ "where d.strSettelmentType = 'Complementary'");

				sbSqlQFile
						.append("select ifnull(a.strBillNo,''), ifnull(DATE_FORMAT(date(a.dteBillDate),'%d-%m-%Y'),'') as dteBillDate,sum(b.dblRate*b.dblQuantity) as dblAmount ,ifnull(f.strPosName,''),ifnull(g.strWShortName,'NA') as strWShortName, e.strReasonName, a.strRemarks  "
								+ "from tblqbillhd a  "
								+ "left outer join  tblqbilldtl b on a.strBillNo = b.strBillNo "
								+ "left outer join  tblqbillsettlementdtl c on a.strBillNo = c.strBillNo "
								+ "left outer join  tblsettelmenthd d on c.strSettlementCode = d.strSettelmentCode "
								+ "left outer join tblreasonmaster e on  a.strReasonCode = e.strReasonCode  "
								+ "left outer join tblposmaster f on a.strPOSCode=f.strPosCode  "
								+ "left outer join tblwaitermaster g on a.strWaiterNo=g.strWaiterNo "
								+ "left outer join tbltablemaster h on  a.strTableNo=h.strTableNo "
								+ "left outer join tblitemcurrentstk i on b.strItemCode=i.strItemCode "
								+ "where d.strSettelmentType = 'Complementary'");

				String sqlModLive = "select ifnull(a.strBillNo,''),ifnull(DATE_FORMAT(date(a.dteBillDate),'%d-%m-%Y'),'') as dteBillDate,ifnull(sum(b.dblQuantity*b.dblRate),0) as dblAmount ,ifnull(f.strPosName,'') as strPosName,ifnull(g.strWShortName,'NA') as strWShortName, ifnull(e.strReasonName,''), ifnull(a.strRemarks,'') as strRemarks "
						+ " from tblbillhd a"
						+ " INNER JOIN  tblbillmodifierdtl b on a.strBillNo = b.strBillNo"
						+ " left outer join  tblbillsettlementdtl c on a.strBillNo = c.strBillNo"
						+ " left outer join  tblsettelmenthd d on c.strSettlementCode = d.strSettelmentCode "
						+ " left outer join tblreasonmaster e on  a.strReasonCode = e.strReasonCode "
						+ " left outer join tblposmaster f on a.strPOSCode=f.strPosCode "
						+ " left outer join tblwaitermaster g on a.strWaiterNo=g.strWaiterNo"
						+ " left outer join tbltablemaster h on  a.strTableNo=h.strTableNo"
						+ " left outer join tblitemcurrentstk i on left(b.strItemCode,7)=i.strItemCode"
						+ " left outer join  tblbilldtl j on b.strBillNo = j.strBillNo  "
						+ " where d.strSettelmentType = 'Complementary'";

				String sqlModQFile = "select ifnull(a.strBillNo,''),ifnull(DATE_FORMAT(date(a.dteBillDate),'%d-%m-%Y'),'') as dteBillDate,sum(b.dblQuantity*b.dblRate) as dblAmount ,ifnull(f.strPosName,''),ifnull(g.strWShortName,'NA') as strWShortName, e.strReasonName, a.strRemarks "
						+ " from tblqbillhd a"
						+ " INNER JOIN  tblqbillmodifierdtl b on a.strBillNo = b.strBillNo"
						+ " left outer join  tblqbillsettlementdtl c on a.strBillNo = c.strBillNo"
						+ " left outer join  tblsettelmenthd d on c.strSettlementCode = d.strSettelmentCode "
						+ " left outer join tblreasonmaster e on  a.strReasonCode = e.strReasonCode "
						+ " left outer join tblposmaster f on a.strPOSCode=f.strPosCode "
						+ " left outer join tblwaitermaster g on a.strWaiterNo=g.strWaiterNo"
						+ " left outer join tbltablemaster h on  a.strTableNo=h.strTableNo"
						+ " left outer join tblitemcurrentstk i on left(b.strItemCode,7)=i.strItemCode"
						+ " left outer join  tblqbilldtl j on b.strBillNo = j.strBillNo  "
						+ " where d.strSettelmentType = 'Complementary' ";

				sbSqlFilters.append(" and date( a.dteBillDate ) BETWEEN '"
						+ fromDate + "' AND '" + toDate + "' ");
				if (!strPOSCode.equalsIgnoreCase("All")) {
					sbSqlFilters.append(" AND a.strPOSCode = '" + strPOSCode
							+ "' ");
				}

				// if (clsGlobalVarClass.gEnableShiftYN)
				// {
				// if (clsGlobalVarClass.gEnableShiftYN &&
				// (!strShiftNo.equalsIgnoreCase("All")))
				// {
				sbSqlFilters.append(" and a.intShiftCode = '" + strShiftNo
						+ "' ");
				// }
				// }strReasonCode

				if (!strReasonCode.equalsIgnoreCase("All")) {
					sbSqlFilters.append("and a.strReasonCode='" + strReasonCode
							+ "' ");
				}

				sbSqlFilters.append(" group by a.strPOSCode,a.strBillNo "
						+ " order by a.strPOSCode,a.strBillNo ");

				sbSqlLive.append(sbSqlFilters);
				sbSqlQFile.append(sbSqlFilters);

				sqlModLive += " " + sbSqlFilters;
				sqlModQFile += " " + sbSqlFilters;

				Query querySqlLive = webPOSSessionFactory.getCurrentSession()
						.createSQLQuery(sbSqlLive.toString());
				List listSqlLive = querySqlLive.list();
				if (listSqlLive.size() > 0) {

					for (int i = 0; i < listSqlLive.size(); i++) {

						Object[] obj = (Object[]) listSqlLive.get(i);
						JSONObject jObj = new JSONObject();
						jObj.put("strBillNo", obj[0].toString());
						jObj.put("dteBillDate", obj[1].toString());
						jObj.put("dblAmount", obj[2].toString());
						jObj.put("strPosName", obj[3].toString());
						jObj.put("strWShortName", obj[4].toString());
						jObj.put("strReasonName", obj[5].toString());
						jObj.put("strRemarks", obj[6].toString());
						jArr.put(jObj);
					}
					// jOBjRet.put("jArr", jArr);
				}
				// listRet.add(listSqlLive);

				Query queryQFile = webPOSSessionFactory.getCurrentSession()
						.createSQLQuery(sbSqlQFile.toString());
				List listSqlQFile = queryQFile.list();
				if (listSqlQFile.size() > 0) {

					for (int i = 0; i < listSqlQFile.size(); i++) {
						Object[] obj = (Object[]) listSqlQFile.get(i);
						JSONObject jObj = new JSONObject();
						jObj.put("strBillNo", obj[0].toString());
						jObj.put("dteBillDate", obj[1].toString());
						jObj.put("dblAmount", obj[2].toString());
						jObj.put("strPosName", obj[3].toString());
						jObj.put("strWShortName", obj[4].toString());
						jObj.put("strReasonName", obj[5].toString());
						jObj.put("strRemarks", obj[6].toString());
						jArr.put(jObj);
					}
					// jOBjRet.put("jArr", jArr);
				}
				// listRet.add(listSqlQFile);

				Query querySqlModLive = webPOSSessionFactory
						.getCurrentSession().createSQLQuery(
								sqlModLive.toString());
				List listSqlModLive = querySqlModLive.list();
				if (listSqlModLive.size() > 0) {

					for (int i = 0; i < listSqlModLive.size(); i++) {

						Object[] obj = (Object[]) listSqlModLive.get(i);
						JSONObject jObj = new JSONObject();
						jObj.put("strBillNo", obj[0].toString());
						jObj.put("dteBillDate", obj[1].toString());
						jObj.put("dblAmount", obj[2].toString());
						jObj.put("strPosName", obj[3].toString());
						jObj.put("strWShortName", obj[4].toString());
						jObj.put("strReasonName", obj[5].toString());
						jObj.put("strRemarks", obj[6].toString());
						jArr.put(jObj);
					}
					// jOBjRet.put("jArr", jArr);
				}
				// listRet.add(listSqlModLive);

				Query querySqlModQFile = webPOSSessionFactory
						.getCurrentSession().createSQLQuery(
								sqlModQFile.toString());
				List listSqlModQFile = querySqlModQFile.list();
				if (listSqlModQFile.size() > 0) {

					for (int i = 0; i < listSqlModQFile.size(); i++) {
						Object[] obj = (Object[]) listSqlModQFile.get(i);
						JSONObject jObj = new JSONObject();
						jObj.put("strBillNo", obj[0].toString());
						jObj.put("dteBillDate", obj[1].toString());
						jObj.put("dblAmount", obj[2].toString());
						jObj.put("strPosName", obj[3].toString());
						jObj.put("strWShortName", obj[4].toString());
						jObj.put("strReasonName", obj[5].toString());
						jObj.put("strRemarks", obj[6].toString());
						jArr.put(jObj);
					}
					// jOBjRet.put("jArr", jArr);
				}

				// listRet.add(listSqlModQFile);
				jOBjRet.put("jArr", jArr);
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}

		return jOBjRet;

	}

	public JSONObject funBillWiseReport(String fromDate, String toDate,
			String strPOSCode, String strShiftNo, String strUserCode) {
		List listRet = new ArrayList();
		JSONArray jArr = new JSONArray();
		JSONObject jOBjRet = new JSONObject();

		try {

			StringBuilder sqlBuilder = new StringBuilder();
			// live
			sqlBuilder.setLength(0);
			
	        sqlBuilder.append("select a.strBillNo,DATE_FORMAT(date(a.dteBillDate),'%d-%m-%Y') as dteBillDate ,b.strPosName, "
                    + "ifnull(d.strSettelmentDesc,'') as strSettelmentMode,a.dblDiscountAmt,a.dblTaxAmt  "
                    + ",sum(c.dblSettlementAmt) as dblSettlementAmt,a.dblSubTotal,a.strSettelmentMode "
                    + "from  tblbillhd a,tblposmaster b,tblbillsettlementdtl c,tblsettelmenthd d "
                    + "where date(a.dteBillDate) between '" + fromDate + "' and  '" + toDate + "' "
                    + "and a.strPOSCode=b.strPOSCode and a.strBillNo=c.strBillNo "
                    + "and c.strSettlementCode=d.strSettelmentCode and a.strClientCode=c.strClientCode ");
	        if (!strPOSCode.equalsIgnoreCase("All")) {
				sqlBuilder.append("and a.strPOSCode='" + strPOSCode + "' ");
			}
			if (!strShiftNo.equalsIgnoreCase("All") && !strShiftNo.equalsIgnoreCase("APIInfoForThirdParty")) {
				sqlBuilder.append("and a.intShiftCode='" + strShiftNo + "'  ");
			}
			if(strShiftNo.equalsIgnoreCase("APIInfoForThirdParty"))
			{
				sqlBuilder.append("and a.strClientCode='" + strUserCode + "' ");
			}
			sqlBuilder.append("group BY a.strClientCode,a.strBillNo,d.strSettelmentCode "
							+ "ORDER BY a.strBillNo ASC ");
         

			Query querySqlLive = webPOSSessionFactory.getCurrentSession()
					.createSQLQuery(sqlBuilder.toString());
			List listSqlLive = querySqlLive.list();
			if (listSqlLive.size() > 0) {

				for (int i = 0; i < listSqlLive.size(); i++) {
					Object[] obj = (Object[]) listSqlLive.get(i);
					JSONObject jObj = new JSONObject();
					jObj.put("strBillNo", obj[0].toString());
					jObj.put("dteBillDate", obj[1].toString());
					jObj.put("strPosName", obj[2].toString());
					jObj.put("strSettelmentMode", obj[3].toString());
					jObj.put("dblDiscountAmt", obj[4].toString());
					jObj.put("dblTaxAmt", obj[5].toString());
					jObj.put("dblSettlementAmt", obj[6].toString());
					jObj.put("dblSubTotal", obj[7].toString());
					jArr.put(jObj);
				}

			}

			// QFile
			sqlBuilder.setLength(0);
			   sqlBuilder.append("select a.strBillNo,DATE_FORMAT(date(a.dteBillDate),'%d-%m-%Y') as dteBillDate ,b.strPosName, "
	                    + "ifnull(d.strSettelmentDesc,'') as strSettelmentMode,a.dblDiscountAmt,a.dblTaxAmt   "
	                    + ",sum(c.dblSettlementAmt) as dblSettlementAmt,a.dblSubTotal,a.strSettelmentMode "
	                    + "from  tblqbillhd a,tblposmaster b,tblqbillsettlementdtl c,tblsettelmenthd d "
	                    + "where date(a.dteBillDate) between '" + fromDate + "' and  '" + toDate + "' "
	                    + "and a.strPOSCode=b.strPOSCode and a.strBillNo=c.strBillNo "
	                    + "and c.strSettlementCode=d.strSettelmentCode and a.strClientCode=c.strClientCode ");
			if (!strPOSCode.equalsIgnoreCase("All")) {
				sqlBuilder.append("and a.strPOSCode='" + strPOSCode + "' ");
			}
			if (!strShiftNo.equalsIgnoreCase("All") && !strShiftNo.equalsIgnoreCase("APIInfoForThirdParty")) {
				sqlBuilder.append("and a.intShiftCode='" + strShiftNo + "'  ");
			}
			if(strShiftNo.equalsIgnoreCase("APIInfoForThirdParty"))
			{
				sqlBuilder.append("and a.strClientCode='" + strUserCode + "' ");
			}
			sqlBuilder
					.append("group BY a.strClientCode,a.strBillNo,d.strSettelmentCode "
							+ "ORDER BY a.strBillNo ASC ");

			Query queryQSqlLive = webPOSSessionFactory.getCurrentSession().createSQLQuery(sqlBuilder.toString());
			List listQSqlLive = queryQSqlLive.list();
			if (listQSqlLive.size() > 0) {

				for (int i = 0; i < listQSqlLive.size(); i++) {
					Object[] obj = (Object[]) listQSqlLive.get(i);
					JSONObject jObj = new JSONObject();
					jObj.put("strBillNo", obj[0].toString());
					jObj.put("dteBillDate", obj[1].toString());
					jObj.put("strPosName", obj[2].toString());
					jObj.put("strSettelmentMode", obj[3].toString());
					jObj.put("dblDiscountAmt", obj[4].toString());
					jObj.put("dblTaxAmt", obj[5].toString());
					jObj.put("dblSettlementAmt", obj[6].toString());
					jObj.put("dblSubTotal", obj[7].toString());
					jArr.put(jObj);
				}

			}
			// call for view report
			// funViewJasperReportForBeanCollectionDataSource(is, hm,
			// listOfBillData);
			jOBjRet.put("jArr", jArr);
		}

		catch (Exception ex) {
			ex.printStackTrace();
		}

		return jOBjRet;

	}
	
	public JSONObject funGroupSubGroupWiseReport(String fromDate,
			String toDate, String strPOSCode, String strSGCode,
			String strShiftNo, String strUserCode, String gCode) {
		List listRet = new ArrayList();
		JSONArray jArr = new JSONArray();
		JSONObject jOBjRet = new JSONObject();

		try {

			StringBuilder sqlBuilder = new StringBuilder();

			sqlBuilder.setLength(0);
			sqlBuilder.append("TRUNCATE tbltempsalesflash1");
			webPOSSessionFactory.getCurrentSession().createSQLQuery(
					sqlBuilder.toString());

			// QFile
			sqlBuilder.setLength(0);
			sqlBuilder
					.append("select b.strItemName,d.strSubGroupName,e.strGroupName ,ifnull(sum(b.dblQuantity),0) as Quantity "
							+ ",ifnull(sum(b.dblAmount),0) as Amount,b.strItemCode "
							+ "from tblqbillhd a "
							+ "left outer join tblqbilldtl b on a.strBillNo=b.strBillNo "
							+ "left outer join tblitemmaster c on b.strItemCode=c.strItemCode "
							+ "left outer join tblsubgrouphd d on c.strSubGroupCode=d.strSubGroupCode "
							+ "left outer join tblgrouphd e on d.strGroupCode=e.strGroupCode "
							+ "where  date(a.dteBillDate)  between '"
							+ fromDate
							+ "' and '"
							+ toDate
							+ "' "
							+ "and a.strPoscode=if('"
							+ strPOSCode
							+ "'='All', a.strPoscode,'"
							+ strPOSCode
							+ "') "
							+ "and e.strGroupCode=if('"
							+ gCode
							+ "'='All',e.strGroupCode,'"
							+ gCode
							+ "') "
							+ "and d.strSubGroupCode=if('"
							+ strSGCode
							+ "'='All',d.strSubGroupCode,'"
							+ strSGCode
							+ "') "
							+ "and a.intShiftCode=if('"
							+ strShiftNo
							+ "'='All',a.intShiftCode,'"
							+ strShiftNo
							+ "') "
							+ "Group By e.strGroupName ,d.strSubGroupName,b.strItemCode,b.strItemName "
							+ "order By e.strGroupName ,d.strSubGroupName,b.strItemCode,b.strItemName");
			Query queryQSql = webPOSSessionFactory.getCurrentSession()
					.createSQLQuery(sqlBuilder.toString());
			List listQSql = queryQSql.list();
			if (listQSql.size() > 0) {

				for (int i = 0; i < listQSql.size(); i++) {
					Object[] obj = (Object[]) listQSql.get(i);
					JSONObject jObj = new JSONObject();
					jObj.put("strItemName", obj[0].toString());
					jObj.put("strSubGroupName", obj[1].toString());
					jObj.put("strGroupName", obj[2].toString());
					jObj.put("dblQuantity", obj[3].toString());
					jObj.put("dblAmount", obj[4].toString());
					jObj.put("strItemCode", obj[5].toString());

					jArr.put(jObj);
				}

			}

			// QFile modifiers
			sqlBuilder.setLength(0);
			sqlBuilder
					.append("select f.strModifierName,d.strSubGroupName,e.strGroupName ,ifnull(sum(f.dblQuantity),0) as Quantity "
							+ ",ifnull(sum(f.dblAmount),0) as Amount,f.strItemCode "
							+ "from tblqbillhd a "
							+ "left outer join tblqbilldtl b on a.strBillNo=b.strBillNo "
							+ "left outer join tblqbillmodifierdtl f on b.strBillNo=f.strBillNo  "
							+ "left outer join tblitemmaster c on b.strItemCode=c.strItemCode "
							+ "left outer join tblsubgrouphd d on c.strSubGroupCode=d.strSubGroupCode "
							+ "left outer join tblgrouphd e on d.strGroupCode=e.strGroupCode "
							+ "where  date(a.dteBillDate)  between '"
							+ fromDate
							+ "' and '"
							+ toDate
							+ "' "
							+ "and a.strPoscode=if('"
							+ strPOSCode
							+ "'='All', a.strPoscode,'"
							+ strPOSCode
							+ "') "
							+ "and e.strGroupCode=if('"
							+ gCode
							+ "'='All',e.strGroupCode,'"
							+ gCode
							+ "') "
							+ "and d.strSubGroupCode=if('"
							+ strSGCode
							+ "'='All',d.strSubGroupCode,'"
							+ strSGCode
							+ "') "
							+ "and a.intShiftCode=if('"
							+ strShiftNo
							+ "'='All',a.intShiftCode,'"
							+ strShiftNo
							+ "') "
							+ "and b.strItemCode=left(f.strItemCode,7) "
							+ "and f.dblAmount>0 "
							+ "Group By e.strGroupName ,d.strSubGroupName,f.strItemCode,f.strModifierName "
							+ "order By e.strGroupName ,d.strSubGroupName,f.strItemCode,f.strModifierName");
			Query queryQSqlMod = webPOSSessionFactory.getCurrentSession()
					.createSQLQuery(sqlBuilder.toString());
			List listQSqlMod = queryQSqlMod.list();
			if (listQSqlMod.size() > 0) {

				for (int i = 0; i < listQSqlMod.size(); i++) {
					Object[] obj = (Object[]) listQSqlMod.get(i);
					JSONObject jObj = new JSONObject();
					jObj.put("strItemName", obj[0].toString());
					jObj.put("strSubGroupName", obj[1].toString());
					jObj.put("strGroupName", obj[2].toString());
					jObj.put("dblQuantity", obj[3].toString());
					jObj.put("dblAmount", obj[4].toString());
					jObj.put("strItemCode", obj[5].toString());

					jArr.put(jObj);
				}

			}
			// Live
			sqlBuilder.setLength(0);
			sqlBuilder
					.append("select b.strItemName,d.strSubGroupName,e.strGroupName ,ifnull(sum(b.dblQuantity),0) as Quantity "
							+ ",ifnull(sum(b.dblAmount),0) as Amount,b.strItemCode "
							+ "from tblbillhd a "
							+ "left outer join tblbilldtl b on a.strBillNo=b.strBillNo "
							+ "left outer join tblitemmaster c on b.strItemCode=c.strItemCode "
							+ "left outer join tblsubgrouphd d on c.strSubGroupCode=d.strSubGroupCode "
							+ "left outer join tblgrouphd e on d.strGroupCode=e.strGroupCode "
							+ "where  date(a.dteBillDate)  between '"
							+ fromDate
							+ "' and '"
							+ toDate
							+ "' "
							+ "and a.strPoscode=if('"
							+ strPOSCode
							+ "'='All', a.strPoscode,'"
							+ strPOSCode
							+ "') "
							+ "and e.strGroupCode=if('"
							+ gCode
							+ "'='All',e.strGroupCode,'"
							+ gCode
							+ "') "
							+ "and d.strSubGroupCode=if('"
							+ strSGCode
							+ "'='All',d.strSubGroupCode,'"
							+ strSGCode
							+ "') "
							+ "and a.intShiftCode=if('"
							+ strShiftNo
							+ "'='All',a.intShiftCode,'"
							+ strShiftNo
							+ "') "
							+ "Group By e.strGroupName ,d.strSubGroupName,b.strItemCode,b.strItemName "
							+ "order By e.strGroupName ,d.strSubGroupName,b.strItemCode,b.strItemName");
			Query querySqlLive = webPOSSessionFactory.getCurrentSession()
					.createSQLQuery(sqlBuilder.toString());
			List listSqlLive = querySqlLive.list();
			if (listSqlLive.size() > 0) {

				for (int i = 0; i < listSqlLive.size(); i++) {
					Object[] obj = (Object[]) listSqlLive.get(i);
					JSONObject jObj = new JSONObject();
					jObj.put("strItemName", obj[0].toString());
					jObj.put("strSubGroupName", obj[1].toString());
					jObj.put("strGroupName", obj[2].toString());
					jObj.put("dblQuantity", obj[3].toString());
					jObj.put("dblAmount", obj[4].toString());
					jObj.put("strItemCode", obj[5].toString());

					jArr.put(jObj);
				}

			}
			// Live modifiers
			sqlBuilder.setLength(0);
			sqlBuilder
					.append("select f.strModifierName,d.strSubGroupName,e.strGroupName ,ifnull(sum(f.dblQuantity),0) as Quantity "
							+ ",ifnull(sum(f.dblAmount),0) as Amount,f.strItemCode "
							+ "from tblbillhd a "
							+ "left outer join tblbilldtl b on a.strBillNo=b.strBillNo "
							+ "left outer join tblbillmodifierdtl f on b.strBillNo=f.strBillNo  "
							+ "left outer join tblitemmaster c on b.strItemCode=c.strItemCode "
							+ "left outer join tblsubgrouphd d on c.strSubGroupCode=d.strSubGroupCode "
							+ "left outer join tblgrouphd e on d.strGroupCode=e.strGroupCode "
							+ "where  date(a.dteBillDate)  between '"
							+ fromDate
							+ "' and '"
							+ toDate
							+ "' "
							+ "and a.strPoscode=if('"
							+ strPOSCode
							+ "'='All', a.strPoscode,'"
							+ strPOSCode
							+ "') "
							+ "and e.strGroupCode=if('"
							+ gCode
							+ "'='All',e.strGroupCode,'"
							+ gCode
							+ "') "
							+ "and d.strSubGroupCode=if('"
							+ strSGCode
							+ "'='All',d.strSubGroupCode,'"
							+ strSGCode
							+ "') "
							+ "and a.intShiftCode=if('"
							+ strShiftNo
							+ "'='All',a.intShiftCode,'"
							+ strShiftNo
							+ "') "
							+ "and b.strItemCode=left(f.strItemCode,7) "
							+ "and f.dblAmount>0 "
							+ "Group By e.strGroupName ,d.strSubGroupName,f.strItemCode,f.strModifierName "
							+ "order By e.strGroupName ,d.strSubGroupName,f.strItemCode,f.strModifierName");
			Query querySqlLiveMod = webPOSSessionFactory.getCurrentSession()
					.createSQLQuery(sqlBuilder.toString());
			List listSqlLiveMod = querySqlLiveMod.list();
			if (listSqlLiveMod.size() > 0) {

				for (int i = 0; i < listSqlLiveMod.size(); i++) {
					Object[] obj = (Object[]) listSqlLiveMod.get(i);
					JSONObject jObj = new JSONObject();
					jObj.put("strItemName", obj[0].toString());
					jObj.put("strSubGroupName", obj[1].toString());
					jObj.put("strGroupName", obj[2].toString());
					jObj.put("dblQuantity", obj[3].toString());
					jObj.put("dblAmount", obj[4].toString());
					jObj.put("strItemCode", obj[5].toString());

					jArr.put(jObj);
				}

			}
			jOBjRet.put("jArr", jArr);
		} catch (Exception ex) {
			ex.printStackTrace();
		}

		return jOBjRet;
	}

	public JSONObject funDailyCollectionReport(String fromDate, String toDate,
			String strPOSCode, String strShiftNo, String strUserCode) {
		JSONObject jOBjRet = new JSONObject();
		JSONArray jArr = new JSONArray();
		try {
			StringBuilder sqlBuilder = new StringBuilder();

			// live
			sqlBuilder.setLength(0);
			sqlBuilder
					.append("select a.strBillNo,left(a.dteBillDate,10),left(right(a.dteDateCreated,8),5) as BillTime,ifnull(b.strTableName,'') as TableName, "
							+ " e.strPosName, ifnull(d.strSettelmentDesc,'') as payMode,ifnull(a.dblSubTotal,0.00),a.dblDiscountPer,a.dblDiscountAmt,a.dblTaxAmt, "
							+ " ifnull(c.dblSettlementAmt,0.00),a.strUserCreated,a.strUserEdited,a.dteDateCreated,a.dteDateEdited,a.strClientCode,a.strWaiterNo, "
							+ " a.strCustomerCode,a.dblDeliveryCharges,ifnull(c.strRemark,''),ifnull(f.strCustomerName,'') as CustName  "
							+ " from tblbillhd  a "
							+ " left outer join  tbltablemaster b on a.strTableNo=b.strTableNo  "
							+ " left outer join tblbillsettlementdtl c on a.strBillNo=c.strBillNo  "
							+ " left outer join tblsettelmenthd d on c.strSettlementCode=d.strSettelmentCode  "
							+ " left outer join tblposmaster e on a.strPOSCode=e.strPosCode  "
							+ " left outer join tblcustomermaster f on a.strCustomerCode=f.strCustomerCode "
							+ " where date(dteBillDate) Between '"
							+ fromDate
							+ "' and '" + toDate + "' ");
			if (!strPOSCode.equalsIgnoreCase("All")) {
				sqlBuilder.append("and a.strPosCode='" + strPOSCode + "' ");
			}
			if (!strShiftNo.equalsIgnoreCase("All")) {
				sqlBuilder.append("and a.intShiftCode='" + strShiftNo + "'  ");
			}
			sqlBuilder
					.append(" order by a.strPOSCode asc,d.strSettelmentDesc asc,a.strBillNo ");

			Query querySqlLiveData = webPOSSessionFactory.getCurrentSession()
					.createSQLQuery(sqlBuilder.toString());
			List listSqlLiveData = querySqlLiveData.list();
			if (listSqlLiveData.size() > 0) {

				for (int i = 0; i < listSqlLiveData.size(); i++) {
					Object[] obj = (Object[]) listSqlLiveData.get(i);
					JSONObject jObj = new JSONObject();
					jObj.put("strBillNo", obj[0].toString());
					jObj.put("dteBillDate", obj[1].toString());
					jObj.put("BillTime", obj[2].toString());
					jObj.put("TableName", obj[3].toString());
					jObj.put("strPosName", obj[4].toString());
					jObj.put("payMode", obj[5].toString());
					jObj.put("dblSubTotal", obj[6].toString());
					jObj.put("dblDiscountPer", obj[7].toString());
					jObj.put("dblDiscountAmt", obj[8].toString());
					jObj.put("dblTaxAmt", obj[9].toString());
					jObj.put("dblSettlementAmt", obj[10].toString());
					jObj.put("strUserCreated", obj[11].toString());
					jObj.put("strUserEdited", obj[12].toString());
					jObj.put("dteDateCreated", obj[13].toString());
					jObj.put("dteDateEdited", obj[14].toString());
					jObj.put("strClientCode", obj[15].toString());
					jObj.put("strWaiterNo", obj[16].toString());
					jObj.put("strCustomerCode", obj[17].toString());
					jObj.put("dblDeliveryCharges", obj[18].toString());
					jObj.put("strRemark", obj[19].toString());
					jObj.put("CustName", obj[20].toString());

					jArr.put(jObj);
				}

			}

			// QFile
			sqlBuilder.setLength(0);
			sqlBuilder
					.append("select a.strBillNo,left(a.dteBillDate,10),left(right(a.dteDateCreated,8),5) as BillTime,ifnull(b.strTableName,'') as TableName, "
							+ " e.strPosName, ifnull(d.strSettelmentDesc,'') as payMode,ifnull(a.dblSubTotal,0.00),a.dblDiscountPer,a.dblDiscountAmt,a.dblTaxAmt, "
							+ " ifnull(c.dblSettlementAmt,0.00),a.strUserCreated,a.strUserEdited,a.dteDateCreated,a.dteDateEdited,a.strClientCode,a.strWaiterNo, "
							+ " a.strCustomerCode,a.dblDeliveryCharges,ifnull(c.strRemark,''),ifnull(f.strCustomerName,'') as CustName  "
							+ " from tblqbillhd  a "
							+ " left outer join  tbltablemaster b on a.strTableNo=b.strTableNo  "
							+ " left outer join tblqbillsettlementdtl c on a.strBillNo=c.strBillNo  "
							+ " left outer join tblsettelmenthd d on c.strSettlementCode=d.strSettelmentCode  "
							+ " left outer join tblposmaster e on a.strPOSCode=e.strPosCode  "
							+ " left outer join tblcustomermaster f on a.strCustomerCode=f.strCustomerCode "
							+ " where date(dteBillDate) Between '"
							+ fromDate
							+ "' and '" + toDate + "' ");
			if (!strPOSCode.equalsIgnoreCase("All")) {
				sqlBuilder.append("and a.strPosCode='" + strPOSCode + "' ");
			}
			if (!strShiftNo.equalsIgnoreCase("All")) {
				sqlBuilder.append("and a.intShiftCode='" + strShiftNo + "'  ");
			}
			sqlBuilder
					.append(" order by a.strPOSCode asc,d.strSettelmentDesc asc,a.strBillNo ");

			Query querySqlQFileData = webPOSSessionFactory.getCurrentSession()
					.createSQLQuery(sqlBuilder.toString());
			List listSqlQFileData = querySqlQFileData.list();
			if (listSqlQFileData.size() > 0) {

				for (int i = 0; i < listSqlQFileData.size(); i++) {
					Object[] obj = (Object[]) listSqlQFileData.get(i);
					JSONObject jObj = new JSONObject();
					jObj.put("strBillNo", obj[0].toString());
					jObj.put("dteBillDate", obj[1].toString());
					jObj.put("BillTime", obj[2].toString());
					jObj.put("TableName", obj[3].toString());
					jObj.put("strPosName", obj[4].toString());
					jObj.put("payMode", obj[5].toString());
					jObj.put("dblSubTotal", obj[6].toString());
					jObj.put("dblDiscountPer", obj[7].toString());
					jObj.put("dblDiscountAmt", obj[8].toString());
					jObj.put("dblTaxAmt", obj[9].toString());
					jObj.put("dblSettlementAmt", obj[10].toString());
					jObj.put("strUserCreated", obj[11].toString());
					jObj.put("strUserEdited", obj[12].toString());
					jObj.put("dteDateCreated", obj[13].toString());
					jObj.put("dteDateEdited", obj[14].toString());
					jObj.put("strClientCode", obj[15].toString());
					jObj.put("strWaiterNo", obj[16].toString());
					jObj.put("strCustomerCode", obj[17].toString());
					jObj.put("dblDeliveryCharges", obj[18].toString());
					jObj.put("strRemark", obj[19].toString());
					jObj.put("CustName", obj[20].toString());

					jArr.put(jObj);
				}

			}
			jOBjRet.put("jArr", jArr);
		} catch (Exception ex) {
			ex.printStackTrace();
		}

		return jOBjRet;
	}

	
	// funSettlementWiseSales

	public JSONObject funSettlementWiseSales(String fromDate, String toDate,
			String strPOSCode, String strShiftNo, String strUserCode) {
		List listRet = new ArrayList();
		StringBuilder sbSqlLive = new StringBuilder();
		StringBuilder sbSqlQFile = new StringBuilder();
		StringBuilder sbSqlFilters = new StringBuilder();
		JSONArray jArr = new JSONArray();
		JSONObject jOBjRet = new JSONObject();

		sbSqlLive.setLength(0);
		sbSqlQFile.setLength(0);
		sbSqlFilters.setLength(0);

		try {

			sbSqlQFile
					.append("SELECT a.strPosCode,c.strSettelmentDesc,sum(b.dblSettlementAmt),d.strposname "
							+ "FROM tblqbillhd a, tblqbillsettlementdtl b, tblsettelmenthd c ,tblposmaster d "
							+ "Where a.strBillNo = b.strBillNo "
							+ " and a.strClientCode=b.strClientCode "
							+ "and a.strposcode=d.strposcode "
							+ "and b.strSettlementCode = c.strSettelmentCode "
							+ "");

			sbSqlLive
					.append("SELECT a.strPosCode,c.strSettelmentDesc,sum(b.dblSettlementAmt),d.strposname "
							+ "FROM tblbillhd a, tblbillsettlementdtl b, tblsettelmenthd c ,tblposmaster d "
							+ "Where a.strBillNo = b.strBillNo "
							+ " and a.strClientCode=b.strClientCode "
							+ "and a.strposcode=d.strposcode "
							+ "and b.strSettlementCode = c.strSettelmentCode "
							+ "");

			sbSqlFilters.append("and date(a.dteBillDate ) BETWEEN  '"
					+ fromDate + "' AND '" + toDate + "' ");
			if (!"All".equalsIgnoreCase(strPOSCode)) {
				sbSqlFilters.append("and  a.strPosCode='" + strPOSCode + "' ");
			}

			sbSqlFilters.append(" AND a.intShiftCode = '" + strShiftNo + "' ");

			sbSqlFilters.append("GROUP BY c.strSettelmentDesc, a.strPosCode");

			sbSqlLive.append(sbSqlFilters);
			sbSqlQFile.append(sbSqlFilters);

			Query querySqlLive = webPOSSessionFactory.getCurrentSession()
					.createSQLQuery(sbSqlLive.toString());
			List listSqlLive = querySqlLive.list();
			if (listSqlLive.size() > 0) {

				for (int i = 0; i < listSqlLive.size(); i++) {
					Object[] obj = (Object[]) listSqlLive.get(i);
					JSONObject jObj = new JSONObject();

					jObj.put("strSettelmentDesc", obj[1].toString());
					jObj.put("dblSettlementAmt", obj[2].toString());
					jObj.put("strposname", obj[3].toString());

					jArr.put(jObj);
				}
				// jOBjRet.put("jArr", jArr);
			}
			// listRet.add(listSqlLive);

			Query queryQFile = webPOSSessionFactory.getCurrentSession()
					.createSQLQuery(sbSqlQFile.toString());
			List listSqlQFile = queryQFile.list();
			if (listSqlQFile.size() > 0) {

				for (int i = 0; i < listSqlQFile.size(); i++) {
					Object[] obj = (Object[]) listSqlQFile.get(i);
					JSONObject jObj = new JSONObject();

					jObj.put("strSettelmentDesc", obj[1].toString());
					jObj.put("dblSettlementAmt", obj[2].toString());
					jObj.put("strposname", obj[3].toString());

					jArr.put(jObj);
				}
				// jOBjRet.put("jArr", jArr);
			}
			// listRet.add(listSqlQFile);

			// listRet.add(listSqlModQFile);
			jOBjRet.put("jArr", jArr);
		} catch (Exception ex) {
			ex.printStackTrace();
		}

		return jOBjRet;

	}


	
	//funAuditorReport
	//funAuditorReport
	public JSONObject funAuditorReport(String fromDate,String toDate,String strPOSCode,String strShiftNo,String strUserCode)
	{
		List listRet =new ArrayList();
		 StringBuilder sbSqlLive = new StringBuilder();
         StringBuilder sbSqlQFile = new StringBuilder();
         StringBuilder sbSqlFilters = new StringBuilder();
         
         StringBuilder sbSqlDisLive = new StringBuilder();
         StringBuilder sbSqlQDisFile = new StringBuilder();
         StringBuilder sbSqlDisFilters = new StringBuilder();
         List<clsOperatorDtl> listOperatorDtl=new ArrayList<>();
         
         String sqlLive ="",sqlQFile="";
         sbSqlDisLive.setLength(0);
         sbSqlQDisFile.setLength(0);
         sbSqlDisFilters.setLength(0);
         String MinBillNo = "";
         String MaxBillNo = "";
         String TotalDiscount = "";
         
         JSONArray jArr =new JSONArray();
         JSONObject jOBjRet=new JSONObject();
         
         String sql = "select min(a.strBillNo),max(a.strBillNo),sum(a.dblDiscountAmt)\n"
                    + "from vqbillhd  a \n"
                    + "where date(a.dteBillDate) between '" + fromDate + "' and '" + toDate + "' \n"
                    + "Order By a.strBillNo";
         
         Query querySql = webPOSSessionFactory.getCurrentSession().createSQLQuery(sql);
	 	 List listSql = querySql.list();
	 	 if(listSql.size()>0)
	 	    {
	 	    	
	 	    	for(int i=0 ;i<listSql.size();i++ )
	 	    	{
	 	    		Object[] obj = (Object[]) listSql.get(i);
	 	        	
	 	        		MinBillNo=obj[0].toString();
						MaxBillNo=obj[1].toString();
		 	    		TotalDiscount=obj[2].toString();
		 	    	
	 	    	}
	 	    	try{
	 	    	jOBjRet.put("minBillNo", MinBillNo); 
	 	    	jOBjRet.put("maxBillNo", MaxBillNo);
	 	    	jOBjRet.put("totalDiscount", TotalDiscount);
	 	    	}
	 	    	catch(Exception e)
	 	    	{
	 	    		e.printStackTrace();
	 	    	}
            }
         
         sbSqlLive.setLength(0);
         sbSqlQFile.setLength(0);
         sbSqlFilters.setLength(0);

         try
         {
        	 sqlLive = " select a.strBillNo,ifnull(d.strSettelmentDesc,'ND') as payMode,ifnull(a.dblSubTotal,0.00) as subTotal,"
                     + " a.dblTaxAmt,a.dblDiscountAmt,ifnull(c.dblSettlementAmt,0.00) as settleAmt, "
                     + " ifnull(e.strCustomerName,'') as CustomerName "
                     + " from tblbillhd  a "
                     + " left outer join tblbillsettlementdtl c on a.strBillNo=c.strBillNo  "
                     + " left outer join tblsettelmenthd d on c.strSettlementCode=d.strSettelmentCode "
                     + " left outer join tblcustomermaster e on a.strCustomerCode=e.strCustomerCode "
                     + " where date(a.dteBillDate) BETWEEN '" + fromDate + "' AND '" + toDate + "' ";

             if (!strPOSCode.equalsIgnoreCase("All"))
             {
                 sqlLive += " and a.strPOSCode= '" + strPOSCode + "' ";
             }
             
             sqlLive += " and a.intShiftCode= '" + strShiftNo + "' ";
             
             sqlLive += " Order By d.strSettelmentDesc";
        	 
             
             
             sqlQFile = " select a.strBillNo,ifnull(d.strSettelmentDesc,'ND') as payMode,ifnull(a.dblSubTotal,0.00) as subTotal,"
                     + " a.dblTaxAmt,a.dblDiscountAmt,ifnull(c.dblSettlementAmt,0.00) as settleAmt, "
                     + " ifnull(e.strCustomerName,'') as CustomerName "
                     + " from tblqbillhd  a "
                     + " left outer join tblqbillsettlementdtl c on a.strBillNo=c.strBillNo  "
                     + " left outer join tblsettelmenthd d on c.strSettlementCode=d.strSettelmentCode "
                     + " left outer join tblcustomermaster e on a.strCustomerCode=e.strCustomerCode "
                     + " where date(a.dteBillDate) BETWEEN '" + fromDate + "' AND '" + toDate + "' ";

             if (!strPOSCode.equalsIgnoreCase("All"))
             {
                 sqlQFile += " and a.strPOSCode= '" + strPOSCode + "' ";
             }
        
             sqlQFile +=  " and a.intShiftCode= '" + strShiftNo + "' ";
        

             sqlQFile += " Order By d.strSettelmentDesc";


             Map<String, Map<String, clsOperatorDtl>> hmOperatorWiseSales = new HashMap<String, Map<String, clsOperatorDtl>>();
             Map<String, clsOperatorDtl> hmSettlementDtl = null;
             clsOperatorDtl objOperatorWiseSales = null;
             
             Query querySqlLive = webPOSSessionFactory.getCurrentSession().createSQLQuery(sqlLive);
            // ResultSet rsOperator = clsGlobalVarClass.dbMysql.executeResultSet(sqlLive);
             List listSqlLive = querySqlLive.list();
 	 	    if(listSqlLive.size()>0)
 	 	    {
 	 	    	for(int i=0 ;i<listSqlLive.size();i++ )
 	 	    	{
 	 	    		Object[] obj = (Object[]) listSqlLive.get(i);
          
 	 	    		if (hmOperatorWiseSales.containsKey(obj[0].toString()))
 	                {
 	                    hmSettlementDtl = hmOperatorWiseSales.get(obj[0].toString());
 	                    if (hmSettlementDtl.containsKey(obj[1].toString()))
 	                    {
 	                        objOperatorWiseSales = hmSettlementDtl.get(obj[1].toString());
 	                        objOperatorWiseSales.setSettleAmt(objOperatorWiseSales.getSettleAmt() + Double.parseDouble(obj[5].toString()));
 	                    }
 	                    else
 	                    {
 	                        objOperatorWiseSales = new clsOperatorDtl();
 	                        objOperatorWiseSales.setStrUserCode(obj[0].toString());
 	                        objOperatorWiseSales.setStrSettlementDesc(obj[1].toString());
 	                        objOperatorWiseSales.setStrUserName(obj[6].toString());
 	                        objOperatorWiseSales.setStrPOSName(String.valueOf(0));
 	                        objOperatorWiseSales.setStrPOSCode(String.valueOf(0));
 	                        objOperatorWiseSales.setDiscountAmt(0);
 	                        objOperatorWiseSales.setSettleAmt(Double.parseDouble(obj[5].toString()));
 	                    }
 	                    hmSettlementDtl.put(obj[1].toString(), objOperatorWiseSales);
 	                }
 	                else
 	                {

 	                	objOperatorWiseSales = new clsOperatorDtl();
	                        objOperatorWiseSales.setStrUserCode(obj[0].toString());
	                        objOperatorWiseSales.setStrSettlementDesc(obj[1].toString());
	                        objOperatorWiseSales.setStrUserName(obj[6].toString());
	                        objOperatorWiseSales.setStrPOSName(String.valueOf(0));
	                        objOperatorWiseSales.setStrPOSCode(String.valueOf(0));
	                        objOperatorWiseSales.setDiscountAmt(0);
	                        objOperatorWiseSales.setSettleAmt(Double.parseDouble(obj[5].toString()));

 	                    hmSettlementDtl = new HashMap<String, clsOperatorDtl>();
 	                    hmSettlementDtl.put(obj[1].toString(), objOperatorWiseSales);
 	                }
 	                hmOperatorWiseSales.put(obj[1].toString(), hmSettlementDtl);
 	 	    	}
               
 	 	    }
             
             
 	 	    
 	 	  Query querySqlQFile = webPOSSessionFactory.getCurrentSession().createSQLQuery(sqlQFile);
             List listSqlQFile = querySqlQFile.list();
 	 	    if(listSqlQFile.size()>0)
 	 	    {
 	 	    	for(int i=0 ;i<listSqlQFile.size();i++ )
 	 	    	{
 	 	    		Object[] obj = (Object[]) listSqlQFile.get(i);
          
 	 	    	if (hmOperatorWiseSales.containsKey(obj[0].toString()))
 	             {
 	 	    			hmSettlementDtl = hmOperatorWiseSales.get(obj[0].toString());
                    if (hmSettlementDtl.containsKey(obj[1].toString()))
                    {
                        objOperatorWiseSales = hmSettlementDtl.get(obj[1].toString());
                        objOperatorWiseSales.setSettleAmt(objOperatorWiseSales.getSettleAmt() + Double.parseDouble(obj[0].toString()));
                    }
                    else
                    {
                        objOperatorWiseSales = new clsOperatorDtl();
                        
                        objOperatorWiseSales.setStrUserCode(obj[0].toString());
	                        objOperatorWiseSales.setStrSettlementDesc(obj[1].toString());
	                        objOperatorWiseSales.setStrUserName(obj[6].toString());
	                        objOperatorWiseSales.setStrPOSName(String.valueOf(0));
	                        objOperatorWiseSales.setStrPOSCode(String.valueOf(0));
	                        objOperatorWiseSales.setDiscountAmt(0);
	                        objOperatorWiseSales.setSettleAmt(Double.parseDouble(obj[5].toString()));
                        
                    }
                    hmSettlementDtl.put(obj[1].toString(), objOperatorWiseSales);
                }
                else
                {
                	
                	objOperatorWiseSales = new clsOperatorDtl();
                    objOperatorWiseSales.setStrUserCode(obj[0].toString());
                        objOperatorWiseSales.setStrSettlementDesc(obj[1].toString());
                        objOperatorWiseSales.setStrUserName(obj[6].toString());
                        objOperatorWiseSales.setStrPOSName(String.valueOf(0));
                        objOperatorWiseSales.setStrPOSCode(String.valueOf(0));
                        objOperatorWiseSales.setDiscountAmt(0);
                        objOperatorWiseSales.setSettleAmt(Double.parseDouble(obj[5].toString()));
                    
                    hmSettlementDtl = new HashMap<String, clsOperatorDtl>();
                    hmSettlementDtl.put(obj[1].toString(), objOperatorWiseSales);
                }
                hmOperatorWiseSales.put(obj[0].toString(), hmSettlementDtl);
            }

 	 	 }

 	 	    sbSqlDisLive.append("SELECT b.strBillNo, b.strPOSCode, c.strPOSName "
                    + ",sum(b.dblSubTotal),sum(b.dblDiscountAmt),sum(b.dblTaxAmt),'SANGUINE' "
                    + " FROM tblbillhd b inner join tblposmaster c on b.strPOSCode=c.strPOSCode  "
                    + " WHERE date( b.dteBillDate ) BETWEEN '" + fromDate + "' AND '" + toDate + "' ");

            sbSqlQDisFile.append(" SELECT b.strBillNo, b.strPOSCode, c.strPOSName"
                    + ",sum(b.dblSubTotal),sum(b.dblDiscountAmt),sum(b.dblTaxAmt),'SANGUINE' "
                    + " FROM tblqbillhd b inner join tblposmaster c on b.strPOSCode=c.strPOSCode "
                    + " WHERE date( b.dteBillDate ) BETWEEN '" + fromDate + "' AND '" + toDate + "' ");
  
            if (!strPOSCode.equalsIgnoreCase("All"))
            {
                sbSqlDisFilters.append(" AND b.strPOSCode = '" + strPOSCode + "' ");
            }
             sbSqlDisFilters.append(" AND b.intShiftCode = '" + strShiftNo + "' ");
           

            sbSqlDisFilters.append(" GROUP BY b.strBillNo, b.strPosCode");

            sbSqlDisLive.append(sbSqlDisFilters);
            sbSqlQDisFile.append(sbSqlDisFilters);

            double dis = 0;


            Query querysbSqlDisLive = webPOSSessionFactory.getCurrentSession().createSQLQuery(sbSqlDisLive.toString());
             List listsbSqlDisLive = querysbSqlDisLive.list();
 	 	    if(listsbSqlDisLive.size()>0)
 	 	    {
 	 	    	for(int i=0 ;i<listsbSqlDisLive.size();i++ )
 	 	    	{
 	 	    		Object[] obj = (Object[]) listsbSqlDisLive.get(i);
 	 	    		
 	 	    	if (hmOperatorWiseSales.containsKey(obj[0].toString()))
                {
                    hmSettlementDtl = hmOperatorWiseSales.get(obj[0].toString());
                    Set<String> setKeys = hmSettlementDtl.keySet();
                    for (String keys : setKeys)
                    {
                        objOperatorWiseSales = hmSettlementDtl.get(keys);
                        objOperatorWiseSales.setStrPOSName(String.valueOf(objOperatorWiseSales.getStrPOSName() +obj[3].toString()));
                        objOperatorWiseSales.setStrPOSCode(String.valueOf(objOperatorWiseSales.getStrPOSCode() + obj[4].toString()));
                        dis = objOperatorWiseSales.getDiscountAmt();
                        objOperatorWiseSales.setDiscountAmt(dis + Double.parseDouble(obj[4].toString()));
                        hmSettlementDtl.put(keys, objOperatorWiseSales);
                        break;
                    }
                    hmOperatorWiseSales.put(obj[0].toString(), hmSettlementDtl);
                }
              }
 	 	    }
 	 	    
 	 	    Query querysbSqlQDisFile = webPOSSessionFactory.getCurrentSession().createSQLQuery(sbSqlQDisFile.toString());
	        List listsbSqlQDisFile = querysbSqlQDisFile.list();
	 	    if(listsbSqlQDisFile.size()>0)
	 	    {
	 	    	for(int i=0 ;i<listsbSqlQDisFile.size();i++ )
	 	 	   	{
	 	 	    		Object[] obj = (Object[]) listsbSqlQDisFile.get(i);
	 	 	    		
	 	 	       if (hmOperatorWiseSales.containsKey(obj[0].toString()))
	                     {
                       hmSettlementDtl = hmOperatorWiseSales.get(obj[0].toString());
                       Set<String> setKeys = hmSettlementDtl.keySet();
                       for (String keys : setKeys)
                      {
                        objOperatorWiseSales = hmSettlementDtl.get(keys);
                        objOperatorWiseSales.setStrPOSName(String.valueOf(objOperatorWiseSales.getStrPOSName() + obj[3].toString()));
                        objOperatorWiseSales.setStrPOSCode(String.valueOf(objOperatorWiseSales.getStrPOSCode() + obj[5].toString()));
                        dis = objOperatorWiseSales.getDiscountAmt();
                        objOperatorWiseSales.setDiscountAmt(dis + Double.parseDouble(obj[4].toString()));
                        hmSettlementDtl.put(keys, objOperatorWiseSales);
                        break;
                    }
                    hmOperatorWiseSales.put(obj[0].toString(), hmSettlementDtl);
                }
              }
	 	    }
	 	    
	 	      int k = 0;
              for (Map.Entry<String, Map<String, clsOperatorDtl>> entry : hmOperatorWiseSales.entrySet())
              {
                Map<String, clsOperatorDtl> hmOpSettlementDtl = entry.getValue();
                for (Map.Entry<String, clsOperatorDtl> entryOp : hmOpSettlementDtl.entrySet())
                {
                    clsOperatorDtl objOperatorDtl = entryOp.getValue();
                    listOperatorDtl.add(objOperatorDtl);
                }
               }
              
              sqlLive = " select ifnull(d.strSettelmentDesc,'') as payMode "
                      + " ,sum(c.dblSettlementAmt) "
                      + " from tblbillhd a left outer join tblbillsettlementdtl c on a.strBillNo=c.strBillNo "
                      + " left outer join tblsettelmenthd d on c.strSettlementCode=d.strSettelmentCode "
                      + " where date(a.dteBillDate) BETWEEN '"+fromDate+"' AND '"+toDate+"' ";
                     
                      if (!strPOSCode.equalsIgnoreCase("All"))
                      {
                          sqlLive += " and a.strPOSCode= '" + strPOSCode + "' ";
                      }
                      
                      sqlLive += " and a.intShiftCode= '" + strShiftNo + "' ";
                      
                      sqlLive += " Group By d.strSettelmentDesc ";
                      
                      sqlQFile = " select ifnull(d.strSettelmentDesc,'') as payMode "
                      + " ,sum(c.dblSettlementAmt) "
                      + " from tblqbillhd a left outer join tblqbillsettlementdtl c on a.strBillNo=c.strBillNo "
                      + " left outer join tblsettelmenthd d on c.strSettlementCode=d.strSettelmentCode "
                      + " where date(a.dteBillDate) BETWEEN '"+fromDate+"' AND '"+toDate+"' ";
                     
               if (!strPOSCode.equalsIgnoreCase("All"))
               {
            	   sqlQFile += " and a.strPOSCode= '" + strPOSCode + "' ";
               }
               
               sqlQFile += " and a.intShiftCode= '" + strShiftNo + "' ";
               
               sqlQFile += " Group By d.strSettelmentDesc ";
             
               int previousListIndex=0;
               List<clsOperatorDtl> listSettleDetail=new ArrayList<>();
               
             Query querysbSqlLive = webPOSSessionFactory.getCurrentSession().createSQLQuery(sqlLive);
		        List listsqlLive = querysbSqlLive.list();
		 	    if(listsqlLive.size()>0)
		 	    {
		 	    	for(int i=0 ;i<listsqlLive.size();i++ )
		 	 	   	{
		 	 	    		Object[] obj = (Object[]) listsqlLive.get(i);
		 	 	    
                  boolean flgFound=false;
                   if(!obj[0].toString().isEmpty())
                   {
                       objOperatorWiseSales = new clsOperatorDtl();
                       if(listSettleDetail.size()>0)
                       {
                           for(int cnt=0;cnt<listSettleDetail.size();cnt++)
                           {
                               clsOperatorDtl objPreviousList= listSettleDetail.get(cnt);
                               if(objPreviousList.getStrSettlementDesc().equals(obj[0].toString()))
                               {
                                   double settleAmount=objPreviousList.getSettleAmt()+Double.parseDouble(obj[1].toString());
                                   objOperatorWiseSales.setStrSettlementDesc(obj[0].toString());
                                   objOperatorWiseSales.setSettleAmt(settleAmount);
                                   flgFound=true;
                                   previousListIndex=cnt;
                               }
                           }
                           
                       }
                       if(flgFound)
                       {
                           listSettleDetail.remove(previousListIndex);
                           listSettleDetail.add(objOperatorWiseSales);
                       }
                       else
                       {
                          objOperatorWiseSales.setStrSettlementDesc(obj[0].toString());
                          objOperatorWiseSales.setSettleAmt(Double.parseDouble(obj[1].toString()));
                          listSettleDetail.add(objOperatorWiseSales);  
                       }
                   }
                   
               }
		 	    }
		 	    
           
		 	   
            Query querysbsqlQFile = webPOSSessionFactory.getCurrentSession().createSQLQuery(sqlQFile);
		        List listsqlQFile = querysbsqlQFile.list();
		 	    if(listsqlQFile.size()>0)
		 	    {
		 	    	for(int i=0 ;i<listsqlQFile.size();i++ )
		 	 	   	{
		 	 	    		Object[] obj = (Object[]) listsqlQFile.get(i);
		 	 	    
	            
	                boolean flgFound=false;
	                if(!obj[0].toString().isEmpty())
	                {
	                    objOperatorWiseSales = new clsOperatorDtl();
	                    if(listSettleDetail.size()>0)
	                    {
	                        for(int cnt=0;cnt<listSettleDetail.size();cnt++)
	                        {
	                            clsOperatorDtl objPreviousList= listSettleDetail.get(cnt);
	                            if(objPreviousList.getStrSettlementDesc().equals(obj[0].toString()))
	                            {
	                                double settleAmount=objPreviousList.getSettleAmt()+Double.parseDouble(obj[1].toString());
	                                objOperatorWiseSales.setStrSettlementDesc(obj[0].toString());
	                                objOperatorWiseSales.setSettleAmt(settleAmount);
	                                flgFound=true;
	                                previousListIndex=cnt;
	                                
	                            }
	                        }
	                        
	                    }
	                    if(flgFound)
	                    {
	                        listSettleDetail.remove(previousListIndex);
	                        listSettleDetail.add(objOperatorWiseSales);
	                    }
	                    else
	                    {
	                       objOperatorWiseSales.setStrSettlementDesc(obj[0].toString());
	                       objOperatorWiseSales.setSettleAmt(Double.parseDouble(obj[1].toString()));
	                       listSettleDetail.add(objOperatorWiseSales);  
	                    }
	                }
	             }
		 	   }
		 	    
		 	     sqlLive = " select ifnull(a.strBillNo,'') "
		 	            + " from tblvoidbillhd a "
		 	            + " where date(a.dteBillDate) BETWEEN '"+fromDate+"' AND '"+toDate+"' ";
		 	            
		 	            if (!strPOSCode.equalsIgnoreCase("All"))
		 	            {
		 	                sqlLive += " and a.strPosCode= '" + strPOSCode + "' ";
		 	            }
		 	           
		 	                sqlLive += " and a.intShiftCode= '" + strShiftNo + "' ";
		 	           
		 	            sqlLive += " Order By a.strBillNo ";
		 	            
		 	            List<clsOperatorDtl> listVoidBillDetail=new ArrayList<>();
		 	       	  
		 	         Query qsqlLive = webPOSSessionFactory.getCurrentSession().createSQLQuery(sqlLive);
			 	    List listSqlLive1 = qsqlLive.list();
			 	    if(listSqlLive1.size()>0)
			 	    {
			 	    	
			 	    	for(int i=0 ;i<listSqlLive1.size();i++ )
			 	    	{
			 	    		//Object[] obj = (Object[]) listSqlLive1.get(i);
		 	            
		 	                objOperatorWiseSales = new clsOperatorDtl();
		 	                objOperatorWiseSales.setStrUser(listSqlLive1.get(i).toString());
		 	                listVoidBillDetail.add(objOperatorWiseSales);
		 	            }
			 	    	
			 	    }
           

	 	    		    
	 	 			Comparator<clsOperatorDtl> settleModeComparator = new Comparator<clsOperatorDtl>()
	             	{
	                	@Override
	                	public int compare(clsOperatorDtl o1, clsOperatorDtl o2)
	                	{
	                    	return o1.getStrSettlementDesc().compareTo(o2.getStrSettlementDesc());
	                	}
	            	};
	            	Comparator<clsOperatorDtl> billWiseComparator = new Comparator<clsOperatorDtl>()
	            	{
	                	@Override
	                	public int compare(clsOperatorDtl o1, clsOperatorDtl o2)
	                	{
	                    	return o1.getStrUserCode().compareTo(o2.getStrUserCode());
	                	}
	            	};
	            	Collections.sort(listOperatorDtl,new clsOperatorComparator(settleModeComparator,billWiseComparator));
	 	    	 	

		 	    try
		 	    {
			 	     Gson gson = new Gson();
			 	    Type type = new TypeToken<List<clsOperatorDtl>>() {}.getType();
		            String gsonlistOperatorDtl = gson.toJson(listOperatorDtl, type);
		            String gsonlistSettleDetail = gson.toJson(listSettleDetail, type);
		            String gsonlistVoidBillDetail = gson.toJson(listVoidBillDetail, type);
		 	    	jOBjRet.put("listOfOperatorDtl", gsonlistOperatorDtl); 
		 	    	jOBjRet.put("listOfBillSettleDtl",gsonlistSettleDetail);
		 	    	jOBjRet.put("listOfVoidBillDtl",gsonlistVoidBillDetail);
		 	    }
	            catch (Exception e) 
	            {
	            		e.printStackTrace();
			}
	           /* 
	            List<List<clsOperatorDtl>> listData = new ArrayList<>();
	            listData.add(listOperatorDtl);*/

         }
         catch(Exception ex)
         {
        	 ex.printStackTrace();
         }
	    
	    return 	jOBjRet;
  }

	
		// funSubGroupWiseSummaryReport
	// funSubGroupWiseSummaryReport
	public JSONObject funSubGroupWiseSummaryReport(String fromDate,String toDate,String strPOSCode,String strShiftNo,String strUserCode)
	{
			List listRet =new ArrayList();
			
			 StringBuilder sbSqlLive = new StringBuilder();
	         StringBuilder sbSqlQFile = new StringBuilder();
	         StringBuilder sqlModLive = new StringBuilder();
	         StringBuilder sbSqlFilters = new StringBuilder();
	         StringBuilder sqlModQFile = new StringBuilder();
	         JSONArray jArr =new JSONArray();
	         JSONObject jOBjRet=new JSONObject();
	         
	         double totalAmount = 0;
	         double totalQty = 0;
	         double totalSubTotalDWise = 0;
	         double totalDisAmt = 0;

	         sbSqlLive.setLength(0);
	         sbSqlQFile.setLength(0);
	         sbSqlFilters.setLength(0);
	         sqlModLive.setLength(0);
	         sqlModQFile.setLength(0);
	         try
	         {
	        	 
	        	 sbSqlQFile.append("SELECT c.strSubGroupCode, c.strSubGroupName, sum( b.dblQuantity ) "
	                     + ", sum( b.dblAmount )-sum(b.dblDiscountAmt), f.strPosName,'" + strUserCode + "',b.dblRate ,sum(b.dblAmount),sum(b.dblDiscountAmt)"
	                     + "from tblqbillhd a,tblqbilldtl b,tblsubgrouphd c,tblitemmaster d "
	                     + ",tblposmaster f "
	                     + "where a.strBillNo=b.strBillNo and a.strPOSCode=f.strPOSCode "
	                     + "and b.strItemCode=d.strItemCode "
	                     + "and c.strSubGroupCode=d.strSubGroupCode ");
	        	 
	
	        	 sbSqlLive.append("SELECT c.strSubGroupCode, c.strSubGroupName, sum( b.dblQuantity ) "
	                     + ", sum( b.dblAmount )-sum(b.dblDiscountAmt), f.strPosName,'" + strUserCode + "',b.dblRate ,sum(b.dblAmount),sum(b.dblDiscountAmt)"
	                     + "from tblbillhd a,tblbilldtl b,tblsubgrouphd c,tblitemmaster d "
	                     + ",tblposmaster f "
	                     + "where a.strBillNo=b.strBillNo and a.strPOSCode=f.strPOSCode "
	                     + "and b.strItemCode=d.strItemCode "
	                     + "and c.strSubGroupCode=d.strSubGroupCode ");
	        	 
	         
	        	 sqlModLive.append("select c.strSubGroupCode,c.strSubGroupName"
	                     + ",sum(b.dblQuantity),sum(b.dblAmount),f.strPOSName"
	                     + ",'" + strUserCode + "','0' ,'0.00','0.00' "
	                     + " from tblbillmodifierdtl b,tblbillhd a,tblposmaster f,tblitemmaster d"
	                     + ",tblsubgrouphd c"
	                     + " where a.strBillNo=b.strBillNo and a.strPOSCode=f.strPosCode "
	                     + " and  left(b.strItemCode,7)=d.strItemCode "
	                     + " and d.strSubGroupCode=c.strSubGroupCode ");

	        	 
	             sqlModQFile.append("select c.strSubGroupCode,c.strSubGroupName"
	                     + ",sum(b.dblQuantity),sum(b.dblAmount),f.strPOSName"
	                     + ",'" + strUserCode + "','0' ,'0.00','0.00' "
	                     + " from tblqbillmodifierdtl b,tblqbillhd a,tblposmaster f,tblitemmaster d"
	                     + ",tblsubgrouphd c"
	                     + " where a.strBillNo=b.strBillNo and a.strPOSCode=f.strPosCode "
	                     + " and  left(b.strItemCode,7)=d.strItemCode "
	                     + " and d.strSubGroupCode=c.strSubGroupCode ");

	             sbSqlFilters.append(" and date( a.dteBillDate ) BETWEEN '" + fromDate + "' AND '" + toDate + "' ");
	             
	             if (!strPOSCode.equals("All"))
	             {
	                 sbSqlFilters.append(" and a.strPOSCode = '" + strPOSCode + "' ");
	             }
	             sbSqlFilters.append(" and a.intShiftCode = '" +strShiftNo + "' ");
	            
	             sbSqlFilters.append(" group by c.strSubGroupCode, c.strSubGroupName, a.strPoscode");
	            
	             sbSqlLive.append(sbSqlFilters);
	             sbSqlQFile.append(sbSqlFilters);
	             sqlModLive.append(" "+sbSqlFilters);
	             sqlModQFile.append(" "+sbSqlFilters);
	             			          
	             Query querytrucate = webPOSSessionFactory.getCurrentSession().createSQLQuery("truncate table tbltempsalesflash;");
	             querytrucate.executeUpdate();
	             StringBuilder sqlInsertLiveBillSales =new StringBuilder();
	             StringBuilder sqlInsertQFileBillSales=new StringBuilder();
	             sqlInsertLiveBillSales.setLength(0);
	             sqlInsertQFileBillSales.setLength(0);
	             
	             sqlInsertLiveBillSales.append("insert into tbltempsalesflash "
	                 + "("+sbSqlLive+");");
	             
	             sqlInsertQFileBillSales.append("insert into tbltempsalesflash "
	                 + "("+sbSqlQFile+");");
	             
	             
	             Query queryInsetLiveBill = webPOSSessionFactory.getCurrentSession().createSQLQuery(sqlInsertLiveBillSales.toString());
	             Query queryInsertQFile = webPOSSessionFactory.getCurrentSession().createSQLQuery(sqlInsertQFileBillSales.toString());
	             queryInsetLiveBill.executeUpdate();
	             queryInsertQFile.executeUpdate();
	             	             
	             sqlInsertLiveBillSales.setLength(0);
	             sqlInsertQFileBillSales.setLength(0);
	             
	             sqlInsertLiveBillSales.append("insert into tbltempsalesflash ( "+ sqlModLive+" );");

	             sqlInsertQFileBillSales.append("insert into tbltempsalesflash (" + sqlModQFile + ");");
	             
	             
	             Query queryInsetModLiveBill = webPOSSessionFactory.getCurrentSession().createSQLQuery(sqlInsertLiveBillSales.toString());
	             Query queryInsertModQFile = webPOSSessionFactory.getCurrentSession().createSQLQuery(sqlInsertQFileBillSales.toString());
	             queryInsetModLiveBill.executeUpdate();
	             queryInsetModLiveBill.executeUpdate();
	             
	            String sqlSubGroup ="SELECT strcode, strname, strposcode, sum(dblquantity), sum(dblamount),sum(dblsubtotal),sum(dbldiscamt) "
	            		+ "FROM tbltempsalesflash group by strposcode,strcode, strname;"; 
	            		/*" select a.strcode,a.strname,a.strposcode,sum(a.dblquantity),sum(a.dblamount),sum(a.dblsubtotal),sum(a.dbldiscamt) "
	                     + " from tbltempsalesflash a "
	                     + " group by a.strcode,a.strname,a.strposcode ";*/
	             
	 	    Query querySqlSubGroup= webPOSSessionFactory.getCurrentSession().createSQLQuery(sqlSubGroup);
	 	    List listSqlSubGroup = querySqlSubGroup.list();
	 	    if(listSqlSubGroup.size()>0)
	 	    {
	 	    	
	 	    	for(int i=0 ;i<listSqlSubGroup.size();i++ )
	 	    	{
	 	    		Object[] obj = (Object[]) listSqlSubGroup.get(i);
	 	    		JSONObject jObj =new JSONObject();
	 	    		jObj.put("strcode",obj[0].toString());
	 	    		jObj.put("strname",obj[1].toString());
	 	    		jObj.put("strposcode",obj[2].toString());
	 	    		jObj.put("dblquantity",obj[3].toString());
	 	    		jObj.put("dblamount",obj[4].toString());
	 	    		jObj.put("dblsubtotal",obj[5].toString());
	 	    		jObj.put("dbldiscamt",obj[6].toString());
	 	    		
	 	    		/*totalQty = totalQty + Double.parseDouble(obj[3].toString());
	                totalAmount = totalAmount + Double.parseDouble(obj[4].toString());
	                totalSubTotalDWise = totalSubTotalDWise + Double.parseDouble(obj[5].toString());
	                totalDisAmt = totalDisAmt + Double.parseDouble(obj[6].toString());*/
	                
	 	    		jArr.put(jObj);
	 	    	}
	 	    }
	 	  
	// TAX Summary 
	 	   JSONArray jArr1 =new JSONArray();
	 	    String SqlTax="select c.strTaxDesc,sum(b.dblTaxableAmount),sum(b.dblTaxAmount)"
	 	    	+ " from tblqbillhd a,tblqbilltaxdtl b,tbltaxhd c"
	 	    	+ " where a.strBillNo=b.strBillNo and b.strTaxCode=c.strTaxCode"
	 	    	+ " and date( a.dteBillDate ) between '" + fromDate + "' and '" + toDate + "'"
	 	    	+ " and a.strPOSCode=if('"+ strPOSCode +"'='All',a.strPOSCode,'"+strPOSCode+"')"
	 	    	+ " group by b.strTaxCode";
	 	    	
	 	    	Query querySqlTaxSummary = webPOSSessionFactory.getCurrentSession().createSQLQuery(SqlTax);
		 	    List listSqlTaxSummary = querySqlTaxSummary.list();
		 	    if(listSqlTaxSummary.size()>0)
		 	    {
		 	    	for(int i=0 ;i<listSqlTaxSummary.size();i++ )
		 	    	{
		 	    		Object[] obj = (Object[]) listSqlTaxSummary.get(i);
		 	    		JSONObject jObj =new JSONObject();
		 	    		jObj.put("strTaxDesc",obj[0].toString());
		 	    		jObj.put("dblTaxableAmount",obj[1].toString());
		 	    		jObj.put("dblTaxAmount",obj[2].toString());
		 	    		
		 	    		jArr1.put(jObj);
		 	    	}
	 	    	
		 	    }
		 
		// Settlement Summary 
			 	   JSONArray jArr2 =new JSONArray();

		 	   String sqlSettlement = " select c.strSettelmentDesc,sum(b.dblSettlementAmt) "
		 	   		+ "from tblqbillhd a,tblqbillsettlementdtl b,tblsettelmenthd c"
		 	   		+ " where a.strBillNo=b.strBillNo and b.strSettlementCode=c.strSettelmentCode "
		 	   		+ " and date( a.dteBillDate ) between '" + fromDate + "' and '" + toDate + "'"
		 	   		+ "and a.strPOSCode=if('"+strPOSCode+"'='All',a.strPOSCode,'"+strPOSCode+"') "
		 	   		+ "group by b.strSettlementCode,c.strSettelmentDesc;";
	             
	 	    Query querySqlSettlement= webPOSSessionFactory.getCurrentSession().createSQLQuery(sqlSettlement);
	 	    List listSqlSettlement = querySqlSettlement.list();
	 	    if(listSqlSettlement.size()>0)
	 	    {
	 	    	
	 	    	for(int i=0 ;i<listSqlSettlement.size();i++ )
	 	    	{
	 	    		Object[] obj = (Object[]) listSqlSettlement.get(i);
	 	    		JSONObject jObj =new JSONObject();
	 	    		jObj.put("strSettelmentDesc",obj[0].toString());
	 	    		jObj.put("dblSettlementAmt",obj[1].toString());
	 	    		jArr2.put(jObj);
	 	    	}
	 	    }
		  //  listRet.add(listSqlLive);
	 	    jOBjRet.put("jArr", jArr);
		    jOBjRet.put("jArr1", jArr1);
		    jOBjRet.put("jArr2", jArr2);
		  }
	         catch(Exception ex)
	         {
	        	 ex.printStackTrace();
	         }
		    return 	jOBjRet;
	}
		
	
	

	// funNCKotReport
		// funNCKotReport
		public JSONObject funNCKotReport(String fromDate, String toDate,
				String strPOSCode, String strShiftNo, String strUserCode,
				String strReasonCode) {
			List listRet = new ArrayList();
			StringBuilder sbSqlLive = new StringBuilder();
			StringBuilder sbSqlQFile = new StringBuilder();
			StringBuilder sbSqlFilters = new StringBuilder();
			JSONArray jArr = new JSONArray();
			JSONObject jOBjRet = new JSONObject();

			sbSqlLive.setLength(0);
			sbSqlQFile.setLength(0);
			sbSqlFilters.setLength(0);

			StringBuilder sqlBuilder = new StringBuilder();
			try {

				// live
				sqlBuilder.setLength(0);
				sqlBuilder
						.append("select a.strKOTNo, a.dteNCKOTDate, a.strTableNo, b.strReasonName,d.strPosName,\n"
								+ "a.strRemark,  a.strItemCode, c.strItemName, a.dblQuantity, a.dblRate, a.dblQuantity * a.dblRate as Amount\n"
								+ ",e.strTableName\n"
								+ "from tblnonchargablekot a, tblreasonmaster b, tblitemmaster c,tblposmaster d,tbltablemaster e\n"
								+ "where  a.strReasonCode = b.strReasonCode \n"
								+ "and a.strTableNo=e.strTableNo \n"
								+ "and a.strItemCode = c.strItemCode  and a.strPosCode=d.strPOSCode\n"
								+ "and date(a.dteNCKOTDate) between '"
								+ fromDate
								+ "' and  '" + toDate + "'\n ");
				if (!strPOSCode.equalsIgnoreCase("All")) {
					sqlBuilder.append("and a.strPOSCode='" + strPOSCode + "' ");
				}
				if (!strReasonCode.equalsIgnoreCase("All")) {
					sqlBuilder.append("and a.strReasonCode='" + strReasonCode
							+ "'  ");
				}

				Query queryData = webPOSSessionFactory.getCurrentSession()
						.createSQLQuery(sqlBuilder.toString());
				List listData = queryData.list();
				if (listData.size() > 0) {
					for (int i = 0; i < listData.size(); i++) {
						Object[] obj = (Object[]) listData.get(i);
						JSONObject jObj = new JSONObject();
						jObj.put("strKOTNo", obj[0].toString());
						jObj.put("dteNCKOTDate", obj[1].toString());
						jObj.put("strTableNo", obj[2].toString());
						jObj.put("strReasonName", obj[3].toString());
						jObj.put("strPosName", obj[4].toString());
						jObj.put("strRemark", obj[5].toString());
						jObj.put("strItemCode", obj[6].toString());
						jObj.put("strItemName", obj[7].toString());
						jObj.put("dblQuantity", obj[8].toString());
						jObj.put("dblRate", obj[9].toString());
						jObj.put("Amount", obj[10].toString());
						jObj.put("strTableName", obj[11].toString());

						jArr.put(jObj);

					}
				}

				jOBjRet.put("jArr", jArr);
			} catch (Exception ex) {
				ex.printStackTrace();
			}

			return jOBjRet;

		}

	
	public JSONObject funSubGroupWiseReportDtl(String fromDate, String toDate,
			String strPOSCode, String strShiftNo, String strUserCode) {
		List listRet = new ArrayList();
		StringBuilder sbSqlLive = new StringBuilder();
		StringBuilder sbSqlQFile = new StringBuilder();
		StringBuilder sbSqlFilters = new StringBuilder();
		StringBuilder sbSqlModLive = new StringBuilder();
		StringBuilder sbSqlQModFile = new StringBuilder();
		JSONArray jArr = new JSONArray();
		JSONObject jOBjRet = new JSONObject();

		sbSqlLive.setLength(0);
		sbSqlQFile.setLength(0);
		sbSqlFilters.setLength(0);
		sbSqlModLive.setLength(0);
		sbSqlQModFile.setLength(0);

		try {
			sbSqlQFile
					.append("SELECT c.strSubGroupCode, c.strSubGroupName, sum( b.dblQuantity ) "
							+ ", sum( b.dblAmount )-sum(b.dblDiscountAmt), f.strPosName,'"
							+ strUserCode
							+ "',b.dblRate ,sum(b.dblAmount),sum(b.dblDiscountAmt)"
							+ "from tblqbillhd a,tblqbilldtl b,tblsubgrouphd c,tblitemmaster d "
							+ ",tblposmaster f "
							+ "where a.strBillNo=b.strBillNo and a.strPOSCode=f.strPOSCode "
							+ "and b.strItemCode=d.strItemCode "
							+ "and c.strSubGroupCode=d.strSubGroupCode ");

			sbSqlLive
					.append("SELECT c.strSubGroupCode, c.strSubGroupName, sum( b.dblQuantity ) "
							+ ", sum( b.dblAmount )-sum(b.dblDiscountAmt), f.strPosName,'"
							+ strUserCode
							+ "',b.dblRate ,sum(b.dblAmount),sum(b.dblDiscountAmt)"
							+ "from tblbillhd a,tblbilldtl b,tblsubgrouphd c,tblitemmaster d "
							+ ",tblposmaster f "
							+ "where a.strBillNo=b.strBillNo and a.strPOSCode=f.strPOSCode "
							+ "and b.strItemCode=d.strItemCode "
							+ "and c.strSubGroupCode=d.strSubGroupCode ");

			sbSqlModLive
					.append("select c.strSubGroupCode,c.strSubGroupName"
							+ ",sum(b.dblQuantity),sum(b.dblAmount)-sum(b.dblDiscAmt),f.strPOSName"
							+ ",'"
							+ strUserCode
							+ "','0' ,sum(b.dblAmount),sum(b.dblDiscAmt) "
							+ " from tblbillmodifierdtl b,tblbillhd a,tblposmaster f,tblitemmaster d"
							+ ",tblsubgrouphd c"
							+ " where a.strBillNo=b.strBillNo and a.strPOSCode=f.strPosCode "
							+ " and LEFT(b.strItemCode,7)=d.strItemCode "
							+ " and d.strSubGroupCode=c.strSubGroupCode "
							+ " and b.dblamount>0 ");

			sbSqlQModFile
					.append("select c.strSubGroupCode,c.strSubGroupName"
							+ ",sum(b.dblQuantity),sum(b.dblAmount)-sum(b.dblDiscAmt),f.strPOSName"
							+ ",'"
							+ strUserCode
							+ "','0' ,sum(b.dblAmount),sum(b.dblDiscAmt) "
							+ " from tblqbillmodifierdtl b,tblqbillhd a,tblposmaster f,tblitemmaster d"
							+ ",tblsubgrouphd c"
							+ " where a.strBillNo=b.strBillNo and a.strPOSCode=f.strPosCode "
							+ " and LEFT(b.strItemCode,7)=d.strItemCode "
							+ " and d.strSubGroupCode=c.strSubGroupCode "
							+ " and b.dblamount>0 ");

			sbSqlFilters.append(" and date( a.dteBillDate ) BETWEEN '"
					+ fromDate + "' AND '" + toDate + "' ");
			if (!strPOSCode.equalsIgnoreCase("All")) {
				sbSqlFilters
						.append(" AND a.strPOSCode = '" + strPOSCode + "' ");

			}

			// if (clsGlobalVarClass.gEnableShiftYN)
			// {
			// if (clsGlobalVarClass.gEnableShiftYN &&
			// (!strShiftNo.equalsIgnoreCase("All")))
			// {
			sbSqlFilters.append(" and a.intShiftCode = '" + strShiftNo + "' ");
			// }
			// }

			sbSqlFilters
					.append(" group by c.strSubGroupCode, c.strSubGroupName, a.strPoscode");

			sbSqlLive.append(sbSqlFilters);
			sbSqlQFile.append(sbSqlFilters);
			sbSqlModLive.append(sbSqlFilters);
			sbSqlQModFile.append(sbSqlFilters);

			Query querySqlLive = webPOSSessionFactory.getCurrentSession()
					.createSQLQuery(sbSqlLive.toString());
			List listSqlLive = querySqlLive.list();
			if (listSqlLive.size() > 0) {

				for (int i = 0; i < listSqlLive.size(); i++) {
					Object[] obj = (Object[]) listSqlLive.get(i);
					JSONObject jObj = new JSONObject();
					jObj.put("strSubGroupCode", obj[0].toString());
					jObj.put("strSubGroupName", obj[1].toString());
					jObj.put("dblQuantity", obj[2].toString());
					jObj.put("dblAmtLessDis", obj[3].toString());
					jObj.put("strPOSName", obj[4].toString());
					jObj.put("strUserCode", obj[5].toString());
					jObj.put("dblRate", obj[6].toString());
					jObj.put("dblAmount", obj[7].toString());
					jObj.put("dblDiscountAmt", obj[8].toString());

					jArr.put(jObj);
				}
				// jOBjRet.put("jArr", jArr);
			}
			// listRet.add(listSqlLive);

			Query queryQFile = webPOSSessionFactory.getCurrentSession()
					.createSQLQuery(sbSqlQFile.toString());
			List listSqlQFile = queryQFile.list();
			if (listSqlQFile.size() > 0) {

				for (int i = 0; i < listSqlQFile.size(); i++) {
					Object[] obj = (Object[]) listSqlQFile.get(i);
					JSONObject jObj = new JSONObject();
					jObj.put("strSubGroupCode", obj[0].toString());
					jObj.put("strSubGroupName", obj[1].toString());
					jObj.put("dblQuantity", obj[2].toString());
					jObj.put("dblAmtLessDis", obj[3].toString());
					jObj.put("strPOSName", obj[4].toString());
					jObj.put("strUserCode", obj[5].toString());
					jObj.put("dblRate", obj[6].toString());
					jObj.put("dblAmount", obj[7].toString());
					jObj.put("dblDiscountAmt", obj[8].toString());

					jArr.put(jObj);
				}
				// jOBjRet.put("jArr", jArr);
			}
			// listRet.add(listSqlQFile);

			Query querySqlModLive = webPOSSessionFactory.getCurrentSession()
					.createSQLQuery(sbSqlModLive.toString());
			List listSqlModLive = querySqlModLive.list();
			if (listSqlModLive.size() > 0) {

				for (int i = 0; i < listSqlModLive.size(); i++) {
					Object[] obj = (Object[]) listSqlModLive.get(i);
					JSONObject jObj = new JSONObject();
					jObj.put("strSubGroupCode", obj[0].toString());
					jObj.put("strSubGroupName", obj[1].toString());
					jObj.put("dblQuantity", obj[2].toString());
					jObj.put("dblAmtLessDis", obj[3].toString());
					jObj.put("strPOSName", obj[4].toString());
					jObj.put("strUserCode", obj[5].toString());
					jObj.put("dblRate", obj[6].toString());
					jObj.put("dblAmount", obj[7].toString());
					jObj.put("dblDiscountAmt", obj[8].toString());

					jArr.put(jObj);
				}
				// jOBjRet.put("jArr", jArr);
			}
			// listRet.add(listSqlModLive);

			Query querySqlModQFile = webPOSSessionFactory.getCurrentSession()
					.createSQLQuery(sbSqlQModFile.toString());
			List listSqlModQFile = querySqlModQFile.list();
			if (listSqlModQFile.size() > 0) {

				for (int i = 0; i < listSqlModQFile.size(); i++) {
					Object[] obj = (Object[]) listSqlModQFile.get(i);
					JSONObject jObj = new JSONObject();
					jObj.put("strSubGroupCode", obj[0].toString());
					jObj.put("strSubGroupName", obj[1].toString());
					jObj.put("dblQuantity", obj[2].toString());
					jObj.put("dblAmtLessDis", obj[3].toString());
					jObj.put("strPOSName", obj[4].toString());
					jObj.put("strUserCode", obj[5].toString());
					jObj.put("dblRate", obj[6].toString());
					jObj.put("dblAmount", obj[7].toString());
					jObj.put("dblDiscountAmt", obj[8].toString());

					jArr.put(jObj);
				}
				// jOBjRet.put("jArr", jArr);
			}

			// listRet.add(listSqlModQFile);
			jOBjRet.put("jArr", jArr);
		} catch (Exception ex) {
			ex.printStackTrace();
		}

		return jOBjRet;

	}
///////-----------

	
	public JSONObject funGetDayWiseSalesSummary(String withDiscount,
			String fromDate, String toDate, String strOperationType,String strSettlementCode,
			String strPOSCode,String strPOSName) {
		
		StringBuilder sbSql = new StringBuilder();
		JSONObject jColDataArr = new JSONObject();
		JSONArray jGroupArr = new JSONArray();
		JSONArray jTaxArr = new JSONArray();
		JSONArray jSettleArr = new JSONArray();

		List jColHeaderArr = new ArrayList();
		JSONArray jDateArr = new JSONArray();
		JSONObject jOBjRet = new JSONObject();
		Map map = new HashMap();

		jColHeaderArr.add("DATE");
		jColHeaderArr.add("POS");
		int colCount = 3;
		try {

			// Q Date and POS
			sbSql.setLength(0);
			sbSql.append("select DATE_FORMAT(DATE(a.dteBillDate),'%d-%m-%Y') "
                    + "from tblqbillhd a,tblqbillsettlementdtl b,tblsettelmenthd c "
                    + "where date(a.dteBillDate) between '" + fromDate + "' and '" + toDate + "' "
                    + "and a.strBillNo=b.strBillNo "
                    + "and b.strSettlementCode=c.strSettelmentCode ");
			if (!strOperationType.equalsIgnoreCase("All")) {
				sbSql.append("and a.strOperationType='" + strOperationType
						+ "' ");
			}
			if (!strSettlementCode.equalsIgnoreCase("All")) {
				sbSql.append(" and c.strSettelmentCode='" + strSettlementCode + "' ");
			}
			sbSql.append("group by date(a.dteBillDate) "
                    + "order by date(a.dteBillDate); ");
			Query querySql = webPOSSessionFactory.getCurrentSession()
					.createSQLQuery(sbSql.toString());
			List listSql = querySql.list();
			if (listSql.size() > 0) {

				for (int i = 0; i < listSql.size(); i++) {

					jDateArr.put((String) listSql.get(i));

				}

			}

			// Live Bill Date
			sbSql.setLength(0);
			sbSql.append("select DATE_FORMAT(DATE(a.dteBillDate),'%d-%m-%Y') "
                    + "from tblbillhd a,tblbillsettlementdtl b,tblsettelmenthd c "
                    + "where date(a.dteBillDate) between '" + fromDate + "' and '" + toDate + "' "
                    + "and a.strBillNo=b.strBillNo "
                    + "and b.strSettlementCode=c.strSettelmentCode ");
			if (!strOperationType.equalsIgnoreCase("All")) {
				sbSql.append("and a.strOperationType='" + strOperationType
						+ "' ");
			}
			if (!strSettlementCode.equalsIgnoreCase("All")) {
				sbSql.append(" and c.strSettelmentCode='" + strSettlementCode + "' ");
			}
			sbSql.append("group by date(a.dteBillDate) "
					+ "order by date(a.dteBillDate); ");
			querySql = webPOSSessionFactory.getCurrentSession().createSQLQuery(
					sbSql.toString());
			listSql = querySql.list();
			if (listSql.size() > 0) {

				for (int i = 0; i < listSql.size(); i++) {
					Object obj = (Object) listSql.get(i);

					jDateArr.put(obj.toString());

				}

			}

			jColDataArr.put("DATE", jDateArr);

			// Add Group Column

			String sqlGroups = "select a.strGroupName from tblgrouphd a ";

			querySql = webPOSSessionFactory.getCurrentSession().createSQLQuery(
					sqlGroups);
			listSql = querySql.list();

			if (listSql.size() > 0) {

				for (int i = 0; i < listSql.size(); i++) {
					Object obj = (Object) listSql.get(i);

					jGroupArr.put(obj.toString());
					jColHeaderArr.add(obj.toString());
					colCount++;
				}
			}

			// fill Live settlement whose amt>0
			sbSql.setLength(0);
			sbSql.append("SELECT c.strSettelmentDesc "
                    + "FROM tblbillhd a,tblbillsettlementdtl b,tblsettelmenthd c "
                    + "WHERE a.strBillNo=b.strBillNo  "
                    + "AND b.strSettlementCode=c.strSettelmentCode  "
                    + "and b.dblSettlementAmt>0 "
                    + "and date(a.dteBillDate) between '" + fromDate + "' and '" + toDate + "' ");
			if (!strOperationType.equalsIgnoreCase("All")) {
				sbSql.append("and a.strOperationType='" + strOperationType
						+ "' ");
			}
			if (!strPOSCode.equalsIgnoreCase("All")) {
				sbSql.append(" and a.strPOSCode='" + strPOSCode + "' ");
			}
			if (!strSettlementCode.equalsIgnoreCase("All")) {
				sbSql.append(" and c.strSettelmentCode='" + strSettlementCode + "' ");
			}
			sbSql.append("GROUP BY strSettelmentDesc "
                    + "ORDER BY strSettelmentDesc; ");
			querySql = webPOSSessionFactory.getCurrentSession().createSQLQuery(
					sbSql.toString());
			listSql = querySql.list();
			if (listSql.size() > 0) {

				for (int i = 0; i < listSql.size(); i++) {
					Object obj = (Object) listSql.get(i);

					jColHeaderArr.add(obj.toString());
					jSettleArr.put(obj.toString());
					colCount++;
				}
			}

			// fill Q settlement whoes amt>0
			sbSql.setLength(0);
			sbSql.append("SELECT c.strSettelmentDesc "
                    + "FROM tblqbillhd a,tblqbillsettlementdtl b,tblsettelmenthd c "
                    + "WHERE a.strBillNo=b.strBillNo  "
                    + "AND b.strSettlementCode=c.strSettelmentCode  "
                    + "and b.dblSettlementAmt>0 "
                    + "and date(a.dteBillDate) between '" + fromDate + "' and '" + toDate + "' ");
			if (!strOperationType.equalsIgnoreCase("All")) {
				sbSql.append("and a.strOperationType='" + strOperationType
						+ "' ");
			}
			if (!strPOSCode.equalsIgnoreCase("All")) {
				sbSql.append(" and a.strPOSCode='" + strPOSCode + "' ");
			}
			if (!strSettlementCode.equalsIgnoreCase("All")) {
				sbSql.append(" and c.strSettelmentCode='" + strSettlementCode + "' ");
			}
			sbSql.append("GROUP BY strSettelmentDesc "
					+ "ORDER BY c.strSettelmentDesc; ");
			querySql = webPOSSessionFactory.getCurrentSession().createSQLQuery(
					sbSql.toString());
			listSql = querySql.list();
			if (listSql.size() > 0) {

				for (int i = 0; i < listSql.size(); i++) {
					Object obj = (Object) listSql.get(i);

					jColHeaderArr.add(obj.toString());
					jSettleArr.put(obj.toString());
					colCount++;
				}
			}
			// Tax Column
			 String taxCalType = "";
			String sqlTax = "select a.strTaxDesc,a.strTaxCalculation "
                    + " from tbltaxhd a order by a.strTaxCode";
			querySql = webPOSSessionFactory.getCurrentSession().createSQLQuery(
					sqlTax);
			listSql = querySql.list();

			if (listSql.size() > 0) {

				for (int i = 0; i < listSql.size(); i++) {
					Object[] obj = (Object[]) listSql.get(i);
					  taxCalType =obj[1].toString() ;
					jColHeaderArr.add(obj[0].toString());
					jTaxArr.put(obj[0].toString());
					colCount++;
				}
			}

			// Grand Total
			jColHeaderArr.add("GRAND Total");

			String sqlGrandTotal = "SELECT DATE_FORMAT(DATE(a.dteBillDate),'%d-%m-%Y'),sum(b.dblSettlementAmt) "
                    + "FROM tblqbillhd a,tblqbillsettlementdtl b,tblsettelmenthd c "
                    + "WHERE a.strBillNo=b.strBillNo  "
                    + "AND b.strSettlementCode=c.strSettelmentCode  "
                    + "and b.dblSettlementAmt>0 "
                    + "and date(a.dteBillDate) between '" + fromDate + "' and '" + toDate + "' ";
			if (!strOperationType.equalsIgnoreCase("All")) {
				sqlGrandTotal += "and a.strOperationType='" + strOperationType
						+ "' ";
			}
			if (!strPOSCode.equalsIgnoreCase("All")) {
				sqlGrandTotal = sqlGrandTotal + " and a.strPOSCode='"
						+ strPOSCode + "' ";
			}
			if (!strSettlementCode.equalsIgnoreCase("All")) {
				sbSql.append(" and c.strSettelmentCode='" + strSettlementCode + "' ");
			}
			sqlGrandTotal = sqlGrandTotal + "GROUP BY DATE(a.dteBillDate) "
					+ "ORDER BY DATE(a.dteBillDate); ";

			querySql = webPOSSessionFactory.getCurrentSession().createSQLQuery(
					sqlGrandTotal);
			listSql = querySql.list();
			int size = listSql.size();

			for (int tblRow = 0; tblRow < jDateArr.length(); tblRow++) {
				JSONArray jRowArr = new JSONArray();

				jRowArr.put(jDateArr.get(tblRow));
				jRowArr.put(strPOSName);
				for (int i = 2; i < colCount; i++) {
					jRowArr.put(i, 0.00);
					for (int j = 0; j < size; j++) {
						Object[] obj = (Object[]) listSql.get(j);
						if (jColHeaderArr.get(i).toString()
								.equalsIgnoreCase("GRAND Total")
								&& jRowArr.get(0).toString()
										.equalsIgnoreCase(obj[0].toString()))
							jRowArr.put(i,obj[1].toString());

					}

				}
				map.put(tblRow, jRowArr);
			}

			// Live
			sqlGrandTotal = "SELECT DATE_FORMAT(DATE(a.dteBillDate),'%d-%m-%Y'),sum(b.dblSettlementAmt) "
                    + "FROM tblbillhd a,tblbillsettlementdtl b,tblsettelmenthd c "
                    + "WHERE a.strBillNo=b.strBillNo  "
                    + "AND b.strSettlementCode=c.strSettelmentCode  "
                    + "and b.dblSettlementAmt>0 "
                    + "and date(a.dteBillDate) between '" + fromDate + "' and '" + toDate + "' ";
			if (!strOperationType.equalsIgnoreCase("All")) {
				sqlGrandTotal += "and a.strOperationType='" + strOperationType
						+ "' ";
			}
			if (!strPOSCode.equalsIgnoreCase("All")) {
				sqlGrandTotal = sqlGrandTotal + " and a.strPOSCode='"
						+ strPOSCode + "' ";
			}
			if (!strSettlementCode.equalsIgnoreCase("All")) {
				sbSql.append(" and c.strSettelmentCode='" + strSettlementCode + "' ");
			}
			sqlGrandTotal = sqlGrandTotal + "GROUP BY DATE(a.dteBillDate) "
					+ "ORDER BY DATE(a.dteBillDate); ";
			querySql = webPOSSessionFactory.getCurrentSession().createSQLQuery(
					sqlGrandTotal);
			listSql = querySql.list();
			size = listSql.size();

			for (int tblRow = 0; tblRow < jDateArr.length(); tblRow++) {

				JSONArray jRowArr = (JSONArray) map.get(tblRow);
				for (int i = 3; i < colCount; i++) {
					for (int j = 0; j < size; j++) {
						Object[] obj = (Object[]) listSql.get(j);
						if (jColHeaderArr.get(i).toString()
								.equalsIgnoreCase("GRAND Total")
								&& jRowArr.get(0).toString()
										.equalsIgnoreCase(obj[0].toString())) {
							Double value = Double
									.parseDouble(obj[1].toString())
									+ jRowArr.getDouble(i);
							jRowArr.put(i, value);

						}

					}

				}
				map.put(tblRow, jRowArr);

			}

			String columnForSalesAmount = "sum(b.dblAmount) ";
			if (withDiscount.equalsIgnoreCase("Y")) {
				columnForSalesAmount = "sum(b.dblAmount) ";
			} else {
				columnForSalesAmount = "sum(b.dblAmount)-sum(b.dblDiscountAmt) ";
			}

			String columnForModiSalesAmount = "SUM(h.dblAmount) ";
			if (withDiscount.equalsIgnoreCase("Y")) {
				columnForModiSalesAmount = "SUM(h.dblAmount) ";
			} else {
				columnForModiSalesAmount = "SUM(h.dblAmount)-sum(h.dblDiscAmt) ";
			}

			// fill Q data group
			sbSql.setLength(0);
			sbSql.append("select DATE_FORMAT(DATE(a.dteBillDate),'%d-%m-%Y'),g.strGroupName," + columnForSalesAmount + " "
                    + "from tblqbillhd a,tblqbilldtl b,tblitemmaster e "
                    + ",tblsubgrouphd f ,tblgrouphd g  "
                    + "where a.strBillNo=b.strBillNo "
                    + "and b.strItemCode=e.strItemCode "
                    + "and e.strSubGroupCode=f.strSubGroupCode "
                    + "and f.strGroupCode=g.strGroupCode "
                    + "AND b.dblAmount>0  "
                    + "AND DATE(a.dteBillDate) BETWEEN '" + fromDate + "' and '" + toDate + "' ");
			if (!strOperationType.equalsIgnoreCase("All")) {
				sbSql.append("and a.strOperationType='" + strOperationType
						+ "' ");
			}
			if (!strPOSCode.equalsIgnoreCase("All")) {
				sbSql.append(" and a.strPOSCode='" + strPOSCode + "' ");
			}
			
			sbSql.append("GROUP BY DATE(a.dteBillDate),g.strGroupCode,g.strGroupName; ");

			querySql = webPOSSessionFactory.getCurrentSession().createSQLQuery(
					sbSql.toString());
			listSql = querySql.list();

			if (listSql.size() > 0) {
				for (int i = 0; i < listSql.size(); i++) {
					Object[] obj = (Object[]) listSql.get(i);
					for (int tblRow = 0; tblRow < jDateArr.length(); tblRow++) {
						JSONArray jRowArr = (JSONArray) map.get(tblRow);
						if (jDateArr.get(tblRow).toString()
								.equalsIgnoreCase(obj[0].toString())) {
							for (int tblCol = 2; tblCol < colCount; tblCol++) {

								if (jColHeaderArr.get(tblCol).toString()
										.equalsIgnoreCase(obj[1].toString()))

								{
									if (0.00 == jRowArr.getDouble(tblCol)) {
										jRowArr.put(tblCol, obj[2].toString());
										map.put(tblRow, jRowArr);
									} else {
										Double value = Double
												.parseDouble(obj[2].toString())
												+ jRowArr.getDouble(tblCol);
										jRowArr.put(tblCol, value);
										map.put(tblRow, jRowArr);
									}
									break;
								}
							}

						} else {
							continue;
						}
					}

				}

			}
			// Q Modifier Group data
			sbSql.setLength(0);
			sbSql.append("SELECT DATE_FORMAT(DATE(a.dteBillDate),'%d-%m-%Y'),g.strGroupName," + columnForModiSalesAmount + " "
                    + "FROM tblqbillhd a,tblitemmaster e,tblsubgrouphd f,tblgrouphd g,tblqbillmodifierdtl h "
                    + "WHERE a.strBillNo=h.strBillNo  "
                    + "AND e.strSubGroupCode=f.strSubGroupCode  "
                    + "AND f.strGroupCode=g.strGroupCode  "
                    + "and h.dblAmount>0 "
                    + "AND a.strBillNo=h.strBillNo  "
                    + "AND e.strItemCode=LEFT(h.strItemCode,7) "
                    + "AND DATE(a.dteBillDate) BETWEEN '" + fromDate + "' and '" + toDate + "' ");
			if (!strOperationType.equalsIgnoreCase("All")) {
				sbSql.append("and a.strOperationType='" + strOperationType
						+ "' ");
			}
			if (!strPOSCode.equalsIgnoreCase("All")) {
				sbSql.append(" and a.strPOSCode='" + strPOSCode + "' ");
			}
			sbSql.append("GROUP BY DATE(a.dteBillDate),g.strGroupCode,g.strGroupName ");
			querySql = webPOSSessionFactory.getCurrentSession().createSQLQuery(
					sbSql.toString());
			listSql = querySql.list();

			if (listSql.size() > 0) {
				for (int i = 0; i < listSql.size(); i++) {
					Object[] obj = (Object[]) listSql.get(i);
					for (int tblRow = 0; tblRow < jDateArr.length(); tblRow++) {
						JSONArray jRowArr = (JSONArray) map.get(tblRow);
						if (jDateArr.get(tblRow).toString()
								.equalsIgnoreCase(obj[0].toString())) {
							for (int tblCol = 3; tblCol < colCount; tblCol++) {

								if (jColHeaderArr.get(tblCol).toString()
										.equalsIgnoreCase(obj[1].toString()))

								{
									if (0.00 == jRowArr.getDouble(tblCol)) {
										jRowArr.put(tblCol, obj[2].toString());
										map.put(tblRow, jRowArr);
									} else {
										Double value = Double
												.parseDouble(obj[2].toString())
												+ jRowArr.getDouble(tblCol);
										jRowArr.put(tblCol, value);
										map.put(tblRow, jRowArr);
									}
									break;
								}
							}

						} else {
							continue;
						}
					}

				}

			}

			// Settlement Data
			String sqlTransRecords = "select DATE_FORMAT(DATE(a.dteBillDate),'%d-%m-%Y'),'" + strPOSCode + "',c.strSettelmentDesc,sum(b.dblSettlementAmt) "
                    + "from tblqbillhd a,tblqbillsettlementdtl b,tblsettelmenthd c "
                    + "where a.strBillNo=b.strBillNo "
                    + "and b.strSettlementCode=c.strSettelmentCode "
                    + "and date(a.dteBillDate) between '" + fromDate + "' and '" + toDate + "' ";
                
			if (!strOperationType.equalsIgnoreCase("All")) {
				sqlTransRecords += "and a.strOperationType='"
						+ strOperationType + "' ";
			}
			if (!strPOSCode.equalsIgnoreCase("All")) {
				sqlTransRecords = sqlTransRecords + " and a.strPOSCode='"
						+ strPOSCode + "' ";
			}
			if (!strSettlementCode.equalsIgnoreCase("All")) {
				sqlTransRecords+=" and c.strSettelmentCode='" + strSettlementCode + "' ";
			}
			sqlTransRecords = sqlTransRecords
					+ "group by date(a.dteBillDate),c.strSettelmentDesc "
					+ "order by date(a.dteBillDate),c.strSettelmentDesc; ";
			querySql = webPOSSessionFactory.getCurrentSession().createSQLQuery(
					sqlTransRecords);
			listSql = querySql.list();

			if (listSql.size() > 0) {
				for (int i = 0; i < listSql.size(); i++) {
					Object[] obj = (Object[]) listSql.get(i);
					for (int tblRow = 0; tblRow < jDateArr.length(); tblRow++) {
						JSONArray jRowArr = (JSONArray) map.get(tblRow);
						if (jDateArr.get(tblRow).toString()
								.equalsIgnoreCase(obj[0].toString())) {
							for (int tblCol = 2; tblCol < colCount; tblCol++) {
								if (jColHeaderArr.get(tblCol).toString()
										.equalsIgnoreCase(obj[2].toString()))

								{
									if (0.00 == jRowArr.getDouble(tblCol)) {
										jRowArr.put(tblCol, obj[3].toString());
										map.put(tblRow, jRowArr);
									} else {
										Double value = Double
												.parseDouble(obj[3].toString())
												+ jRowArr.getDouble(tblCol);
										jRowArr.put(tblCol, value);
										map.put(tblRow, jRowArr);
									}
									break;
								}
							}

						} else {
							continue;
						}
					}

				}

			}

			// Tax Data

			sqlTax = "select DATE_FORMAT(DATE(a.dteBillDate),'%d-%m-%Y'),c.strTaxDesc,sum(b.dblTaxAmount) "
                    + "from "
                    + "tblqbillhd a,tblqbilltaxdtl b,tbltaxhd c "
                    + "where a.strBillNo=b.strBillNo "
                    + "and b.strTaxCode=c.strTaxCode "
                    + "and date(a.dteBillDate) between '" + fromDate + "' and '" + toDate + "' ";
			if (!strOperationType.equalsIgnoreCase("All")) {
				sqlTax += "and a.strOperationType='" + strOperationType + "' ";
			}
			if (!strPOSCode.equalsIgnoreCase("All")) {
				sqlTax = sqlTax + " and a.strPOSCode='" + strPOSCode + "' ";
			}
			sqlTax = sqlTax + "group by date(a.dteBillDate),b.strTaxCode "
					+ "order by date(a.dteBillDate),b.strTaxCode; ";

			querySql = webPOSSessionFactory.getCurrentSession().createSQLQuery(
					sqlTax);
			listSql = querySql.list();

			if (listSql.size() > 0) {
				for (int i = 0; i < listSql.size(); i++) {
					Object[] obj = (Object[]) listSql.get(i);
					for (int tblRow = 0; tblRow < jDateArr.length(); tblRow++) {
						JSONArray jRowArr = (JSONArray) map.get(tblRow);
						if (jDateArr.get(tblRow).toString()
								.equalsIgnoreCase(obj[0].toString())) {
							for (int tblCol = 2; tblCol < colCount; tblCol++) {
								if (jColHeaderArr.get(tblCol).toString()
										.equalsIgnoreCase(obj[1].toString()))

								{
									if (0.00 == jRowArr.getDouble(tblCol)) {
										jRowArr.put(tblCol, obj[2].toString());
										map.put(tblRow, jRowArr);
									} else {
										Double value = Double
												.parseDouble(obj[2].toString())
												+ jRowArr.getDouble(tblCol);
										jRowArr.put(tblCol, value);
										map.put(tblRow, jRowArr);
									}
									break;
								}
							}

						} else {
							continue;
						}
					}
				}
			}

			// Live Group Data
			sqlGroups = "select DATE_FORMAT(DATE(a.dteBillDate),'%d-%m-%Y'),g.strGroupName," + columnForSalesAmount + " "
                    + "from tblbillhd a,tblbilldtl b,tblitemmaster e "
                    + ",tblsubgrouphd f ,tblgrouphd g  "
                    + "where a.strBillNo=b.strBillNo "
                    + "and b.strItemCode=e.strItemCode "
                    + "and e.strSubGroupCode=f.strSubGroupCode "
                    + "and f.strGroupCode=g.strGroupCode "
                    + "AND b.dblAmount>0  "
                    + "AND DATE(a.dteBillDate) BETWEEN '" + fromDate + "' and '" + toDate + "' ";
			if (!strOperationType.equalsIgnoreCase("All")) {
				sqlGroups += "and a.strOperationType='" + strOperationType
						+ "' ";
			}
			if (!strPOSCode.equalsIgnoreCase("All")) {
				sqlGroups = sqlGroups + " and a.strPOSCode='" + strPOSCode
						+ "' ";
			}
			sqlGroups = sqlGroups
					+ "GROUP BY DATE(a.dteBillDate),g.strGroupCode,g.strGroupName  ";

			querySql = webPOSSessionFactory.getCurrentSession().createSQLQuery(
					sqlGroups);
			listSql = querySql.list();

			if (listSql.size() > 0) {
				for (int i = 0; i < listSql.size(); i++) {
					Object[] obj = (Object[]) listSql.get(i);
					for (int tblRow = 0; tblRow < jDateArr.length(); tblRow++) {
						JSONArray jRowArr = (JSONArray) map.get(tblRow);
						if (jDateArr.get(tblRow).toString()
								.equalsIgnoreCase(obj[0].toString())) {
							for (int tblCol = 2; tblCol < colCount; tblCol++) {
								if (jColHeaderArr.get(tblCol).toString()
										.equalsIgnoreCase(obj[1].toString()))

								{
									if (0.00 == jRowArr.getDouble(tblCol)) {
										jRowArr.put(tblCol, obj[2].toString());
										map.put(tblRow, jRowArr);
									} else {
										Double value = Double
												.parseDouble(obj[2].toString())
												+ jRowArr.getDouble(tblCol);
										jRowArr.put(tblCol, value);
										map.put(tblRow, jRowArr);
									}
									break;
								}
							}

						} else {
							continue;
						}
					}
				}
			}

			// Live Modifier Group Data
			sqlGroups = "SELECT DATE_FORMAT(DATE(a.dteBillDate),'%d-%m-%Y'),g.strGroupName," + columnForModiSalesAmount + " "
                    + "FROM tblbillhd a,tblitemmaster e,tblsubgrouphd f,tblgrouphd g,tblbillmodifierdtl h "
                    + "WHERE a.strBillNo=h.strBillNo  "
                    + "AND e.strSubGroupCode=f.strSubGroupCode  "
                    + "AND f.strGroupCode=g.strGroupCode  "
                    + "and h.dblAmount>0 "
                    + "AND a.strBillNo=h.strBillNo  "
                    + "AND e.strItemCode=LEFT(h.strItemCode,7) "
                    + "AND DATE(a.dteBillDate) BETWEEN '" + fromDate + "' and '" + toDate + "' ";
			if (!strOperationType.equalsIgnoreCase("All")) {
				sqlGroups += "and a.strOperationType='" + strOperationType
						+ "' ";
			}
			if (!strPOSCode.equalsIgnoreCase("All")) {
				sqlGroups = sqlGroups + " and a.strPOSCode='" + strPOSCode
						+ "' ";
			}
			sqlGroups = sqlGroups
					+ "GROUP BY DATE(a.dteBillDate),g.strGroupCode,g.strGroupName ";

			querySql = webPOSSessionFactory.getCurrentSession().createSQLQuery(
					sqlGroups);
			listSql = querySql.list();

			if (listSql.size() > 0) {
				for (int i = 0; i < listSql.size(); i++) {
					Object[] obj = (Object[]) listSql.get(i);
					for (int tblRow = 0; tblRow < jDateArr.length(); tblRow++) {
						JSONArray jRowArr = (JSONArray) map.get(tblRow);
						if (jDateArr.get(tblRow).toString()
								.equalsIgnoreCase(obj[0].toString())) {
							for (int tblCol = 2; tblCol < colCount; tblCol++) {
								if (jColHeaderArr.get(tblCol).toString()
										.equalsIgnoreCase(obj[1].toString()))

								{
									if (0.00 == jRowArr.getDouble(tblCol)) {
										jRowArr.put(tblCol, obj[2].toString());
										map.put(tblRow, jRowArr);
									} else {
										Double value = Double
												.parseDouble(obj[2].toString())
												+ jRowArr.getDouble(tblCol);
										jRowArr.put(tblCol, value);
										map.put(tblRow, jRowArr);
									}
									break;
								}
							}

						} else {
							continue;
						}
					}
				}
			}

			sqlTransRecords = "select DATE_FORMAT(DATE(a.dteBillDate),'%d-%m-%Y'),'" + strPOSCode + "',c.strSettelmentDesc,sum(b.dblSettlementAmt) "
                    + "from tblbillhd a,tblbillsettlementdtl b,tblsettelmenthd c "
                    + "where a.strBillNo=b.strBillNo "
                    + "and b.strSettlementCode=c.strSettelmentCode "
                    + "and date(a.dteBillDate) between '" + fromDate + "' and '" + toDate + "' ";
			if (!strOperationType.equalsIgnoreCase("All")) {
				sqlTransRecords += "and a.strOperationType='"
						+ strOperationType + "' ";
			}
			if (!strPOSCode.equalsIgnoreCase("All")) {
				sqlTransRecords = sqlTransRecords + " and a.strPOSCode='"
						+ strPOSCode + "' ";
			}
			if (!strSettlementCode.equalsIgnoreCase("All")) {
				sqlTransRecords = sqlTransRecords +" and c.strSettelmentCode='" + strSettlementCode + "' ";
			}
			sqlTransRecords = sqlTransRecords
					+ "group by date(a.dteBillDate),c.strSettelmentDesc "
					+ "order by date(a.dteBillDate),c.strSettelmentDesc; ";

			querySql = webPOSSessionFactory.getCurrentSession().createSQLQuery(
					sqlTransRecords);
			listSql = querySql.list();

			if (listSql.size() > 0) {
				for (int i = 0; i < listSql.size(); i++) {
					Object[] obj = (Object[]) listSql.get(i);
					for (int tblRow = 0; tblRow < jDateArr.length(); tblRow++) {
						JSONArray jRowArr = (JSONArray) map.get(tblRow);
						if (jDateArr.get(tblRow).toString()
								.equalsIgnoreCase(obj[0].toString())) {
							for (int tblCol = 2; tblCol < colCount; tblCol++) {
								if (jColHeaderArr.get(tblCol).toString()
										.equalsIgnoreCase(obj[2].toString()))

								{
									if (0.00 == jRowArr.getDouble(tblCol)) {
										jRowArr.put(tblCol, obj[3].toString());
										map.put(tblRow, jRowArr);
									} else {
										Double value = Double
												.parseDouble(obj[3].toString())
												+ jRowArr.getDouble(tblCol);
										jRowArr.put(tblCol, value);
										map.put(tblRow, jRowArr);
									}
									break;
								}
							}

						} else {
							continue;
						}
					}
				}
			}

			sqlTax = "select DATE_FORMAT(DATE(a.dteBillDate),'%d-%m-%Y'),c.strTaxDesc,sum(b.dblTaxAmount) "
                    + "from "
                    + "tblbillhd a,tblbilltaxdtl b,tbltaxhd c "
                    + "where a.strBillNo=b.strBillNo "
                    + "and b.strTaxCode=c.strTaxCode "
                    + "and date(a.dteBillDate) between '" + fromDate + "' and '" + toDate + "' ";
			if (!strOperationType.equalsIgnoreCase("All")) {
				sqlTax += "and a.strOperationType='" + strOperationType + "' ";
			}
			if (!strPOSCode.equalsIgnoreCase("All")) {
				sqlTax = sqlTax + " and a.strPOSCode='" + strPOSCode + "' ";
			}
			sqlTax = sqlTax + "group by date(a.dteBillDate),b.strTaxCode "
					+ "order by date(a.dteBillDate),b.strTaxCode; ";

			querySql = webPOSSessionFactory.getCurrentSession().createSQLQuery(
					sqlTax);
			listSql = querySql.list();

			if (listSql.size() > 0) {
				for (int i = 0; i < listSql.size(); i++) {
					Object[] obj = (Object[]) listSql.get(i);
					for (int tblRow = 0; tblRow < jDateArr.length(); tblRow++) {
						JSONArray jRowArr = (JSONArray) map.get(tblRow);
						if (jDateArr.get(tblRow).toString()
								.equalsIgnoreCase(obj[0].toString())) {
							for (int tblCol = 2; tblCol < colCount; tblCol++) {

								if (jColHeaderArr.get(tblCol).toString()
										.equalsIgnoreCase(obj[1].toString()))

								{
									if (0.00 == jRowArr.getDouble(tblCol)) {
										jRowArr.put(tblCol, obj[2].toString());
										map.put(tblRow, jRowArr);
									} else {
										Double value = Double
												.parseDouble(obj[2].toString())
												+ jRowArr.getDouble(tblCol);
										jRowArr.put(tblCol, value);
										map.put(tblRow, jRowArr);
									}
									break;
								}
							}

						} else {
							continue;
						}
					}

				}

			}
			jOBjRet.put("Col Header", jColHeaderArr);
			jOBjRet.put("Col Count", colCount);
			jOBjRet.put("Row Count", jDateArr.length());
			for (int tblRow = 0; tblRow < jDateArr.length(); tblRow++) {
				JSONArray jArr = (JSONArray) map.get(tblRow);
				jOBjRet.put("" + tblRow, jArr);
			}

		} catch (Exception ex) {
			ex.printStackTrace();
		}

		return jOBjRet;

	}

	public JSONObject funGetDayWiseSalesSummary2(String withDiscount,
			String fromDate, String toDate, String strOperationType, String strSettlementCode,
			String strPOSCode,String strPOSName) {
	//	clsPOSMasterDao objPOS=new clsPOSMasterDao();
	
		StringBuilder sbSql = new StringBuilder();
		JSONObject jColDataArr = new JSONObject();

		JSONArray jTaxArr = new JSONArray();
		JSONArray jSettleArr = new JSONArray();

		List jColHeaderArr = new ArrayList();
		JSONArray jDateArr = new JSONArray();
		JSONObject jOBjRet = new JSONObject();
		Map map = new HashMap();

		jColHeaderArr.add("DATE");
		jColHeaderArr.add("POS");
		int colCount = 3;
		try {

			// Q Date and POS
			sbSql.setLength(0);
			sbSql.append("select DATE_FORMAT(DATE(a.dteBillDate),'%d-%m-%Y') "
                    + "from tblqbillhd a,tblqbillsettlementdtl b,tblsettelmenthd c "
                    + "where date(a.dteBillDate) between '" + fromDate + "' and '" + toDate + "' "
                    + "and a.strBillNo=b.strBillNo "
                    + "and b.strSettlementCode=c.strSettelmentCode ");
			if (!strOperationType.equalsIgnoreCase("All")) {
				sbSql.append("and a.strOperationType='" + strOperationType
						+ "' ");
			}
			if (!strSettlementCode.equalsIgnoreCase("All")) {
				sbSql.append("and c.strSettelmentCode='" + strSettlementCode + "' ");
			}
			sbSql.append("group by date(a.dteBillDate) "
					+ "order by date(a.dteBillDate); ");
			Query querySql = webPOSSessionFactory.getCurrentSession()
					.createSQLQuery(sbSql.toString());
			List listSql = querySql.list();
			if (listSql.size() > 0) {

				for (int i = 0; i < listSql.size(); i++) {
				

					jDateArr.put( listSql.get(i).toString());

				}

			}

			// Live Bill Date and POS
			sbSql.setLength(0);
			sbSql.append("select DATE_FORMAT(DATE(a.dteBillDate),'%d-%m-%Y') "
                    + "from tblbillhd a,tblbillsettlementdtl b,tblsettelmenthd c "
                    + "where date(a.dteBillDate) between '" + fromDate + "' and '" + toDate + "' "
                    + "and a.strBillNo=b.strBillNo "
                    + "and b.strSettlementCode=c.strSettelmentCode ");
			if (!strOperationType.equalsIgnoreCase("All")) {
				sbSql.append("and a.strOperationType='" + strOperationType
						+ "' ");
			}
			if (!strSettlementCode.equalsIgnoreCase("All")) {
				sbSql.append("and c.strSettelmentCode='" + strSettlementCode + "' ");
			}

			sbSql.append("group by date(a.dteBillDate) "
					+ "order by date(a.dteBillDate); ");
			querySql = webPOSSessionFactory.getCurrentSession().createSQLQuery(
					sbSql.toString());
			listSql = querySql.list();
			if (listSql.size() > 0) {

				for (int i = 0; i < listSql.size(); i++) {
					

					jDateArr.put( listSql.get(i).toString());

				}

			}

			jColDataArr.put("DATE", jDateArr);

			// fill Live settlement whose amt>0
			sbSql.setLength(0);
			sbSql.append("SELECT c.strSettelmentDesc "
                    + "FROM tblbillhd a,tblbillsettlementdtl b,tblsettelmenthd c "
                    + "WHERE a.strBillNo=b.strBillNo  "
                    + "AND b.strSettlementCode=c.strSettelmentCode  "
                    + "and b.dblSettlementAmt>0 "
                    + "and date(a.dteBillDate) between '" + fromDate + "' and '" + toDate + "' ");
			if (!strOperationType.equalsIgnoreCase("All")) {
				sbSql.append("and a.strOperationType='" + strOperationType
						+ "' ");
			}
			if (!strPOSCode.equalsIgnoreCase("All")) {
				sbSql.append(" and a.strPOSCode='" + strPOSCode + "' ");
			}
			if (!strSettlementCode.equalsIgnoreCase("All")) {
				sbSql.append("and c.strSettelmentCode='" + strSettlementCode + "' ");
			}

			sbSql.append("GROUP BY strSettelmentDesc "
					+ "ORDER BY strSettelmentDesc; ");
			querySql = webPOSSessionFactory.getCurrentSession().createSQLQuery(
					sbSql.toString());
			listSql = querySql.list();
			if (listSql.size() > 0) {

				for (int i = 0; i < listSql.size(); i++) {
					Object obj = (Object) listSql.get(i);

					jColHeaderArr.add(obj.toString());
					jSettleArr.put(obj.toString());
					colCount++;
				}
			}

			// fill Q settlement whose amt>0
			sbSql.setLength(0);
			sbSql.append("SELECT c.strSettelmentDesc "
                    + "FROM tblqbillhd a,tblqbillsettlementdtl b,tblsettelmenthd c "
                    + "WHERE a.strBillNo=b.strBillNo  "
                    + "AND b.strSettlementCode=c.strSettelmentCode  "
                    + "and b.dblSettlementAmt>0 "
                    + "and date(a.dteBillDate) between '" + fromDate + "' and '" + toDate + "' ");
			if (!strOperationType.equalsIgnoreCase("All")) {
				sbSql.append("and a.strOperationType='" + strOperationType
						+ "' ");
			}
			if (!strPOSCode.equalsIgnoreCase("All")) {
				sbSql.append(" and a.strPOSCode='" + strPOSCode + "' ");
			}
			if (!strSettlementCode.equalsIgnoreCase("All")) {
				sbSql.append("and c.strSettelmentCode='" + strSettlementCode + "' ");
			}

			sbSql.append("GROUP BY strSettelmentDesc "
					+ "ORDER BY strSettelmentDesc; ");
			querySql = webPOSSessionFactory.getCurrentSession().createSQLQuery(
					sbSql.toString());
			listSql = querySql.list();
			if (listSql.size() > 0) {

				for (int i = 0; i < listSql.size(); i++) {
					Object obj = (Object) listSql.get(i);

					jColHeaderArr.add(obj.toString());
					jSettleArr.put(obj.toString());
					colCount++;
				}
			}
			// Tax Column
			String sqlTax = "select a.strTaxDesc from tbltaxhd a order by a.strTaxCode";
			querySql = webPOSSessionFactory.getCurrentSession().createSQLQuery(
					sqlTax);
			listSql = querySql.list();

			if (listSql.size() > 0) {

				for (int i = 0; i < listSql.size(); i++) {
					Object obj = (Object) listSql.get(i);

					jColHeaderArr.add(obj.toString());
					jTaxArr.put(obj.toString());
					colCount++;
				}
			}

			// Grand Total
			jColHeaderArr.add("GRAND Total");

			String sqlGrandTotal = "SELECT DATE_FORMAT(DATE(a.dteBillDate),'%d-%m-%Y'),sum(b.dblSettlementAmt) "
                    + "FROM tblqbillhd a,tblqbillsettlementdtl b,tblsettelmenthd c "
                    + "WHERE a.strBillNo=b.strBillNo  "
                    + "AND b.strSettlementCode=c.strSettelmentCode  "
                    + "and b.dblSettlementAmt>0 "
                    + "and date(a.dteBillDate) between '" + fromDate + "' and '" + toDate + "' ";
			if (!strOperationType.equalsIgnoreCase("All")) {
				sqlGrandTotal += "and a.strOperationType='" + strOperationType
						+ "' ";
			}
			if (!strPOSCode.equalsIgnoreCase("All")) {
				sqlGrandTotal = sqlGrandTotal + " and a.strPOSCode='"
						+ strPOSCode + "' ";
			}
			if (!strSettlementCode.equalsIgnoreCase("All")) {
				sqlGrandTotal = sqlGrandTotal +"and c.strSettelmentCode='" + strSettlementCode + "' ";
			}
			sqlGrandTotal = sqlGrandTotal + "GROUP BY DATE(a.dteBillDate) "
					+ "ORDER BY DATE(a.dteBillDate); ";

			querySql = webPOSSessionFactory.getCurrentSession().createSQLQuery(
					sqlGrandTotal);
			listSql = querySql.list();
			int size = listSql.size();

			for (int tblRow = 0; tblRow < jDateArr.length(); tblRow++) {
				JSONArray jRowArr = new JSONArray();

				jRowArr.put(jDateArr.get(tblRow));
				jRowArr.put(strPOSName);
				for (int i = 2; i < colCount; i++) {
					jRowArr.put(i, 0.00);
					for (int j = 0; j < size; j++) {
						Object[] obj = (Object[]) listSql.get(j);
						if (jColHeaderArr.get(i).toString()
								.equalsIgnoreCase("GRAND Total")
								&& jRowArr.get(0).toString()
										.equalsIgnoreCase(obj[0].toString()))
							jRowArr.put(i,obj[1].toString());

					}

				}
				map.put(tblRow, jRowArr);
			}

			// Live
			sqlGrandTotal = "SELECT DATE_FORMAT(DATE(a.dteBillDate),'%d-%m-%Y'),sum(b.dblSettlementAmt) "
                    + "FROM tblbillhd a,tblbillsettlementdtl b,tblsettelmenthd c "
                    + "WHERE a.strBillNo=b.strBillNo  "
                    + "AND b.strSettlementCode=c.strSettelmentCode  "
                    + "and b.dblSettlementAmt>0 "
                    + "and date(a.dteBillDate) between '" + fromDate + "' and '" + toDate + "' ";
			if (!strOperationType.equalsIgnoreCase("All")) {
				sqlGrandTotal += "and a.strOperationType='" + strOperationType
						+ "' ";
			}
			if (!strPOSCode.equalsIgnoreCase("All")) {
				sqlGrandTotal = sqlGrandTotal + " and a.strPOSCode='"
						+ strPOSCode + "' ";
			}
			if (!strSettlementCode.equalsIgnoreCase("All")) {
				sqlGrandTotal = sqlGrandTotal +"and c.strSettelmentCode='" + strSettlementCode + "' ";
			}
			sqlGrandTotal = sqlGrandTotal + "GROUP BY DATE(a.dteBillDate) "
					+ "ORDER BY DATE(a.dteBillDate); ";
			querySql = webPOSSessionFactory.getCurrentSession().createSQLQuery(
					sqlGrandTotal);
			listSql = querySql.list();
			size = listSql.size();

			for (int tblRow = 0; tblRow < jDateArr.length(); tblRow++) {

				JSONArray jRowArr = (JSONArray) map.get(tblRow);
				for (int i = 3; i < colCount; i++) {

					for (int j = 0; j < size; j++) {
						Object[] obj = (Object[]) listSql.get(j);
						if (jColHeaderArr.get(i).toString()
								.equalsIgnoreCase("GRAND Total")
								&& jRowArr.get(0).toString()
										.equalsIgnoreCase(obj[0].toString())) {
							Double value = Double
									.parseDouble(obj[1].toString())
									+ jRowArr.getDouble(i);
							jRowArr.put(i, value);

						}

					}

				}
				map.put(tblRow, jRowArr);

			}

			String columnForSalesAmount = "sum(b.dblAmount) ";
			if (withDiscount.equalsIgnoreCase("Y")) {
				columnForSalesAmount = "sum(b.dblAmount) ";
			} else {
				columnForSalesAmount = "sum(b.dblAmount)-sum(b.dblDiscountAmt) ";
			}

			String columnForModiSalesAmount = "SUM(h.dblAmount) ";
			if (withDiscount.equalsIgnoreCase("Y")) {
				columnForModiSalesAmount = "SUM(h.dblAmount) ";
			} else {
				columnForModiSalesAmount = "SUM(h.dblAmount)-sum(h.dblDiscAmt) ";
			}

			// Settlement Q Data
			String sqlTransRecords = "select DATE_FORMAT(DATE(a.dteBillDate),'%d-%m-%Y'),'" + strPOSCode + "',c.strSettelmentDesc,sum(b.dblSettlementAmt) "
                    + "from tblqbillhd a,tblqbillsettlementdtl b,tblsettelmenthd c "
                    + "where a.strBillNo=b.strBillNo "
                    + "and b.strSettlementCode=c.strSettelmentCode "
                    + "and date(a.dteBillDate) between '" + fromDate + "' and '" + toDate + "' ";
			if (!strOperationType.equalsIgnoreCase("All")) {
				sqlTransRecords += "and a.strOperationType='"
						+ strOperationType + "' ";
			}
			if (!strPOSCode.equalsIgnoreCase("All")) {
				sqlTransRecords = sqlTransRecords + " and a.strPOSCode='"
						+ strPOSCode + "' ";
			}
			if (!strSettlementCode.equalsIgnoreCase("All")) {
				sqlTransRecords = sqlTransRecords +"and c.strSettelmentCode='" + strSettlementCode + "' ";
			}

			sqlTransRecords = sqlTransRecords
					+ "group by date(a.dteBillDate),c.strSettelmentDesc "
					+ "order by date(a.dteBillDate),c.strSettelmentDesc; ";
			querySql = webPOSSessionFactory.getCurrentSession().createSQLQuery(
					sqlTransRecords);
			listSql = querySql.list();

			if (listSql.size() > 0) {
				for (int i = 0; i < listSql.size(); i++) {
					Object[] obj = (Object[]) listSql.get(i);
					for (int tblRow = 0; tblRow < jDateArr.length(); tblRow++) {
						JSONArray jRowArr = (JSONArray) map.get(tblRow);
						if (jDateArr.get(tblRow).toString()
								.equalsIgnoreCase(obj[0].toString())) {
							for (int tblCol = 2; tblCol < colCount; tblCol++) {
								if (jColHeaderArr.get(tblCol).toString()
										.equalsIgnoreCase(obj[2].toString()))

								{
									if (0.00 == jRowArr.getDouble(tblCol)) {
										jRowArr.put(tblCol, obj[3].toString());
										map.put(tblRow, jRowArr);
									} else {
										Double value = Double
												.parseDouble(obj[3].toString())
												+ jRowArr.getDouble(tblCol);
										jRowArr.put(tblCol, value);
										map.put(tblRow, jRowArr);
									}
									break;
								}
							}

						} else {
							continue;
						}
					}

				}

			}

			// Tax Data

			sqlTax = "select DATE_FORMAT(DATE(a.dteBillDate),'%d-%m-%Y'),c.strTaxDesc,sum(b.dblTaxAmount) "
                    + "from tblqbillhd a,tblqbilltaxdtl b,tbltaxhd c,tblqbillsettlementdtl d,tblsettelmenthd e  "
                    + "where a.strBillNo=b.strBillNo "
                    + "and b.strTaxCode=c.strTaxCode "
                    + "and a.strBillNo=d.strBillNo "
                    + "and d.strSettlementCode=e.strSettelmentCode "
                    + "and date(a.dteBillDate) between '" + fromDate + "' and '" + toDate + "' ";
			if (!strOperationType.equalsIgnoreCase("All")) {
				sqlTax += "and a.strOperationType='" + strOperationType + "' ";
			}
			if (!strPOSCode.equalsIgnoreCase("All")) {
				sqlTax = sqlTax + " and a.strPOSCode='" + strPOSCode + "' ";
			}
			if (!strSettlementCode.equalsIgnoreCase("All")) {
				sqlTax = sqlTax +"and e.strSettelmentCode='" + strSettlementCode + "' ";
			}

			sqlTax = sqlTax + "group by date(a.dteBillDate),b.strTaxCode "
					+ "order by date(a.dteBillDate),b.strTaxCode; ";

			querySql = webPOSSessionFactory.getCurrentSession().createSQLQuery(
					sqlTax);
			listSql = querySql.list();

			if (listSql.size() > 0) {
				for (int i = 0; i < listSql.size(); i++) {
					Object[] obj = (Object[]) listSql.get(i);
					for (int tblRow = 0; tblRow < jDateArr.length(); tblRow++) {
						JSONArray jRowArr = (JSONArray) map.get(tblRow);
						if (jDateArr.get(tblRow).toString()
								.equalsIgnoreCase(obj[0].toString())) {
							for (int tblCol = 2; tblCol < colCount; tblCol++) {
								if (jColHeaderArr.get(tblCol).toString()
										.equalsIgnoreCase(obj[1].toString()))

								{
									if (0.00 == jRowArr.getDouble(tblCol)) {
										jRowArr.put(tblCol, obj[2].toString());
										map.put(tblRow, jRowArr);
									} else {
										Double value = Double
												.parseDouble(obj[2].toString())
												+ jRowArr.getDouble(tblCol);
										jRowArr.put(tblCol, value);
										map.put(tblRow, jRowArr);
									}
									break;
								}
							}

						} else {
							continue;
						}
					}
				}
			}

			sqlTransRecords = "select DATE_FORMAT(DATE(a.dteBillDate),'%d-%m-%Y'),'" + strPOSCode + "',c.strSettelmentDesc,sum(b.dblSettlementAmt) "
                    + "from tblbillhd a,tblbillsettlementdtl b,tblsettelmenthd c "
                    + "where a.strBillNo=b.strBillNo "
                    + "and b.strSettlementCode=c.strSettelmentCode "
                    + "and date(a.dteBillDate) between '" + fromDate + "' and '" + toDate + "' ";
			if (!strOperationType.equalsIgnoreCase("All")) {
				sqlTransRecords += "and a.strOperationType='"
						+ strOperationType + "' ";
			}
			if (!strPOSCode.equalsIgnoreCase("All")) {
				sqlTransRecords = sqlTransRecords + " and a.strPOSCode='"
						+ strPOSCode + "' ";
			}
			if (!strSettlementCode.equalsIgnoreCase("All")) {
				sqlTransRecords = sqlTransRecords +"and c.strSettelmentCode='" + strSettlementCode + "' ";
			}
			sqlTransRecords = sqlTransRecords
					+ "group by date(a.dteBillDate),c.strSettelmentDesc "
					+ "order by date(a.dteBillDate),c.strSettelmentDesc; ";

			querySql = webPOSSessionFactory.getCurrentSession().createSQLQuery(
					sqlTransRecords);
			listSql = querySql.list();

			if (listSql.size() > 0) {
				for (int i = 0; i < listSql.size(); i++) {
					Object[] obj = (Object[]) listSql.get(i);
					for (int tblRow = 0; tblRow < jDateArr.length(); tblRow++) {
						JSONArray jRowArr = (JSONArray) map.get(tblRow);
						if (jDateArr.get(tblRow).toString()
								.equalsIgnoreCase(obj[0].toString())) {
							for (int tblCol = 2; tblCol < colCount; tblCol++) {
								if (jColHeaderArr.get(tblCol).toString()
										.equalsIgnoreCase(obj[2].toString()))

								{
									if (0.00 == jRowArr.getDouble(tblCol)) {
										jRowArr.put(tblCol, obj[3].toString());
										map.put(tblRow, jRowArr);
									} else {
										Double value = Double
												.parseDouble(obj[3].toString())
												+ jRowArr.getDouble(tblCol);
										jRowArr.put(tblCol, value);
										map.put(tblRow, jRowArr);
									}
									break;
								}
							}

						} else {
							continue;
						}
					}
				}
			}

			sqlTax = "select DATE_FORMAT(DATE(a.dteBillDate),'%d-%m-%Y'),c.strTaxDesc,sum(b.dblTaxAmount) "
                    + "from "
                    + "tblbillhd a,tblbilltaxdtl b,tbltaxhd c,tblbillsettlementdtl d,tblsettelmenthd e   "
                    + "where a.strBillNo=b.strBillNo "
                    + "and b.strTaxCode=c.strTaxCode "
                    + "and a.strBillNo=d.strBillNo "
                    + "and d.strSettlementCode=e.strSettelmentCode "
                    + "and date(a.dteBillDate) between '" + fromDate + "' and '" + toDate + "' ";
			if (!strOperationType.equalsIgnoreCase("All")) {
				sqlTax += "and a.strOperationType='" + strOperationType + "' ";
			}
			if (!strPOSCode.equalsIgnoreCase("All")) {
				sqlTax = sqlTax + " and a.strPOSCode='" + strPOSCode + "' ";
			}
			if (!strSettlementCode.equalsIgnoreCase("All")) {
				sqlTax = sqlTax + "and e.strSettelmentCode='" + strSettlementCode + "' ";
			}
			sqlTax = sqlTax + "group by date(a.dteBillDate),b.strTaxCode "
					+ "order by date(a.dteBillDate),b.strTaxCode; ";

			querySql = webPOSSessionFactory.getCurrentSession().createSQLQuery(
					sqlTax);
			listSql = querySql.list();

			if (listSql.size() > 0) {
				for (int i = 0; i < listSql.size(); i++) {
					Object[] obj = (Object[]) listSql.get(i);
					for (int tblRow = 0; tblRow < jDateArr.length(); tblRow++) {
						JSONArray jRowArr = (JSONArray) map.get(tblRow);
						if (jDateArr.get(tblRow).toString()
								.equalsIgnoreCase(obj[0].toString())) {
							for (int tblCol = 2; tblCol < colCount; tblCol++) {

								if (jColHeaderArr.get(tblCol).toString()
										.equalsIgnoreCase(obj[1].toString()))

								{
									if (0.00 == jRowArr.getDouble(tblCol)) {
										jRowArr.put(tblCol, obj[2].toString());
										map.put(tblRow, jRowArr);
									} else {
										Double value = Double
												.parseDouble(obj[2].toString())
												+ jRowArr.getDouble(tblCol);
										jRowArr.put(tblCol, value);
										map.put(tblRow, jRowArr);
									}
									break;
								}
							}

						} else {
							continue;
						}
					}

				}

			}
			jOBjRet.put("Col Header", jColHeaderArr);
			jOBjRet.put("Col Count", colCount);
			jOBjRet.put("Row Count", jDateArr.length());
			for (int tblRow = 0; tblRow < jDateArr.length(); tblRow++) {
				JSONArray jArr = (JSONArray) map.get(tblRow);
				jOBjRet.put("" + tblRow, jArr);
			}

		} catch (Exception ex) {
			ex.printStackTrace();
		}

		return jOBjRet;

	}


	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

	
/////---------	
	
	
	public JSONObject funRevenueHeadWiseItemSalesReportDtl(String fromDate,
			String toDate, String strPOSCode, String strShiftNo,
			String revenueHead, String reportType, String strUserCode) {
		List listRet = new ArrayList();
		StringBuilder sbSqlLive = new StringBuilder();
		StringBuilder sbSqlQFile = new StringBuilder();
		StringBuilder sbSqlFilters = new StringBuilder();
		StringBuilder sbSqlModFilters = new StringBuilder();
		StringBuilder sbSqlModLive = new StringBuilder();
		StringBuilder sbSqlQModFile = new StringBuilder();
		JSONArray jArr = new JSONArray();
		JSONObject jOBjRet = new JSONObject();

		sbSqlLive.setLength(0);
		sbSqlQFile.setLength(0);
		sbSqlFilters.setLength(0);
		sbSqlModFilters.setLength(0);
		sbSqlModLive.setLength(0);
		sbSqlQModFile.setLength(0);

		try {
			sbSqlQFile
					.append("select e.strRevenueHead,d.strMenuName,a.strItemName, SUM(a.dblQuantity), SUM(a.dblAmount),a.strItemCode "
		                    + "from tblqbilldtl a,tblqbillhd b ,tblmenuitempricingdtl c,tblmenuhd d,tblitemmaster e "
		                    + "where a.strBillNo=b.strBillNo  "
		                    + "and a.strItemCode=c.strItemCode "
		                    + "and c.strMenuCode=d.strMenuCode "
		                    + "and a.strItemCode=e.strItemCode "
		                    + "and c.strPosCode=if(c.strPosCode='All','All',b.strPOSCode) "
		                    + "AND (b.strAreaCode=c.strAreaCode or c.strAreaCode='A001') ");
			sbSqlLive
					.append("select e.strRevenueHead,d.strMenuName,a.strItemName, SUM(a.dblQuantity), SUM(a.dblAmount),a.strItemCode "
		                    + "from tblbilldtl a,tblbillhd b ,tblmenuitempricingdtl c,tblmenuhd d,tblitemmaster e "
		                    + "where a.strBillNo=b.strBillNo  "
		                    + "and a.strItemCode=c.strItemCode "
		                    + "and c.strMenuCode=d.strMenuCode "
		                    + "and a.strItemCode=e.strItemCode "
		                    + "and c.strPosCode=if(c.strPosCode='All','All',b.strPOSCode) "
		                    + "AND (b.strAreaCode=c.strAreaCode or c.strAreaCode='A001') ");
			
			sbSqlFilters.append(" AND date(a.dteBillDate) BETWEEN '" + fromDate + "' AND '" + toDate + "' ");
			if (!strPOSCode.equalsIgnoreCase("All")) {
				sbSqlFilters.append("and b.strPosCode='" + strPOSCode + "' ");

			}
			if (!revenueHead.equalsIgnoreCase("All")) {
				sbSqlFilters.append(" and e.strRevenueHead='" + revenueHead
						+ "' ");

			}

			// if (clsGlobalVarClass.gEnableShiftYN)
			// {
			// if (clsGlobalVarClass.gEnableShiftYN &&
			// (!strShiftNo.equalsIgnoreCase("All")))
			// {
			sbSqlFilters.append(" and b.intShiftCode = '" + strShiftNo + "' ");
			// }
			// }

			if (reportType.equalsIgnoreCase("Summary")) {
				sbSqlFilters.append(" group by e.strRevenueHead,d.strMenuCode "
						+ " order by e.strRevenueHead,d.strMenuCode ");
			}

			if (reportType.equalsIgnoreCase("Details")) {
				sbSqlFilters
						.append(" group by e.strRevenueHead,d.strMenuCode,a.strItemName"
								+ " order by e.strRevenueHead,d.strMenuCode,a.strItemName");
			}

			sbSqlModLive
					.append("SELECT e.strRevenueHead,d.strMenuName,a.strModifierName, SUM(a.dblQuantity), SUM(a.dblAmount),a.strItemCode "
		                    + "FROM tblbillmodifierdtl a,tblbillhd b,tblmenuitempricingdtl c,tblmenuhd d,tblitemmaster e "
		                    + "WHERE a.strBillNo=b.strBillNo  "
		                    + "AND left(a.strItemCode,7)=c.strItemCode  "
		                    + "AND c.strMenuCode=d.strMenuCode  "
		                    + "AND left(a.strItemCode,7)=e.strItemCode  "
		                    + "AND c.strPosCode= IF(c.strPosCode='All','All',b.strPOSCode)  "
		                    + "AND (b.strAreaCode=c.strAreaCode or c.strAreaCode='A001')  "
		                    + "AND DATE(b.dteBillDate)  BETWEEN '" + fromDate + "' AND '" + toDate + "' ");

			sbSqlQModFile
					.append("SELECT e.strRevenueHead,d.strMenuName,a.strModifierName, SUM(a.dblQuantity), SUM(a.dblAmount),a.strItemCode "
							+ "FROM tblqbillmodifierdtl a,tblqbillhd b,tblmenuitempricingdtl c,tblmenuhd d,tblitemmaster e "
							+ "WHERE a.strBillNo=b.strBillNo  "
							+ "AND left(a.strItemCode,7)=c.strItemCode  "
							+ "AND c.strMenuCode=d.strMenuCode  "
							+ "AND left(a.strItemCode,7)=e.strItemCode  "
							+ "AND c.strPosCode= IF(c.strPosCode='All','All',b.strPOSCode)  "
							+ "AND (b.strAreaCode=c.strAreaCode or c.strAreaCode='A001')  "
							+ "AND DATE(b.dteBillDate)  BETWEEN '"
							+ fromDate
							+ "' AND '" + toDate + "' ");
			

			if (!strPOSCode.equalsIgnoreCase("All")) {
				sbSqlModFilters.append("and b.strPosCode='" + strPOSCode + "' ");

			}
			if (!revenueHead.equalsIgnoreCase("All")) {
				sbSqlModFilters.append(" and e.strRevenueHead='" + revenueHead
						+ "' ");

			}

			// if (clsGlobalVarClass.gEnableShiftYN)
			// {
			// if (clsGlobalVarClass.gEnableShiftYN &&
			// (!strShiftNo.equalsIgnoreCase("All")))
			// {
			sbSqlModFilters.append(" and b.intShiftCode = '" + strShiftNo + "' ");
			// }
			// }

			if (reportType.equalsIgnoreCase("Summary")) {
				sbSqlModFilters.append("GROUP BY e.strRevenueHead,d.strMenuCode "
                        + "ORDER BY e.strRevenueHead,d.strMenuCode ");
			}

			if (reportType.equalsIgnoreCase("Details")) {
				sbSqlModFilters
						.append("GROUP BY e.strRevenueHead,d.strMenuCode,a.strModifierName "
		                        + "ORDER BY e.strRevenueHead,d.strMenuCode,a.strModifierName ");
			}

			sbSqlLive.append(sbSqlFilters);
			sbSqlQFile.append(sbSqlFilters);
			sbSqlModLive.append(sbSqlModFilters);
			sbSqlQModFile.append(sbSqlModFilters);

			Query querySqlLive = webPOSSessionFactory.getCurrentSession()
					.createSQLQuery(sbSqlLive.toString());
			List listSqlLive = querySqlLive.list();
			if (listSqlLive.size() > 0) {

				for (int i = 0; i < listSqlLive.size(); i++) {
					Object[] obj = (Object[]) listSqlLive.get(i);
					JSONObject jObj = new JSONObject();
					jObj.put("strRevenueHead", obj[0].toString());
					jObj.put("strMenuName", obj[1].toString());
					jObj.put("strItemName", obj[2].toString());
					jObj.put("dblQuantity", obj[3].toString());
					jObj.put("dblAmount", obj[4].toString());
					jObj.put("strItemCode", obj[5].toString());

					jArr.put(jObj);
				}
				// jOBjRet.put("jArr", jArr);
			}
			// listRet.add(listSqlLive);

			Query queryQFile = webPOSSessionFactory.getCurrentSession()
					.createSQLQuery(sbSqlQFile.toString());
			List listSqlQFile = queryQFile.list();
			if (listSqlQFile.size() > 0) {

				for (int i = 0; i < listSqlQFile.size(); i++) {
					Object[] obj = (Object[]) listSqlQFile.get(i);
					JSONObject jObj = new JSONObject();
					jObj.put("strRevenueHead", obj[0].toString());
					jObj.put("strMenuName", obj[1].toString());
					jObj.put("strItemName", obj[2].toString());
					jObj.put("dblQuantity", obj[3].toString());
					jObj.put("dblAmount", obj[4].toString());
					jObj.put("strItemCode", obj[5].toString());

					jArr.put(jObj);
				}
				// jOBjRet.put("jArr", jArr);
			}
			// listRet.add(listSqlQFile);

			Query querySqlModLive = webPOSSessionFactory.getCurrentSession()
					.createSQLQuery(sbSqlModLive.toString());
			List listSqlModLive = querySqlModLive.list();
			if (listSqlModLive.size() > 0) {

				for (int i = 0; i < listSqlModLive.size(); i++) {
					Object[] obj = (Object[]) listSqlModLive.get(i);
					JSONObject jObj = new JSONObject();
					jObj.put("strRevenueHead", obj[0].toString());
					jObj.put("strMenuName", obj[1].toString());
					jObj.put("strItemName", obj[2].toString());
					jObj.put("dblQuantity", obj[3].toString());
					jObj.put("dblAmount", obj[4].toString());
					jObj.put("strItemCode", obj[5].toString());

					jArr.put(jObj);
				}
				// jOBjRet.put("jArr", jArr);
			}
			// listRet.add(listSqlModLive);

			Query querySqlModQFile = webPOSSessionFactory.getCurrentSession()
					.createSQLQuery(sbSqlQModFile.toString());
			List listSqlModQFile = querySqlModQFile.list();
			if (listSqlModQFile.size() > 0) {

				for (int i = 0; i < listSqlModQFile.size(); i++) {
					Object[] obj = (Object[]) listSqlModQFile.get(i);
					JSONObject jObj = new JSONObject();
					jObj.put("strRevenueHead", obj[0].toString());
					jObj.put("strMenuName", obj[1].toString());
					jObj.put("strItemName", obj[2].toString());
					jObj.put("dblQuantity", obj[3].toString());
					jObj.put("dblAmount", obj[4].toString());
					jObj.put("strItemCode", obj[5].toString());

					jArr.put(jObj);
				}
				// jOBjRet.put("jArr", jArr);
			}

			// listRet.add(listSqlModQFile);
			jOBjRet.put("jArr", jArr);
		} catch (Exception ex) {
			ex.printStackTrace();
		}

		return jOBjRet;

	}


	public JSONObject funVoidBillReportDtl(String fromDate, String toDate,
			String strPOSCode, String strShiftNo, String strUserCode,
			String reportType) {
		List listRet = new ArrayList();

		JSONArray jArr = new JSONArray();
		JSONObject jOBjRet = new JSONObject();

		String sql = "";

		try {

			if (reportType.equalsIgnoreCase("Summary")) {
				sql = " select a.strBillNo,Date(a.dteBillDate) as BillDate,Date(a.dteModifyVoidBill) as VoidedDate, "
						+ " Time(a.dteBillDate) As EntryTime,Time(a.dteModifyVoidBill) VoidedTime, "
						+ " a.dblModifiedAmount as BillAmount,a.strReasonName as Reason,a.strUserEdited as UserEdited"
						+ " , a.strUserCreated,a.strRemark "
						+ " from tblvoidbillhd a,tblvoidbilldtl b "
						+ " where a.strBillNo=b.strBillNo and b.strTransType='VB' and a.strTransType='VB' "
						+ " and Date(a.dteModifyVoidBill) BETWEEN  '"
						+ fromDate + "' and '" + toDate + "' ";
				if (!strPOSCode.equalsIgnoreCase("All")) {
					sql += " AND a.strPOSCode = '" + strPOSCode + "' ";

				}

				sql += " and a.intShiftCode = '" + strShiftNo + "' ";

				sql += " group by a.strBillNo"
						+ " union "
						+ " select a.strBillNo,Date(a.dteBillDate) as BillDate,Date(a.dteModifyVoidBill) as VoidedDate"
						+ " ,Time(a.dteBillDate) As EntryTime,Time(a.dteModifyVoidBill) VoidedTime"
						+ " ,b.dblAmount as BillAmount,a.strReasonName as Reason,a.strUserEdited as UserEdited"
						+ " ,a.strUserCreated,b.strRemarks"
						+ " from tblvoidbillhd a, tblvoidmodifierdtl b "
						+ " where a.strBillNo=b.strBillNo and a.strTransType='VB' "
						+ " and Date(a.dteModifyVoidBill) BETWEEN  '"
						+ fromDate + "' and '" + toDate + "' ";

				if (!strPOSCode.equalsIgnoreCase("All")) {
					sql += " AND a.strPOSCode = '" + strPOSCode + "' ";

				}

				sql += " and a.intShiftCode = '" + strShiftNo + "' ";
				sql += " group by a.strBillNo";

				Query querySqlLive = webPOSSessionFactory.getCurrentSession()
						.createSQLQuery(sql);
				List listSqlLive = querySqlLive.list();
				if (listSqlLive.size() > 0) {

					for (int i = 0; i < listSqlLive.size(); i++) {
						Object[] obj = (Object[]) listSqlLive.get(i);
						JSONObject jObj = new JSONObject();
						jObj.put("strBillNo", obj[0].toString());
						jObj.put("dteBillDate", obj[1].toString());
						jObj.put("VoidedDate", obj[2].toString());
						jObj.put("EntryTime", obj[3].toString());
						jObj.put("VoidedTime", obj[4].toString());
						jObj.put("dblAmount", obj[5].toString());
						jObj.put("Reason", obj[6].toString());
						jObj.put("UserEdited", obj[7].toString());
						jObj.put("UserCreated", obj[8].toString());
						jObj.put("Remark", obj[9].toString());

						jArr.put(jObj);
					}
					// jOBjRet.put("jArr", jArr);
				}

			}

			// listRet.add(listSqlLive);
			else {
				sql = " select a.strBillNo,Date(a.dteBillDate) as BillDate,Date(a.dteModifyVoidBill) as VoidedDate, "
						+ " Time(a.dteBillDate) As EntryTime,Time(a.dteModifyVoidBill) VoidedTime,b.strItemName, "
						+ " sum(b.intQuantity),sum(b.dblAmount) as BillAmount,b.strReasonName, "
						+ " a.strUserEdited , a.strUserCreated,b.strRemarks "
						+ " from tblvoidbillhd a,tblvoidbilldtl b"
						+ " where a.strBillNo=b.strBillNo and b.strTransType='VB' and a.strTransType='VB'  "
						+ " and Date(a.dteModifyVoidBill) Between '"
						+ fromDate
						+ "' and '" + toDate + "' ";
				if (!strPOSCode.equalsIgnoreCase("All")) {
					sql += " AND a.strPOSCode = '" + strPOSCode + "' ";

				}

				sql += " and a.intShiftCode = '" + strShiftNo + "' ";

				sql += " group by a.strBillNo,b.strItemCode";

				Query querySqlLive = webPOSSessionFactory.getCurrentSession()
						.createSQLQuery(sql);
				List listSqlLive = querySqlLive.list();
				if (listSqlLive.size() > 0) {

					for (int i = 0; i < listSqlLive.size(); i++) {
						Object[] obj = (Object[]) listSqlLive.get(i);
						JSONObject jObj = new JSONObject();
						jObj.put("strBillNo", obj[0].toString());
						jObj.put("dteBillDate", obj[1].toString());
						jObj.put("VoidedDate", obj[2].toString());
						jObj.put("EntryTime", obj[3].toString());
						jObj.put("VoidedTime", obj[4].toString());
						jObj.put("ItemName", obj[5].toString());
						jObj.put("intQuantity", obj[6].toString());
						jObj.put("dblAmount", obj[7].toString());
						jObj.put("Reason", obj[8].toString());
						jObj.put("UserEdited", obj[9].toString());
						jObj.put("UserCreated", obj[10].toString());
						jObj.put("Remark", obj[11].toString());

						jArr.put(jObj);
					}

				}
				// Modifier Data

				String modSql = " select a.strBillNo,Date(a.dteBillDate) as BillDate,Date(a.dteModifyVoidBill) as VoidedDate, "
						+ " Time(a.dteBillDate) As EntryTime,Time(a.dteModifyVoidBill) VoidedTime,b.strModifierName, "
						+ " sum(b.dblQuantity),sum(b.dblAmount) as BillAmount,ifnull(c.strReasonName,'NA') as Reason, "
						+ " a.strUserEdited , a.strUserCreated,b.strRemarks "
						+ " from tblvoidbillhd a,tblvoidmodifierdtl b "
						+ " left outer join tblreasonmaster c on b.strReasonCode=c.strReasonCode "
						+ " where a.strBillNo=b.strBillNo "
						+ " and a.strTransType='VB' "
						+ " and Date(a.dteModifyVoidBill) Between '"
						+ fromDate
						+ "' and '" + toDate + "' ";
				if (!strPOSCode.equalsIgnoreCase("All")) {
					modSql += " AND a.strPOSCode = '" + strPOSCode + "' ";

				}

				modSql += " and a.intShiftCode = '" + strShiftNo + "' ";

				modSql += " group by a.strBillNo,b.strItemCode";

				querySqlLive = webPOSSessionFactory.getCurrentSession()
						.createSQLQuery(modSql);
				listSqlLive = querySqlLive.list();
				if (listSqlLive.size() > 0) {

					for (int i = 0; i < listSqlLive.size(); i++) {
						Object[] obj = (Object[]) listSqlLive.get(i);
						JSONObject jObj = new JSONObject();
						jObj.put("strBillNo", obj[0].toString());
						jObj.put("dteBillDate", obj[1].toString());
						jObj.put("VoidedDate", obj[2].toString());
						jObj.put("EntryTime", obj[3].toString());
						jObj.put("VoidedTime", obj[4].toString());
						jObj.put("ItemName", obj[5].toString());
						jObj.put("intQuantity", obj[6].toString());
						jObj.put("dblAmount", obj[7].toString());
						jObj.put("Reason", obj[8].toString());
						jObj.put("UserEdited", obj[9].toString());
						jObj.put("UserCreated", obj[10].toString());
						jObj.put("Remark", obj[11].toString());

						jArr.put(jObj);
					}
					// jOBjRet.put("jArr", jArr);
				}
			}

			// listRet.add(listSqlModQFile);
			jOBjRet.put("jArr", jArr);
		} catch (Exception ex) {
			ex.printStackTrace();
		}

		return jOBjRet;

	}
	

	public JSONObject funGetAllPhysicalStockFlash(String fromDate,
			String toDate, String strPOSCode) {

		StringBuilder sbSql = new StringBuilder();

		// JSONArray jColHeaderArr =new JSONArray();
		// JSONArray jColPSPArr =new JSONArray();
		// JSONArray jColDateArr =new JSONArray();
		// JSONArray jColCompStkArr =new JSONArray();
		// JSONArray jColPhyStkArr =new JSONArray();
		// JSONArray jColVarArr =new JSONArray();
		JSONArray jArr = new JSONArray();
		JSONObject jOBjRet = new JSONObject();
		Map map = new HashMap();

		int colCount = 5;
		try {

			// Q Settlement Data
			String sqlPhyStk = "select a.strPSPCode,DATE_FORMAT(a.dteDateCreated,'%d-%m-%Y') as dtePhyStkDate,"
					+ " sum(b.dblCompStk),sum(b.dblPhyStk),sum(b.dblVariance),sum(b.dblVairanceAmt)"
					+ " from  tblpsphd a ,tblpspdtl b where a.strPSPCode=b.strPSPCode  "
					+ " and date(a.dteDateCreated) between '"
					+ fromDate
					+ "' and '" + toDate + "' ";

			if (!strPOSCode.equalsIgnoreCase("All")) {
				sqlPhyStk = sqlPhyStk + " and a.strPOSCode='" + strPOSCode
						+ "' ";
			}
			sqlPhyStk = sqlPhyStk
					+ " group by a.strPSPCode  order by a.strPSPCode";
			Query querySql = webPOSSessionFactory.getCurrentSession()
					.createSQLQuery(sqlPhyStk);
			List listSql = querySql.list();

			if (listSql.size() > 0) {

				for (int i = 0; i < listSql.size(); i++) {
					Object[] obj = (Object[]) listSql.get(i);
					JSONObject jObj = new JSONObject();
					jObj.put("PSPCode", obj[0].toString());
					jObj.put("Date", obj[1].toString());
					jObj.put("CompStk", obj[2].toString());
					jObj.put("PhyStk", obj[3].toString());
					jObj.put("Variance", obj[4].toString());

					jArr.put(jObj);
				}
				jOBjRet.put("jArr", jArr);
			}

		} catch (Exception ex) {
			ex.printStackTrace();
		}

		return jOBjRet;

	}

	public JSONObject funGetPhysicalStockFlash(String strPSPCode) {

		StringBuilder sbSql = new StringBuilder();

		JSONArray jArr = new JSONArray();
		JSONObject jOBjRet = new JSONObject();
		Map map = new HashMap();
		int colCount = 5;
		try {

			// Q Settlement Data
			String sqlPhyStk = "select a.strPSPCode,b.strItemName,a.strItemCode,a.dblCompStk,a.dblPhyStk,"
					+ " a.dblVariance,a.dblVairanceAmt "
					+ " from  tblPSPdtl a, tblItemMaster b "
					+ " where a.strPSPCode='"
					+ strPSPCode
					+ "' and a.strItemCode=b.strItemCode ";

			Query querySql = webPOSSessionFactory.getCurrentSession()
					.createSQLQuery(sqlPhyStk);
			List listSql = querySql.list();

			if (listSql.size() > 0) {

				for (int i = 0; i < listSql.size(); i++) {
					Object[] obj = (Object[]) listSql.get(i);
					JSONObject jObj = new JSONObject();
					jObj.put("pspCode", obj[0].toString());
					jObj.put("ItemName", obj[1].toString());
					jObj.put("CompStk", obj[3].toString());
					jObj.put("PhyStk", obj[4].toString());

					jObj.put("Variance", obj[5].toString());

					jArr.put(jObj);
				}
				jOBjRet.put("jArr", jArr);
			}

		} catch (Exception ex) {
			ex.printStackTrace();
		}

		return jOBjRet;

	}

	public JSONObject funGetAuditFlash(String fromDate, String toDate,
			String strPOSCode, String userCode, String strReportType,
			String reasonCode, String auditType, String clientCode) {

		StringBuilder sbSql = new StringBuilder();
		JSONArray jArrColHeader = new JSONArray();
		JSONArray jArr = new JSONArray();
		JSONObject jOBjRet = new JSONObject();
		Map map = new HashMap();
		int colCount = 5;
		try {
			switch (auditType) {

			// Modified Bill
			case "Modified Bill":

				if (strReportType.equalsIgnoreCase("Summary")) {

					jArrColHeader.put("Bill No");
					jArrColHeader.put("Bill Date");
					jArrColHeader.put("ModifiedDate");
					jArrColHeader.put("Entry Time");
					jArrColHeader.put("Modify Time");
					jArrColHeader.put("Bill Amt");
					jArrColHeader.put("New Amt");
					jArrColHeader.put("User Created");
					jArrColHeader.put("User Edited");
					jArrColHeader.put("Reason");

					sbSql.append("select a.strBillNo , DATE_FORMAT(Date(a.dteBillDate),'%d-%m-%Y')  ,"
							+ " DATE_FORMAT(Date(a.dteModifyVoidBill),'%d-%m-%Y')  , time(a.dteBillDate)  , "
							+ " time(a.dteModifyVoidBill) ,a.dblActualAmount ,"
							+ " a.dblModifiedAmount ,a.strUserCreated , "
							+ " a.strUserEdited ,ifnull(b.strReasonName,'')  "
							+ " from tblvoidbillhd a left outer join tblreasonmaster b on a.strReasonCode=b.strReasonCode ");
					if (!"All".equalsIgnoreCase(strPOSCode)
							&& !"All".equalsIgnoreCase(userCode)
							&& !"All".equalsIgnoreCase(reasonCode)) {
						sbSql.append(" where a.strTransType='MB' and Date(a.dteModifyVoidBill) between '"
								+ fromDate
								+ "' and '"
								+ toDate
								+ "' and a.strUserCreated='"
								+ userCode
								+ "'"
								+ " and a.strPosCode='"
								+ strPOSCode
								+ "' and a.strreasonCode='"
								+ reasonCode
								+ "' "
								+ "group by a.strBillNo,a.dteModifyVoidBill");
					} else if (!"All".equalsIgnoreCase(strPOSCode)
							&& !"All".equalsIgnoreCase(reasonCode)
							&& "All".equalsIgnoreCase(userCode)) {
						sbSql.append(" where a.strTransType='MB' and Date(a.dteModifyVoidBill) between '"
								+ fromDate
								+ "' and '"
								+ toDate
								+ "' and a.strPosCode='"
								+ strPOSCode
								+ "' and  "
								+ "a.strreasonCode='"
								+ reasonCode
								+ "' group by a.strBillNo,a.dteModifyVoidBill");
					} else if ("All".equalsIgnoreCase(strPOSCode)
							&& !"All".equalsIgnoreCase(userCode)
							&& !"All".equalsIgnoreCase(reasonCode)) {
						sbSql.append(" where a.strTransType='MB' and Date(a.dteModifyVoidBill) between '"
								+ fromDate
								+ "' and '"
								+ toDate
								+ "' and a.strUserCreated='"
								+ userCode
								+ "'  "
								+ "and a.strreasonCode='"
								+ reasonCode
								+ "' "
								+ "group by a.strBillNo,a.dteModifyVoidBill");
					} else if (!"All".equalsIgnoreCase(strPOSCode)
							&& !"All".equalsIgnoreCase(userCode)
							&& "All".equalsIgnoreCase(reasonCode)) {
						sbSql.append(" where a.strTransType='MB' and Date(a.dteModifyVoidBill) between '"
								+ fromDate
								+ "' and '"
								+ toDate
								+ "' and a.strPosCode='"
								+ strPOSCode
								+ "' "
								+ "and a.strUserCreated='"
								+ userCode
								+ "' "
								+ "group by a.strBillNo,a.dteModifyVoidBill");
					} else if ("All".equalsIgnoreCase(strPOSCode)
							&& "All".equalsIgnoreCase(userCode)
							&& !"All".equalsIgnoreCase(reasonCode)) {
						sbSql.append(" where a.strTransType='MB' and Date(a.dteModifyVoidBill) between '"
								+ fromDate
								+ "' and '"
								+ toDate
								+ "' and a.strreasonCode='"
								+ reasonCode
								+ "' "
								+ "group by a.strBillNo,a.dteModifyVoidBill");
					} else if ("All".equalsIgnoreCase(strPOSCode)
							&& !"All".equalsIgnoreCase(userCode)
							&& "All".equalsIgnoreCase(reasonCode)) {
						sbSql.append(" where a.strTransType='MB' and Date(a.dteModifyVoidBill) between '"
								+ fromDate
								+ "' and '"
								+ toDate
								+ "' and a.strUserCreated='"
								+ userCode
								+ "' "
								+ "group by a.strBillNo,a.dteModifyVoidBill");
					} else if (!"All".equalsIgnoreCase(strPOSCode)
							&& "All".equalsIgnoreCase(userCode)
							&& "All".equalsIgnoreCase(reasonCode)) {

						sbSql.append(" where a.strTransType='MB' and Date(a.dteModifyVoidBill) between '"
								+ fromDate
								+ "' and '"
								+ toDate
								+ "' and a.strPosCode='"
								+ strPOSCode
								+ "' "
								+ "group by a.strBillNo,a.dteModifyVoidBill");
					} else {
						sbSql.append(" where a.strTransType='MB' and Date(a.dteModifyVoidBill) between '"
								+ fromDate
								+ "' and '"
								+ toDate
								+ "' group by a.strBillNo,a.dteModifyVoidBill");
					}
					Query querySql = webPOSSessionFactory.getCurrentSession()
							.createSQLQuery(sbSql.toString());
					List listSql = querySql.list();

					if (listSql.size() > 0) {

						for (int i = 0; i < listSql.size(); i++) {
							Object[] obj = (Object[]) listSql.get(i);
							JSONObject jObj = new JSONObject();
							jObj.put("BillNo", obj[0].toString());
							jObj.put("BillDate", obj[1].toString());
							jObj.put("ModifiedDate", obj[2].toString());
							jObj.put("EntryTime", obj[3].toString());
							jObj.put("ModifyTime", obj[4].toString());
							jObj.put("BillAmt", obj[5].toString());
							jObj.put("NetAmt", obj[6].toString());
							jObj.put("UserCreated", obj[7].toString());
							jObj.put("UserEdited", obj[8].toString());
							jObj.put("ReasonName", obj[9].toString());
							jArr.put(jObj);
						}

					}
					jOBjRet.put("jArr", jArr);
					jOBjRet.put("ColHeader", jArrColHeader);
				} else {
					jArrColHeader.put("Bill No");
					jArrColHeader.put("Bill Date");
					jArrColHeader.put("ModifiedDate");
					jArrColHeader.put("Entry Time");
					jArrColHeader.put("Modify Time");
					jArrColHeader.put("Item Name");
					jArrColHeader.put("Qty");
					jArrColHeader.put("Amount");
					jArrColHeader.put("User Created");
					jArrColHeader.put("User Edited");

					jOBjRet.put("ColHeader", jArrColHeader);

					sbSql.append("select a.strBillNo,DATE_FORMAT(date(b.dteBillDate),'%d-%m-%Y') as BillDate,DATE_FORMAT(Date(a.dteModifyVoidBill),'%d-%m-%Y') as ModifiedDate,"
							+ "Time(a.dteBillDate) EntryTime,Time(a.dteModifyVoidBill) ModifiedTime,a.strItemName,a.intQuantity,sum(a.dblAmount) as Amount,"
							+ "b.strUserCreated ,b.strUserEdited "
							+ " from tblvoidbilldtl a, tblvoidbillhd b ");

					if (!"All".equalsIgnoreCase(strPOSCode)
							&& !"All".equalsIgnoreCase(userCode)
							&& !"All".equalsIgnoreCase(reasonCode)) {
						sbSql.append("where a.strBillNo=b.strBillNo and a.strTransType='MB' and Date(a.dteModifyVoidBill) between '"
								+ fromDate
								+ "' and '"
								+ toDate
								+ "' and  a.strPosCode='"
								+ strPOSCode
								+ "' and a.strUserCreated='"
								+ userCode
								+ "' and a.strreasonCode='"
								+ reasonCode
								+ "' "
								+ "group by a.strItemName,a.strBillNo order by a.strBillNo asc");
					} else if ("All".equalsIgnoreCase(strPOSCode)
							&& !"All".equalsIgnoreCase(userCode)
							&& !"All".equalsIgnoreCase(reasonCode)) {
						sbSql.append("where a.strBillNo=b.strBillNo and a.strTransType='MB' and Date(a.dteModifyVoidBill) between '"
								+ fromDate
								+ "' and '"
								+ toDate
								+ "' and  a.strUserCreated='"
								+ userCode
								+ "' and a.strreasonCode='"
								+ reasonCode
								+ "' "
								+ "group by a.strItemName,a.strBillNo order by a.strBillNo asc");
					} else if (!"All".equalsIgnoreCase(strPOSCode)
							&& "All".equalsIgnoreCase(userCode)
							&& !"All".equalsIgnoreCase(reasonCode)) {
						sbSql.append("where a.strBillNo=b.strBillNo and a.strTransType='MB' and Date(a.dteModifyVoidBill) between '"
								+ fromDate
								+ "' and '"
								+ toDate
								+ "' and  a.strPosCode='"
								+ strPOSCode
								+ "' and a.strreasonCode='"
								+ reasonCode
								+ "' "
								+ "group by a.strItemName,a.strBillNo order by a.strBillNo asc");
					} else if (!"All".equalsIgnoreCase(strPOSCode)
							&& !"All".equalsIgnoreCase(userCode)
							&& "All".equalsIgnoreCase(reasonCode)) {
						sbSql.append("where a.strBillNo=b.strBillNo and a.strTransType='MB' "
								+ "and Date(a.dteModifyVoidBill) between '"
								+ fromDate
								+ "' and '"
								+ toDate
								+ "' "
								+ "and  a.strPosCode='"
								+ strPOSCode
								+ "' and a.strUserCreated='"
								+ userCode
								+ "' "
								+ "group by a.strItemName,a.strBillNo order by a.strBillNo asc");
					} else if (!"All".equalsIgnoreCase(strPOSCode)
							&& "All".equalsIgnoreCase(userCode)
							&& "All".equalsIgnoreCase(reasonCode)) {
						sbSql.append("where a.strBillNo=b.strBillNo and a.strTransType='MB' "
								+ "and Date(a.dteModifyVoidBill) between '"
								+ fromDate
								+ "' and '"
								+ toDate
								+ "' "
								+ "and  a.strPosCode='"
								+ strPOSCode
								+ "'  "
								+ "group by a.strItemName,a.strBillNo order by a.strBillNo asc");
					} else if ("All".equalsIgnoreCase(strPOSCode)
							&& !"All".equalsIgnoreCase(userCode)
							&& "All".equalsIgnoreCase(reasonCode)) {
						sbSql.append("where a.strBillNo=b.strBillNo and a.strTransType='MB' "
								+ "and Date(a.dteModifyVoidBill) between '"
								+ fromDate
								+ "' and '"
								+ toDate
								+ "' "
								+ "and  a.strUserCreated='"
								+ userCode
								+ "' "
								+ "group by a.strItemName,a.strBillNo order by a.strBillNo asc");
					} else if ("All".equalsIgnoreCase(strPOSCode)
							&& "All".equalsIgnoreCase(userCode)
							&& !"All".equalsIgnoreCase(reasonCode)) {
						sbSql.append("where a.strBillNo=b.strBillNo and a.strTransType='MB' "
								+ "and Date(a.dteModifyVoidBill) between '"
								+ fromDate
								+ "' and '"
								+ toDate
								+ "' "
								+ "and  a.strreasonCode='"
								+ reasonCode
								+ "' "
								+ "group by a.strItemName,a.strBillNo "
								+ "order by a.strBillNo asc");
					} else {
						sbSql.append("where a.strBillNo=b.strBillNo and a.strTransType='MB' "
								+ "and Date(a.dteModifyVoidBill) between '"
								+ fromDate
								+ "' and '"
								+ toDate
								+ "' "
								+ "group by a.strItemName,a.strBillNo order by a.strBillNo asc");
					}
					Query querySql = webPOSSessionFactory.getCurrentSession()
							.createSQLQuery(sbSql.toString());
					List listSql = querySql.list();

					if (listSql.size() > 0) {

						for (int i = 0; i < listSql.size(); i++) {
							Object[] obj = (Object[]) listSql.get(i);
							JSONObject jObj = new JSONObject();
							jObj.put("BillNo", obj[0].toString());
							jObj.put("BillDate", obj[1].toString());
							jObj.put("ModifiedDate", obj[2].toString());
							jObj.put("EntryTime", obj[3].toString());
							jObj.put("ModifyTime", obj[4].toString());
							jObj.put("ItemName", obj[5].toString());
							jObj.put("Qty", obj[6].toString());
							jObj.put("Amount", obj[7].toString());
							jObj.put("UserCreated", obj[8].toString());
							jObj.put("UserEdited", obj[9].toString());

							jArr.put(jObj);

						}

					}
					jOBjRet.put("jArr", jArr);

				}

				break;

			// Voided Bill
			case "Voided Bill":
				StringBuilder sbSqlMod = new StringBuilder();

				sbSql.setLength(0);
				if (strReportType.equalsIgnoreCase("Summary")) {

					jArrColHeader.put("Bill No");
					jArrColHeader.put("Bill Date");
					jArrColHeader.put("Voided Date");
					jArrColHeader.put("Entry Time");
					jArrColHeader.put("Voided Time");
					jArrColHeader.put("Amt");
					jArrColHeader.put("User Edited");
					jArrColHeader.put("Reason");

					jOBjRet.put("ColHeader", jArrColHeader);

					sbSql.setLength(0);
					sbSql.append("select a.strBillNo,DATE_FORMAT(Date(a.dteBillDate),'%d-%m-%Y') as BillDate,DATE_FORMAT(Date(a.dteModifyVoidBill),'%d-%m-%Y') as VoidedDate,"
							+ "Time(a.dteBillDate) As EntryTime,Time(a.dteModifyVoidBill) VoidedTime, a.dblModifiedAmount,"
							+ "a.strUserEdited , a.strReasonName"
							+ " from tblvoidbillhd a ");
					if (!"All".equalsIgnoreCase(strPOSCode)
							&& !"All".equalsIgnoreCase(userCode)
							&& !"All".equalsIgnoreCase(reasonCode)) {
						sbSql.append(" where a.strTransType='VB' and a.strPosCode='"
								+ strPOSCode
								+ "' and "
								+ "strUserCreated='"
								+ userCode
								+ "' and strreasonCode='"
								+ reasonCode
								+ "' and "
								+ "Date(a.dteModifyVoidBill) between '"
								+ fromDate + "' and '" + toDate + "' ");
					} else if (!"All".equalsIgnoreCase(strPOSCode)
							&& "All".equalsIgnoreCase(userCode)
							&& !"All".equalsIgnoreCase(reasonCode)) {
						sbSql.append(" where a.strTransType='VB' and a.strPosCode='"
								+ strPOSCode
								+ "' and  "
								+ "strreasonCode='"
								+ reasonCode
								+ "' and Date(a.dteModifyVoidBill) between '"
								+ fromDate + "' and '" + toDate + "' ");
					} else if ("All".equalsIgnoreCase(strPOSCode)
							&& !"All".equalsIgnoreCase(userCode)
							&& !"All".equalsIgnoreCase(reasonCode)) {
						sbSql.append(" where a.strTransType='VB' and a.strUserCreated='"
								+ userCode
								+ "' "
								+ "and strreasonCode='"
								+ reasonCode
								+ "' and Date(a.dteModifyVoidBill) "
								+ "between '"
								+ fromDate
								+ "' and '"
								+ toDate
								+ "' ");
					} else if (!"All".equalsIgnoreCase(strPOSCode)
							&& !"All".equalsIgnoreCase(userCode)
							&& "All".equalsIgnoreCase(reasonCode)) {
						sbSql.append(" where a.strTransType='VB' and a.strPosCode='"
								+ strPOSCode
								+ "' "
								+ "and strUserCreated='"
								+ userCode
								+ "'  and Date(a.dteModifyVoidBill) "
								+ "between '"
								+ fromDate
								+ "' and '"
								+ toDate
								+ "' ");
					} else if ("All".equalsIgnoreCase(strPOSCode)
							&& "All".equalsIgnoreCase(userCode)
							&& !"All".equalsIgnoreCase(reasonCode)) {
						sbSql.append(" where a.strTransType='VB' and strreasonCode='"
								+ reasonCode
								+ "' "
								+ "and Date(a.dteModifyVoidBill) between '"
								+ fromDate + "' and '" + toDate + "' ");
					} else if (!"All".equalsIgnoreCase(strPOSCode)
							&& "All".equalsIgnoreCase(userCode)
							&& "All".equalsIgnoreCase(reasonCode)) {
						sbSql.append(" where a.strTransType='VB' and a.strPosCode='"
								+ strPOSCode
								+ "' and "
								+ "Date(a.dteModifyVoidBill) between '"
								+ fromDate + "' and '" + toDate + "' ");
					} else if ("All".equalsIgnoreCase(strPOSCode)
							&& !"All".equalsIgnoreCase(userCode)
							&& "All".equalsIgnoreCase(reasonCode)) {
						sbSql.append(" where a.strTransType='VB' and strUserCreated='"
								+ userCode
								+ "' and "
								+ "Date(a.dteModifyVoidBill) between '"
								+ fromDate + "' and '" + toDate + "' ");
					} else {
						sbSql.append(" where a.strTransType='VB' and Date(a.dteModifyVoidBill) between '"
								+ fromDate + "' and '" + toDate + "' ");
					}

					Query querySql = webPOSSessionFactory.getCurrentSession()
							.createSQLQuery(sbSql.toString());
					List listSql = querySql.list();

					if (listSql.size() > 0) {

						for (int i = 0; i < listSql.size(); i++) {
							Object[] obj = (Object[]) listSql.get(i);
							JSONObject jObj = new JSONObject();
							jObj.put("BillNo", obj[0].toString());
							jObj.put("BillDate", obj[1].toString());
							jObj.put("VoidedDate", obj[2].toString());
							jObj.put("EntryTime", obj[3].toString());
							jObj.put("VoidedTime", obj[4].toString());

							jObj.put("Amount", obj[5].toString());

							jObj.put("UserEdited", obj[6].toString());
							jObj.put("Reason", obj[7].toString());

							jArr.put(jObj);

						}

					}
					jOBjRet.put("jArr", jArr);

				} else {
					jArrColHeader.put("Bill No");
					jArrColHeader.put("Bill Date");
					jArrColHeader.put("Voided Date");
					jArrColHeader.put("Entry Time");
					jArrColHeader.put("Voided Time");
					jArrColHeader.put("Item Name");
					jArrColHeader.put("Qty");
					jArrColHeader.put("Amt");
					jArrColHeader.put("User Edited");
					jArrColHeader.put("Reason");

					jOBjRet.put("ColHeader", jArrColHeader);

					sbSqlMod.setLength(0);
					sbSql.append("select a.strBillNo,DATE_FORMAT(Date(a.dteBillDate),'%d-%m-%Y') as BillDate,DATE_FORMAT(Date(a.dteModifyVoidBill),'%d-%m-%Y') as VoidedDate,"
							+ "Time(a.dteBillDate) As EntryTime,Time(a.dteModifyVoidBill) VoidedTime,b.strItemName,"
							+ "b.intQuantity,b.dblAmount ,a.strReasonName ,a.strUserEdited "
							+ " from tblvoidbillhd a,tblvoidbilldtl b where a.strBillNo=b.strBillNo");

					if (!"All".equalsIgnoreCase(strPOSCode)
							&& !"All".equalsIgnoreCase(userCode)
							&& !"All".equalsIgnoreCase(reasonCode)) {
						sbSql.append(" and b.strTransType='VB' and a.strPosCode='"
								+ strPOSCode
								+ "' "
								+ "and a.strUserCreated='"
								+ userCode
								+ "' and a.strreasonCode='"
								+ reasonCode
								+ "' and Date(a.dteModifyVoidBill) between '"
								+ fromDate + "' and '" + toDate + "'");
					} else if (!"All".equalsIgnoreCase(strPOSCode)
							&& "All".equalsIgnoreCase(userCode)
							&& "All".equalsIgnoreCase(reasonCode)) {
						sbSql.append(" and b.strTransType='VB' and a.strPosCode='"
								+ strPOSCode
								+ "' and "
								+ "Date(a.dteModifyVoidBill) between '"
								+ fromDate + "' and '" + toDate + "'");
					} else if ("All".equalsIgnoreCase(strPOSCode)
							&& !"All".equalsIgnoreCase(userCode)
							&& "All".equalsIgnoreCase(reasonCode)) {
						sbSql.append(" and b.strTransType='VB' and a.strUserCreated='"
								+ userCode
								+ "' "
								+ "and Date(a.dteModifyVoidBill) between '"
								+ fromDate + "' and '" + toDate + "'");
					} else if ("All".equalsIgnoreCase(strPOSCode)
							&& "All".equalsIgnoreCase(userCode)
							&& !"All".equalsIgnoreCase(reasonCode)) {
						sbSql.append(" and b.strTransType='VB' and a.strreasonCode='"
								+ reasonCode
								+ "' "
								+ "and Date(a.dteModifyVoidBill) between '"
								+ fromDate + "' and '" + toDate + "'");
					} else if (!"All".equalsIgnoreCase(strPOSCode)
							&& !"All".equalsIgnoreCase(userCode)
							&& "All".equalsIgnoreCase(reasonCode)) {
						sbSql.append(" and b.strTransType='VB' and a.strPosCode='"
								+ strPOSCode
								+ "' "
								+ "and a.strUserCreated='"
								+ userCode
								+ "' and Date(a.dteModifyVoidBill) "
								+ "between '"
								+ fromDate
								+ "' and '"
								+ toDate
								+ "'");
					} else if (!"All".equalsIgnoreCase(strPOSCode)
							&& "All".equalsIgnoreCase(userCode)
							&& !"All".equalsIgnoreCase(reasonCode)) {
						sbSql.append(" and b.strTransType='VB' and a.strPosCode='"
								+ strPOSCode
								+ "' "
								+ "and a.strreasonCode='"
								+ reasonCode
								+ "' and Date(a.dteModifyVoidBill) "
								+ "between '"
								+ fromDate
								+ "' and '"
								+ toDate
								+ "'");
					} else if ("All".equalsIgnoreCase(strPOSCode)
							&& !"All".equalsIgnoreCase(userCode)
							&& !"All".equalsIgnoreCase(reasonCode)) {
						sbSql.append(" and b.strTransType='VB' and a.strUserCreated='"
								+ userCode
								+ "' "
								+ "and a.strreasonCode='"
								+ reasonCode
								+ "' and Date(a.dteModifyVoidBill)"
								+ " between '"
								+ fromDate
								+ "' and '"
								+ toDate
								+ "'");
					} else {
						sbSql.append(" and b.strTransType='VB' and Date(a.dteModifyVoidBill) "
								+ "between '"
								+ fromDate
								+ "' and '"
								+ toDate
								+ "'");
					}
					sbSql.append(" group by a.strBillNo,b.strItemCode");

					sbSqlMod.append("select a.strBillNo,DATE_FORMAT(Date(a.dteBillDate),'%d-%m-%Y') as BillDate,DATE_FORMAT(Date(a.dteModifyVoidBill),'%d-%m-%Y') as VoidedDate,"
							+ "Time(a.dteBillDate) As EntryTime,Time(a.dteModifyVoidBill) VoidedTime,b.strModifierName,"
							+ "b.dblQuantity,b.dblAmount ,a.strReasonName ,a.strUserEdited "
							+ "from tblvoidbillhd a,tblvoidmodifierdtl b where a.strBillNo=b.strBillNo ");

					if (!"All".equalsIgnoreCase(strPOSCode)
							&& !"All".equalsIgnoreCase(userCode)
							&& !"All".equalsIgnoreCase(reasonCode)) {
						sbSqlMod.append(" and a.strTransType='VB' and b.strPosCode='"
								+ strPOSCode
								+ "' "
								+ "and a.strUserCreated='"
								+ userCode
								+ "' and a.strreasonCode='"
								+ reasonCode
								+ "' and Date(a.dteModifyVoidBill) between '"
								+ fromDate + "' and '" + toDate + "'");
					} else if (!"All".equalsIgnoreCase(strPOSCode)
							&& "All".equalsIgnoreCase(userCode)
							&& "All".equalsIgnoreCase(reasonCode)) {
						sbSqlMod.append(" and a.strTransType='VB' and a.strPosCode='"
								+ strPOSCode
								+ "' and "
								+ "Date(a.dteModifyVoidBill) between '"
								+ fromDate + "' and '" + toDate + "'");
					} else if ("All".equalsIgnoreCase(strPOSCode)
							&& !"All".equalsIgnoreCase(userCode)
							&& "All".equalsIgnoreCase(reasonCode)) {
						sbSqlMod.append(" and a.strTransType='VB' and a.strUserCreated='"
								+ userCode
								+ "' "
								+ "and Date(a.dteModifyVoidBill) between '"
								+ fromDate + "' and '" + toDate + "'");
					} else if ("All".equalsIgnoreCase(strPOSCode)
							&& "All".equalsIgnoreCase(userCode)
							&& !"All".equalsIgnoreCase(reasonCode)) {
						sbSqlMod.append(" and a.strTransType='VB' and a.strreasonCode='"
								+ reasonCode
								+ "' "
								+ "and Date(a.dteModifyVoidBill) between '"
								+ fromDate + "' and '" + toDate + "'");
					} else if (!"All".equalsIgnoreCase(strPOSCode)
							&& !"All".equalsIgnoreCase(userCode)
							&& "All".equalsIgnoreCase(reasonCode)) {
						sbSqlMod.append(" and a.strTransType='VB' and a.strPosCode='"
								+ strPOSCode
								+ "' "
								+ "and a.strUserCreated='"
								+ userCode
								+ "' and Date(a.dteModifyVoidBill) "
								+ "between '"
								+ fromDate
								+ "' and '"
								+ toDate
								+ "'");
					} else if (!"All".equalsIgnoreCase(strPOSCode)
							&& "All".equalsIgnoreCase(userCode)
							&& !"All".equalsIgnoreCase(reasonCode)) {
						sbSqlMod.append(" and a.strTransType='VB' and a.strPosCode='"
								+ strPOSCode
								+ "' "
								+ "and a.strreasonCode='"
								+ reasonCode
								+ "' and Date(a.dteModifyVoidBill) "
								+ "between '"
								+ fromDate
								+ "' and '"
								+ toDate
								+ "'");
					} else if ("All".equalsIgnoreCase(strPOSCode)
							&& !"All".equalsIgnoreCase(userCode)
							&& !"All".equalsIgnoreCase(reasonCode)) {
						sbSqlMod.append(" and a.strTransType='VB' and a.strUserCreated='"
								+ userCode
								+ "' "
								+ "and a.strreasonCode='"
								+ reasonCode
								+ "' and Date(a.dteModifyVoidBill)"
								+ " between '"
								+ fromDate
								+ "' and '"
								+ toDate
								+ "'");
					} else {
						sbSqlMod.append(" and a.strTransType='VB' and Date(a.dteModifyVoidBill) "
								+ "between '"
								+ fromDate
								+ "' and '"
								+ toDate
								+ "'");
					}
					sbSqlMod.append(" group by a.strBillNo,b.strModifierCode");

					String sql = sbSql.toString() + " union "
							+ sbSqlMod.toString();
					Query querySql = webPOSSessionFactory.getCurrentSession()
							.createSQLQuery(sbSql.toString());
					List listSql = querySql.list();

					if (listSql.size() > 0) {

						for (int i = 0; i < listSql.size(); i++) {
							Object[] obj = (Object[]) listSql.get(i);
							JSONObject jObj = new JSONObject();
							jObj.put("BillNo", obj[0].toString());
							jObj.put("BillDate", obj[1].toString());
							jObj.put("VodedDate", obj[2].toString());
							jObj.put("EntryTime", obj[3].toString());
							jObj.put("VoidedTime", obj[4].toString());
							jObj.put("ItemName", obj[5].toString());
							jObj.put("Qty", obj[6].toString());
							jObj.put("Amount", obj[7].toString());
							jObj.put("UserEdited", obj[8].toString());
							jObj.put("Reason", obj[9].toString());

							jArr.put(jObj);

						}

					}
					jOBjRet.put("jArr", jArr);

				}
				break;
			// Voided Adv Order
			case "Voided Advanced Order":

				sbSqlMod = new StringBuilder();

				sbSql.setLength(0);
				if (strReportType.equalsIgnoreCase("Summary")) {
					jArrColHeader.put("Bill No");
					jArrColHeader.put("Bill Date");
					jArrColHeader.put("Voided Date");
					jArrColHeader.put("Entry Time");
					jArrColHeader.put("Voided Time");
					jArrColHeader.put("Amt");
					jArrColHeader.put("User Edited");
					jArrColHeader.put("Reason");

					jOBjRet.put("ColHeader", jArrColHeader);

					sbSql.setLength(0);
					sbSql.append("select a.strBillNo,DATE_FORMAT(Date(a.dteBillDate) ,'%d-%m-%Y')  as BillDate,DATE_FORMAT(Date(a.dteModifyVoidBill) ,'%d-%m-%Y') as VoidedDate,"
							+ "Time(a.dteBillDate) As EntryTime,Time(a.dteModifyVoidBill) VoidedTime, a.dblModifiedAmount,"
							+ "a.strUserEdited , a.strReasonName "
							+ " from tblvoidbillhd a ");
					if (!"All".equalsIgnoreCase(strPOSCode)
							&& !"All".equalsIgnoreCase(userCode)
							&& !"All".equalsIgnoreCase(reasonCode)) {
						sbSql.append(" where a.strTransType='AOVB' and a.strPosCode='"
								+ strPOSCode
								+ "' and "
								+ "strUserCreated='"
								+ userCode
								+ "' and strreasonCode='"
								+ reasonCode
								+ "' and "
								+ "Date(a.dteModifyVoidBill) between '"
								+ fromDate + "' and '" + toDate + "' ");

					} else if (!"All".equalsIgnoreCase(strPOSCode)
							&& "All".equalsIgnoreCase(userCode)
							&& !"All".equalsIgnoreCase(reasonCode)) {
						sbSql.append(" where a.strTransType='AOVB' and a.strPosCode='"
								+ strPOSCode
								+ "' and  "
								+ "strreasonCode='"
								+ reasonCode
								+ "' and Date(a.dteModifyVoidBill) between '"
								+ fromDate + "' and '" + toDate + "' ");

					} else if ("All".equalsIgnoreCase(strPOSCode)
							&& !"All".equalsIgnoreCase(userCode)
							&& !"All".equalsIgnoreCase(reasonCode)) {
						sbSql.append(" where a.strTransType='AOVB' and a.strUserCreated='"
								+ userCode
								+ "' "
								+ "and strreasonCode='"
								+ reasonCode
								+ "' and Date(a.dteModifyVoidBill) "
								+ "between '"
								+ fromDate
								+ "' and '"
								+ toDate
								+ "' ");

					} else if (!"All".equalsIgnoreCase(strPOSCode)
							&& !"All".equalsIgnoreCase(userCode)
							&& "All".equalsIgnoreCase(reasonCode)) {
						sbSql.append(" where a.strTransType='AOVB' and a.strPosCode='"
								+ strPOSCode
								+ "' "
								+ "and strUserCreated='"
								+ userCode
								+ "'  and Date(a.dteModifyVoidBill) "
								+ "between '"
								+ fromDate
								+ "' and '"
								+ toDate
								+ "' ");

					} else if ("All".equalsIgnoreCase(strPOSCode)
							&& "All".equalsIgnoreCase(userCode)
							&& !"All".equalsIgnoreCase(reasonCode)) {
						sbSql.append(" where a.strTransType='AOVB' and strreasonCode='"
								+ reasonCode
								+ "' "
								+ "and Date(a.dteModifyVoidBill) between '"
								+ fromDate + "' and '" + toDate + "' ");

					} else if (!"All".equalsIgnoreCase(strPOSCode)
							&& "All".equalsIgnoreCase(userCode)
							&& "All".equalsIgnoreCase(reasonCode)) {
						sbSql.append(" where a.strTransType='AOVB' and a.strPosCode='"
								+ strPOSCode
								+ "' and "
								+ "Date(a.dteModifyVoidBill) between '"
								+ fromDate + "' and '" + toDate + "' ");

					} else if ("All".equalsIgnoreCase(strPOSCode)
							&& !"All".equalsIgnoreCase(userCode)
							&& "All".equalsIgnoreCase(reasonCode)) {
						sbSql.append(" where a.strTransType='AOVB' and strUserCreated='"
								+ userCode
								+ "' and "
								+ "Date(a.dteModifyVoidBill) between '"
								+ fromDate + "' and '" + toDate + "' ");

					} else {
						sbSql.append(" where a.strTransType='AOVB' and Date(a.dteModifyVoidBill) between '"
								+ fromDate + "' and '" + toDate + "' ");
					}

					Query querySql = webPOSSessionFactory.getCurrentSession()
							.createSQLQuery(sbSql.toString());
					List listSql = querySql.list();

					if (listSql.size() > 0) {

						for (int i = 0; i < listSql.size(); i++) {
							Object[] obj = (Object[]) listSql.get(i);
							JSONObject jObj = new JSONObject();
							jObj.put("BillNo", obj[0].toString());
							jObj.put("BillDate", obj[1].toString());
							jObj.put("VoidedDate", obj[2].toString());
							jObj.put("EntryTime", obj[3].toString());
							jObj.put("VoidedTime", obj[4].toString());

							jObj.put("Amount", obj[5].toString());

							jObj.put("UserEdited", obj[6].toString());
							jObj.put("Reason", obj[7].toString());

							jArr.put(jObj);

						}

					}
					jOBjRet.put("jArr", jArr);

				} else {
					jArrColHeader.put("Bill No");
					jArrColHeader.put("Bill Date");
					jArrColHeader.put("Voided Date");
					jArrColHeader.put("Entry Time");
					jArrColHeader.put("Voided Time");
					jArrColHeader.put("Item Name");
					jArrColHeader.put("Qty");
					jArrColHeader.put("Amt");
					jArrColHeader.put("User Edited");
					jArrColHeader.put("Reason");

					jOBjRet.put("ColHeader", jArrColHeader);

					sbSql.setLength(0);
					sbSql.append("select a.strBillNo,DATE_FORMAT(Date(a.dteBillDate) ,'%d-%m-%Y') as BillDate,DATE_FORMAT(Date(a.dteModifyVoidBill) ,'%d-%m-%Y') as VoidedDate,"
							+ "Time(a.dteBillDate) As EntryTime,Time(a.dteModifyVoidBill) VoidedTime,b.strItemName,"
							+ "b.intQuantity,b.dblAmount ,a.strReasonName,a.strUserEdited "
							+ " from tblvoidbillhd a,tblvoidbilldtl b where a.strBillNo=b.strBillNo");

					if (!"All".equalsIgnoreCase(strPOSCode)
							&& !"All".equalsIgnoreCase(userCode)
							&& !"All".equalsIgnoreCase(reasonCode)) {
						sbSql.append(" and b.strTransType='AOVB' and a.strPosCode='"
								+ strPOSCode
								+ "' "
								+ "and a.strUserCreated='"
								+ userCode
								+ "' and a.strreasonCode='"
								+ reasonCode
								+ "' and Date(a.dteModifyVoidBill) between '"
								+ fromDate + "' and '" + toDate + "'");
					} else if (!"All".equalsIgnoreCase(strPOSCode)
							&& "All".equalsIgnoreCase(userCode)
							&& "All".equalsIgnoreCase(reasonCode)) {
						sbSql.append(" and b.strTransType='AOVB' and a.strPosCode='"
								+ strPOSCode
								+ "' and "
								+ "Date(a.dteModifyVoidBill) between '"
								+ fromDate + "' and '" + toDate + "'");
					} else if ("All".equalsIgnoreCase(strPOSCode)
							&& !"All".equalsIgnoreCase(userCode)
							&& "All".equalsIgnoreCase(reasonCode)) {
						sbSql.append(" and b.strTransType='AOVB' and a.strUserCreated='"
								+ userCode
								+ "' "
								+ "and Date(a.dteModifyVoidBill) between '"
								+ fromDate + "' and '" + toDate + "'");
					} else if ("All".equalsIgnoreCase(strPOSCode)
							&& "All".equalsIgnoreCase(userCode)
							&& !"All".equalsIgnoreCase(reasonCode)) {
						sbSql.append(" and b.strTransType='AOVB' and a.strreasonCode='"
								+ reasonCode
								+ "' "
								+ "and Date(a.dteModifyVoidBill) between '"
								+ fromDate + "' and '" + toDate + "'");
					} else if (!"All".equalsIgnoreCase(strPOSCode)
							&& !"All".equalsIgnoreCase(userCode)
							&& "All".equalsIgnoreCase(reasonCode)) {
						sbSql.append(" and b.strTransType='AOVB' and a.strPosCode='"
								+ strPOSCode
								+ "' "
								+ "and a.strUserCreated='"
								+ userCode
								+ "' and Date(a.dteModifyVoidBill) "
								+ "between '"
								+ fromDate
								+ "' and '"
								+ toDate
								+ "'");
					} else if (!"All".equalsIgnoreCase(strPOSCode)
							&& "All".equalsIgnoreCase(userCode)
							&& !"All".equalsIgnoreCase(reasonCode)) {
						sbSql.append(" and b.strTransType='AOVB' and a.strPosCode='"
								+ strPOSCode
								+ "' "
								+ "and a.strreasonCode='"
								+ reasonCode
								+ "' and Date(a.dteModifyVoidBill) "
								+ "between '"
								+ fromDate
								+ "' and '"
								+ toDate
								+ "'");
					} else if ("All".equalsIgnoreCase(strPOSCode)
							&& !"All".equalsIgnoreCase(userCode)
							&& !"All".equalsIgnoreCase(reasonCode)) {
						sbSql.append(" and b.strTransType='AOVB' and a.strUserCreated='"
								+ userCode
								+ "' "
								+ "and a.strreasonCode='"
								+ reasonCode
								+ "' and Date(a.dteModifyVoidBill)"
								+ " between '"
								+ fromDate
								+ "' and '"
								+ toDate
								+ "'");
					} else {
						sbSql.append(" and b.strTransType='AOVB' and Date(a.dteModifyVoidBill) "
								+ "between '"
								+ fromDate
								+ "' and '"
								+ toDate
								+ "'");
					}
					sbSql.append(" group by a.strBillNo,b.strItemCode");

					sbSqlMod.setLength(0);
					sbSqlMod.append("select a.strBillNo, DATE_FORMAT(Date(a.dteBillDate) ,'%d-%m-%Y') as BillDate,DATE_FORMAT(Date(a.dteModifyVoidBill) ,'%d-%m-%Y')  as VoidedDate,"
							+ "Time(a.dteBillDate) As EntryTime,Time(a.dteModifyVoidBill) VoidedTime,b.strModifierName,"
							+ "b.dblQuantity,b.dblAmount ,a.strReasonName,a.strUserEdited "
							+ "from tblvoidbillhd a,tblvoidmodifierdtl b where a.strBillNo=b.strBillNo ");

					if (!"All".equalsIgnoreCase(strPOSCode)
							&& !"All".equalsIgnoreCase(userCode)
							&& !"All".equalsIgnoreCase(reasonCode)) {
						sbSqlMod.append(" and a.strTransType='AOVB' and b.strPosCode='"
								+ strPOSCode
								+ "' "
								+ "and a.strUserCreated='"
								+ userCode
								+ "' and a.strreasonCode='"
								+ reasonCode
								+ "' and Date(a.dteModifyVoidBill) between '"
								+ fromDate + "' and '" + toDate + "'");
					} else if (!"All".equalsIgnoreCase(strPOSCode)
							&& "All".equalsIgnoreCase(userCode)
							&& "All".equalsIgnoreCase(reasonCode)) {
						sbSqlMod.append(" and a.strTransType='AOVB' and a.strPosCode='"
								+ strPOSCode
								+ "' and "
								+ "Date(a.dteModifyVoidBill) between '"
								+ fromDate + "' and '" + toDate + "'");
					} else if ("All".equalsIgnoreCase(strPOSCode)
							&& !"All".equalsIgnoreCase(userCode)
							&& "All".equalsIgnoreCase(reasonCode)) {
						sbSqlMod.append(" and a.strTransType='AOVB' and a.strUserCreated='"
								+ userCode
								+ "' "
								+ "and Date(a.dteModifyVoidBill) between '"
								+ fromDate + "' and '" + toDate + "'");
					} else if ("All".equalsIgnoreCase(strPOSCode)
							&& "All".equalsIgnoreCase(userCode)
							&& !"All".equalsIgnoreCase(reasonCode)) {
						sbSqlMod.append(" and a.strTransType='AOVB' and a.strreasonCode='"
								+ reasonCode
								+ "' "
								+ "and Date(a.dteModifyVoidBill) between '"
								+ fromDate + "' and '" + toDate + "'");
					} else if (!"All".equalsIgnoreCase(strPOSCode)
							&& !"All".equalsIgnoreCase(userCode)
							&& "All".equalsIgnoreCase(reasonCode)) {
						sbSqlMod.append(" and a.strTransType='AOVB' and a.strPosCode='"
								+ strPOSCode
								+ "' "
								+ "and a.strUserCreated='"
								+ userCode
								+ "' and Date(a.dteModifyVoidBill) "
								+ "between '"
								+ fromDate
								+ "' and '"
								+ toDate
								+ "'");
					} else if (!"All".equalsIgnoreCase(strPOSCode)
							&& "All".equalsIgnoreCase(userCode)
							&& !"All".equalsIgnoreCase(reasonCode)) {
						sbSqlMod.append(" and a.strTransType='AOVB' and a.strPosCode='"
								+ strPOSCode
								+ "' "
								+ "and a.strreasonCode='"
								+ reasonCode
								+ "' and Date(a.dteModifyVoidBill) "
								+ "between '"
								+ fromDate
								+ "' and '"
								+ toDate
								+ "'");
					} else if ("All".equalsIgnoreCase(strPOSCode)
							&& !"All".equalsIgnoreCase(userCode)
							&& !"All".equalsIgnoreCase(reasonCode)) {
						sbSqlMod.append(" and a.strTransType='AOVB' and a.strUserCreated='"
								+ userCode
								+ "' "
								+ "and a.strreasonCode='"
								+ reasonCode
								+ "' and Date(a.dteModifyVoidBill)"
								+ " between '"
								+ fromDate
								+ "' and '"
								+ toDate
								+ "'");
					} else {
						sbSqlMod.append(" and a.strTransType='AOVB' and Date(a.dteModifyVoidBill) "
								+ "between '"
								+ fromDate
								+ "' and '"
								+ toDate
								+ "'");
					}
					sbSqlMod.append(" group by a.strBillNo,b.strModifierCode");

					String sql = sbSql.toString() + " union "
							+ sbSqlMod.toString();

					Query querySql = webPOSSessionFactory.getCurrentSession()
							.createSQLQuery(sbSql.toString());
					List listSql = querySql.list();

					if (listSql.size() > 0) {

						for (int i = 0; i < listSql.size(); i++) {
							Object[] obj = (Object[]) listSql.get(i);
							JSONObject jObj = new JSONObject();
							jObj.put("BillNo", obj[0].toString());
							jObj.put("BillDate", obj[1].toString());
							jObj.put("VodedDate", obj[2].toString());
							jObj.put("EntryTime", obj[3].toString());
							jObj.put("VoidedTime", obj[4].toString());
							jObj.put("ItemName", obj[5].toString());
							jObj.put("Qty", obj[6].toString());
							jObj.put("Amount", obj[7].toString());
							jObj.put("Reason", obj[8].toString());
							jObj.put("UserEdited", obj[9].toString());

							jArr.put(jObj);
						}

					}
					jOBjRet.put("jArr", jArr);

				}

				break;

			// Line Voids
			case "Line Void":

				jArrColHeader.put("POS");
				jArrColHeader.put("Line Voided Date");
				jArrColHeader.put("Line Voided Time");
				jArrColHeader.put("Item Name");

				jArrColHeader.put("Qty");
				jArrColHeader.put("Amt");
				jArrColHeader.put("KOT No");
				jArrColHeader.put("User Created");

				jOBjRet.put("ColHeader", jArrColHeader);

				sbSql.setLength(0);
				sbSql.append("select b.strPosName,DATE_FORMAT(Date(a.dteDateCreated),'%d-%m-%Y'),Time(a.dteDateCreated) "
						+ " ,a.strItemName,a.dblItemQuantity,a.dblAmount,a.strKOTNo,a.strUserCreated  "
						+ " from tbllinevoid a,tblposmaster b "
						+ " where a.strPosCode=b.strPosCode ");

				if (!"All".equalsIgnoreCase(strPOSCode)
						&& !"All".equalsIgnoreCase(userCode)) {
					sbSql.append(" and  a.strUserCreated='" + userCode + "' "
							+ "and a.strPosCode='" + strPOSCode
							+ "' and Date(a.dteDateCreated) between '"
							+ fromDate + "' and '" + toDate + "'");
				} else if (!"All".equalsIgnoreCase(strPOSCode)
						&& "All".equalsIgnoreCase(userCode)) {
					sbSql.append(" and  a.strPosCode='" + strPOSCode
							+ "' and Date(a.dteDateCreated) between '"
							+ fromDate + "' and '" + toDate + "'");
				} else if ("All".equalsIgnoreCase(strPOSCode)
						&& !"All".equalsIgnoreCase(userCode)) {
					sbSql.append(" and  a.strUserCreated='" + userCode
							+ "' and Date(a.dteDateCreated) between '"
							+ fromDate + "' and '" + toDate + "'");
				} else {
					sbSql.append(" and  Date(a.dteDateCreated) between '"
							+ fromDate + "' and '" + toDate + "'");
				}

				Query querySql = webPOSSessionFactory.getCurrentSession()
						.createSQLQuery(sbSql.toString());
				List listSql = querySql.list();

				if (listSql.size() > 0) {

					for (int i = 0; i < listSql.size(); i++) {
						Object[] obj = (Object[]) listSql.get(i);
						JSONObject jObj = new JSONObject();
						jObj.put("POS", obj[0].toString());
						jObj.put("Date", obj[1].toString());
						jObj.put("Time", obj[2].toString());
						jObj.put("ItemName", obj[3].toString());
						jObj.put("Qty", obj[4].toString());

						jObj.put("Amt", obj[5].toString());

						jObj.put("KOTNo", obj[6].toString());
						jObj.put("UserCreated", obj[7].toString());

						jArr.put(jObj);

					}

				}
				jOBjRet.put("jArr", jArr);
				break;
			// Voided KOT
			case "Voided KOT":
				sbSqlMod = new StringBuilder();

				sbSql.setLength(0);
				if (strReportType.equalsIgnoreCase("Summary")) {

					jArrColHeader.put("POS");
					jArrColHeader.put("Table");
					jArrColHeader.put("Waiter");
					jArrColHeader.put("KOT No");
					jArrColHeader.put("Pax");
					jArrColHeader.put("Amount");
					jArrColHeader.put("Reason");
					jArrColHeader.put("User Created");
					jArrColHeader.put("Date Created");

					jOBjRet.put("ColHeader", jArrColHeader);

					sbSql.setLength(0);
					sbSql.append("select d.strPOSName,e.strTableName,ifnull(b.strWShortName,''),a.strKOTNo,a.intPaxNo,"
							+ " sum(a.dblAmount),c.strReasonName,a.strUserCreated,a.dteDateCreated"
							+ " from tblvoidkot a left outer join tblwaitermaster b on a.strWaiterNo=b.strWaiterNo "
							+ ",tblreasonmaster c,tblposmaster d,tbltablemaster e "
							+ " where a.strreasonCode=c.strreasonCode "
							+ " and a.strPOSCode=d.strPOSCode and a.strTableNo=e.strTableNo ");

					if (!"All".equalsIgnoreCase(strPOSCode)
							&& !"All".equalsIgnoreCase(userCode)
							&& !"All".equalsIgnoreCase(reasonCode)) {
						sbSql.append(" and a.strPosCode='" + strPOSCode
								+ "' and a.strUserCreated='" + userCode + "' "
								+ "and Date(a.dteDateCreated) between '"
								+ fromDate + "' and '" + toDate + "' "
								+ "and a.strreasonCode='" + reasonCode + "'");
					} else if (!"All".equalsIgnoreCase(strPOSCode)
							&& "All".equalsIgnoreCase(userCode)
							&& !"All".equalsIgnoreCase(reasonCode)) {
						sbSql.append(" and a.strPosCode='" + strPOSCode
								+ "' and Date(a.dteDateCreated) between '"
								+ fromDate + "' and '" + toDate
								+ "' and a.strreasonCode='" + reasonCode + "'");
					} else if ("All".equalsIgnoreCase(strPOSCode)
							&& !"All".equalsIgnoreCase(userCode)
							&& !"All".equalsIgnoreCase(reasonCode)) {
						sbSql.append(" and a.strUserCreated='" + userCode
								+ "' and Date(a.dteDateCreated) between '"
								+ fromDate + "' and '" + toDate
								+ "' and a.strreasonCode='" + reasonCode + "'");
					} else if (!"All".equalsIgnoreCase(strPOSCode)
							&& "All".equalsIgnoreCase(userCode)
							&& "All".equalsIgnoreCase(reasonCode)) {
						sbSql.append(" and a.strPosCode='" + strPOSCode
								+ "' and Date(a.dteDateCreated) between '"
								+ fromDate + "' and '" + toDate + "'");
					} else if ("All".equalsIgnoreCase(strPOSCode)
							&& !"All".equalsIgnoreCase(userCode)
							&& !"All".equalsIgnoreCase(reasonCode)) {
						sbSql.append(" and a.strUserCreated='" + userCode
								+ "' and Date(a.dteDateCreated) between '"
								+ fromDate + "' and '" + toDate
								+ "' and a.strreasonCode='" + reasonCode + "'");
					} else if ("All".equalsIgnoreCase(strPOSCode)
							&& "All".equalsIgnoreCase(userCode)
							&& !"All".equalsIgnoreCase(reasonCode)) {
						sbSql.append(" and a.strreasonCode='" + reasonCode
								+ "' and Date(a.dteDateCreated) between '"
								+ fromDate + "' and '" + toDate + "'");
					} else {
						sbSql.append(" and Date(a.dteDateCreated) between '"
								+ fromDate + "' and '" + toDate + "'");
					}
					sbSql.append(" Group By a.strPOSCode,a.strTableNo,b.strWShortName,a.strKOTNo,a.intPaxNo,"
							+ "c.strReasonName,a.strUserCreated");

					querySql = webPOSSessionFactory.getCurrentSession()
							.createSQLQuery(sbSql.toString());
					listSql = querySql.list();

					if (listSql.size() > 0) {

						for (int i = 0; i < listSql.size(); i++) {
							Object[] obj = (Object[]) listSql.get(i);
							JSONObject jObj = new JSONObject();
							jObj.put("POS", obj[0].toString());
							jObj.put("Table", obj[1].toString());
							jObj.put("Waiter", obj[2].toString());
							jObj.put("KOTNo", obj[3].toString());

							jObj.put("Pax", obj[4].toString());

							jObj.put("Amount", obj[5].toString());
							jObj.put("Reason", obj[6].toString());
							jObj.put("UserCreated", obj[7].toString());
							jObj.put("DateCreated", obj[8].toString());

							jArr.put(jObj);

						}

					}
					jOBjRet.put("jArr", jArr);

				} else {
					jArrColHeader.put("POS");
					jArrColHeader.put("Table");
					jArrColHeader.put("Waiter");
					jArrColHeader.put("KOT No");
					jArrColHeader.put("Item Name");
					jArrColHeader.put("Pax");
					jArrColHeader.put("Qty");
					jArrColHeader.put("Amount");
					jArrColHeader.put("Reason");
					jArrColHeader.put("User Created");
					jArrColHeader.put("Date Created");

					jOBjRet.put("ColHeader", jArrColHeader);

					sbSql.setLength(0);
					sbSql.append("select d.strPOSName,e.strTableName,ifnull(b.strWShortName,''),a.strKOTNo "
							+ " ,a.strItemName,a.intPaxNo,a.dblItemQuantity,a.dblAmount,c.strReasonName "
							+ " ,a.strUserCreated,a.dteDateCreated "
							+ " from tblvoidkot a left outer join tblwaitermaster b on a.strWaiterNo=b.strWaiterNo "
							+ " ,tblreasonmaster c,tblposmaster d,tbltablemaster e "
							+ " where a.strreasonCode=c.strreasonCode and a.strPOSCode=d.strPOSCode "
							+ " and a.strTableNo=e.strTableNo ");

					if (!"All".equalsIgnoreCase(strPOSCode)
							&& !"All".equalsIgnoreCase(userCode)
							&& !"All".equalsIgnoreCase(reasonCode)) {
						sbSql.append(" and a.strPosCode='" + strPOSCode
								+ "' and a.strUserCreated='" + userCode + "' "
								+ "and Date(a.dteDateCreated) between '"
								+ fromDate + "' and '" + toDate + "' "
								+ "and a.strreasonCode='" + reasonCode + "'");
					} else if (!"All".equalsIgnoreCase(strPOSCode)
							&& "All".equalsIgnoreCase(userCode)
							&& !"All".equalsIgnoreCase(reasonCode)) {
						sbSql.append(" and a.strPosCode='" + strPOSCode
								+ "' and Date(a.dteDateCreated) between '"
								+ fromDate + "' and '" + toDate
								+ "' and a.strreasonCode='" + reasonCode + "'");
					} else if ("All".equalsIgnoreCase(strPOSCode)
							&& !"All".equalsIgnoreCase(userCode)
							&& !"All".equalsIgnoreCase(reasonCode)) {
						sbSql.append(" and a.strUserCreated='" + userCode
								+ "' and Date(a.dteDateCreated) between '"
								+ fromDate + "' and '" + toDate
								+ "' and a.strreasonCode='" + reasonCode + "'");
					} else if (!"All".equalsIgnoreCase(strPOSCode)
							&& "All".equalsIgnoreCase(userCode)
							&& "All".equalsIgnoreCase(reasonCode)) {
						sbSql.append(" and a.strPosCode='" + strPOSCode
								+ "' and Date(a.dteDateCreated) between '"
								+ fromDate + "' and '" + toDate + "'");
					} else if ("All".equalsIgnoreCase(strPOSCode)
							&& !"All".equalsIgnoreCase(userCode)
							&& !"All".equalsIgnoreCase(reasonCode)) {
						sbSql.append(" and a.strUserCreated='" + userCode
								+ "' and Date(a.dteDateCreated) between '"
								+ fromDate + "' and '" + toDate
								+ "' and a.strreasonCode='" + reasonCode + "'");
					} else if ("All".equalsIgnoreCase(strPOSCode)
							&& "All".equalsIgnoreCase(userCode)
							&& !"All".equalsIgnoreCase(reasonCode)) {
						sbSql.append(" and a.strreasonCode='" + reasonCode
								+ "' and Date(a.dteDateCreated) between '"
								+ fromDate + "' and '" + toDate + "'");
					} else {
						sbSql.append(" and Date(a.dteDateCreated) between '"
								+ fromDate + "' and '" + toDate + "'");
					}
					querySql = webPOSSessionFactory.getCurrentSession()
							.createSQLQuery(sbSql.toString());
					listSql = querySql.list();

					if (listSql.size() > 0) {

						for (int i = 0; i < listSql.size(); i++) {
							Object[] obj = (Object[]) listSql.get(i);
							JSONObject jObj = new JSONObject();
							jObj.put("POS", obj[0].toString());
							jObj.put("Table", obj[1].toString());
							jObj.put("Waiter", obj[2].toString());
							jObj.put("KOTNo", obj[3].toString());
							jObj.put("ItemName", obj[4].toString());
							jObj.put("Pax", obj[5].toString());
							jObj.put("Qty", obj[6].toString());
							jObj.put("Amount", obj[7].toString());
							jObj.put("Reason", obj[8].toString());
							jObj.put("UserCreated", obj[9].toString());
							jObj.put("DateCreated", obj[10].toString());

							jArr.put(jObj);

						}

					}
					jOBjRet.put("jArr", jArr);

				}
				break;
			// Time Audit
			case "Time Audit":

				jArrColHeader.put("Bill No");
				jArrColHeader.put("Bill Date");
				jArrColHeader.put("Bill Time");
				jArrColHeader.put("KOT Time");

				jArrColHeader.put("Settle Time");
				jArrColHeader.put("Difference");
				jArrColHeader.put("User Created");
				jArrColHeader.put("User Edited");

				jOBjRet.put("ColHeader", jArrColHeader);

				sbSql.setLength(0);
				sbSql.append("select a.strbillno,DATE_FORMAT(Date(a.dteBillDate),'%d-%m-%Y') as BillDate,Time(a.dteBillDate) as BillTime "
						+ ",Time(b.dteBillDate) as KOTTime ,Time(a.dteSettleDate),DATE_FORMAT(Date(a.dteBillDate),'%d-%m-%Y')"
						+ ", DATE_FORMAT(Date(a.dteSettleDate),'%d-%m-%Y'),a.strUserCreated ,a.strUserEdited "
						+ "from tblbillhd a, tblbilldtl b where a.strBillNo=b.strBillNo ");

				if (!"All".equalsIgnoreCase(strPOSCode)
						&& !"All".equalsIgnoreCase(userCode)) {
					sbSql.append(" and a.strUserCreated='" + userCode
							+ "' and a.strPosCode='" + strPOSCode
							+ "' and Date(a.dteDateCreated) between '"
							+ fromDate + "' and '" + toDate + "'");
				} else if (!"All".equalsIgnoreCase(strPOSCode)
						&& "All".equalsIgnoreCase(userCode)) {
					sbSql.append(" and a.strPosCode='" + strPOSCode
							+ "' and Date(a.dteDateCreated) between '"
							+ fromDate + "' and '" + toDate + "'");
				} else if ("All".equalsIgnoreCase(strPOSCode)
						&& !"All".equalsIgnoreCase(userCode)) {
					sbSql.append(" and a.strUserCreated='" + userCode
							+ "' and Date(a.dteDateCreated) between '"
							+ fromDate + "' and '" + toDate + "'");
				} else {
					sbSql.append(" and Date(a.dteBillDate) between '"
							+ fromDate + "' and '" + toDate + "'");
				}
				sbSql.append(" group by a.strBillNo");

				querySql = webPOSSessionFactory.getCurrentSession()
						.createSQLQuery(sbSql.toString());
				listSql = querySql.list();

				if (listSql.size() > 0) {

					for (int i = 0; i < listSql.size(); i++) {
						Object[] obj = (Object[]) listSql.get(i);
						JSONObject jObj = new JSONObject();
						jObj.put("BillNo", obj[0].toString());
						jObj.put("BillDate", obj[1].toString());
						jObj.put("BillTime", obj[2].toString());
						jObj.put("KOTTime", obj[3].toString());
						jObj.put("SettleTime", obj[4].toString());

						jObj.put("Difference", obj[5].toString());

						jObj.put("UserCreated", obj[6].toString());
						jObj.put("UserEdited", obj[7].toString());

						jArr.put(jObj);

					}

				}

				sbSql.setLength(0);
				sbSql.append("select a.strbillno,DATE_FORMAT(Date(a.dteBillDate),'%d-%m-%Y') as BillDate,Time(a.dteBillDate) as BillTime "
						+ ",Time(b.dteBillDate) as KOTTime ,Time(a.dteSettleDate),DATE_FORMAT(Date(a.dteBillDate),'%d-%m-%Y') , DATE_FORMAT(Date(a.dteSettleDate),'%d-%m-%Y')  "
						+ ",a.strUserCreated ,a.strUserEdited "
						+ "from tblqbillhd a, tblqbilldtl b where a.strBillNo=b.strBillNo ");

				if (!"All".equalsIgnoreCase(strPOSCode)
						&& !"All".equalsIgnoreCase(userCode)) {
					sbSql.append(" and a.strUserCreated='" + userCode
							+ "' and a.strPosCode='" + strPOSCode
							+ "' and Date(a.dteDateCreated) between '"
							+ fromDate + "' and '" + toDate + "'");
				} else if (!"All".equalsIgnoreCase(strPOSCode)
						&& "All".equalsIgnoreCase(userCode)) {
					sbSql.append(" and a.strPosCode='" + strPOSCode
							+ "' and Date(a.dteDateCreated) between '"
							+ fromDate + "' and '" + toDate + "'");
				} else if ("All".equalsIgnoreCase(strPOSCode)
						&& !"All".equalsIgnoreCase(userCode)) {
					sbSql.append(" and a.strUserCreated='" + userCode
							+ "' and Date(a.dteDateCreated) between '"
							+ fromDate + "' and '" + toDate + "'");
				} else {
					sbSql.append(" and Date(a.dteBillDate) between '"
							+ fromDate + "' and '" + toDate + "'");
				}
				sbSql.append(" group by a.strBillNo");

				querySql = webPOSSessionFactory.getCurrentSession()
						.createSQLQuery(sbSql.toString());
				listSql = querySql.list();

				if (listSql.size() > 0) {

					for (int i = 0; i < listSql.size(); i++) {
						Object[] obj = (Object[]) listSql.get(i);
						JSONObject jObj = new JSONObject();
						jObj.put("BillNo", obj[0].toString());
						jObj.put("BillDate", obj[1].toString());
						jObj.put("BillTime", obj[2].toString());
						jObj.put("KOTTime", obj[3].toString());
						jObj.put("SettleTime", obj[4].toString());

						jObj.put("Difference", obj[5].toString());

						jObj.put("UserCreated", obj[6].toString());
						jObj.put("UserEdited", obj[7].toString());

						jArr.put(jObj);

					}

				}

				jOBjRet.put("jArr", jArr);

				break;

			// KOT Analysis
			case "KOT Analysis":
				StringBuilder sbSqlLive = new StringBuilder();
				StringBuilder sbSqlQFile = new StringBuilder();
				StringBuilder sbFilters = new StringBuilder();

				jArrColHeader.put("Bill No");
				jArrColHeader.put("Date");
				jArrColHeader.put("KOT No.");
				jArrColHeader.put("Qty");
				jArrColHeader.put("Item Name");
				jArrColHeader.put("Waiter No.");
				jArrColHeader.put("Table No.");

				jOBjRet.put("ColHeader", jArrColHeader);

				sbSqlLive.setLength(0);
				sbSqlQFile.setLength(0);

				sbSqlLive
						.append(" select b.strBillNo,DATE_FORMAT(date(b.dteBillDate),'%d-%m-%Y') ,b.strKOTNo, b.dblQuantity, b.strItemName,d.strWShortName"
								+ ",c.strTableName "
								+ "from tblbillhd a, tblbilldtl b, tbltablemaster c, tblwaitermaster d "
								+ "where a.strBillNo=b.strBillNo and a.strTableNo=c.strTableNo and a.strWaiterNo=d.strWaiterNo ");

				sbSqlQFile
						.append(" select b.strBillNo,DATE_FORMAT(date(b.dteBillDate) ,'%d-%m-%Y'),b.strKOTNo, b.dblQuantity, b.strItemName,d.strWShortName"
								+ ",c.strTableName "
								+ "from tblqbillhd a, tblqbilldtl b, tbltablemaster c, tblwaitermaster d "
								+ "where a.strBillNo=b.strBillNo and a.strTableNo=c.strTableNo and a.strWaiterNo=d.strWaiterNo ");

				if (!"All".equalsIgnoreCase(strPOSCode)
						&& !"All".equalsIgnoreCase(userCode)) {
					sbFilters.append(" and a.strUserCreated='" + userCode
							+ "' and a.strPosCode='" + strPOSCode
							+ "' and Date(a.dteBillDate) between '" + fromDate
							+ "' and '" + toDate + "'");
				} else if (!"All".equalsIgnoreCase(strPOSCode)
						&& "All".equalsIgnoreCase(userCode)) {
					sbFilters.append(" and a.strPosCode='" + strPOSCode + "' "
							+ "and Date(a.dteBillDate) between '" + fromDate
							+ "' and '" + toDate + "'");
				} else if ("All".equalsIgnoreCase(strPOSCode)
						&& !"All".equalsIgnoreCase(userCode)) {
					sbFilters.append(" and a.strUserCreated='" + userCode
							+ "' " + "and Date(a.dteBillDate) between '"
							+ fromDate + "' and '" + toDate + "'");
				} else {
					sbFilters.append(" and Date(a.dteBillDate) between '"
							+ fromDate + "' and '" + toDate + "'");
				}

				sbSqlLive.append(sbFilters);
				sbSqlQFile.append(sbFilters);

				querySql = webPOSSessionFactory.getCurrentSession()
						.createSQLQuery(sbSqlLive.toString());
				listSql = querySql.list();

				if (listSql.size() > 0) {

					for (int i = 0; i < listSql.size(); i++) {
						Object[] obj = (Object[]) listSql.get(i);
						JSONObject jObj = new JSONObject();
						jObj.put("BillNo", obj[0].toString());
						jObj.put("BillDate", obj[1].toString());
						jObj.put("KOTNo", obj[2].toString());
						jObj.put("Qty", obj[3].toString());
						jObj.put("ItemName", obj[4].toString());
						jObj.put("Waiter", obj[5].toString());
						jObj.put("Table", obj[6].toString());

						jArr.put(jObj);

					}

				}

				querySql = webPOSSessionFactory.getCurrentSession()
						.createSQLQuery(sbSqlQFile.toString());
				listSql = querySql.list();

				if (listSql.size() > 0) {

					for (int i = 0; i < listSql.size(); i++) {
						Object[] obj = (Object[]) listSql.get(i);
						JSONObject jObj = new JSONObject();
						jObj.put("BillNo", obj[0].toString());
						jObj.put("BillDate", obj[1].toString());
						jObj.put("KOTNo", obj[2].toString());
						jObj.put("Qty", obj[3].toString());
						jObj.put("ItemName", obj[4].toString());
						jObj.put("Waiter", obj[5].toString());
						jObj.put("Table", obj[6].toString());

						jArr.put(jObj);

					}

				}
				jOBjRet.put("jArr", jArr);

				break;

			// Moved KOT
			case "Moved KOT":

				sbSqlMod = new StringBuilder();

				sbSql.setLength(0);
				if (strReportType.equalsIgnoreCase("Summary")) {

					jArrColHeader.put("POS");
					jArrColHeader.put("Table");
					jArrColHeader.put("Waiter");
					jArrColHeader.put("KOT No");
					jArrColHeader.put("Pax");
					jArrColHeader.put("Amount");
					jArrColHeader.put("Reason");
					jArrColHeader.put("User Created");
					jArrColHeader.put("Date Created");

					jOBjRet.put("ColHeader", jArrColHeader);

					sbSql.setLength(0);
					sbSql.append("select d.strPOSName,e.strTableName,ifnull(b.strWShortName,''),a.strKOTNo "
							+ " ,a.strItemName,a.intPaxNo,a.dblItemQuantity,a.dblAmount,c.strReasonName "
							+ " ,a.strUserCreated,a.dteDateCreated "
							+ " from tblvoidkot a left outer join tblwaitermaster b on a.strWaiterNo=b.strWaiterNo "
							+ " ,tblreasonmaster c,tblposmaster d,tbltablemaster e "
							+ " where a.strreasonCode=c.strreasonCode and a.strPOSCode=d.strPOSCode "
							+ " and a.strTableNo=e.strTableNo and a.strType='MVKot' ");

					if (!"All".equalsIgnoreCase(strPOSCode)
							&& !"All".equalsIgnoreCase(userCode)
							&& !"All".equalsIgnoreCase(reasonCode)) {
						sbSql.append(" and a.strPosCode='" + strPOSCode
								+ "' and a.strUserCreated='" + userCode + "' "
								+ "and Date(a.dteDateCreated) between '"
								+ fromDate + "' and '" + toDate + "' "
								+ "and a.strreasonCode='" + reasonCode + "'");
					} else if (!"All".equalsIgnoreCase(strPOSCode)
							&& "All".equalsIgnoreCase(userCode)
							&& !"All".equalsIgnoreCase(reasonCode)) {
						sbSql.append(" and a.strPosCode='" + strPOSCode
								+ "' and Date(a.dteDateCreated) between '"
								+ fromDate + "' and '" + toDate
								+ "' and a.strreasonCode='" + reasonCode + "'");
					} else if ("All".equalsIgnoreCase(strPOSCode)
							&& !"All".equalsIgnoreCase(userCode)
							&& !"All".equalsIgnoreCase(reasonCode)) {
						sbSql.append(" and a.strUserCreated='" + userCode
								+ "' and Date(a.dteDateCreated) between '"
								+ fromDate + "' and '" + toDate
								+ "' and a.strreasonCode='" + reasonCode + "'");
					} else if (!"All".equalsIgnoreCase(strPOSCode)
							&& "All".equalsIgnoreCase(userCode)
							&& "All".equalsIgnoreCase(reasonCode)) {
						sbSql.append(" and a.strPosCode='" + strPOSCode
								+ "' and Date(a.dteDateCreated) between '"
								+ fromDate + "' and '" + toDate + "'");
					} else if ("All".equalsIgnoreCase(strPOSCode)
							&& !"All".equalsIgnoreCase(userCode)
							&& !"All".equalsIgnoreCase(reasonCode)) {
						sbSql.append(" and a.strUserCreated='" + userCode
								+ "' and Date(a.dteDateCreated) between '"
								+ fromDate + "' and '" + toDate
								+ "' and a.strreasonCode='" + reasonCode + "'");
					} else if ("All".equalsIgnoreCase(strPOSCode)
							&& "All".equalsIgnoreCase(userCode)
							&& !"All".equalsIgnoreCase(reasonCode)) {
						sbSql.append(" and a.strreasonCode='" + reasonCode
								+ "' and Date(a.dteDateCreated) between '"
								+ fromDate + "' and '" + toDate + "'");
					} else {
						sbSql.append(" and Date(a.dteDateCreated) between '"
								+ fromDate + "' and '" + toDate + "'");
					}
					sbSql.append(" Group By a.strPOSCode,a.strTableNo,b.strWShortName,a.strKOTNo,a.intPaxNo,"
							+ "c.strReasonName,a.strUserCreated");

					querySql = webPOSSessionFactory.getCurrentSession()
							.createSQLQuery(sbSql.toString());
					listSql = querySql.list();

					if (listSql.size() > 0) {

						for (int i = 0; i < listSql.size(); i++) {
							Object[] obj = (Object[]) listSql.get(i);
							JSONObject jObj = new JSONObject();
							jObj.put("POS", obj[0].toString());
							jObj.put("Table", obj[1].toString());
							jObj.put("Waiter", obj[2].toString());
							jObj.put("KOTNo", obj[3].toString());

							jObj.put("Pax", obj[5].toString());

							jObj.put("Amount", obj[7].toString());
							jObj.put("Reason", obj[8].toString());
							jObj.put("UserCreated", obj[9].toString());
							jObj.put("DateCreated", obj[10].toString());

							jArr.put(jObj);

						}

					}
					jOBjRet.put("jArr", jArr);

				} else {
					jArrColHeader.put("POS");
					jArrColHeader.put("Table");
					jArrColHeader.put("Waiter");
					jArrColHeader.put("KOT No");
					jArrColHeader.put("Item Name");
					jArrColHeader.put("Pax");
					jArrColHeader.put("Qty");
					jArrColHeader.put("Amount");
					jArrColHeader.put("Reason");
					jArrColHeader.put("User Created");
					jArrColHeader.put("Date Created");

					jOBjRet.put("ColHeader", jArrColHeader);

					sbSql.setLength(0);
					sbSql.append("select d.strPOSName,e.strTableName,ifnull(b.strWShortName,''),a.strKOTNo "
							+ " ,a.strItemName,a.intPaxNo,a.dblItemQuantity,a.dblAmount,c.strReasonName "
							+ " ,a.strUserCreated,a.dteDateCreated "
							+ " from tblvoidkot a left outer join tblwaitermaster b on a.strWaiterNo=b.strWaiterNo "
							+ " ,tblreasonmaster c,tblposmaster d,tbltablemaster e "
							+ " where a.strreasonCode=c.strreasonCode and a.strPOSCode=d.strPOSCode "
							+ " and a.strTableNo=e.strTableNo ");

					if (!"All".equalsIgnoreCase(strPOSCode)
							&& !"All".equalsIgnoreCase(userCode)
							&& !"All".equalsIgnoreCase(reasonCode)) {
						sbSql.append(" and a.strPosCode='" + strPOSCode
								+ "' and a.strUserCreated='" + userCode + "' "
								+ "and Date(a.dteDateCreated) between '"
								+ fromDate + "' and '" + toDate + "' "
								+ "and a.strreasonCode='" + reasonCode + "'");
					} else if (!"All".equalsIgnoreCase(strPOSCode)
							&& "All".equalsIgnoreCase(userCode)
							&& !"All".equalsIgnoreCase(reasonCode)) {
						sbSql.append(" and a.strPosCode='" + strPOSCode
								+ "' and Date(a.dteDateCreated) between '"
								+ fromDate + "' and '" + toDate
								+ "' and a.strreasonCode='" + reasonCode + "'");
					} else if ("All".equalsIgnoreCase(strPOSCode)
							&& !"All".equalsIgnoreCase(userCode)
							&& !"All".equalsIgnoreCase(reasonCode)) {
						sbSql.append(" and a.strUserCreated='" + userCode
								+ "' and Date(a.dteDateCreated) between '"
								+ fromDate + "' and '" + toDate
								+ "' and a.strreasonCode='" + reasonCode + "'");
					} else if (!"All".equalsIgnoreCase(strPOSCode)
							&& "All".equalsIgnoreCase(userCode)
							&& "All".equalsIgnoreCase(reasonCode)) {
						sbSql.append(" and a.strPosCode='" + strPOSCode
								+ "' and Date(a.dteDateCreated) between '"
								+ fromDate + "' and '" + toDate + "'");
					} else if ("All".equalsIgnoreCase(strPOSCode)
							&& !"All".equalsIgnoreCase(userCode)
							&& !"All".equalsIgnoreCase(reasonCode)) {
						sbSql.append(" and a.strUserCreated='" + userCode
								+ "' and Date(a.dteDateCreated) between '"
								+ fromDate + "' and '" + toDate
								+ "' and a.strreasonCode='" + reasonCode + "'");
					} else if ("All".equalsIgnoreCase(strPOSCode)
							&& "All".equalsIgnoreCase(userCode)
							&& !"All".equalsIgnoreCase(reasonCode)) {
						sbSql.append(" and a.strreasonCode='" + reasonCode
								+ "' and Date(a.dteDateCreated) between '"
								+ fromDate + "' and '" + toDate + "'");
					} else {
						sbSql.append(" and Date(a.dteDateCreated) between '"
								+ fromDate + "' and '" + toDate + "'");
					}
					querySql = webPOSSessionFactory.getCurrentSession()
							.createSQLQuery(sbSql.toString());
					listSql = querySql.list();

					if (listSql.size() > 0) {

						for (int i = 0; i < listSql.size(); i++) {
							Object[] obj = (Object[]) listSql.get(i);
							JSONObject jObj = new JSONObject();
							jObj.put("POS", obj[0].toString());
							jObj.put("Table", obj[1].toString());
							jObj.put("Waiter", obj[2].toString());
							jObj.put("KOTNo", obj[3].toString());
							jObj.put("ItemName", obj[4].toString());
							jObj.put("Pax", obj[5].toString());
							jObj.put("Qty", obj[6].toString());
							jObj.put("Amount", obj[7].toString());
							jObj.put("Reason", obj[8].toString());
							jObj.put("UserCreated", obj[9].toString());
							jObj.put("DateCreated", obj[10].toString());

							jArr.put(jObj);

						}

					}
					jOBjRet.put("jArr", jArr);

				}
				break;
			}
		} catch (Exception ex) {
			ex.printStackTrace();
		}

		return jOBjRet;

	}

	
	
	

public JSONObject funGetAdvanceOrderFlash(String fromDate, String toDate,
			String strPOSCode, String dateFilter, String strReportType,
			String strCustomerCode, String operationType, String advOrderCode,
			String strStatus, String userCode, String clientCode,
			String logedInPOS) {

		StringBuilder sbSql = new StringBuilder();
		JSONArray jArrColHeader = new JSONArray();
		JSONArray jArr = new JSONArray();
		JSONObject jOBjRet = new JSONObject();
		Map map = new HashMap();
		int colCount = 5;
		String strPOSType = " ";
		String strDateFilter = "";

		try {
			StringBuilder sbSqlForOpen = new StringBuilder(); // Adv Live only
			StringBuilder sbSqlForBilled1 = new StringBuilder(); // Adv Live +
																	// Bill Live
			StringBuilder sbSqlForBilled2 = new StringBuilder(); // Adv QFile +
																	// Bill Live
			StringBuilder sbSqlForBilled3 = new StringBuilder(); // Adv QFile +
																	// Bill
																	// QFile
			StringBuilder sbSqlForBilled11 = new StringBuilder(); // Adv Live +
																	// Bill Live
			StringBuilder sbSqlForBilled22 = new StringBuilder(); // Adv QFile +
																	// Bill Live
			StringBuilder sbSqlForBilled33 = new StringBuilder(); // Adv QFile +
																	// Bill
																	// QFile

			if (dateFilter.equalsIgnoreCase("Order Date")) {
				strDateFilter = "a.dteOrderFor";
			} else if (dateFilter.equalsIgnoreCase("Booking Date")) {
				strDateFilter = "a.dteAdvBookingDate";
			}

			String sql = "select strPOSType from tblsetup where strClientCode= '"
					+ clientCode + "' and strPOSCode= '" + logedInPOS + "'";

			Query query = webPOSSessionFactory.getCurrentSession()
					.createSQLQuery(sql);
			List list = query.list();
			if (list.size() > 0) {
				strPOSType = (String) list.get(0);
			}
			List listSql;
			switch (operationType) {

			// Modified Bill
			case "Item Wise":

				jArrColHeader.put("Adv Ord No");
				jArrColHeader.put("Order For");
				jArrColHeader.put("Bill Date");
				jArrColHeader.put("Customer Name");
				jArrColHeader.put("Order Type");
				jArrColHeader.put("Operation Type");
				jArrColHeader.put("Item Name");
				jArrColHeader.put("Qty");
				jArrColHeader.put("Amount");
				jArrColHeader.put("Manual Adv Order No");

				sbSqlForOpen.setLength(0);
				sbSqlForBilled1.setLength(0);
				sbSqlForBilled2.setLength(0);
				sbSqlForBilled3.setLength(0);
				sbSqlForBilled11.setLength(0);
				sbSqlForBilled22.setLength(0);
				sbSqlForBilled33.setLength(0);

				if (strStatus.equalsIgnoreCase("Open")) // For Open Adv Order
														// Option
				{
					sbSqlForOpen
							.append("select a.strAdvBookingNo,DATE_FORMAT(a.dteAdvBookingDate,'%d-%m-%Y') ,DATE_FORMAT(a.dteOrderFor,'%d-%m-%Y'),a.strPOSCode,c.strCustomerName\n"
									+ ",e.strItemName,e.dblQuantity,e.dblAmount,'',ifnull(f.strAdvOrderTypeName,'')\n"
									+ ",ifnull(d.strOperationType,''),'','0','"
									+ userCode
									+ "'"
									+ ",'"
									+ clientCode
									+ "',a.strManualAdvOrderNo \n"
									+ "from tbladvbookbillhd a left outer join tblbillhd d on a.strAdvBookingNo=d.strAdvBookingNo \n"
									+ "left outer join tbladvancereceipthd b on a.strAdvBookingNo=b.strAdvBookingNo \n"
									+ "left outer join tblcustomermaster c on a.strCustomerCode=c.strCustomerCode \n"
									+ "left outer join tbladvbookbilldtl e on e.strAdvBookingNo=a.strAdvBookingNo \n"
									+ "left outer join tbladvanceordertypemaster f on a.strOrderType=f.strAdvOrderTypeCode \n"
									+ "where Date("
									+ strDateFilter
									+ ") between '"
									+ fromDate
									+ "' and '"
									+ toDate
									+ "'\n"
									+ "and d.strBillNo is null");

					if (strPOSType.equalsIgnoreCase("HOPOS")) {
						sbSqlForOpen.setLength(0);
						sbSqlForOpen
								.append("select a.strAdvBookingNo,DATE_FORMAT(a.dteAdvBookingDate,'%d-%m-%Y'),DATE_FORMAT(a.dteOrderFor,'%d-%m-%Y'),a.strPOSCode,ifnull(c.strCustomerName,'')\n"
										+ ",e.strItemName,e.dblQuantity,e.dblAmount,'',ifnull(f.strAdvOrderTypeName,'')\n"
										+ ",ifnull(d.strOperationType,''),'','0','"
										+ userCode
										+ "'"
										+ ",'"
										+ clientCode
										+ "',a.strManualAdvOrderNo \n"
										+ "from tblqadvbookbillhd a left outer join tblbillhd d on a.strAdvBookingNo=d.strAdvBookingNo \n"
										+ "left outer join tblqadvancereceipthd b on a.strAdvBookingNo=b.strAdvBookingNo \n"
										+ "left outer join tblcustomermaster c on a.strCustomerCode=c.strCustomerCode \n"
										+ "left outer join tblqadvbookbilldtl e on e.strAdvBookingNo=a.strAdvBookingNo \n"
										+ "left outer join tbladvanceordertypemaster f on a.strOrderType=f.strAdvOrderTypeCode \n"
										+ "where Date("
										+ strDateFilter
										+ ") between '"
										+ fromDate
										+ "' and '"
										+ toDate
										+ "'\n"
										+ "and d.strBillNo is null");
					}
				} else if (strStatus.equalsIgnoreCase("Settled")) // For Settled
																	// Option
				{
					sbSqlForBilled1
							.append("select a.strAdvBookingNo,DATE_FORMAT(a.dteAdvBookingDate,'%d-%m-%Y'),DATE_FORMAT(a.dteOrderFor,'%d-%m-%Y'),a.strPOSCode,ifnull(c.strCustomerName,'')\n"
									+ ",e.strItemName,e.dblQuantity,e.dblAmount,'',ifnull(f.strAdvOrderTypeName,'')\n"
									+ ",ifnull(d.strOperationType,''),'','0','"
									+ userCode
									+ "'"
									+ ",'"
									+ clientCode
									+ "',a.strManualAdvOrderNo \n"
									+ "from tbladvbookbillhd a left outer join tblbillhd d on a.strAdvBookingNo=d.strAdvBookingNo \n"
									+ "left outer join tbladvancereceipthd b on a.strAdvBookingNo=b.strAdvBookingNo \n"
									+ "left outer join tblcustomermaster c on a.strCustomerCode=c.strCustomerCode \n"
									+ "left outer join tbladvbookbilldtl e on e.strAdvBookingNo=a.strAdvBookingNo \n"
									+ "left outer join tbladvanceordertypemaster f on a.strOrderType=f.strAdvOrderTypeCode \n"
									+ "inner join tblbillsettlementdtl g on d.strBillNo=g.strBillNo \n"
									+ "where Date("
									+ strDateFilter
									+ ") between '"
									+ fromDate
									+ "' and '"
									+ toDate
									+ "'\n"
									+ "and d.strBillNo is not null");

					sbSqlForBilled2
							.append("select a.strAdvBookingNo,DATE_FORMAT(a.dteAdvBookingDate,'%d-%m-%Y'),DATE_FORMAT(a.dteOrderFor,'%d-%m-%Y'),a.strPOSCode,ifnull(c.strCustomerName,'')\n"
									+ ",e.strItemName,e.dblQuantity,e.dblAmount,'',ifnull(f.strAdvOrderTypeName,'')\n"
									+ ",ifnull(d.strOperationType,''),'','0','"
									+ userCode
									+ "'"
									+ ",'"
									+ clientCode
									+ "',a.strManualAdvOrderNo \n"
									+ "from tblqadvbookbillhd a left outer join tblbillhd d on a.strAdvBookingNo=d.strAdvBookingNo \n"
									+ "left outer join tblqadvancereceipthd b on a.strAdvBookingNo=b.strAdvBookingNo \n"
									+ "left outer join tblcustomermaster c on a.strCustomerCode=c.strCustomerCode \n"
									+ "left outer join tblqadvbookbilldtl e on e.strAdvBookingNo=a.strAdvBookingNo \n"
									+ "left outer join tbladvanceordertypemaster f on a.strOrderType=f.strAdvOrderTypeCode \n"
									+ "inner join tblbillsettlementdtl g on d.strBillNo=g.strBillNo \n"
									+ "where Date("
									+ strDateFilter
									+ ") between '"
									+ fromDate
									+ "' and '"
									+ toDate + "'");

					sbSqlForBilled3
							.append("select a.strAdvBookingNo,DATE_FORMAT(a.dteAdvBookingDate,'%d-%m-%Y'),DATE_FORMAT(a.dteOrderFor,'%d-%m-%Y'),a.strPOSCode,ifnull(c.strCustomerName,'')\n"
									+ ",e.strItemName,e.dblQuantity,e.dblAmount,'',ifnull(f.strAdvOrderTypeName,'')\n"
									+ ",ifnull(d.strOperationType,''),'','0','"
									+ userCode
									+ "'"
									+ ",'"
									+ clientCode
									+ "',a.strManualAdvOrderNo \n"
									+ "from tblqadvbookbillhd a left outer join tblqbillhd d on a.strAdvBookingNo=d.strAdvBookingNo \n"
									+ "left outer join tblqadvancereceipthd b on a.strAdvBookingNo=b.strAdvBookingNo \n"
									+ "left outer join tblcustomermaster c on a.strCustomerCode=c.strCustomerCode \n"
									+ "left outer join tblqadvbookbilldtl e on e.strAdvBookingNo=a.strAdvBookingNo \n"
									+ "left outer join tbladvanceordertypemaster f on a.strOrderType=f.strAdvOrderTypeCode \n"
									+ "inner join tblqbillsettlementdtl g on d.strBillNo=g.strBillNo \n"
									+ "where Date("
									+ strDateFilter
									+ ") between '"
									+ fromDate
									+ "' and '"
									+ toDate
									+ "' "
									+ "and d.strSettelmentMode is not null");

					if (!strReportType.equalsIgnoreCase("All")) {
						sbSqlForBilled1.append(" and d.strOperationType='"
								+ strReportType + "' ");
						sbSqlForBilled2.append(" and d.strOperationType='"
								+ strReportType + "' ");
						sbSqlForBilled3.append(" and d.strOperationType='"
								+ strReportType + "' ");
					}
				} else if (strStatus.equalsIgnoreCase("Billed")) // For Billed
																	// Option
				{
					sbSqlForBilled1
							.append("select a.strAdvBookingNo,DATE_FORMAT(a.dteAdvBookingDate,'%d-%m-%Y'),DATE_FORMAT(a.dteOrderFor,'%d-%m-%Y'),a.strPOSCode,ifnull(c.strCustomerName,'')\n"
									+ ",e.strItemName,e.dblQuantity,e.dblAmount,'',ifnull(f.strAdvOrderTypeName,'')\n"
									+ ",ifnull(d.strOperationType,''),'','0','"
									+ userCode
									+ "'"
									+ ",'"
									+ clientCode
									+ "',a.strManualAdvOrderNo \n"
									+ "from tbladvbookbillhd a left outer join tblbillhd d on a.strAdvBookingNo=d.strAdvBookingNo \n"
									+ "left outer join tbladvancereceipthd b on a.strAdvBookingNo=b.strAdvBookingNo \n"
									+ "left outer join tblcustomermaster c on a.strCustomerCode=c.strCustomerCode \n"
									+ "left outer join tbladvbookbilldtl e on e.strAdvBookingNo=a.strAdvBookingNo \n"
									+ "left outer join tbladvanceordertypemaster f on a.strOrderType=f.strAdvOrderTypeCode \n"
									+ "where Date("
									+ strDateFilter
									+ ") between '"
									+ fromDate
									+ "' and '"
									+ toDate
									+ "' \n"
									+ "and d.strBillNo not in(select strBillNo from tblbillsettlementdtl)\n"
									+ " and d.strBillNo not in(select strBillNo from tblqbillsettlementdtl) "
									+ "and d.strBillNo is not null");

					sbSqlForBilled2
							.append("select a.strAdvBookingNo,DATE_FORMAT(a.dteAdvBookingDate,'%d-%m-%Y'),DATE_FORMAT(a.dteOrderFor,'%d-%m-%Y'),a.strPOSCode,ifnull(c.strCustomerName,'') \n"
									+ ",e.strItemName,e.dblQuantity,e.dblAmount,'',ifnull(f.strAdvOrderTypeName,'') \n"
									+ ",ifnull(d.strOperationType,''),'','0','"
									+ userCode
									+ "'"
									+ ",'"
									+ clientCode
									+ "',a.strManualAdvOrderNo \n"
									+ "from tblqadvbookbillhd a left outer join tblbillhd d on a.strAdvBookingNo=d.strAdvBookingNo \n"
									+ "left outer join tblqadvancereceipthd b on a.strAdvBookingNo=b.strAdvBookingNo \n"
									+ "left outer join tblcustomermaster c on a.strCustomerCode=c.strCustomerCode \n"
									+ "left outer join tblqadvbookbilldtl e on e.strAdvBookingNo=a.strAdvBookingNo \n"
									+ "left outer join tbladvanceordertypemaster f on a.strOrderType=f.strAdvOrderTypeCode \n"
									+ "where Date("
									+ strDateFilter
									+ ") between '"
									+ fromDate
									+ "' and '"
									+ toDate
									+ "' \n"
									+ "and d.strBillNo not in(select strBillNo from tblbillsettlementdtl) "
									+ " and d.strBillNo not in(select strBillNo from tblqbillsettlementdtl) ");

					sbSqlForBilled3
							.append("select a.strAdvBookingNo,DATE_FORMAT(a.dteAdvBookingDate,'%d-%m-%Y'),DATE_FORMAT(a.dteOrderFor,'%d-%m-%Y'),a.strPOSCode,ifnull(c.strCustomerName,'')\n"
									+ ",e.strItemName,e.dblQuantity,e.dblAmount,'',ifnull(f.strAdvOrderTypeName,'')\n"
									+ ",ifnull(d.strOperationType,''),'','0','"
									+ userCode
									+ "'"
									+ ",'"
									+ clientCode
									+ "',a.strManualAdvOrderNo \n"
									+ "from tblqadvbookbillhd a left outer join tblqbillhd d on a.strAdvBookingNo=d.strAdvBookingNo \n"
									+ "left outer join tblqadvancereceipthd b on a.strAdvBookingNo=b.strAdvBookingNo \n"
									+ "left outer join tblcustomermaster c on a.strCustomerCode=c.strCustomerCode \n"
									+ "left outer join tblqadvbookbilldtl e on e.strAdvBookingNo=a.strAdvBookingNo \n"
									+ "left outer join tbladvanceordertypemaster f on a.strOrderType=f.strAdvOrderTypeCode \n"
									+ "where Date("
									+ strDateFilter
									+ ") between '"
									+ fromDate
									+ "' and '"
									+ toDate
									+ "' \n"
									+ "and d.strBillNo not in(select strBillNo from tblqbillsettlementdtl) \n"
									+ "and d.strSettelmentMode is not null");

					if (!strReportType.equalsIgnoreCase("All")) {
						sbSqlForBilled1.append(" and d.strOperationType='"
								+ strReportType + "' ");
						sbSqlForBilled2.append(" and d.strOperationType='"
								+ strReportType + "' ");
						sbSqlForBilled3.append(" and d.strOperationType='"
								+ strReportType + "' ");
					}
				} else // For All Option
				{
					// settled
					sbSqlForBilled1
							.append("select a.strAdvBookingNo,DATE_FORMAT(a.dteAdvBookingDate,'%d-%m-%Y'),DATE_FORMAT(a.dteOrderFor,'%d-%m-%Y'),a.strPOSCode,ifnull(c.strCustomerName,'')\n"
									+ ",e.strItemName,e.dblQuantity,e.dblAmount,'',ifnull(f.strAdvOrderTypeName,'')\n"
									+ ",ifnull(d.strOperationType,''),'','0','"
									+ userCode
									+ "'"
									+ ",'"
									+ clientCode
									+ "',a.strManualAdvOrderNo \n"
									+ "from tbladvbookbillhd a left outer join tblbillhd d on a.strAdvBookingNo=d.strAdvBookingNo \n"
									+ "left outer join tbladvancereceipthd b on a.strAdvBookingNo=b.strAdvBookingNo \n"
									+ "left outer join tblcustomermaster c on a.strCustomerCode=c.strCustomerCode \n"
									+ "left outer join tbladvbookbilldtl e on e.strAdvBookingNo=a.strAdvBookingNo \n"
									+ "left outer join tbladvanceordertypemaster f on a.strOrderType=f.strAdvOrderTypeCode \n"
									+ "inner join tblbillsettlementdtl g on d.strBillNo=g.strBillNo \n"
									+ "where Date("
									+ strDateFilter
									+ ") between '"
									+ fromDate
									+ "' and '"
									+ toDate
									+ "'\n"
									+ "and d.strBillNo is not null");

					sbSqlForBilled2
							.append("select a.strAdvBookingNo,DATE_FORMAT(a.dteAdvBookingDate,'%d-%m-%Y'),DATE_FORMAT(a.dteOrderFor,'%d-%m-%Y'),a.strPOSCode,ifnull(c.strCustomerName,'')\n"
									+ ",e.strItemName,e.dblQuantity,e.dblAmount,'',ifnull(f.strAdvOrderTypeName,'')\n"
									+ ",ifnull(d.strOperationType,''),'','0','"
									+ userCode
									+ "'"
									+ ",'"
									+ clientCode
									+ "',a.strManualAdvOrderNo \n"
									+ "from tblqadvbookbillhd a left outer join tblbillhd d on a.strAdvBookingNo=d.strAdvBookingNo \n"
									+ "left outer join tblqadvancereceipthd b on a.strAdvBookingNo=b.strAdvBookingNo \n"
									+ "left outer join tblcustomermaster c on a.strCustomerCode=c.strCustomerCode \n"
									+ "left outer join tblqadvbookbilldtl e on e.strAdvBookingNo=a.strAdvBookingNo \n"
									+ "left outer join tbladvanceordertypemaster f on a.strOrderType=f.strAdvOrderTypeCode \n"
									+ "inner join tblbillsettlementdtl g on d.strBillNo=g.strBillNo \n"
									+ "where Date("
									+ strDateFilter
									+ ") between '"
									+ fromDate
									+ "' and '"
									+ toDate + "'");

					sbSqlForBilled3
							.append("select a.strAdvBookingNo,DATE_FORMAT(a.dteAdvBookingDate,'%d-%m-%Y'),DATE_FORMAT(a.dteOrderFor,'%d-%m-%Y'),a.strPOSCode,ifnull(c.strCustomerName,'')\n"
									+ ",e.strItemName,e.dblQuantity,e.dblAmount,'',ifnull(f.strAdvOrderTypeName,'')\n"
									+ ",ifnull(d.strOperationType,''),'','0','"
									+ userCode
									+ "'"
									+ ",'"
									+ clientCode
									+ "',a.strManualAdvOrderNo \n"
									+ "from tblqadvbookbillhd a left outer join tblqbillhd d on a.strAdvBookingNo=d.strAdvBookingNo \n"
									+ "left outer join tblqadvancereceipthd b on a.strAdvBookingNo=b.strAdvBookingNo \n"
									+ "left outer join tblcustomermaster c on a.strCustomerCode=c.strCustomerCode \n"
									+ "left outer join tblqadvbookbilldtl e on e.strAdvBookingNo=a.strAdvBookingNo \n"
									+ "left outer join tbladvanceordertypemaster f on a.strOrderType=f.strAdvOrderTypeCode \n"
									+ "inner join tblqbillsettlementdtl g on d.strBillNo=g.strBillNo \n"
									+ "where Date("
									+ strDateFilter
									+ ") between '"
									+ fromDate
									+ "' and '"
									+ toDate
									+ "' "
									+ "and d.strSettelmentMode is not null");

					// billed
					sbSqlForBilled11
							.append("select a.strAdvBookingNo,DATE_FORMAT(a.dteAdvBookingDate,'%d-%m-%Y'),DATE_FORMAT(a.dteOrderFor,'%d-%m-%Y'),a.strPOSCode,ifnull(c.strCustomerName,'')\n"
									+ ",e.strItemName,e.dblQuantity,e.dblAmount,'',ifnull(f.strAdvOrderTypeName,'')\n"
									+ ",ifnull(d.strOperationType,''),'','0','"
									+ userCode
									+ "'"
									+ ",'"
									+ clientCode
									+ "',a.strManualAdvOrderNo \n"
									+ "from tbladvbookbillhd a left outer join tblbillhd d on a.strAdvBookingNo=d.strAdvBookingNo \n"
									+ "left outer join tbladvancereceipthd b on a.strAdvBookingNo=b.strAdvBookingNo \n"
									+ "left outer join tblcustomermaster c on a.strCustomerCode=c.strCustomerCode \n"
									+ "left outer join tbladvbookbilldtl e on e.strAdvBookingNo=a.strAdvBookingNo \n"
									+ "left outer join tbladvanceordertypemaster f on a.strOrderType=f.strAdvOrderTypeCode \n"
									+ "where Date("
									+ strDateFilter
									+ ") between '"
									+ fromDate
									+ "' and '"
									+ toDate
									+ "' \n"
									+ "and d.strBillNo not in(select strBillNo from tblbillsettlementdtl)\n"
									+ " and d.strBillNo not in(select strBillNo from tblqbillsettlementdtl) "
									+ "and d.strBillNo is not null");

					sbSqlForBilled22
							.append("select a.strAdvBookingNo,DATE_FORMAT(a.dteAdvBookingDate,'%d-%m-%Y'),DATE_FORMAT(a.dteOrderFor,'%d-%m-%Y'),a.strPOSCode,ifnull(c.strCustomerName,'') \n"
									+ ",e.strItemName,e.dblQuantity,e.dblAmount,'',ifnull(f.strAdvOrderTypeName,'') \n"
									+ ",ifnull(d.strOperationType,''),'','0','"
									+ userCode
									+ "'"
									+ ",'"
									+ clientCode
									+ "',a.strManualAdvOrderNo \n"
									+ "from tblqadvbookbillhd a left outer join tblbillhd d on a.strAdvBookingNo=d.strAdvBookingNo \n"
									+ "left outer join tblqadvancereceipthd b on a.strAdvBookingNo=b.strAdvBookingNo \n"
									+ "left outer join tblcustomermaster c on a.strCustomerCode=c.strCustomerCode \n"
									+ "left outer join tblqadvbookbilldtl e on e.strAdvBookingNo=a.strAdvBookingNo \n"
									+ "left outer join tbladvanceordertypemaster f on a.strOrderType=f.strAdvOrderTypeCode \n"
									+ "where Date("
									+ strDateFilter
									+ ") between '"
									+ fromDate
									+ "' and '"
									+ toDate
									+ "' \n"
									+ "and d.strBillNo not in(select strBillNo from tblbillsettlementdtl) "
									+ " and d.strBillNo not in(select strBillNo from tblqbillsettlementdtl) ");

					sbSqlForBilled33
							.append("select a.strAdvBookingNo,DATE_FORMAT(a.dteAdvBookingDate,'%d-%m-%Y'),DATE_FORMAT(a.dteOrderFor,'%d-%m-%Y'),a.strPOSCode"
									+ " ,ifnull(c.strCustomerName,''),e.strItemName,e.dblQuantity,e.dblAmount,'',ifnull(f.strAdvOrderTypeName,'')"
									+ " ,ifnull(d.strOperationType,''),'','0','"
									+ userCode
									+ "'"
									+ " ,'"
									+ clientCode
									+ "',a.strManualAdvOrderNo "
									+ " from tblqadvbookbillhd a left outer join tblqbillhd d on a.strAdvBookingNo=d.strAdvBookingNo "
									+ " left outer join tblqadvancereceipthd b on a.strAdvBookingNo=b.strAdvBookingNo "
									+ " left outer join tblcustomermaster c on a.strCustomerCode=c.strCustomerCode "
									+ " left outer join tblqadvbookbilldtl e on e.strAdvBookingNo=a.strAdvBookingNo "
									+ " left outer join tbladvanceordertypemaster f on a.strOrderType=f.strAdvOrderTypeCode "
									+ " where Date("
									+ strDateFilter
									+ ") between '"
									+ fromDate
									+ "' and '"
									+ toDate
									+ "' "
									+ " and d.strBillNo not in(select strBillNo from tblqbillsettlementdtl) "
									+ " and d.strSettelmentMode is not null");

					if (!strReportType.equalsIgnoreCase("All")) {
						// settled
						sbSqlForBilled1.append(" and d.strOperationType='"
								+ strReportType + "' ");
						sbSqlForBilled2.append(" and d.strOperationType='"
								+ strReportType + "' ");
						sbSqlForBilled3.append(" and d.strOperationType='"
								+ strReportType + "' ");
						// billed
						sbSqlForBilled11.append(" and d.strOperationType='"
								+ strReportType + "' ");
						sbSqlForBilled22.append(" and d.strOperationType='"
								+ strReportType + "' ");
						sbSqlForBilled33.append(" and d.strOperationType='"
								+ strReportType + "' ");
					}

					// opened
					sbSqlForOpen
							.append("select a.strAdvBookingNo,DATE_FORMAT(a.dteAdvBookingDate,'%d-%m-%Y'),DATE_FORMAT(a.dteOrderFor,'%d-%m-%Y'),a.strPOSCode,c.strCustomerName\n"
									+ ",e.strItemName,e.dblQuantity,e.dblAmount,'',ifnull(f.strAdvOrderTypeName,'')\n"
									+ ",ifnull(d.strOperationType,''),'','0','"
									+ userCode
									+ "'"
									+ ",'"
									+ clientCode
									+ "',a.strManualAdvOrderNo\n"
									+ "from tbladvbookbillhd a left outer join tblbillhd d on a.strAdvBookingNo=d.strAdvBookingNo \n"
									+ "left outer join tbladvancereceipthd b on a.strAdvBookingNo=b.strAdvBookingNo \n"
									+ "left outer join tblcustomermaster c on a.strCustomerCode=c.strCustomerCode \n"
									+ "left outer join tbladvbookbilldtl e on e.strAdvBookingNo=a.strAdvBookingNo \n"
									+ "left outer join tbladvanceordertypemaster f on a.strOrderType=f.strAdvOrderTypeCode \n"
									+ "where Date("
									+ strDateFilter
									+ ") between '"
									+ fromDate
									+ "' and '"
									+ toDate
									+ "'\n"
									+ "and d.strBillNo is null");

					if (strPOSType.equalsIgnoreCase("HOPOS")) {
						sbSqlForOpen.setLength(0);
						sbSqlForOpen
								.append("select a.strAdvBookingNo,DATE_FORMAT(a.dteAdvBookingDate,'%d-%m-%Y'),DATE_FORMAT(a.dteOrderFor,'%d-%m-%Y'),a.strPOSCode,ifnull(c.strCustomerName,'')\n"
										+ ",e.strItemName,e.dblQuantity,e.dblAmount,'',ifnull(f.strAdvOrderTypeName,'')\n"
										+ ",ifnull(d.strOperationType,''),'','0','"
										+ userCode
										+ "'"
										+ ",'"
										+ clientCode
										+ "',a.strManualAdvOrderNo \n"
										+ "from tblqadvbookbillhd a left outer join tblbillhd d on a.strAdvBookingNo=d.strAdvBookingNo \n"
										+ "left outer join tblqadvancereceipthd b on a.strAdvBookingNo=b.strAdvBookingNo \n"
										+ "left outer join tblcustomermaster c on a.strCustomerCode=c.strCustomerCode \n"
										+ "left outer join tblqadvbookbilldtl e on e.strAdvBookingNo=a.strAdvBookingNo \n"
										+ "left outer join tbladvanceordertypemaster f on a.strOrderType=f.strAdvOrderTypeCode \n"
										+ "where Date("
										+ strDateFilter
										+ ") between '"
										+ fromDate
										+ "' and '"
										+ toDate
										+ "'\n"
										+ "and d.strBillNo is null");
					}
				}

				if (!"All".equalsIgnoreCase(strPOSCode)) {
					if (sbSqlForOpen.length() > 0) {
						// opened
						sbSqlForOpen.append(" and a.strPOSCode='" + strPOSCode
								+ "' ");
					}
					if (sbSqlForBilled1.length() > 0) {
						// settled
						sbSqlForBilled1.append(" and a.strPOSCode='"
								+ strPOSCode + "' ");
					}
					if (sbSqlForBilled2.length() > 0) {
						// settled
						sbSqlForBilled2.append(" and a.strPOSCode='"
								+ strPOSCode + "' ");
					}
					if (sbSqlForBilled3.length() > 0) {
						// settled
						sbSqlForBilled3.append(" and a.strPOSCode='"
								+ strPOSCode + "' ");
					}
					if (sbSqlForBilled11.length() > 0) {
						// billed
						sbSqlForBilled11.append(" and a.strPOSCode='"
								+ strPOSCode + "' ");
					}
					if (sbSqlForBilled22.length() > 0) {
						// billed
						sbSqlForBilled22.append(" and a.strPOSCode='"
								+ strPOSCode + "' ");
					}
					if (sbSqlForBilled33.length() > 0) {
						// billed
						sbSqlForBilled33.append(" and a.strPOSCode='"
								+ strPOSCode + "' ");
					}
				}
				if (!advOrderCode.equalsIgnoreCase("All")) {

					String orderMode = advOrderCode;
					if (sbSqlForOpen.length() > 0) {
						// opened
						sbSqlForOpen.append(" and f.strAdvOrderTypeCode='"
								+ advOrderCode + "' ");
					}
					if (sbSqlForBilled1.length() > 0) {
						// settled
						sbSqlForBilled1.append(" and f.strAdvOrderTypeCode='"
								+ advOrderCode + "' ");
					}
					if (sbSqlForBilled2.length() > 0) {
						// settled
						sbSqlForBilled2.append(" and f.strAdvOrderTypeCode='"
								+ advOrderCode + "' ");
					}
					if (sbSqlForBilled3.length() > 0) {
						// settled
						sbSqlForBilled3.append(" and f.strAdvOrderTypeCode='"
								+ advOrderCode + "' ");
					}
					if (sbSqlForBilled11.length() > 0) {
						// billed
						sbSqlForBilled11.append(" and f.strAdvOrderTypeCode='"
								+ advOrderCode + "' ");
					}
					if (sbSqlForBilled22.length() > 0) {
						// billed
						sbSqlForBilled22.append(" and f.strAdvOrderTypeCode='"
								+ advOrderCode + "' ");
					}
					if (sbSqlForBilled33.length() > 0) {
						// billed
						sbSqlForBilled33.append(" and f.strAdvOrderTypeCode='"
								+ advOrderCode + "' ");
					}

				}

				if (sbSqlForOpen.length() > 0) {
					Query querySql = webPOSSessionFactory.getCurrentSession()
							.createSQLQuery(sbSqlForOpen.toString());
					listSql = querySql.list();

					if (listSql.size() > 0) {

						for (int i = 0; i < listSql.size(); i++) {
							Object[] obj = (Object[]) listSql.get(i);
							JSONObject jObj = new JSONObject();
							jObj.put("AdvBookingNo", obj[0].toString());
							jObj.put("AdvBookingDate", obj[1].toString());
							jObj.put("DteOrderFor", obj[2].toString());
							jObj.put("POSCode", obj[3].toString());
							jObj.put("CustomerName", obj[4].toString());
							jObj.put("ItemName", obj[5].toString());
							jObj.put("Quantity", obj[6].toString());
							jObj.put("GrandTotal", obj[7].toString());
							jObj.put("AdvOrderTypeName", obj[8].toString());
							jObj.put("OperationType", obj[9].toString());
							jObj.put("ManualAdvOrderNo", obj[10].toString());

							jArr.put(jObj);

						}

					}
				}
				if (sbSqlForBilled1.length() > 0) {

					Query querySql = webPOSSessionFactory.getCurrentSession()
							.createSQLQuery(sbSqlForBilled1.toString());
					listSql = querySql.list();

					if (listSql.size() > 0) {

						for (int i = 0; i < listSql.size(); i++) {
							Object[] obj = (Object[]) listSql.get(i);
							JSONObject jObj = new JSONObject();
							jObj.put("AdvBookingNo", obj[0].toString());
							jObj.put("AdvBookingDate", obj[1].toString());
							jObj.put("DteOrderFor", obj[2].toString());
							jObj.put("POSCode", obj[3].toString());
							jObj.put("CustomerName", obj[4].toString());
							jObj.put("ItemName", obj[5].toString());
							jObj.put("Quantity", obj[6].toString());
							jObj.put("GrandTotal", obj[7].toString());
							jObj.put("AdvOrderTypeName", obj[8].toString());
							jObj.put("OperationType", obj[9].toString());
							jObj.put("ManualAdvOrderNo", obj[10].toString());

							jArr.put(jObj);

						}

					}
				}
				if (sbSqlForBilled2.length() > 0) {

					Query querySql = webPOSSessionFactory.getCurrentSession()
							.createSQLQuery(sbSqlForBilled2.toString());
					listSql = querySql.list();

					if (listSql.size() > 0) {

						for (int i = 0; i < listSql.size(); i++) {
							Object[] obj = (Object[]) listSql.get(i);
							JSONObject jObj = new JSONObject();
							jObj.put("AdvBookingNo", obj[0].toString());
							jObj.put("AdvBookingDate", obj[1].toString());
							jObj.put("DteOrderFor", obj[2].toString());
							jObj.put("POSCode", obj[3].toString());
							jObj.put("CustomerName", obj[4].toString());
							jObj.put("ItemName", obj[5].toString());
							jObj.put("Quantity", obj[6].toString());
							jObj.put("GrandTotal", obj[7].toString());
							jObj.put("AdvOrderTypeName", obj[8].toString());
							jObj.put("OperationType", obj[9].toString());
							jObj.put("ManualAdvOrderNo", obj[10].toString());

							jArr.put(jObj);

						}

					}
				}
				if (sbSqlForBilled3.length() > 0) {

					Query querySql = webPOSSessionFactory.getCurrentSession()
							.createSQLQuery(sbSqlForBilled3.toString());
					listSql = querySql.list();

					if (listSql.size() > 0) {

						for (int i = 0; i < listSql.size(); i++) {
							Object[] obj = (Object[]) listSql.get(i);
							JSONObject jObj = new JSONObject();
							jObj.put("AdvBookingNo", obj[0].toString());
							jObj.put("AdvBookingDate", obj[1].toString());
							jObj.put("DteOrderFor", obj[2].toString());
							jObj.put("POSCode", obj[3].toString());
							jObj.put("CustomerName", obj[4].toString());
							jObj.put("ItemName", obj[5].toString());
							jObj.put("Quantity", obj[6].toString());
							jObj.put("GrandTotal", obj[7].toString());
							jObj.put("AdvOrderTypeName", obj[8].toString());
							jObj.put("OperationType", obj[9].toString());
							jObj.put("ManualAdvOrderNo", obj[10].toString());

							jArr.put(jObj);

						}

					}
				}
				if (sbSqlForBilled11.length() > 0) {

					Query querySql = webPOSSessionFactory.getCurrentSession()
							.createSQLQuery(sbSqlForBilled11.toString());
					listSql = querySql.list();

					if (listSql.size() > 0) {

						for (int i = 0; i < listSql.size(); i++) {
							Object[] obj = (Object[]) listSql.get(i);
							JSONObject jObj = new JSONObject();
							jObj.put("AdvBookingNo", obj[0].toString());
							jObj.put("AdvBookingDate", obj[1].toString());
							jObj.put("DteOrderFor", obj[2].toString());
							jObj.put("POSCode", obj[3].toString());
							jObj.put("CustomerName", obj[4].toString());
							jObj.put("ItemName", obj[5].toString());
							jObj.put("Quantity", obj[6].toString());
							jObj.put("GrandTotal", obj[7].toString());
							jObj.put("AdvOrderTypeName", obj[8].toString());
							jObj.put("OperationType", obj[9].toString());
							jObj.put("ManualAdvOrderNo", obj[10].toString());

							jArr.put(jObj);

						}

					}
				}
				if (sbSqlForBilled22.length() > 0) {

					Query querySql = webPOSSessionFactory.getCurrentSession()
							.createSQLQuery(sbSqlForBilled22.toString());
					listSql = querySql.list();

					if (listSql.size() > 0) {

						for (int i = 0; i < listSql.size(); i++) {
							Object[] obj = (Object[]) listSql.get(i);
							JSONObject jObj = new JSONObject();
							jObj.put("AdvBookingNo", obj[0].toString());
							jObj.put("AdvBookingDate", obj[1].toString());
							jObj.put("DteOrderFor", obj[2].toString());
							jObj.put("POSCode", obj[3].toString());
							jObj.put("CustomerName", obj[4].toString());
							jObj.put("ItemName", obj[5].toString());
							jObj.put("Quantity", obj[6].toString());
							jObj.put("GrandTotal", obj[7].toString());
							jObj.put("AdvOrderTypeName", obj[8].toString());
							jObj.put("OperationType", obj[9].toString());
							jObj.put("ManualAdvOrderNo", obj[10].toString());

							jArr.put(jObj);

						}

					}
				}
				if (sbSqlForBilled33.length() > 0) {

					Query querySql = webPOSSessionFactory.getCurrentSession()
							.createSQLQuery(sbSqlForBilled33.toString());
					listSql = querySql.list();

					if (listSql.size() > 0) {

						for (int i = 0; i < listSql.size(); i++) {
							Object[] obj = (Object[]) listSql.get(i);
							JSONObject jObj = new JSONObject();
							jObj.put("AdvBookingNo", obj[0].toString());
							jObj.put("AdvBookingDate", obj[1].toString());
							jObj.put("DteOrderFor", obj[2].toString());
							jObj.put("POSCode", obj[3].toString());
							jObj.put("CustomerName", obj[4].toString());
							jObj.put("ItemName", obj[5].toString());
							jObj.put("Quantity", obj[6].toString());
							jObj.put("GrandTotal", obj[7].toString());
							jObj.put("AdvOrderTypeName", obj[8].toString());
							jObj.put("OperationType", obj[9].toString());
							jObj.put("ManualAdvOrderNo", obj[10].toString());

							jArr.put(jObj);

						}

					}
				}
				jOBjRet.put("jArr", jArr);
				jOBjRet.put("ColHeader", jArrColHeader);

				break;

			// Line Voids

			// Voided KOT

			// Time Audit
			case "Customer Wise":

				jArrColHeader.put("Adv Ord No");
				jArrColHeader.put("Date");
				jArrColHeader.put("Customer");
				jArrColHeader.put("Order For");

				jArrColHeader.put("Order Type");
				jArrColHeader.put("Opeartion Type");
				jArrColHeader.put("Disc Amt");
				jArrColHeader.put("G/T Amt");
				jArrColHeader.put("Adv Amt");
				jArrColHeader.put("Balance");
				jArrColHeader.put("Manual Adv Order No");

				jOBjRet.put("ColHeader", jArrColHeader);

				if (strStatus.equalsIgnoreCase("Open")) // For Open Adv Order
														// Option
				{
					sbSqlForOpen
							.append("select a.strAdvBookingNo,DATE_FORMAT(a.dteAdvBookingDate,'%d-%m-%Y'),DATE_FORMAT(a.dteOrderFor,'%d-%m-%Y')\n"
									+ ",a.strPOSCode,c.strCustomerName,a.dblGrandTotal,ifnull(b.dblAdvDeposite,0)\n"
									+ ",ifnull(a.dblGrandTotal-b.dblAdvDeposite,0) as Balance ,a.dblDiscountAmt\n"
									+ ",ifnull(f.strAdvOrderTypeName,''),ifnull(d.strOperationType,''),ifnull(d.strBillNo,''),'0'"
									+ ",'"
									+ userCode
									+ "','"
									+ clientCode
									+ "'"
									+ ",a.strManualAdvOrderNo\n"
									+ "from tbladvbookbillhd a left outer join tblbillhd d on a.strAdvBookingNo=d.strAdvBookingNo \n"
									+ "left outer join tbladvancereceipthd b on a.strAdvBookingNo=b.strAdvBookingNo "
									+ " left outer join tblcustomermaster c on a.strCustomerCode=c.strCustomerCode \n"
									+ "left outer join tbladvanceordertypemaster f on a.strOrderType=f.strAdvOrderTypeCode \n"
									+ "where  Date("
									+ strDateFilter
									+ ") between '"
									+ fromDate
									+ "' and '"
									+ toDate
									+ "' \n"
									+ "and d.strBillNo is null");

					if (strPOSType.equalsIgnoreCase("HOPOS")) {
						sbSqlForOpen.setLength(0);
						sbSqlForOpen
								.append("select a.strAdvBookingNo,DATE_FORMAT(a.dteAdvBookingDate,'%d-%m-%Y'),DATE_FORMAT(a.dteOrderFor,'%d-%m-%Y')\n"
										+ ",a.strPOSCode,ifnull(c.strCustomerName,''),a.dblGrandTotal,ifnull(b.dblAdvDeposite,0)\n"
										+ ",ifnull(a.dblGrandTotal-b.dblAdvDeposite,0) as Balance ,a.dblDiscountAmt\n"
										+ ",ifnull(f.strAdvOrderTypeName,''),ifnull(d.strOperationType,''),ifnull(d.strBillNo,''),'0'"
										+ ",'"
										+ userCode
										+ "','"
										+ clientCode
										+ "'"
										+ ",a.strManualAdvOrderNo\n"
										+ "from tblqadvbookbillhd a left outer join tblbillhd d on a.strAdvBookingNo=d.strAdvBookingNo \n"
										+ "left outer join tblqadvancereceipthd b on a.strAdvBookingNo=b.strAdvBookingNo "
										+ " left outer join tblcustomermaster c on a.strCustomerCode=c.strCustomerCode \n"
										+ "left outer join tbladvanceordertypemaster f on a.strOrderType=f.strAdvOrderTypeCode \n"
										+ "where  Date("
										+ strDateFilter
										+ ") between '"
										+ fromDate
										+ "' and '"
										+ toDate
										+ "' \n"
										+ "and d.strBillNo is null");
					}
				} else if (strStatus.equalsIgnoreCase("Settled")) // For Settled
																	// Option
				{
					sbSqlForBilled1
							.append("select a.strAdvBookingNo,DATE_FORMAT(a.dteAdvBookingDate,'%d-%m-%Y'),DATE_FORMAT(a.dteOrderFor,'%d-%m-%Y')\n"
									+ ",a.strPOSCode,c.strCustomerName,a.dblGrandTotal,ifnull(b.dblAdvDeposite,0)\n"
									+ ",ifnull(a.dblGrandTotal-b.dblAdvDeposite,0) as Balance ,a.dblDiscountAmt\n"
									+ ",ifnull(f.strAdvOrderTypeName,''),ifnull(d.strOperationType,''),d.strBillNo,'0'"
									+ ",'"
									+ userCode
									+ "','"
									+ clientCode
									+ "'"
									+ ",a.strManualAdvOrderNo\n"
									+ "from tbladvbookbillhd a left outer join tblbillhd d on a.strAdvBookingNo=d.strAdvBookingNo \n"
									+ "left outer join tbladvancereceipthd b on a.strAdvBookingNo=b.strAdvBookingNo left outer join tblcustomermaster c on a.strCustomerCode=c.strCustomerCode \n"
									+ "left outer join tbladvanceordertypemaster f on a.strOrderType=f.strAdvOrderTypeCode \n"
									+ "where  Date("
									+ strDateFilter
									+ ") between '"
									+ fromDate
									+ "' and '"
									+ toDate
									+ "' \n"
									+ "and d.strBillNo is not null and LENGTH(d.strSettelmentMode)>0 ");

					sbSqlForBilled2
							.append("select a.strAdvBookingNo,DATE_FORMAT(a.dteAdvBookingDate,'%d-%m-%Y'),DATE_FORMAT(a.dteOrderFor,'%d-%m-%Y')\n"
									+ ",a.strPOSCode,ifnull(c.strCustomerName,''),a.dblGrandTotal\n"
									+ ",ifnull(b.dblAdvDeposite,0),ifnull(a.dblGrandTotal-b.dblAdvDeposite,0) as Balance ,a.dblDiscountAmt\n"
									+ ",ifnull(f.strAdvOrderTypeName,''),ifnull(d.strOperationType,''),d.strBillNo,'0'"
									+ ",'"
									+ userCode
									+ "','"
									+ clientCode
									+ "'"
									+ ",a.strManualAdvOrderNo\n"
									+ "from tblqadvbookbillhd a left outer join tblbillhd d on a.strAdvBookingNo=d.strAdvBookingNo \n"
									+ "left outer join tblqadvancereceipthd b on a.strAdvBookingNo=b.strAdvBookingNo left outer join tblcustomermaster c on a.strCustomerCode=c.strCustomerCode \n"
									+ "left outer join tbladvanceordertypemaster f on a.strOrderType=f.strAdvOrderTypeCode \n"
									+ "where  Date("
									+ strDateFilter
									+ ") between '"
									+ fromDate
									+ "' and '"
									+ toDate
									+ "' \n"
									+ "and d.strBillNo is not null and LENGTH(d.strSettelmentMode)>0 ");

					sbSqlForBilled3
							.append("select a.strAdvBookingNo,DATE_FORMAT(a.dteAdvBookingDate,'%d-%m-%Y'),DATE_FORMAT(a.dteOrderFor,'%d-%m-%Y')\n"
									+ ",a.strPOSCode,ifnull(c.strCustomerName,''),a.dblGrandTotal\n"
									+ ",ifnull(b.dblAdvDeposite,0),ifnull(a.dblGrandTotal-b.dblAdvDeposite,0) as Balance ,a.dblDiscountAmt\n"
									+ ",ifnull(f.strAdvOrderTypeName,''),ifnull(d.strOperationType,''),d.strBillNo,'0'"
									+ ",'"
									+ userCode
									+ "','"
									+ clientCode
									+ "'"
									+ ",a.strManualAdvOrderNo\n"
									+ "from tblqadvbookbillhd a left outer join tblqbillhd d on a.strAdvBookingNo=d.strAdvBookingNo \n"
									+ "left outer join tblqadvancereceipthd b on a.strAdvBookingNo=b.strAdvBookingNo left outer join tblcustomermaster c on a.strCustomerCode=c.strCustomerCode \n"
									+ "left outer join tbladvanceordertypemaster f on a.strOrderType=f.strAdvOrderTypeCode \n"
									+ "where  Date("
									+ strDateFilter
									+ ") between '"
									+ fromDate
									+ "' and '"
									+ toDate
									+ "' \n"
									+ "and d.strSettelmentMode is not null and LENGTH(d.strSettelmentMode)>0 ");

					if (!strReportType.equalsIgnoreCase("All")) {
						sbSqlForBilled1.append(" and d.strOperationType='"
								+ strReportType + "' ");
						sbSqlForBilled2.append(" and d.strOperationType='"
								+ strReportType + "' ");
						sbSqlForBilled3.append(" and d.strOperationType='"
								+ strReportType + "' ");
					}
				} else if (strStatus.equalsIgnoreCase("Billed")) // For Billed
																	// Option
				{
					sbSqlForBilled1
							.append("select a.strAdvBookingNo,DATE_FORMAT(a.dteAdvBookingDate,'%d-%m-%Y'),DATE_FORMAT(a.dteOrderFor,'%d-%m-%Y')\n"
									+ ",a.strPOSCode,ifnull(c.strCustomerName,''),a.dblGrandTotal,ifnull(b.dblAdvDeposite,0)\n"
									+ ",ifnull(a.dblGrandTotal-b.dblAdvDeposite,0) as Balance ,a.dblDiscountAmt\n"
									+ ",ifnull(f.strAdvOrderTypeName,''),ifnull(d.strOperationType,''),d.strBillNo,'0'"
									+ ",'"
									+ userCode
									+ "','"
									+ clientCode
									+ "'"
									+ ",a.strManualAdvOrderNo\n"
									+ "from tbladvbookbillhd a left outer join tblbillhd d on a.strAdvBookingNo=d.strAdvBookingNo \n"
									+ "left outer join tbladvancereceipthd b on a.strAdvBookingNo=b.strAdvBookingNo left outer join tblcustomermaster c on a.strCustomerCode=c.strCustomerCode \n"
									+ "left outer join tbladvanceordertypemaster f on a.strOrderType=f.strAdvOrderTypeCode \n"
									+ "where Date("
									+ strDateFilter
									+ ") between '"
									+ fromDate
									+ "' and '"
									+ toDate
									+ "' \n"
									+ "and d.strBillNo not in(select strBillNo from tblbillsettlementdtl) "
									+ " and d.strBillNo not in(select strBillNo from tblqbillsettlementdtl) "
									+ "and d.strBillNo is not null");

					sbSqlForBilled2
							.append("select a.strAdvBookingNo,DATE_FORMAT(a.dteAdvBookingDate,'%d-%m-%Y'),DATE_FORMAT(a.dteOrderFor,'%d-%m-%Y')\n"
									+ ",a.strPOSCode,ifnull(c.strCustomerName,''),a.dblGrandTotal\n"
									+ ",ifnull(b.dblAdvDeposite,0),ifnull(a.dblGrandTotal-b.dblAdvDeposite,0) as Balance ,a.dblDiscountAmt\n"
									+ ",ifnull(f.strAdvOrderTypeName,''),ifnull(d.strOperationType,''),d.strBillNo,'0'"
									+ ",'"
									+ userCode
									+ "','"
									+ clientCode
									+ "'"
									+ ",a.strManualAdvOrderNo\n"
									+ "from tblqadvbookbillhd a left outer join tblbillhd d on a.strAdvBookingNo=d.strAdvBookingNo \n"
									+ "left outer join tblqadvancereceipthd b on a.strAdvBookingNo=b.strAdvBookingNo left outer join tblcustomermaster c on a.strCustomerCode=c.strCustomerCode \n"
									+ "left outer join tbladvanceordertypemaster f on a.strOrderType=f.strAdvOrderTypeCode \n"
									+ "where  Date("
									+ strDateFilter
									+ ") between '"
									+ fromDate
									+ "' and '"
									+ toDate
									+ "' \n"
									+ "and d.strBillNo not in(select strBillNo from tblbillsettlementdtl) "
									+ " and d.strBillNo not in(select strBillNo from tblqbillsettlementdtl) "
									+ "and d.strBillNo is not null");

					sbSqlForBilled3
							.append("select a.strAdvBookingNo,DATE_FORMAT(a.dteAdvBookingDate,'%d-%m-%Y'),DATE_FORMAT(a.dteOrderFor,'%d-%m-%Y')\n"
									+ ",a.strPOSCode,ifnull(c.strCustomerName,''),a.dblGrandTotal\n"
									+ ",ifnull(b.dblAdvDeposite,0),ifnull(a.dblGrandTotal-b.dblAdvDeposite,0) as Balance ,a.dblDiscountAmt\n"
									+ ",ifnull(f.strAdvOrderTypeName,''),ifnull(d.strOperationType,''),d.strBillNo,'0'"
									+ ",'"
									+ userCode
									+ "','"
									+ clientCode
									+ "'"
									+ ",a.strManualAdvOrderNo\n"
									+ "from tblqadvbookbillhd a left outer join tblqbillhd d on a.strAdvBookingNo=d.strAdvBookingNo \n"
									+ "left outer join tblqadvancereceipthd b on a.strAdvBookingNo=b.strAdvBookingNo left outer join tblcustomermaster c on a.strCustomerCode=c.strCustomerCode \n"
									+ "left outer join tbladvanceordertypemaster f on a.strOrderType=f.strAdvOrderTypeCode \n"
									+ "where  Date("
									+ strDateFilter
									+ ") between '"
									+ fromDate
									+ "' and '"
									+ toDate
									+ "' \n"
									+ "and d.strBillNo not in(select strBillNo from tblbillsettlementdtl) "
									+ " and d.strBillNo not in(select strBillNo from tblqbillsettlementdtl) "
									+ "and d.strSettelmentMode is not null");

					if (!strReportType.equalsIgnoreCase("All")) {
						sbSqlForBilled1.append(" and d.strOperationType='"
								+ strReportType + "' ");
						sbSqlForBilled2.append(" and d.strOperationType='"
								+ strReportType + "' ");
						sbSqlForBilled3.append(" and d.strOperationType='"
								+ strReportType + "' ");
					}
				} else // For Both Option
				{
					// settled
					sbSqlForBilled1
							.append("select a.strAdvBookingNo,DATE_FORMAT(a.dteAdvBookingDate,'%d-%m-%Y'),DATE_FORMAT(a.dteOrderFor,'%d-%m-%Y')\n"
									+ ",a.strPOSCode,ifnull(c.strCustomerName,''),a.dblGrandTotal,ifnull(b.dblAdvDeposite,0)\n"
									+ ",ifnull(a.dblGrandTotal-b.dblAdvDeposite,0) as Balance ,a.dblDiscountAmt\n"
									+ ",ifnull(f.strAdvOrderTypeName,''),ifnull(d.strOperationType,''),d.strBillNo,'0'"
									+ ",'"
									+ userCode
									+ "','"
									+ clientCode
									+ "'"
									+ ",a.strManualAdvOrderNo\n"
									+ "from tbladvbookbillhd a left outer join tblbillhd d on a.strAdvBookingNo=d.strAdvBookingNo \n"
									+ "left outer join tbladvancereceipthd b on a.strAdvBookingNo=b.strAdvBookingNo left outer join tblcustomermaster c on a.strCustomerCode=c.strCustomerCode \n"
									+ "left outer join tbladvanceordertypemaster f on a.strOrderType=f.strAdvOrderTypeCode \n"
									+ "where  Date("
									+ strDateFilter
									+ ") between '"
									+ fromDate
									+ "' and '"
									+ toDate
									+ "' \n"
									+ "and d.strBillNo is not null and LENGTH(d.strSettelmentMode)>0 ");

					sbSqlForBilled2
							.append("select a.strAdvBookingNo,DATE_FORMAT(a.dteAdvBookingDate,'%d-%m-%Y'),DATE_FORMAT(a.dteOrderFor,'%d-%m-%Y')\n"
									+ ",a.strPOSCode,ifnull(c.strCustomerName,''),a.dblGrandTotal\n"
									+ ",ifnull(b.dblAdvDeposite,0),ifnull(a.dblGrandTotal-b.dblAdvDeposite,0) as Balance ,a.dblDiscountAmt\n"
									+ ",ifnull(f.strAdvOrderTypeName,''),ifnull(d.strOperationType,''),d.strBillNo,'0'"
									+ ",'"
									+ userCode
									+ "','"
									+ clientCode
									+ "'"
									+ ",a.strManualAdvOrderNo\n"
									+ "from tblqadvbookbillhd a left outer join tblbillhd d on a.strAdvBookingNo=d.strAdvBookingNo \n"
									+ "left outer join tblqadvancereceipthd b on a.strAdvBookingNo=b.strAdvBookingNo left outer join tblcustomermaster c on a.strCustomerCode=c.strCustomerCode \n"
									+ "left outer join tbladvanceordertypemaster f on a.strOrderType=f.strAdvOrderTypeCode \n"
									+ "where  Date("
									+ strDateFilter
									+ ") between '"
									+ fromDate
									+ "' and '"
									+ toDate
									+ "' \n"
									+ "and d.strBillNo is not null and LENGTH(d.strSettelmentMode)>0 ");

					sbSqlForBilled3
							.append("select a.strAdvBookingNo,DATE_FORMAT(a.dteAdvBookingDate,'%d-%m-%Y'),DATE_FORMAT(a.dteOrderFor,'%d-%m-%Y')\n"
									+ ",a.strPOSCode,ifnull(c.strCustomerName,''),a.dblGrandTotal\n"
									+ ",ifnull(b.dblAdvDeposite,0),ifnull(a.dblGrandTotal-b.dblAdvDeposite,0) as Balance ,a.dblDiscountAmt\n"
									+ ",ifnull(f.strAdvOrderTypeName,''),ifnull(d.strOperationType,''),d.strBillNo,'0'"
									+ ",'"
									+ userCode
									+ "','"
									+ clientCode
									+ "'"
									+ ",a.strManualAdvOrderNo\n"
									+ "from tblqadvbookbillhd a left outer join tblqbillhd d on a.strAdvBookingNo=d.strAdvBookingNo \n"
									+ "left outer join tblqadvancereceipthd b on a.strAdvBookingNo=b.strAdvBookingNo left outer join tblcustomermaster c on a.strCustomerCode=c.strCustomerCode \n"
									+ "left outer join tbladvanceordertypemaster f on a.strOrderType=f.strAdvOrderTypeCode \n"
									+ "where Date(a.dteOrderFor) between '"
									+ fromDate
									+ "' and '"
									+ toDate
									+ "' \n"
									+ "and d.strSettelmentMode is not null and LENGTH(d.strSettelmentMode)>0 ");

					// billed
					sbSqlForBilled11
							.append("select a.strAdvBookingNo,DATE_FORMAT(a.dteAdvBookingDate,'%d-%m-%Y'),DATE_FORMAT(a.dteOrderFor,'%d-%m-%Y')\n"
									+ ",a.strPOSCode,ifnull(c.strCustomerName,''),a.dblGrandTotal,ifnull(b.dblAdvDeposite,0)\n"
									+ ",ifnull(a.dblGrandTotal-b.dblAdvDeposite,0) as Balance ,a.dblDiscountAmt\n"
									+ ",ifnull(f.strAdvOrderTypeName,''),ifnull(d.strOperationType,''),d.strBillNo,'0'"
									+ ",'"
									+ userCode
									+ "','"
									+ clientCode
									+ "'"
									+ ",a.strManualAdvOrderNo\n"
									+ "from tbladvbookbillhd a left outer join tblbillhd d on a.strAdvBookingNo=d.strAdvBookingNo \n"
									+ "left outer join tbladvancereceipthd b on a.strAdvBookingNo=b.strAdvBookingNo left outer join tblcustomermaster c on a.strCustomerCode=c.strCustomerCode \n"
									+ "left outer join tbladvanceordertypemaster f on a.strOrderType=f.strAdvOrderTypeCode \n"
									+ "where Date("
									+ strDateFilter
									+ ") between '"
									+ fromDate
									+ "' and '"
									+ toDate
									+ "' \n"
									+ "and d.strBillNo not in(select strBillNo from tblbillsettlementdtl) "
									+ " and d.strBillNo not in(select strBillNo from tblqbillsettlementdtl) "
									+ "and d.strBillNo is not null");

					sbSqlForBilled22
							.append("select a.strAdvBookingNo,DATE_FORMAT(a.dteAdvBookingDate,'%d-%m-%Y'),DATE_FORMAT(a.dteOrderFor,'%d-%m-%Y')\n"
									+ ",a.strPOSCode,ifnull(c.strCustomerName,''),a.dblGrandTotal\n"
									+ ",ifnull(b.dblAdvDeposite,0),ifnull(a.dblGrandTotal-b.dblAdvDeposite,0) as Balance ,a.dblDiscountAmt\n"
									+ ",ifnull(f.strAdvOrderTypeName,''),ifnull(d.strOperationType,''),d.strBillNo,'0'"
									+ ",'"
									+ userCode
									+ "','"
									+ clientCode
									+ "'"
									+ ",a.strManualAdvOrderNo\n"
									+ "from tblqadvbookbillhd a left outer join tblbillhd d on a.strAdvBookingNo=d.strAdvBookingNo \n"
									+ "left outer join tblqadvancereceipthd b on a.strAdvBookingNo=b.strAdvBookingNo left outer join tblcustomermaster c on a.strCustomerCode=c.strCustomerCode \n"
									+ "left outer join tbladvanceordertypemaster f on a.strOrderType=f.strAdvOrderTypeCode \n"
									+ "where  Date("
									+ strDateFilter
									+ ") between '"
									+ fromDate
									+ "' and '"
									+ toDate
									+ "' \n"
									+ "and d.strBillNo not in(select strBillNo from tblbillsettlementdtl) "
									+ " and d.strBillNo not in(select strBillNo from tblqbillsettlementdtl) "
									+ "and d.strBillNo is not null");

					sbSqlForBilled33
							.append("select a.strAdvBookingNo,DATE_FORMAT(a.dteAdvBookingDate,'%d-%m-%Y'),DATE_FORMAT(a.dteOrderFor,'%d-%m-%Y')\n"
									+ ",a.strPOSCode,ifnull(c.strCustomerName,''),a.dblGrandTotal\n"
									+ ",ifnull(b.dblAdvDeposite,0),ifnull(a.dblGrandTotal-b.dblAdvDeposite,0) as Balance ,a.dblDiscountAmt\n"
									+ ",ifnull(f.strAdvOrderTypeName,''),ifnull(d.strOperationType,''),d.strBillNo,'0'"
									+ ",'"
									+ userCode
									+ "','"
									+ clientCode
									+ "'"
									+ ",a.strManualAdvOrderNo\n"
									+ "from tblqadvbookbillhd a left outer join tblqbillhd d on a.strAdvBookingNo=d.strAdvBookingNo \n"
									+ "left outer join tblqadvancereceipthd b on a.strAdvBookingNo=b.strAdvBookingNo left outer join tblcustomermaster c on a.strCustomerCode=c.strCustomerCode \n"
									+ "left outer join tbladvanceordertypemaster f on a.strOrderType=f.strAdvOrderTypeCode \n"
									+ "where  Date("
									+ strDateFilter
									+ ") between '"
									+ fromDate
									+ "' and '"
									+ toDate
									+ "' \n"
									+ "and d.strBillNo not in(select strBillNo from tblbillsettlementdtl) "
									+ " and d.strBillNo not in(select strBillNo from tblqbillsettlementdtl) "
									+ "and d.strSettelmentMode is not null");

					if (!strReportType.equalsIgnoreCase("All")) {
						// settled
						sbSqlForBilled1.append(" and d.strOperationType='"
								+ strReportType + "' ");
						sbSqlForBilled2.append(" and d.strOperationType='"
								+ strReportType + "' ");
						sbSqlForBilled3.append(" and d.strOperationType='"
								+ strReportType + "' ");
						// billed
						sbSqlForBilled11.append(" and d.strOperationType='"
								+ strReportType + "' ");
						sbSqlForBilled22.append(" and d.strOperationType='"
								+ strReportType + "' ");
						sbSqlForBilled33.append(" and d.strOperationType='"
								+ strReportType + "' ");
					}

					// opened
					sbSqlForOpen
							.append("select a.strAdvBookingNo,DATE_FORMAT(a.dteAdvBookingDate,'%d-%m-%Y'),DATE_FORMAT(a.dteOrderFor,'%d-%m-%Y')\n"
									+ ",a.strPOSCode,ifnull(c.strCustomerName,''),a.dblGrandTotal,ifnull(b.dblAdvDeposite,0)\n"
									+ ",ifnull(a.dblGrandTotal-b.dblAdvDeposite,0) as Balance ,a.dblDiscountAmt\n"
									+ ",ifnull(f.strAdvOrderTypeName,''),ifnull(d.strOperationType,''),ifnull(d.strBillNo,''),'0'"
									+ ",'"
									+ userCode
									+ "','"
									+ clientCode
									+ "'"
									+ ",a.strManualAdvOrderNo\n"
									+ "from tbladvbookbillhd a left outer join tblbillhd d on a.strAdvBookingNo=d.strAdvBookingNo \n"
									+ "left outer join tbladvancereceipthd b on a.strAdvBookingNo=b.strAdvBookingNo left outer join tblcustomermaster c on a.strCustomerCode=c.strCustomerCode \n"
									+ "left outer join tbladvanceordertypemaster f on a.strOrderType=f.strAdvOrderTypeCode \n"
									+ "where  Date("
									+ strDateFilter
									+ ") between '"
									+ fromDate
									+ "' and '"
									+ toDate
									+ "' \n"
									+ "and d.strBillNo is null");

					if (strPOSType.equalsIgnoreCase("HOPOS")) {
						sbSqlForOpen.setLength(0);
						sbSqlForOpen
								.append("select a.strAdvBookingNo,DATE_FORMAT(a.dteAdvBookingDate,'%d-%m-%Y'),DATE_FORMAT(a.dteOrderFor,'%d-%m-%Y')\n"
										+ ",a.strPOSCode,ifnull(c.strCustomerName,''),a.dblGrandTotal,ifnull(b.dblAdvDeposite,0)\n"
										+ ",ifnull(a.dblGrandTotal-b.dblAdvDeposite,0) as Balance ,a.dblDiscountAmt\n"
										+ ",ifnull(f.strAdvOrderTypeName,''),ifnull(d.strOperationType,''),ifnull(d.strBillNo,''),'0'"
										+ ",'"
										+ userCode
										+ "','"
										+ clientCode
										+ "'"
										+ ",a.strManualAdvOrderNo\n"
										+ "from tblqadvbookbillhd a left outer join tblbillhd d on a.strAdvBookingNo=d.strAdvBookingNo \n"
										+ "left outer join tblqadvancereceipthd b on a.strAdvBookingNo=b.strAdvBookingNo "
										+ " left outer join tblcustomermaster c on a.strCustomerCode=c.strCustomerCode \n"
										+ "left outer join tbladvanceordertypemaster f on a.strOrderType=f.strAdvOrderTypeCode \n"
										+ "where  Date("
										+ strDateFilter
										+ ") between '"
										+ fromDate
										+ "' and '"
										+ toDate
										+ "' \n"
										+ "and d.strBillNo is null");
					}
				}

				if (!"All".equalsIgnoreCase(strPOSCode)) {
					if (sbSqlForOpen.length() > 0) {
						// opened
						sbSqlForOpen.append(" and a.strPOSCode='" + strPOSCode
								+ "' ");
					}
					if (sbSqlForBilled1.length() > 0) {
						// settled
						sbSqlForBilled1.append(" and a.strPOSCode='"
								+ strPOSCode + "' ");
					}
					if (sbSqlForBilled2.length() > 0) {
						// settled
						sbSqlForBilled2.append(" and a.strPOSCode='"
								+ strPOSCode + "' ");
					}
					if (sbSqlForBilled3.length() > 0) {
						// settled
						sbSqlForBilled3.append(" and a.strPOSCode='"
								+ strPOSCode + "' ");
					}
					if (sbSqlForBilled11.length() > 0) {
						// billed
						sbSqlForBilled11.append(" and a.strPOSCode='"
								+ strPOSCode + "' ");
					}
					if (sbSqlForBilled22.length() > 0) {
						// billed
						sbSqlForBilled22.append(" and a.strPOSCode='"
								+ strPOSCode + "' ");
					}
					if (sbSqlForBilled33.length() > 0) {
						// billed
						sbSqlForBilled33.append(" and a.strPOSCode='"
								+ strPOSCode + "' ");
					}
				}
				if (!advOrderCode.equalsIgnoreCase("All")) {
					{
						String orderMode = advOrderCode;

						// opened
						sbSqlForOpen.append(" and f.strAdvOrderTypeCode='"
								+ advOrderCode + "' ");
					}
					if (sbSqlForBilled1.length() > 0) {
						// settled
						sbSqlForBilled1.append(" and f.strAdvOrderTypeCode='"
								+ advOrderCode + "' ");
					}
					if (sbSqlForBilled2.length() > 0) {
						// settled
						sbSqlForBilled2.append(" and f.strAdvOrderTypeCode='"
								+ advOrderCode + "' ");
					}
					if (sbSqlForBilled3.length() > 0) {
						// settled
						sbSqlForBilled3.append(" and f.strAdvOrderTypeCode='"
								+ advOrderCode + "' ");
					}
					if (sbSqlForBilled11.length() > 0) {
						// billed
						sbSqlForBilled11.append(" and f.strAdvOrderTypeCode='"
								+ advOrderCode + "' ");
					}
					if (sbSqlForBilled22.length() > 0) {
						// billed
						sbSqlForBilled22.append(" and f.strAdvOrderTypeCode='"
								+ advOrderCode + "' ");
					}
					if (sbSqlForBilled33.length() > 0) {
						// billed
						sbSqlForBilled33.append(" and f.strAdvOrderTypeCode='"
								+ advOrderCode + "' ");
					}

				}
				if (sbSqlForOpen.length() > 0) {
					Query querySql = webPOSSessionFactory.getCurrentSession()
							.createSQLQuery(sbSqlForOpen.toString());
					listSql = querySql.list();

					if (listSql.size() > 0) {

						for (int i = 0; i < listSql.size(); i++) {
							Object[] obj = (Object[]) listSql.get(i);
							JSONObject jObj = new JSONObject();
							jObj.put("AdvBookingNo", obj[0].toString());
							jObj.put("AdvBookingDate", obj[1].toString());
							jObj.put("DteOrderFor", obj[2].toString());
							jObj.put("POSCode", obj[3].toString());
							jObj.put("CustomerName", obj[4].toString());
							jObj.put("GrandTotal", obj[5].toString());
							jObj.put("AdvDeposite", obj[6].toString());
							jObj.put("Balance", obj[7].toString());
							jObj.put("DiscountAmt", obj[8].toString());
							jObj.put("AdvOrderTypeName", obj[9].toString());
							jObj.put("OperationType", obj[10].toString());
							jObj.put("BillNo", obj[11].toString());

							jObj.put("ManualAdvOrderNo", obj[13].toString());

							jArr.put(jObj);

						}

					}
				}
				if (sbSqlForBilled1.length() > 0) {

					Query querySql = webPOSSessionFactory.getCurrentSession()
							.createSQLQuery(sbSqlForBilled1.toString());
					listSql = querySql.list();

					if (listSql.size() > 0) {

						for (int i = 0; i < listSql.size(); i++) {
							Object[] obj = (Object[]) listSql.get(i);
							JSONObject jObj = new JSONObject();
							jObj.put("AdvBookingNo", obj[0].toString());
							jObj.put("AdvBookingDate", obj[1].toString());
							jObj.put("DteOrderFor", obj[2].toString());
							jObj.put("POSCode", obj[3].toString());
							jObj.put("CustomerName", obj[4].toString());
							jObj.put("GrandTotal", obj[5].toString());
							jObj.put("AdvDeposite", obj[6].toString());
							jObj.put("Balance", obj[7].toString());
							jObj.put("DiscountAmt", obj[8].toString());
							jObj.put("AdvOrderTypeName", obj[9].toString());
							jObj.put("OperationType", obj[10].toString());
							jObj.put("BillNo", obj[11].toString());

							jObj.put("ManualAdvOrderNo", obj[13].toString());

							jArr.put(jObj);

						}

					}
				}
				if (sbSqlForBilled2.length() > 0) {

					Query querySql = webPOSSessionFactory.getCurrentSession()
							.createSQLQuery(sbSqlForBilled2.toString());
					listSql = querySql.list();

					if (listSql.size() > 0) {

						for (int i = 0; i < listSql.size(); i++) {
							Object[] obj = (Object[]) listSql.get(i);
							JSONObject jObj = new JSONObject();
							jObj.put("AdvBookingNo", obj[0].toString());
							jObj.put("AdvBookingDate", obj[1].toString());
							jObj.put("DteOrderFor", obj[2].toString());
							jObj.put("POSCode", obj[3].toString());
							jObj.put("CustomerName", obj[4].toString());
							jObj.put("GrandTotal", obj[5].toString());
							jObj.put("AdvDeposite", obj[6].toString());
							jObj.put("Balance", obj[7].toString());
							jObj.put("DiscountAmt", obj[8].toString());
							jObj.put("AdvOrderTypeName", obj[9].toString());
							jObj.put("OperationType", obj[10].toString());
							jObj.put("BillNo", obj[11].toString());

							jObj.put("ManualAdvOrderNo", obj[13].toString());

							jArr.put(jObj);

						}

					}
				}
				if (sbSqlForBilled3.length() > 0) {

					Query querySql = webPOSSessionFactory.getCurrentSession()
							.createSQLQuery(sbSqlForBilled3.toString());
					listSql = querySql.list();

					if (listSql.size() > 0) {

						for (int i = 0; i < listSql.size(); i++) {
							Object[] obj = (Object[]) listSql.get(i);
							JSONObject jObj = new JSONObject();
							jObj.put("AdvBookingNo", obj[0].toString());
							jObj.put("AdvBookingDate", obj[1].toString());
							jObj.put("DteOrderFor", obj[2].toString());
							jObj.put("POSCode", obj[3].toString());
							jObj.put("CustomerName", obj[4].toString());
							jObj.put("GrandTotal", obj[5].toString());
							jObj.put("AdvDeposite", obj[6].toString());
							jObj.put("Balance", obj[7].toString());
							jObj.put("DiscountAmt", obj[8].toString());
							jObj.put("AdvOrderTypeName", obj[9].toString());
							jObj.put("OperationType", obj[10].toString());
							jObj.put("BillNo", obj[11].toString());

							jObj.put("ManualAdvOrderNo", obj[13].toString());

							jArr.put(jObj);

						}

					}
				}
				if (sbSqlForBilled11.length() > 0) {

					Query querySql = webPOSSessionFactory.getCurrentSession()
							.createSQLQuery(sbSqlForBilled11.toString());
					listSql = querySql.list();

					if (listSql.size() > 0) {

						for (int i = 0; i < listSql.size(); i++) {
							Object[] obj = (Object[]) listSql.get(i);
							JSONObject jObj = new JSONObject();
							jObj.put("AdvBookingNo", obj[0].toString());
							jObj.put("AdvBookingDate", obj[1].toString());
							jObj.put("DteOrderFor", obj[2].toString());
							jObj.put("POSCode", obj[3].toString());
							jObj.put("CustomerName", obj[4].toString());
							jObj.put("GrandTotal", obj[5].toString());
							jObj.put("AdvDeposite", obj[6].toString());
							jObj.put("Balance", obj[7].toString());
							jObj.put("DiscountAmt", obj[8].toString());
							jObj.put("AdvOrderTypeName", obj[9].toString());
							jObj.put("OperationType", obj[10].toString());
							jObj.put("BillNo", obj[11].toString());

							jObj.put("ManualAdvOrderNo", obj[13].toString());

							jArr.put(jObj);

						}

					}
				}
				if (sbSqlForBilled22.length() > 0) {

					Query querySql = webPOSSessionFactory.getCurrentSession()
							.createSQLQuery(sbSqlForBilled22.toString());
					listSql = querySql.list();

					if (listSql.size() > 0) {

						for (int i = 0; i < listSql.size(); i++) {
							Object[] obj = (Object[]) listSql.get(i);
							JSONObject jObj = new JSONObject();
							jObj.put("AdvBookingNo", obj[0].toString());
							jObj.put("AdvBookingDate", obj[1].toString());
							jObj.put("DteOrderFor", obj[2].toString());
							jObj.put("POSCode", obj[3].toString());
							jObj.put("CustomerName", obj[4].toString());
							jObj.put("GrandTotal", obj[5].toString());
							jObj.put("AdvDeposite", obj[6].toString());
							jObj.put("Balance", obj[7].toString());
							jObj.put("DiscountAmt", obj[8].toString());
							jObj.put("AdvOrderTypeName", obj[9].toString());
							jObj.put("OperationType", obj[10].toString());
							jObj.put("BillNo", obj[11].toString());

							jObj.put("ManualAdvOrderNo", obj[13].toString());

							jArr.put(jObj);

						}

					}
				}
				if (sbSqlForBilled33.length() > 0) {

					Query querySql = webPOSSessionFactory.getCurrentSession()
							.createSQLQuery(sbSqlForBilled33.toString());
					listSql = querySql.list();

					if (listSql.size() > 0) {

						for (int i = 0; i < listSql.size(); i++) {
							Object[] obj = (Object[]) listSql.get(i);
							JSONObject jObj = new JSONObject();
							jObj.put("AdvBookingNo", obj[0].toString());
							jObj.put("AdvBookingDate", obj[1].toString());
							jObj.put("DteOrderFor", obj[2].toString());
							jObj.put("POSCode", obj[3].toString());
							jObj.put("CustomerName", obj[4].toString());
							jObj.put("GrandTotal", obj[5].toString());
							jObj.put("AdvDeposite", obj[6].toString());
							jObj.put("Balance", obj[7].toString());
							jObj.put("DiscountAmt", obj[8].toString());
							jObj.put("AdvOrderTypeName", obj[9].toString());
							jObj.put("OperationType", obj[10].toString());
							jObj.put("BillNo", obj[11].toString());

							jObj.put("ManualAdvOrderNo", obj[13].toString());

							jArr.put(jObj);

						}

					}
				}
				jOBjRet.put("jArr", jArr);
				break;

			// KOT Analysis
			case "Bill Wise":

				jArrColHeader.put("Adv Ord No");
				jArrColHeader.put("Adv Book Date");
				jArrColHeader.put("Order For");
				jArrColHeader.put("Settle Date");
				jArrColHeader.put("Order By");
				jArrColHeader.put("Order Type");
				jArrColHeader.put("Operation");
				jArrColHeader.put("POS Code");
				jArrColHeader.put("Settlement Mode");
				jArrColHeader.put("Grand Total");
				jArrColHeader.put("Advance");
				jArrColHeader.put("Balance");
				jArrColHeader.put("Bill No");
				jArrColHeader.put("Settlement Amount");
				jArrColHeader.put("Manual Adv Order No");

				jOBjRet.put("ColHeader", jArrColHeader);

				sbSqlForOpen.setLength(0);
				sbSqlForBilled1.setLength(0);
				sbSqlForBilled2.setLength(0);
				sbSqlForBilled3.setLength(0);
				sbSqlForBilled11.setLength(0);
				sbSqlForBilled22.setLength(0);
				sbSqlForBilled33.setLength(0);
				sbSqlForOpen.append("");
				if (strStatus.equalsIgnoreCase("Open")) // For Open Adv Order
														// Option
				{
					sbSqlForOpen
							.append("select a.strAdvBookingNo,DATE_FORMAT(a.dteAdvBookingDate,'%d-%m-%Y') \n"
									+ ",DATE_FORMAT(a.dteOrderFor,'%d-%m-%Y') ,a.strPOSCode,a.strSettelmentMode,a.dblGrandTotal \n"
									+ ",ifnull(b.dblAdvDeposite,0),ifnull(a.dblGrandTotal-b.dblAdvDeposite,0) as Balance \n"
									+ ",ifnull(c.strWShortName,''),ifnull(f.strAdvOrderTypeName,''),'',ifnull(e.strBillNo,''),0\n"
									+ ",'"
									+ userCode
									+ "','"
									+ clientCode
									+ "' "
									+ ",a.strManualAdvOrderNo,ifnull(DATE_FORMAT(e.dteSettleDate,'%d-%m-%Y'),'') \n"
									+ "from tbladvbookbillhd a \n"
									+ "left outer join tbladvancereceipthd b on a.strAdvBookingNo=b.strAdvBookingNo \n"
									+ "left outer join tblwaitermaster c on a.strWaiterNo=c.strWaiterNo  \n"
									+ "left outer join tbladvanceordertypemaster f on a.strOrderType=f.strAdvOrderTypeCode \n"
									+ "left outer join tblbillhd e on a.strAdvBookingNo=e.strAdvBookingNo\n"
									+ " where  Date("
									+ strDateFilter
									+ ") between '"
									+ fromDate
									+ "' and '"
									+ toDate
									+ "' \n"
									+ "and e.strBillNo is null");

					if (strPOSType.equalsIgnoreCase("HOPOS")) {
						sbSqlForOpen.setLength(0);
						sbSqlForOpen
								.append("select a.strAdvBookingNo,DATE_FORMAT(a.dteAdvBookingDate,'%d-%m-%Y') \n"
										+ ",DATE_FORMAT(a.dteOrderFor,'%d-%m-%Y')  ,a.strPOSCode,a.strSettelmentMode,a.dblGrandTotal \n"
										+ ",ifnull(b.dblAdvDeposite,0),ifnull(a.dblGrandTotal-b.dblAdvDeposite,0) as Balance \n"
										+ ",ifnull(c.strWShortName,''),ifnull(f.strAdvOrderTypeName,''),'',ifnull(e.strBillNo,''),0\n"
										+ ",'"
										+ userCode
										+ "','"
										+ clientCode
										+ "'"
										+ ",a.strManualAdvOrderNo,ifnull(DATE_FORMAT(e.dteSettleDate,'%d-%m-%Y'),'')\n"
										+ "from tblqadvbookbillhd a \n"
										+ "left outer join tblqadvancereceipthd b on a.strAdvBookingNo=b.strAdvBookingNo \n"
										+ "left outer join tblwaitermaster c on a.strWaiterNo=c.strWaiterNo  \n"
										+ "left outer join tbladvanceordertypemaster f on a.strOrderType=f.strAdvOrderTypeCode \n"
										+ "left outer join tblqbillhd e on a.strAdvBookingNo=e.strAdvBookingNo\n"
										+ " where  Date("
										+ strDateFilter
										+ ") between '"
										+ fromDate
										+ "' and '"
										+ toDate
										+ "' \n"
										+ "and e.strBillNo is null");
					}
				} else if (strStatus.equalsIgnoreCase("Settled")) // For Settled
																	// Option
				{
					sbSqlForBilled1
							.append("select a.strAdvBookingNo,DATE_FORMAT(a.dteAdvBookingDate,'%d-%m-%Y') \n"
									+ ",DATE_FORMAT(a.dteOrderFor,'%d-%m-%Y')  ,a.strPOSCode,h.strSettelmentDesc,a.dblGrandTotal \n"
									+ ",ifnull(b.dblAdvDeposite,0),ifnull(a.dblGrandTotal-b.dblAdvDeposite,0) as Balance \n"
									+ ",ifnull(c.strWShortName,''),ifnull(f.strAdvOrderTypeName,''),ifnull(d.strOperationType,'')\n"
									+ ",ifnull(d.strBillNo,'') ,ifnull(g.dblSettlementAmt,0.00) \n"
									+ ",'"
									+ userCode
									+ "','"
									+ clientCode
									+ "'"
									+ ",a.strManualAdvOrderNo,ifnull(DATE_FORMAT(d.dteSettleDate,'%d-%m-%Y'),'')\n"
									+ "from tbladvbookbillhd a left outer join tbladvancereceipthd b on a.strAdvBookingNo=b.strAdvBookingNo\n"
									+ "left outer join tblwaitermaster c on a.strWaiterNo=c.strWaiterNo \n"
									+ "left outer join tblbillhd d on a.strAdvBookingNo=d.strAdvBookingNo \n"
									+ "left outer join tbladvanceordertypemaster f on a.strOrderType=f.strAdvOrderTypeCode \n"
									+ "inner join tblbillsettlementdtl g on d.strBillNo=g.strBillNo "
									+ "left outer join tblsettelmenthd h on g.strSettlementCode=h.strSettelmentCode \n"
									+ " where  Date("
									+ strDateFilter
									+ ") between '"
									+ fromDate
									+ "' and '"
									+ toDate
									+ "' \n"
									+ "and d.strSettelmentMode is not null ");

					sbSqlForBilled2
							.append("select a.strAdvBookingNo,DATE_FORMAT(a.dteAdvBookingDate,'%d-%m-%Y') \n"
									+ ",DATE_FORMAT(a.dteOrderFor,'%d-%m-%Y')  ,a.strPOSCode,h.strSettelmentDesc,a.dblGrandTotal \n"
									+ ",ifnull(b.dblAdvDeposite,0),ifnull(a.dblGrandTotal-b.dblAdvDeposite,0) as Balance \n"
									+ ",ifnull(c.strWShortName,''),ifnull(f.strAdvOrderTypeName,''),ifnull(d.strOperationType,'')\n"
									+ ",ifnull(d.strBillNo,'') ,ifnull(g.dblSettlementAmt,0.00) \n"
									+ ",'"
									+ userCode
									+ "','"
									+ clientCode
									+ "'"
									+ ",a.strManualAdvOrderNo,ifnull(DATE_FORMAT(d.dteSettleDate,'%d-%m-%Y'),'')\n"
									+ "from tblqadvbookbillhd a left outer join tblqadvancereceipthd b on a.strAdvBookingNo=b.strAdvBookingNo\n"
									+ "left outer join tblwaitermaster c on a.strWaiterNo=c.strWaiterNo \n"
									+ "left outer join tblbillhd d on a.strAdvBookingNo=d.strAdvBookingNo \n"
									+ "left outer join tbladvanceordertypemaster f on a.strOrderType=f.strAdvOrderTypeCode \n"
									+ "inner join tblbillsettlementdtl g on d.strBillNo=g.strBillNo "
									+ "left outer join tblsettelmenthd h on g.strSettlementCode=h.strSettelmentCode \n"
									+ " where  Date("
									+ strDateFilter
									+ ") between '"
									+ fromDate
									+ "' and '"
									+ toDate
									+ "' \n"
									+ "and d.strSettelmentMode is not null ");

					sbSqlForBilled3
							.append("select a.strAdvBookingNo,DATE_FORMAT(a.dteAdvBookingDate,'%d-%m-%Y') \n"
									+ ",DATE_FORMAT(a.dteOrderFor,'%d-%m-%Y') ,a.strPOSCode,h.strSettelmentDesc,a.dblGrandTotal \n"
									+ ",ifnull(b.dblAdvDeposite,0),ifnull(a.dblGrandTotal-b.dblAdvDeposite,0) as Balance \n"
									+ ",ifnull(c.strWShortName,''),ifnull(f.strAdvOrderTypeName,''),ifnull(d.strOperationType,'')\n"
									+ ",ifnull(d.strBillNo,'') ,ifnull(g.dblSettlementAmt,0.00) \n"
									+ ",'"
									+ userCode
									+ "','"
									+ clientCode
									+ "'"
									+ ",a.strManualAdvOrderNo,ifnull(DATE_FORMAT(d.dteSettleDate,'%d-%m-%Y'),'')\n"
									+ "from tblqadvbookbillhd a left outer join tblqadvancereceipthd b on a.strAdvBookingNo=b.strAdvBookingNo\n"
									+ "left outer join tblwaitermaster c on a.strWaiterNo=c.strWaiterNo \n"
									+ "left outer join tblqbillhd d on a.strAdvBookingNo=d.strAdvBookingNo \n"
									+ "left outer join tbladvanceordertypemaster f on a.strOrderType=f.strAdvOrderTypeCode \n"
									+ "inner join tblqbillsettlementdtl g on d.strBillNo=g.strBillNo "
									+ "left outer join tblsettelmenthd h on g.strSettlementCode=h.strSettelmentCode \n"
									+ " where  Date("
									+ strDateFilter
									+ ") between '"
									+ fromDate
									+ "' and '"
									+ toDate
									+ "' \n"
									+ "and d.strSettelmentMode is not null ");

					if (!strReportType.equalsIgnoreCase("All")) {
						sbSqlForBilled1.append(" and d.strOperationType='"
								+ strReportType + "' ");
						sbSqlForBilled2.append(" and d.strOperationType='"
								+ strReportType + "' ");
						sbSqlForBilled3.append(" and d.strOperationType='"
								+ strReportType + "' ");
					}
				} else if (strStatus.equalsIgnoreCase("Billed")) // For Billed
																	// Option
				{
					sbSqlForBilled1
							.append("select a.strAdvBookingNo,DATE_FORMAT(a.dteAdvBookingDate,'%d-%m-%Y') \n"
									+ ",DATE_FORMAT(a.dteOrderFor,'%d-%m-%Y') ,a.strPOSCode,a.strSettelmentMode,a.dblGrandTotal \n"
									+ ",ifnull(b.dblAdvDeposite,0),ifnull(a.dblGrandTotal-b.dblAdvDeposite,0) as Balance \n"
									+ ",ifnull(c.strWShortName,''),ifnull(f.strAdvOrderTypeName,''),ifnull(d.strOperationType,'')\n"
									+ ",ifnull(d.strBillNo,'') ,ifnull(d.dblGrandTotal,0.00) \n"
									+ ",'"
									+ userCode
									+ "','"
									+ clientCode
									+ "'"
									+ ",a.strManualAdvOrderNo,ifnull(DATE_FORMAT(d.dteSettleDate,'%d-%m-%Y'),'') \n"
									+ "from tbladvbookbillhd a left outer join tbladvancereceipthd b on a.strAdvBookingNo=b.strAdvBookingNo\n"
									+ "left outer join tblwaitermaster c on a.strWaiterNo=c.strWaiterNo \n"
									+ "left outer join tblbillhd d on a.strAdvBookingNo=d.strAdvBookingNo \n"
									+ "left outer join tbladvanceordertypemaster f on a.strOrderType=f.strAdvOrderTypeCode \n"
									+ "where  Date("
									+ strDateFilter
									+ ") between '"
									+ fromDate
									+ "' and '"
									+ toDate
									+ "' \n"
									+ "and d.strSettelmentMode is not null "
									+ "and d.strBillNo not in(select strBillNo from tblbillsettlementdtl)\n"
									+ " and d.strBillNo not in(select strBillNo from tblqbillsettlementdtl) ");

					sbSqlForBilled2
							.append("select a.strAdvBookingNo,DATE_FORMAT(a.dteAdvBookingDate,'%d-%m-%Y') \n"
									+ ",DATE_FORMAT(a.dteOrderFor,'%d-%m-%Y') ,a.strPOSCode,a.strSettelmentMode,a.dblGrandTotal \n"
									+ ",ifnull(b.dblAdvDeposite,0),ifnull(a.dblGrandTotal-b.dblAdvDeposite,0) as Balance \n"
									+ ",ifnull(c.strWShortName,''),ifnull(f.strAdvOrderTypeName,''),ifnull(d.strOperationType,'')\n"
									+ ",ifnull(d.strBillNo,'') ,ifnull(d.dblGrandTotal,0.00) \n"
									+ ",'"
									+ userCode
									+ "','"
									+ clientCode
									+ "'"
									+ ",a.strManualAdvOrderNo,ifnull(DATE_FORMAT(d.dteSettleDate,'%d-%m-%Y'),'') \n"
									+ "from tblqadvbookbillhd a left outer join tblqadvancereceipthd b on a.strAdvBookingNo=b.strAdvBookingNo\n"
									+ "left outer join tblwaitermaster c on a.strWaiterNo=c.strWaiterNo \n"
									+ "left outer join tblbillhd d on a.strAdvBookingNo=d.strAdvBookingNo \n"
									+ "left outer join tbladvanceordertypemaster f on a.strOrderType=f.strAdvOrderTypeCode \n"
									+ "and d.strBillNo not in(select strBillNo from tblbillsettlementdtl)\n"
									+ "where  Date("
									+ strDateFilter
									+ ") between '"
									+ fromDate
									+ "' and '"
									+ toDate
									+ "' \n"
									+ "and d.strSettelmentMode is not null "
									+ "and d.strBillNo not in(select strBillNo from tblbillsettlementdtl)\n"
									+ " and d.strBillNo not in(select strBillNo from tblqbillsettlementdtl) ");

					sbSqlForBilled3
							.append("select a.strAdvBookingNo,DATE_FORMAT(a.dteAdvBookingDate,'%d-%m-%Y') \n"
									+ ",DATE_FORMAT(a.dteOrderFor,'%d-%m-%Y') ,a.strPOSCode,a.strSettelmentMode,a.dblGrandTotal \n"
									+ ",ifnull(b.dblAdvDeposite,0),ifnull(a.dblGrandTotal-b.dblAdvDeposite,0) as Balance \n"
									+ ",ifnull(c.strWShortName,''),ifnull(f.strAdvOrderTypeName,''),ifnull(d.strOperationType,'')\n"
									+ ",ifnull(d.strBillNo,'') ,ifnull(d.dblGrandTotal,0.00) \n"
									+ ",'"
									+ userCode
									+ "','"
									+ clientCode
									+ "'"
									+ ",a.strManualAdvOrderNo,ifnull(DATE_FORMAT(d.dteSettleDate,'%d-%m-%Y'),'') \n"
									+ "from tblqadvbookbillhd a left outer join tblqadvancereceipthd b on a.strAdvBookingNo=b.strAdvBookingNo\n"
									+ "left outer join tblwaitermaster c on a.strWaiterNo=c.strWaiterNo \n"
									+ "left outer join tblqbillhd d on a.strAdvBookingNo=d.strAdvBookingNo \n"
									+ "left outer join tbladvanceordertypemaster f on a.strOrderType=f.strAdvOrderTypeCode \n"
									+ "and d.strBillNo not in(select strBillNo from tblbillsettlementdtl)\n"
									+ " where  Date("
									+ strDateFilter
									+ ") between '"
									+ fromDate
									+ "' and '"
									+ toDate
									+ "' \n"
									+ "and d.strSettelmentMode is not null "
									+ "and d.strBillNo not in(select strBillNo from tblbillsettlementdtl)\n"
									+ " and d.strBillNo not in(select strBillNo from tblqbillsettlementdtl) ");
					if (!strReportType.equalsIgnoreCase("All")) {
						sbSqlForBilled1.append(" and d.strOperationType='"
								+ strReportType + "' ");
						sbSqlForBilled2.append(" and d.strOperationType='"
								+ strReportType + "' ");
						sbSqlForBilled3.append(" and d.strOperationType='"
								+ strReportType + "' ");
					}
				} else // For Both Option
				{
					// settled
					sbSqlForBilled1
							.append("select a.strAdvBookingNo,DATE_FORMAT(a.dteAdvBookingDate,'%d-%m-%Y') \n"
									+ ",DATE_FORMAT(a.dteOrderFor,'%d-%m-%Y') ,a.strPOSCode,h.strSettelmentDesc,a.dblGrandTotal \n"
									+ ",ifnull(b.dblAdvDeposite,0),ifnull(a.dblGrandTotal-b.dblAdvDeposite,0) as Balance \n"
									+ ",ifnull(c.strWShortName,''),ifnull(f.strAdvOrderTypeName,''),ifnull(d.strOperationType,'')\n"
									+ ",ifnull(d.strBillNo,'') ,ifnull(g.dblSettlementAmt,0.00) \n"
									+ ",'"
									+ userCode
									+ "','"
									+ clientCode
									+ "'"
									+ ",a.strManualAdvOrderNo,ifnull(DATE_FORMAT(d.dteSettleDate,'%d-%m-%Y'),'') \n"
									+ "from tbladvbookbillhd a left outer join tbladvancereceipthd b on a.strAdvBookingNo=b.strAdvBookingNo\n"
									+ "left outer join tblwaitermaster c on a.strWaiterNo=c.strWaiterNo \n"
									+ "left outer join tblbillhd d on a.strAdvBookingNo=d.strAdvBookingNo \n"
									+ "left outer join tbladvanceordertypemaster f on a.strOrderType=f.strAdvOrderTypeCode \n"
									+ "inner join tblbillsettlementdtl g on d.strBillNo=g.strBillNo "
									+ "left outer join tblsettelmenthd h on g.strSettlementCode=h.strSettelmentCode \n"
									+ " where  Date("
									+ strDateFilter
									+ ") between '"
									+ fromDate
									+ "' and '"
									+ toDate
									+ "' \n"
									+ "and d.strSettelmentMode is not null ");

					sbSqlForBilled2
							.append("select a.strAdvBookingNo,DATE_FORMAT(a.dteAdvBookingDate,'%d-%m-%Y') \n"
									+ ",DATE_FORMAT(a.dteOrderFor,'%d-%m-%Y') ,a.strPOSCode,h.strSettelmentDesc,a.dblGrandTotal \n"
									+ ",ifnull(b.dblAdvDeposite,0),ifnull(a.dblGrandTotal-b.dblAdvDeposite,0) as Balance \n"
									+ ",ifnull(c.strWShortName,''),ifnull(f.strAdvOrderTypeName,''),ifnull(d.strOperationType,'')\n"
									+ ",ifnull(d.strBillNo,'') ,ifnull(g.dblSettlementAmt,0.00) \n"
									+ ",'"
									+ userCode
									+ "','"
									+ clientCode
									+ "'"
									+ ",a.strManualAdvOrderNo,ifnull(DATE_FORMAT(d.dteSettleDate,'%d-%m-%Y'),'') \n"
									+ "from tblqadvbookbillhd a left outer join tblqadvancereceipthd b on a.strAdvBookingNo=b.strAdvBookingNo\n"
									+ "left outer join tblwaitermaster c on a.strWaiterNo=c.strWaiterNo \n"
									+ "left outer join tblbillhd d on a.strAdvBookingNo=d.strAdvBookingNo \n"
									+ "left outer join tbladvanceordertypemaster f on a.strOrderType=f.strAdvOrderTypeCode \n"
									+ "inner join tblbillsettlementdtl g on d.strBillNo=g.strBillNo "
									+ "left outer join tblsettelmenthd h on g.strSettlementCode=h.strSettelmentCode \n"
									+ " where  Date("
									+ strDateFilter
									+ ") between '"
									+ fromDate
									+ "' and '"
									+ toDate
									+ "' \n"
									+ "and d.strSettelmentMode is not null ");

					sbSqlForBilled3
							.append("select a.strAdvBookingNo,DATE_FORMAT(a.dteAdvBookingDate,'%d-%m-%Y') \n"
									+ ",DATE_FORMAT(a.dteOrderFor,'%d-%m-%Y')  ,a.strPOSCode,h.strSettelmentDesc,a.dblGrandTotal \n"
									+ ",ifnull(b.dblAdvDeposite,0),ifnull(a.dblGrandTotal-b.dblAdvDeposite,0) as Balance \n"
									+ ",ifnull(c.strWShortName,''),ifnull(f.strAdvOrderTypeName,''),ifnull(d.strOperationType,'')\n"
									+ ",ifnull(d.strBillNo,'') ,ifnull(g.dblSettlementAmt,0.00) \n"
									+ ",'"
									+ userCode
									+ "','"
									+ clientCode
									+ "'"
									+ ",a.strManualAdvOrderNo,ifnull(DATE_FORMAT(d.dteSettleDate,'%d-%m-%Y'),'')\n"
									+ "from tblqadvbookbillhd a left outer join tblqadvancereceipthd b on a.strAdvBookingNo=b.strAdvBookingNo\n"
									+ "left outer join tblwaitermaster c on a.strWaiterNo=c.strWaiterNo \n"
									+ "left outer join tblqbillhd d on a.strAdvBookingNo=d.strAdvBookingNo \n"
									+ "left outer join tbladvanceordertypemaster f on a.strOrderType=f.strAdvOrderTypeCode \n"
									+ "inner join tblqbillsettlementdtl g on d.strBillNo=g.strBillNo "
									+ "left outer join tblsettelmenthd h on g.strSettlementCode=h.strSettelmentCode \n"
									+ " where  Date("
									+ strDateFilter
									+ ") between '"
									+ fromDate
									+ "' and '"
									+ toDate
									+ "' \n"
									+ "and d.strSettelmentMode is not null ");

					// billed
					sbSqlForBilled11
							.append("select a.strAdvBookingNo,DATE_FORMAT(a.dteAdvBookingDate,'%d-%m-%Y') \n"
									+ ",DATE_FORMAT(a.dteOrderFor,'%d-%m-%Y')  ,a.strPOSCode,a.strSettelmentMode,a.dblGrandTotal \n"
									+ ",ifnull(b.dblAdvDeposite,0),ifnull(a.dblGrandTotal-b.dblAdvDeposite,0) as Balance \n"
									+ ",ifnull(c.strWShortName,''),ifnull(f.strAdvOrderTypeName,''),ifnull(d.strOperationType,'')\n"
									+ ",ifnull(d.strBillNo,'') ,ifnull(d.dblGrandTotal,0.00) \n"
									+ ",'"
									+ userCode
									+ "','"
									+ clientCode
									+ "'"
									+ ",a.strManualAdvOrderNo,ifnull(DATE_FORMAT(d.dteSettleDate,'%d-%m-%Y'),'') \n"
									+ "from tbladvbookbillhd a left outer join tbladvancereceipthd b on a.strAdvBookingNo=b.strAdvBookingNo\n"
									+ "left outer join tblwaitermaster c on a.strWaiterNo=c.strWaiterNo \n"
									+ "left outer join tblbillhd d on a.strAdvBookingNo=d.strAdvBookingNo \n"
									+ "left outer join tbladvanceordertypemaster f on a.strOrderType=f.strAdvOrderTypeCode \n"
									+ "where  Date("
									+ strDateFilter
									+ ") between '"
									+ fromDate
									+ "' and '"
									+ toDate
									+ "' \n"
									+ "and d.strSettelmentMode is not null "
									+ "and d.strBillNo not in(select strBillNo from tblbillsettlementdtl)\n"
									+ " and d.strBillNo not in(select strBillNo from tblqbillsettlementdtl) ");

					sbSqlForBilled22
							.append("select a.strAdvBookingNo,DATE_FORMAT(a.dteAdvBookingDate,'%d-%m-%Y') \n"
									+ ",DATE_FORMAT(a.dteOrderFor,'%d-%m-%Y') ,a.strPOSCode,a.strSettelmentMode,a.dblGrandTotal \n"
									+ ",ifnull(b.dblAdvDeposite,0),ifnull(a.dblGrandTotal-b.dblAdvDeposite,0) as Balance \n"
									+ ",ifnull(c.strWShortName,''),ifnull(f.strAdvOrderTypeName,''),ifnull(d.strOperationType,'')\n"
									+ ",ifnull(d.strBillNo,'') ,ifnull(d.dblGrandTotal,0.00) \n"
									+ ",'"
									+ userCode
									+ "','"
									+ clientCode
									+ "'"
									+ ",a.strManualAdvOrderNo,ifnull(DATE_FORMAT(d.dteSettleDate,'%d-%m-%Y'),'') \n"
									+ "from tblqadvbookbillhd a left outer join tblqadvancereceipthd b on a.strAdvBookingNo=b.strAdvBookingNo\n"
									+ "left outer join tblwaitermaster c on a.strWaiterNo=c.strWaiterNo \n"
									+ "left outer join tblbillhd d on a.strAdvBookingNo=d.strAdvBookingNo \n"
									+ "left outer join tbladvanceordertypemaster f on a.strOrderType=f.strAdvOrderTypeCode \n"
									+ "and d.strBillNo not in(select strBillNo from tblbillsettlementdtl)\n"
									+ "where  Date("
									+ strDateFilter
									+ ") between '"
									+ fromDate
									+ "' and '"
									+ toDate
									+ "' \n"
									+ "and d.strSettelmentMode is not null "
									+ "and d.strBillNo not in(select strBillNo from tblbillsettlementdtl)\n"
									+ " and d.strBillNo not in(select strBillNo from tblqbillsettlementdtl) ");

					sbSqlForBilled33
							.append("select a.strAdvBookingNo,DATE_FORMAT(a.dteAdvBookingDate,'%d-%m-%Y') \n"
									+ ",DATE_FORMAT(a.dteOrderFor,'%d-%m-%Y') ,a.strPOSCode,a.strSettelmentMode,a.dblGrandTotal \n"
									+ ",ifnull(b.dblAdvDeposite,0),ifnull(a.dblGrandTotal-b.dblAdvDeposite,0) as Balance \n"
									+ ",ifnull(c.strWShortName,''),ifnull(f.strAdvOrderTypeName,''),ifnull(d.strOperationType,'')\n"
									+ ",ifnull(d.strBillNo,'') ,ifnull(d.dblGrandTotal,0.00) \n"
									+ ",'"
									+ userCode
									+ "','"
									+ clientCode
									+ "'"
									+ ",a.strManualAdvOrderNo,ifnull(DATE_FORMAT(d.dteSettleDate,'%d-%m-%Y'),'') \n"
									+ "from tblqadvbookbillhd a left outer join tblqadvancereceipthd b on a.strAdvBookingNo=b.strAdvBookingNo\n"
									+ "left outer join tblwaitermaster c on a.strWaiterNo=c.strWaiterNo \n"
									+ "left outer join tblqbillhd d on a.strAdvBookingNo=d.strAdvBookingNo \n"
									+ "left outer join tbladvanceordertypemaster f on a.strOrderType=f.strAdvOrderTypeCode \n"
									+ "and d.strBillNo not in(select strBillNo from tblbillsettlementdtl)\n"
									+ " where  Date("
									+ strDateFilter
									+ ") between '"
									+ fromDate
									+ "' and '"
									+ toDate
									+ "' \n"
									+ "and d.strSettelmentMode is not null "
									+ "and d.strBillNo not in(select strBillNo from tblbillsettlementdtl)\n"
									+ " and d.strBillNo not in(select strBillNo from tblqbillsettlementdtl) ");

					if (!strReportType.equalsIgnoreCase("All")) {
						// settled
						sbSqlForBilled1.append(" and d.strOperationType='"
								+ strReportType + "' ");
						sbSqlForBilled2.append(" and d.strOperationType='"
								+ strReportType + "' ");
						sbSqlForBilled3.append(" and d.strOperationType='"
								+ strReportType + "' ");
						// billed
						sbSqlForBilled11.append(" and d.strOperationType='"
								+ strReportType + "' ");
						sbSqlForBilled22.append(" and d.strOperationType='"
								+ strReportType + "' ");
						sbSqlForBilled33.append(" and d.strOperationType='"
								+ strReportType + "' ");
					}

					// opened
					sbSqlForOpen
							.append("select a.strAdvBookingNo,DATE_FORMAT(a.dteAdvBookingDate,'%d-%m-%Y') \n"
									+ ",DATE_FORMAT(a.dteOrderFor,'%d-%m-%Y')  ,a.strPOSCode,a.strSettelmentMode,a.dblGrandTotal \n"
									+ ",ifnull(b.dblAdvDeposite,0),ifnull(a.dblGrandTotal-b.dblAdvDeposite,0) as Balance \n"
									+ ",ifnull(c.strWShortName,''),ifnull(f.strAdvOrderTypeName,''),'',ifnull(e.strBillNo,''),0\n"
									+ ",'"
									+ userCode
									+ "','"
									+ clientCode
									+ "'"
									+ ",a.strManualAdvOrderNo,ifnull(DATE_FORMAT(e.dteSettleDate,'%d-%m-%Y'),'')\n"
									+ "from tbladvbookbillhd a \n"
									+ "left outer join tbladvancereceipthd b on a.strAdvBookingNo=b.strAdvBookingNo \n"
									+ "left outer join tblwaitermaster c on a.strWaiterNo=c.strWaiterNo  \n"
									+ "left outer join tbladvanceordertypemaster f on a.strOrderType=f.strAdvOrderTypeCode \n"
									+ "left outer join tblbillhd e on a.strAdvBookingNo=e.strAdvBookingNo\n"
									+ " where  Date("
									+ strDateFilter
									+ ") between '"
									+ fromDate
									+ "' and '"
									+ toDate
									+ "' \n"
									+ "and e.strBillNo is null");

					if (strPOSType.equalsIgnoreCase("HOPOS")) {
						sbSqlForOpen.setLength(0);
						sbSqlForOpen
								.append("select a.strAdvBookingNo,DATE_FORMAT(a.dteAdvBookingDate,'%d-%m-%Y') \n"
										+ ",DATE_FORMAT(a.dteOrderFor,'%d-%m-%Y')  ,a.strPOSCode,a.strSettelmentMode,a.dblGrandTotal \n"
										+ ",ifnull(b.dblAdvDeposite,0),ifnull(a.dblGrandTotal-b.dblAdvDeposite,0) as Balance \n"
										+ ",ifnull(c.strWShortName,''),ifnull(f.strAdvOrderTypeName,''),'',ifnull(e.strBillNo,''),0\n"
										+ ",'"
										+ userCode
										+ "','"
										+ clientCode
										+ "'"
										+ ",a.strManualAdvOrderNo,ifnull(DATE_FORMAT(e.dteSettleDate,'%d-%m-%Y'),'')\n"
										+ "from tblqadvbookbillhd a \n"
										+ "left outer join tblqadvancereceipthd b on a.strAdvBookingNo=b.strAdvBookingNo \n"
										+ "left outer join tblwaitermaster c on a.strWaiterNo=c.strWaiterNo  \n"
										+ "left outer join tbladvanceordertypemaster f on a.strOrderType=f.strAdvOrderTypeCode \n"
										+ "left outer join tblqbillhd e on a.strAdvBookingNo=e.strAdvBookingNo\n"
										+ " where  Date("
										+ strDateFilter
										+ ") between '"
										+ fromDate
										+ "' and '"
										+ toDate
										+ "' \n"
										+ "and e.strBillNo is null");
					}
				}

				if (!"All".equalsIgnoreCase(strPOSCode)) {
					if (sbSqlForOpen.length() > 0) {
						// opened
						sbSqlForOpen.append(" and a.strPOSCode='" + strPOSCode
								+ "' ");
					}
					if (sbSqlForBilled1.length() > 0) {
						// settled
						sbSqlForBilled1.append(" and a.strPOSCode='"
								+ strPOSCode + "' ");
					}
					if (sbSqlForBilled2.length() > 0) {
						// settled
						sbSqlForBilled2.append(" and a.strPOSCode='"
								+ strPOSCode + "' ");
					}
					if (sbSqlForBilled3.length() > 0) {
						// settled
						sbSqlForBilled3.append(" and a.strPOSCode='"
								+ strPOSCode + "' ");
					}
					if (sbSqlForBilled11.length() > 0) {
						// billed
						sbSqlForBilled11.append(" and a.strPOSCode='"
								+ strPOSCode + "' ");
					}
					if (sbSqlForBilled22.length() > 0) {
						// billed
						sbSqlForBilled22.append(" and a.strPOSCode='"
								+ strPOSCode + "' ");
					}
					if (sbSqlForBilled33.length() > 0) {
						// billed
						sbSqlForBilled33.append(" and a.strPOSCode='"
								+ strPOSCode + "' ");
					}
				}
				if (!advOrderCode.equalsIgnoreCase("All")) {

					String orderMode = advOrderCode;
					if (sbSqlForOpen.length() > 0) {
						// opened
						sbSqlForOpen.append(" and f.strAdvOrderTypeCode='"
								+ advOrderCode + "' ");
					}
					if (sbSqlForBilled1.length() > 0) {
						// settled
						sbSqlForBilled1.append(" and f.strAdvOrderTypeCode='"
								+ advOrderCode + "' ");
					}
					if (sbSqlForBilled2.length() > 0) {
						// settled
						sbSqlForBilled2.append(" and f.strAdvOrderTypeCode='"
								+ advOrderCode + "' ");
					}
					if (sbSqlForBilled3.length() > 0) {
						// settled
						sbSqlForBilled3.append(" and f.strAdvOrderTypeCode='"
								+ advOrderCode + "' ");
					}

					if (sbSqlForBilled11.length() > 0) {
						// billed
						sbSqlForBilled11.append(" and f.strAdvOrderTypeCode='"
								+ advOrderCode + "' ");
					}
					if (sbSqlForBilled22.length() > 0) {
						// billed
						sbSqlForBilled22.append(" and f.strAdvOrderTypeCode='"
								+ advOrderCode + "' ");
					}
					if (sbSqlForBilled33.length() > 0) {
						// billed
						sbSqlForBilled33.append(" and f.strAdvOrderTypeCode='"
								+ advOrderCode + "' ");
					}

				}
				if (sbSqlForOpen.length() > 0) {
					Query querySql = webPOSSessionFactory.getCurrentSession()
							.createSQLQuery(sbSqlForOpen.toString());
					listSql = querySql.list();

					if (listSql.size() > 0) {

						for (int i = 0; i < listSql.size(); i++) {
							Object[] obj = (Object[]) listSql.get(i);
							JSONObject jObj = new JSONObject();
							jObj.put("AdvBookingNo", obj[0].toString());
							jObj.put("AdvBookingDate", obj[1].toString());
							jObj.put("DteOrderFor", obj[2].toString());
							jObj.put("POSCode", obj[3].toString());
							jObj.put("SettelmentMode", obj[4].toString());
							jObj.put("GrandTotal", obj[5].toString());
							jObj.put("AdvDeposite", obj[6].toString());
							jObj.put("Balance", obj[7].toString());
							jObj.put("WShortName", obj[8].toString());
							jObj.put("AdvOrderTypeName", obj[9].toString());
							jObj.put("OperationType", obj[10].toString());
							jObj.put("BillNo", obj[11].toString());
							jObj.put("SettlementAmt", obj[12].toString());
							jObj.put("ManualAdvOrderNo", obj[15].toString());
							jObj.put("SettleDate", obj[16].toString());

							jArr.put(jObj);

						}

					}
				}
				if (sbSqlForBilled1.length() > 0) {

					Query querySql = webPOSSessionFactory.getCurrentSession()
							.createSQLQuery(sbSqlForBilled1.toString());
					listSql = querySql.list();

					if (listSql.size() > 0) {

						for (int i = 0; i < listSql.size(); i++) {
							Object[] obj = (Object[]) listSql.get(i);
							JSONObject jObj = new JSONObject();
							jObj.put("AdvBookingNo", obj[0].toString());
							jObj.put("AdvBookingDate", obj[1].toString());
							jObj.put("DteOrderFor", obj[2].toString());
							jObj.put("POSCode", obj[3].toString());
							jObj.put("SettelmentMode", obj[4].toString());
							jObj.put("GrandTotal", obj[5].toString());
							jObj.put("AdvDeposite", obj[6].toString());
							jObj.put("Balance", obj[7].toString());
							jObj.put("WShortName", obj[8].toString());
							jObj.put("AdvOrderTypeName", obj[9].toString());
							jObj.put("OperationType", obj[10].toString());
							jObj.put("BillNo", obj[11].toString());
							jObj.put("SettlementAmt", obj[12].toString());
							jObj.put("ManualAdvOrderNo", obj[15].toString());
							jObj.put("SettleDate", obj[16].toString());

							jArr.put(jObj);

						}

					}
				}
				if (sbSqlForBilled2.length() > 0) {

					Query querySql = webPOSSessionFactory.getCurrentSession()
							.createSQLQuery(sbSqlForBilled2.toString());
					listSql = querySql.list();

					if (listSql.size() > 0) {

						for (int i = 0; i < listSql.size(); i++) {
							Object[] obj = (Object[]) listSql.get(i);
							JSONObject jObj = new JSONObject();
							jObj.put("AdvBookingNo", obj[0].toString());
							jObj.put("AdvBookingDate", obj[1].toString());
							jObj.put("DteOrderFor", obj[2].toString());
							jObj.put("POSCode", obj[3].toString());
							jObj.put("SettelmentMode", obj[4].toString());
							jObj.put("GrandTotal", obj[5].toString());
							jObj.put("AdvDeposite", obj[6].toString());
							jObj.put("Balance", obj[7].toString());
							jObj.put("WShortName", obj[8].toString());
							jObj.put("AdvOrderTypeName", obj[9].toString());
							jObj.put("OperationType", obj[10].toString());
							jObj.put("BillNo", obj[11].toString());
							jObj.put("SettlementAmt", obj[12].toString());
							jObj.put("ManualAdvOrderNo", obj[15].toString());
							jObj.put("SettleDate", obj[16].toString());

							jArr.put(jObj);

						}

					}
				}
				if (sbSqlForBilled3.length() > 0) {

					Query querySql = webPOSSessionFactory.getCurrentSession()
							.createSQLQuery(sbSqlForBilled3.toString());
					listSql = querySql.list();

					if (listSql.size() > 0) {

						for (int i = 0; i < listSql.size(); i++) {
							Object[] obj = (Object[]) listSql.get(i);
							JSONObject jObj = new JSONObject();
							jObj.put("AdvBookingNo", obj[0].toString());
							jObj.put("AdvBookingDate", obj[1].toString());
							jObj.put("DteOrderFor", obj[2].toString());
							jObj.put("POSCode", obj[3].toString());
							jObj.put("SettelmentMode", obj[4].toString());
							jObj.put("GrandTotal", obj[5].toString());
							jObj.put("AdvDeposite", obj[6].toString());
							jObj.put("Balance", obj[7].toString());
							jObj.put("WShortName", obj[8].toString());
							jObj.put("AdvOrderTypeName", obj[9].toString());
							jObj.put("OperationType", obj[10].toString());
							jObj.put("BillNo", obj[11].toString());
							jObj.put("SettlementAmt", obj[12].toString());
							jObj.put("ManualAdvOrderNo", obj[15].toString());
							jObj.put("SettleDate", obj[16].toString());

							jArr.put(jObj);

						}

					}
				}
				if (sbSqlForBilled11.length() > 0) {

					Query querySql = webPOSSessionFactory.getCurrentSession()
							.createSQLQuery(sbSqlForBilled11.toString());
					listSql = querySql.list();

					if (listSql.size() > 0) {

						for (int i = 0; i < listSql.size(); i++) {
							Object[] obj = (Object[]) listSql.get(i);
							JSONObject jObj = new JSONObject();
							jObj.put("AdvBookingNo", obj[0].toString());
							jObj.put("AdvBookingDate", obj[1].toString());
							jObj.put("DteOrderFor", obj[2].toString());
							jObj.put("POSCode", obj[3].toString());
							jObj.put("SettelmentMode", obj[4].toString());
							jObj.put("GrandTotal", obj[5].toString());
							jObj.put("AdvDeposite", obj[6].toString());
							jObj.put("Balance", obj[7].toString());
							jObj.put("WShortName", obj[8].toString());
							jObj.put("AdvOrderTypeName", obj[9].toString());
							jObj.put("OperationType", obj[10].toString());
							jObj.put("BillNo", obj[11].toString());
							jObj.put("SettlementAmt", obj[12].toString());
							jObj.put("ManualAdvOrderNo", obj[15].toString());
							jObj.put("SettleDate", obj[16].toString());
							jArr.put(jObj);

						}

					}
				}
				if (sbSqlForBilled22.length() > 0) {

					Query querySql = webPOSSessionFactory.getCurrentSession()
							.createSQLQuery(sbSqlForBilled22.toString());
					listSql = querySql.list();

					if (listSql.size() > 0) {

						for (int i = 0; i < listSql.size(); i++) {
							Object[] obj = (Object[]) listSql.get(i);
							JSONObject jObj = new JSONObject();
							jObj.put("AdvBookingNo", obj[0].toString());
							jObj.put("AdvBookingDate", obj[1].toString());
							jObj.put("DteOrderFor", obj[2].toString());
							jObj.put("POSCode", obj[3].toString());
							jObj.put("SettelmentMode", obj[4].toString());
							jObj.put("GrandTotal", obj[5].toString());
							jObj.put("AdvDeposite", obj[6].toString());
							jObj.put("Balance", obj[7].toString());
							jObj.put("WShortName", obj[8].toString());
							jObj.put("AdvOrderTypeName", obj[9].toString());
							jObj.put("OperationType", obj[10].toString());
							jObj.put("BillNo", obj[11].toString());
							jObj.put("SettlementAmt", obj[12].toString());
							jObj.put("ManualAdvOrderNo", obj[15].toString());
							jObj.put("SettleDate", obj[16].toString());

							jArr.put(jObj);

						}

					}
				}
				if (sbSqlForBilled33.length() > 0) {

					Query querySql = webPOSSessionFactory.getCurrentSession()
							.createSQLQuery(sbSqlForBilled33.toString());
					listSql = querySql.list();

					if (listSql.size() > 0) {

						for (int i = 0; i < listSql.size(); i++) {
							Object[] obj = (Object[]) listSql.get(i);
							JSONObject jObj = new JSONObject();
							jObj.put("AdvBookingNo", obj[0].toString());
							jObj.put("AdvBookingDate", obj[1].toString());
							jObj.put("DteOrderFor", obj[2].toString());
							jObj.put("POSCode", obj[3].toString());
							jObj.put("SettelmentMode", obj[4].toString());
							jObj.put("GrandTotal", obj[5].toString());
							jObj.put("AdvDeposite", obj[6].toString());
							jObj.put("Balance", obj[7].toString());
							jObj.put("WShortName", obj[8].toString());
							jObj.put("AdvOrderTypeName", obj[9].toString());
							jObj.put("OperationType", obj[10].toString());
							jObj.put("BillNo", obj[11].toString());
							jObj.put("SettlementAmt", obj[12].toString());
							jObj.put("ManualAdvOrderNo", obj[15].toString());
							jObj.put("SettleDate", obj[16].toString());
							jArr.put(jObj);

						}

					}
				}
				jOBjRet.put("jArr", jArr);

				break;

			case "MenuHead Wise":
				StringBuilder sb = new StringBuilder(strPOSCode);

				jArrColHeader.put("Adv Ord No");

				jArrColHeader.put("Order For");
				jArrColHeader.put("Bill Date");
				jArrColHeader.put("Customer Name");
				jArrColHeader.put("Order Type");
				jArrColHeader.put("Operation Type");
				jArrColHeader.put("Menu Name");
				jArrColHeader.put("Qty");
				jArrColHeader.put("Amount");

				jArrColHeader.put("Manual Adv Order No");

				jOBjRet.put("ColHeader", jArrColHeader);

				sb.setLength(0);
				sb.append("  select a.strAdvBookingNo,DATE_FORMAT(a.dteOrderFor,'%d-%m-%Y') as Orderfor,\n"
						+ " DATE_FORMAT(a.dteAdvBookingDate,'%d-%m-%Y') ,e.strCustomerName,\n"
						+ " ifnull(f.strAdvOrderTypeName,'') , ifnull(d.strOperational,'')  ,ifnull(d.strMenuName,''),\n"
						+ " sum(b.dblQuantity) ,sum(b.dblAmount),a.strManualAdvOrderNo \n"
						+ " from tblqadvbookbillhd a \n"
						+ " left outer join  tblqadvbookbilldtl b on a.strAdvBookingNo=b.strAdvBookingNo \n"
						+ " left outer join tblmenuitempricingdtl c on  b.strItemCode=c.strItemCode \n"
						+ " left outer join tblmenuhd d on c.strMenuCode=d.strMenuCode \n"
						+ " left outer join tblcustomermaster e on a.strCustomerCode=e.strCustomerCode \n"
						+ " left outer join tbladvanceordertypemaster f on a.strOrderType=f.strAdvOrderTypeCode ");

				if ("All".equalsIgnoreCase(strPOSCode)) {
					if (strCustomerCode.equalsIgnoreCase("")) {
						sb.append(" and   Date(" + strDateFilter
								+ ") between '" + fromDate + "' and '" + toDate
								+ "' ");
						if (!advOrderCode.equalsIgnoreCase("All")) {

							String orderMode = advOrderCode;
							sb.append(" and f.strAdvOrderTypeCode='"
									+ advOrderCode + "' ");

						}
						if (!strReportType.equalsIgnoreCase("All")) {
							sb.append(" and d.strOperational='" + strReportType
									+ "' ");
						}

						sb.append(" group by a.strAdvBookingNo, d.strMenuName");
						if (dateFilter.equalsIgnoreCase("Order Date")) {
							sb.append(" order by a.dteOrderFor,strAdvBookingNo");
						} else {
							sb.append(" order by a.dteAdvBookingDate,strAdvBookingNo");
						}
						Query querySql = webPOSSessionFactory
								.getCurrentSession().createSQLQuery(
										sb.toString());
						listSql = querySql.list();

					} else {
						sb.append(" and  a.strCustomerCode='" + strCustomerCode
								+ "'  and  Date(" + strDateFilter
								+ ") between '" + fromDate + "' and '" + toDate
								+ "' ");
						if (!advOrderCode.equalsIgnoreCase("All")) {
							String orderMode = advOrderCode;
							sb.append(" and f.strAdvOrderTypeCode='"
									+ advOrderCode + "' ");

						}
						if (!strReportType.equalsIgnoreCase("All")) {
							sb.append(" and d.strOperational='" + strReportType
									+ "' ");
						}
						sb.append(" group by a.strAdvBookingNo, d.strMenuName");
						if (dateFilter.equalsIgnoreCase("Order Date")) {
							sb.append(" order by a.dteOrderFor,strAdvBookingNo");
						} else {
							sb.append(" order by a.dteAdvBookingDate,strAdvBookingNo");
						}
						Query querySql = webPOSSessionFactory
								.getCurrentSession().createSQLQuery(
										sb.toString());
						listSql = querySql.list();

					}

				} else {
					if (strCustomerCode.equalsIgnoreCase("")) {
						sb.append(" and a.strPOSCode='" + strPOSCode
								+ "' and  Date(" + strDateFilter
								+ ") between '" + fromDate + "' and '" + toDate
								+ "' ");
						if (!advOrderCode.equalsIgnoreCase("All")) {
							String orderMode = advOrderCode;
							sb.append("and f.strAdvOrderTypeCode='"
									+ advOrderCode + "' ");

						}
						if (!strReportType.equalsIgnoreCase("All")) {
							sb.append("and d.strOperational='" + strReportType
									+ "' ");
						}
						sb.append(" group by a.strAdvBookingNo, d.strMenuName");
						if (dateFilter.equalsIgnoreCase("Order Date")) {
							sb.append(" order by dteOrderFor,strAdvBookingNo");
						} else {
							sb.append(" order by dteAdvBookingDate,strAdvBookingNo");
						}
						Query querySql = webPOSSessionFactory
								.getCurrentSession().createSQLQuery(
										sb.toString());
						listSql = querySql.list();

					} else {
						sb.append(" and  a.strPOSCode='" + strPOSCode
								+ "' and a.strCustomerCode='" + strCustomerCode
								+ "'  and  Date(" + strDateFilter
								+ ") between '" + fromDate + "' and '" + toDate
								+ "' ");
						if (!advOrderCode.equalsIgnoreCase("All")) {
							String orderMode = advOrderCode;
							sb.append("and f.strAdvOrderTypeCode='"
									+ advOrderCode + "' ");

						}
						if (!strReportType.equalsIgnoreCase("All")) {
							sb.append("and d.strOperational='" + strReportType
									+ "' ");
						}
						sb.append(" group by a.strAdvBookingNo, d.strMenuName");
						if (dateFilter.equalsIgnoreCase("Order Date")) {
							sb.append(" order by dteOrderFor,strAdvBookingNo");
						} else {
							sb.append(" order by dteAdvBookingDate,strAdvBookingNo");
						}
						Query querySql = webPOSSessionFactory
								.getCurrentSession().createSQLQuery(
										sb.toString());
						listSql = querySql.list();

					}

				}
				if (listSql.size() > 0) {

					for (int i = 0; i < listSql.size(); i++) {
						Object[] obj = (Object[]) listSql.get(i);
						JSONObject jObj = new JSONObject();
						jObj.put("AdvOrdNo", obj[0].toString());
						jObj.put("DteOrderFor", obj[1].toString());
						jObj.put("BillDate", obj[2].toString());
						jObj.put("CustomerName", obj[3].toString());
						jObj.put("OrderType", obj[4].toString());
						jObj.put("OperationType", obj[5].toString());
						jObj.put("MenuName", obj[6].toString());
						jObj.put("Qty", obj[7].toString());
						jObj.put("Amount", obj[8].toString());
						jObj.put("ManulAdvOrderNo", obj[9].toString());

						jArr.put(jObj);

					}

				}
				jOBjRet.put("jArr", jArr);
				break;

			case "Group Wise":

				jArrColHeader.put("Adv Ord No");
				jArrColHeader.put("Order For");
				jArrColHeader.put("Bill Date");
				jArrColHeader.put("Customer Name");
				jArrColHeader.put("Order Type");
				jArrColHeader.put("Operation Type");
				jArrColHeader.put("Group Name");
				jArrColHeader.put("Qty");
				jArrColHeader.put("Amount");
				jArrColHeader.put("Manual Adv Order No");

				jOBjRet.put("ColHeader", jArrColHeader);

				sbSqlForOpen.setLength(0);
				sbSqlForBilled1.setLength(0);
				sbSqlForBilled2.setLength(0);
				sbSqlForBilled3.setLength(0);
				sbSqlForBilled11.setLength(0);
				sbSqlForBilled22.setLength(0);
				sbSqlForBilled33.setLength(0);

				if (strStatus.equalsIgnoreCase("Open")) // For Open Adv Order
														// Option
				{
					sbSqlForOpen
							.append("select a.strAdvBookingNo,DATE_FORMAT(a.dteAdvBookingDate,'%d-%m-%Y'),DATE_FORMAT(a.dteOrderFor,'%d-%m-%Y'),a.strPOSCode"
									+ ",ifnull(c.strCustomerName,'') ,i.strGroupName,sum(e.dblQuantity),sum(e.dblAmount),''"
									+ ",ifnull(f.strAdvOrderTypeName,'') ,ifnull(d.strOperationType,''),'','0'"
									+ ",'"
									+ userCode
									+ "','"
									+ clientCode
									+ "'"
									+ ",a.strManualAdvOrderNo "
									+ "from tbladvbookbillhd a left outer join tblbillhd d on a.strAdvBookingNo=d.strAdvBookingNo "
									+ "left outer join tbladvancereceipthd b on a.strAdvBookingNo=b.strAdvBookingNo "
									+ "left outer join tblcustomermaster c on a.strCustomerCode=c.strCustomerCode  "
									+ "left outer join tbladvbookbilldtl e on e.strAdvBookingNo=a.strAdvBookingNo "
									+ "left outer join tbladvanceordertypemaster f on a.strOrderType=f.strAdvOrderTypeCode "
									+ "left outer join tblitemmaster g on e.strItemCode=g.strItemCode "
									+ "left outer join tblsubgrouphd h on  g.strSubGroupCode=h.strSubGroupCode "
									+ "left outer join tblgrouphd i on h.strGroupCode=i.strGroupCode "
									+ "where  Date("
									+ strDateFilter
									+ ") between '"
									+ fromDate
									+ "' and '"
									+ toDate
									+ "'  "
									+ "and d.strBillNo is null ");

					if (strPOSType.equalsIgnoreCase("HOPOS")) {
						sbSqlForOpen.setLength(0);
						sbSqlForOpen
								.append("select a.strAdvBookingNo,DATE_FORMAT(a.dteAdvBookingDate,'%d-%m-%Y'),DATE_FORMAT(a.dteOrderFor,'%d-%m-%Y'),a.strPOSCode"
										+ ",ifnull(c.strCustomerName,'') ,i.strGroupName,sum(e.dblQuantity),sum(e.dblAmount),''"
										+ ",ifnull(f.strAdvOrderTypeName,'') ,ifnull(d.strOperationType,''),'','0'"
										+ ",'"
										+ userCode
										+ "','"
										+ clientCode
										+ "'"
										+ ",a.strManualAdvOrderNo "
										+ "from tblqadvbookbillhd a left outer join tblbillhd d on a.strAdvBookingNo=d.strAdvBookingNo "
										+ "left outer join tblqadvancereceipthd b on a.strAdvBookingNo=b.strAdvBookingNo "
										+ "left outer join tblcustomermaster c on a.strCustomerCode=c.strCustomerCode  "
										+ "left outer join tblqadvbookbilldtl e on e.strAdvBookingNo=a.strAdvBookingNo "
										+ "left outer join tbladvanceordertypemaster f on a.strOrderType=f.strAdvOrderTypeCode "
										+ "left outer join tblitemmaster g on e.strItemCode=g.strItemCode "
										+ "left outer join tblsubgrouphd h on  g.strSubGroupCode=h.strSubGroupCode "
										+ "left outer join tblgrouphd i on h.strGroupCode=i.strGroupCode "
										+ "where  Date("
										+ strDateFilter
										+ ") between '"
										+ fromDate
										+ "' and '"
										+ toDate
										+ "'  "
										+ "and d.strBillNo is null ");
					}
				} else if (strStatus.equalsIgnoreCase("Settled")) // For Settled
																	// Option
				{
					sbSqlForBilled1
							.append("select a.strAdvBookingNo,DATE_FORMAT(a.dteAdvBookingDate,'%d-%m-%Y'),DATE_FORMAT(a.dteOrderFor,'%d-%m-%Y'),a.strPOSCode,c.strCustomerName "
									+ ",i.strGroupName,sum(e.dblQuantity),sum(e.dblAmount),'',ifnull(f.strAdvOrderTypeName,'') "
									+ ",ifnull(d.strOperationType,''),'','0','"
									+ userCode
									+ "'"
									+ ",'"
									+ clientCode
									+ "',a.strManualAdvOrderNo "
									+ "from tbladvbookbillhd a left outer join tblbillhd d on a.strAdvBookingNo=d.strAdvBookingNo "
									+ " inner join tblbillsettlementdtl j on d.strBillNo=j.strBillNo "
									+ "left outer join tbladvancereceipthd b on a.strAdvBookingNo=b.strAdvBookingNo  "
									+ "left outer join tblcustomermaster c on a.strCustomerCode=c.strCustomerCode  "
									+ "left outer join tbladvbookbilldtl e on e.strAdvBookingNo=a.strAdvBookingNo  "
									+ "left outer join tbladvanceordertypemaster f on a.strOrderType=f.strAdvOrderTypeCode "
									+ "left outer join tblitemmaster g on e.strItemCode=g.strItemCode "
									+ "left outer join tblsubgrouphd h on  g.strSubGroupCode=h.strSubGroupCode "
									+ "left outer join tblgrouphd i on h.strGroupCode=i.strGroupCode "
									+ "where  Date("
									+ strDateFilter
									+ ") between '"
									+ fromDate
									+ "' and '"
									+ toDate
									+ "' "
									+ "and d.strBillNo is not null ");

					sbSqlForBilled2
							.append("select a.strAdvBookingNo,DATE_FORMAT(a.dteAdvBookingDate,'%d-%m-%Y'),DATE_FORMAT(a.dteOrderFor,'%d-%m-%Y'),a.strPOSCode,ifnull(c.strCustomerName,'') "
									+ ",i.strGroupName,sum(e.dblQuantity),sum(e.dblAmount),'',ifnull(f.strAdvOrderTypeName,'') "
									+ ",ifnull(d.strOperationType,''),'','0','"
									+ userCode
									+ "'"
									+ ",'"
									+ clientCode
									+ "',a.strManualAdvOrderNo "
									+ "from tblqadvbookbillhd a left outer join tblbillhd d on a.strAdvBookingNo=d.strAdvBookingNo "
									+ " inner join tblbillsettlementdtl j on d.strBillNo=j.strBillNo "
									+ "left outer join tblqadvancereceipthd b on a.strAdvBookingNo=b.strAdvBookingNo "
									+ "left outer join tblcustomermaster c on a.strCustomerCode=c.strCustomerCode "
									+ "left outer join tblqadvbookbilldtl e on e.strAdvBookingNo=a.strAdvBookingNo "
									+ "left outer join tbladvanceordertypemaster f on a.strOrderType=f.strAdvOrderTypeCode "
									+ "left outer join tblitemmaster g on e.strItemCode=g.strItemCode "
									+ "left outer join tblsubgrouphd h on  g.strSubGroupCode=h.strSubGroupCode "
									+ "left outer join tblgrouphd i on h.strGroupCode=i.strGroupCode  "
									+ "where  Date("
									+ strDateFilter
									+ ") between '"
									+ fromDate
									+ "' and '"
									+ toDate + "' ");

					sbSqlForBilled3
							.append("select a.strAdvBookingNo,DATE_FORMAT(a.dteAdvBookingDate,'%d-%m-%Y'),DATE_FORMAT(a.dteOrderFor,'%d-%m-%Y'),a.strPOSCode,ifnull(c.strCustomerName,'') "
									+ ",i.strGroupName,sum(e.dblQuantity),sum(e.dblAmount),'',ifnull(f.strAdvOrderTypeName,'') "
									+ ",ifnull(d.strOperationType,''),'','0','"
									+ userCode
									+ "'"
									+ ",'"
									+ clientCode
									+ "',a.strManualAdvOrderNo "
									+ "from tblqadvbookbillhd a left outer join tblqbillhd d on a.strAdvBookingNo=d.strAdvBookingNo "
									+ " inner join tblbillsettlementdtl j on d.strBillNo=j.strBillNo "
									+ "left outer join tblqadvancereceipthd b on a.strAdvBookingNo=b.strAdvBookingNo "
									+ "left outer join tblcustomermaster c on a.strCustomerCode=c.strCustomerCode "
									+ "left outer join tblqadvbookbilldtl e on e.strAdvBookingNo=a.strAdvBookingNo "
									+ "left outer join tbladvanceordertypemaster f on a.strOrderType=f.strAdvOrderTypeCode "
									+ "left outer join tblitemmaster g on e.strItemCode=g.strItemCode "
									+ "left outer join tblsubgrouphd h on  g.strSubGroupCode=h.strSubGroupCode "
									+ "left outer join tblgrouphd i on h.strGroupCode=i.strGroupCode  "
									+ "where  Date("
									+ strDateFilter
									+ ") between '"
									+ fromDate
									+ "' and '"
									+ toDate
									+ "' "
									+ "and d.strSettelmentMode is not null ");

					if (!strReportType.equalsIgnoreCase("All")) {
						sbSqlForBilled1.append(" and d.strOperationType='"
								+ strReportType + "' ");
						sbSqlForBilled2.append(" and d.strOperationType='"
								+ strReportType + "' ");
						sbSqlForBilled3.append(" and d.strOperationType='"
								+ strReportType + "' ");
					}
				} else if (strStatus.equalsIgnoreCase("Billed")) // For Billed
																	// Option
				{
					sbSqlForBilled1
							.append("select a.strAdvBookingNo,DATE_FORMAT(a.dteAdvBookingDate,'%d-%m-%Y'),DATE_FORMAT(a.dteOrderFor,'%d-%m-%Y'),a.strPOSCode,ifnull(c.strCustomerName,'') "
									+ ",ifnull(i.strGroupName,''),sum(e.dblQuantity),sum(e.dblAmount),'',ifnull(f.strAdvOrderTypeName,'') "
									+ ",ifnull(d.strOperationType,''),'','0','"
									+ userCode
									+ "'"
									+ ",'"
									+ clientCode
									+ "',a.strManualAdvOrderNo "
									+ "from tbladvbookbillhd a left outer join tblbillhd d on a.strAdvBookingNo=d.strAdvBookingNo  "
									+ "left outer join tbladvancereceipthd b on a.strAdvBookingNo=b.strAdvBookingNo  "
									+ "left outer join tblcustomermaster c on a.strCustomerCode=c.strCustomerCode  "
									+ "left outer join tbladvbookbilldtl e on e.strAdvBookingNo=a.strAdvBookingNo  "
									+ "left outer join tbladvanceordertypemaster f on a.strOrderType=f.strAdvOrderTypeCode "
									+ "left outer join tblitemmaster g on e.strItemCode=g.strItemCode "
									+ "left outer join tblsubgrouphd h on  g.strSubGroupCode=h.strSubGroupCode "
									+ "left outer join tblgrouphd i on h.strGroupCode=i.strGroupCode "
									+ "where  Date("
									+ strDateFilter
									+ ") between '"
									+ fromDate
									+ "' and '"
									+ toDate
									+ "' "
									+ "and d.strBillNo not in(select strBillNo from tblbillsettlementdtl) "
									+ " and d.strBillNo not in(select strBillNo from tblqbillsettlementdtl) "
									+ "and d.strBillNo is not null ");

					sbSqlForBilled2
							.append("select a.strAdvBookingNo,DATE_FORMAT(a.dteAdvBookingDate,'%d-%m-%Y'),DATE_FORMAT(a.dteOrderFor,'%d-%m-%Y'),a.strPOSCode,ifnull(c.strCustomerName,'') "
									+ ",ifnull(i.strGroupName,''),sum(e.dblQuantity),sum(e.dblAmount),'',ifnull(f.strAdvOrderTypeName,'') "
									+ ",ifnull(d.strOperationType,''),'','0','"
									+ userCode
									+ "'"
									+ ",'"
									+ clientCode
									+ "',a.strManualAdvOrderNo "
									+ "from tblqadvbookbillhd a left outer join tblbillhd d on a.strAdvBookingNo=d.strAdvBookingNo "
									+ "left outer join tblqadvancereceipthd b on a.strAdvBookingNo=b.strAdvBookingNo "
									+ "left outer join tblcustomermaster c on a.strCustomerCode=c.strCustomerCode "
									+ "left outer join tblqadvbookbilldtl e on e.strAdvBookingNo=a.strAdvBookingNo "
									+ "left outer join tbladvanceordertypemaster f on a.strOrderType=f.strAdvOrderTypeCode "
									+ "left outer join tblitemmaster g on e.strItemCode=g.strItemCode "
									+ "left outer join tblsubgrouphd h on  g.strSubGroupCode=h.strSubGroupCode "
									+ "left outer join tblgrouphd i on h.strGroupCode=i.strGroupCode  "
									+ "where  Date("
									+ strDateFilter
									+ ") between '"
									+ fromDate
									+ "' and '"
									+ toDate
									+ "' "
									+ "and d.strBillNo not in(select strBillNo from tblbillsettlementdtl) "
									+ " and d.strBillNo not in(select strBillNo from tblqbillsettlementdtl) ");

					sbSqlForBilled3
							.append("select a.strAdvBookingNo,DATE_FORMAT(a.dteAdvBookingDate,'%d-%m-%Y'),DATE_FORMAT(a.dteOrderFor,'%d-%m-%Y'),a.strPOSCode,ifnull(c.strCustomerName,'') "
									+ ",ifnull(i.strGroupName,''),sum(e.dblQuantity),sum(e.dblAmount),'',ifnull(f.strAdvOrderTypeName,'') "
									+ ",ifnull(d.strOperationType,''),'','0','"
									+ userCode
									+ "'"
									+ ",'"
									+ clientCode
									+ "',a.strManualAdvOrderNo "
									+ "from tblqadvbookbillhd a left outer join tblqbillhd d on a.strAdvBookingNo=d.strAdvBookingNo "
									+ "left outer join tblqadvancereceipthd b on a.strAdvBookingNo=b.strAdvBookingNo "
									+ "left outer join tblcustomermaster c on a.strCustomerCode=c.strCustomerCode "
									+ "left outer join tblqadvbookbilldtl e on e.strAdvBookingNo=a.strAdvBookingNo "
									+ "left outer join tbladvanceordertypemaster f on a.strOrderType=f.strAdvOrderTypeCode "
									+ "left outer join tblitemmaster g on e.strItemCode=g.strItemCode "
									+ "left outer join tblsubgrouphd h on  g.strSubGroupCode=h.strSubGroupCode "
									+ "left outer join tblgrouphd i on h.strGroupCode=i.strGroupCode  "
									+ "where  Date("
									+ strDateFilter
									+ ") between '"
									+ fromDate
									+ "' and '"
									+ toDate
									+ "' "
									+ "and d.strBillNo not in(select strBillNo from tblbillsettlementdtl) "
									+ " and d.strBillNo not in(select strBillNo from tblqbillsettlementdtl) "
									+ "and d.strSettelmentMode is not null ");

					if (!strReportType.equalsIgnoreCase("All")) {
						sbSqlForBilled1.append(" and d.strOperationType='"
								+ strReportType + "' ");
						sbSqlForBilled2.append(" and d.strOperationType='"
								+ strReportType + "' ");
						sbSqlForBilled3.append(" and d.strOperationType='"
								+ strReportType + "' ");
					}
				} else // For Both Option
				{
					// settled
					sbSqlForBilled1
							.append("select a.strAdvBookingNo,DATE_FORMAT(a.dteAdvBookingDate,'%d-%m-%Y'),DATE_FORMAT(a.dteOrderFor,'%d-%m-%Y'),a.strPOSCode,ifnull(c.strCustomerName,'') "
									+ ",i.strGroupName,sum(e.dblQuantity),sum(e.dblAmount),'',ifnull(f.strAdvOrderTypeName,'') "
									+ ",ifnull(d.strOperationType,''),'','0','"
									+ userCode
									+ "'"
									+ ",'"
									+ clientCode
									+ "',a.strManualAdvOrderNo "
									+ "from tbladvbookbillhd a left outer join tblbillhd d on a.strAdvBookingNo=d.strAdvBookingNo  "
									+ " inner join tblbillsettlementdtl j on d.strBillNo=j.strBillNo "
									+ "left outer join tbladvancereceipthd b on a.strAdvBookingNo=b.strAdvBookingNo  "
									+ "left outer join tblcustomermaster c on a.strCustomerCode=c.strCustomerCode  "
									+ "left outer join tbladvbookbilldtl e on e.strAdvBookingNo=a.strAdvBookingNo  "
									+ "left outer join tbladvanceordertypemaster f on a.strOrderType=f.strAdvOrderTypeCode "
									+ "left outer join tblitemmaster g on e.strItemCode=g.strItemCode "
									+ "left outer join tblsubgrouphd h on  g.strSubGroupCode=h.strSubGroupCode "
									+ "left outer join tblgrouphd i on h.strGroupCode=i.strGroupCode "
									+ "where  Date("
									+ strDateFilter
									+ ") between '"
									+ fromDate
									+ "' and '"
									+ toDate
									+ "' "
									+ "and d.strBillNo is not null ");

					sbSqlForBilled2
							.append("select a.strAdvBookingNo,DATE_FORMAT(a.dteAdvBookingDate,'%d-%m-%Y'),DATE_FORMAT(a.dteOrderFor,'%d-%m-%Y'),a.strPOSCode,ifnull(c.strCustomerName,'') "
									+ ",i.strGroupName,sum(e.dblQuantity),sum(e.dblAmount),'',ifnull(f.strAdvOrderTypeName,'') "
									+ ",ifnull(d.strOperationType,''),'','0','"
									+ userCode
									+ "'"
									+ ",'"
									+ clientCode
									+ "',a.strManualAdvOrderNo "
									+ "from tblqadvbookbillhd a left outer join tblbillhd d on a.strAdvBookingNo=d.strAdvBookingNo "
									+ " inner join tblbillsettlementdtl j on d.strBillNo=j.strBillNo "
									+ "left outer join tblqadvancereceipthd b on a.strAdvBookingNo=b.strAdvBookingNo "
									+ "left outer join tblcustomermaster c on a.strCustomerCode=c.strCustomerCode "
									+ "left outer join tblqadvbookbilldtl e on e.strAdvBookingNo=a.strAdvBookingNo "
									+ "left outer join tbladvanceordertypemaster f on a.strOrderType=f.strAdvOrderTypeCode "
									+ "left outer join tblitemmaster g on e.strItemCode=g.strItemCode "
									+ "left outer join tblsubgrouphd h on  g.strSubGroupCode=h.strSubGroupCode "
									+ "left outer join tblgrouphd i on h.strGroupCode=i.strGroupCode  "
									+ "where  Date("
									+ strDateFilter
									+ ") between '"
									+ fromDate
									+ "' and '"
									+ toDate + "' ");

					sbSqlForBilled3
							.append("select a.strAdvBookingNo,DATE_FORMAT(a.dteAdvBookingDate,'%d-%m-%Y'),DATE_FORMAT(a.dteOrderFor,'%d-%m-%Y'),a.strPOSCode,ifnull(c.strCustomerName,'') "
									+ ",i.strGroupName,sum(e.dblQuantity),sum(e.dblAmount),'',ifnull(f.strAdvOrderTypeName,'') "
									+ ",ifnull(d.strOperationType,''),'','0','"
									+ userCode
									+ "'"
									+ ",'"
									+ clientCode
									+ "',a.strManualAdvOrderNo "
									+ "from tblqadvbookbillhd a left outer join tblqbillhd d on a.strAdvBookingNo=d.strAdvBookingNo "
									+ " inner join tblbillsettlementdtl j on d.strBillNo=j.strBillNo "
									+ "left outer join tblqadvancereceipthd b on a.strAdvBookingNo=b.strAdvBookingNo "
									+ "left outer join tblcustomermaster c on a.strCustomerCode=c.strCustomerCode "
									+ "left outer join tblqadvbookbilldtl e on e.strAdvBookingNo=a.strAdvBookingNo "
									+ "left outer join tbladvanceordertypemaster f on a.strOrderType=f.strAdvOrderTypeCode "
									+ "left outer join tblitemmaster g on e.strItemCode=g.strItemCode "
									+ "left outer join tblsubgrouphd h on  g.strSubGroupCode=h.strSubGroupCode "
									+ "left outer join tblgrouphd i on h.strGroupCode=i.strGroupCode  "
									+ "where  Date("
									+ strDateFilter
									+ ") between '"
									+ fromDate
									+ "' and '"
									+ toDate
									+ "' "
									+ "and d.strSettelmentMode is not null ");

					// billed
					sbSqlForBilled11
							.append("select a.strAdvBookingNo,DATE_FORMAT(a.dteAdvBookingDate,'%d-%m-%Y'),DATE_FORMAT(a.dteOrderFor,'%d-%m-%Y'),a.strPOSCode,ifnull(c.strCustomerName,'') "
									+ ",ifnull(i.strGroupName,''),sum(e.dblQuantity),sum(e.dblAmount),'',ifnull(f.strAdvOrderTypeName,'') "
									+ ",ifnull(d.strOperationType,''),'','0','"
									+ userCode
									+ "'"
									+ ",'"
									+ clientCode
									+ "',a.strManualAdvOrderNo "
									+ "from tbladvbookbillhd a left outer join tblbillhd d on a.strAdvBookingNo=d.strAdvBookingNo  "
									+ "left outer join tbladvancereceipthd b on a.strAdvBookingNo=b.strAdvBookingNo  "
									+ "left outer join tblcustomermaster c on a.strCustomerCode=c.strCustomerCode  "
									+ "left outer join tbladvbookbilldtl e on e.strAdvBookingNo=a.strAdvBookingNo  "
									+ "left outer join tbladvanceordertypemaster f on a.strOrderType=f.strAdvOrderTypeCode "
									+ "left outer join tblitemmaster g on e.strItemCode=g.strItemCode "
									+ "left outer join tblsubgrouphd h on  g.strSubGroupCode=h.strSubGroupCode "
									+ "left outer join tblgrouphd i on h.strGroupCode=i.strGroupCode "
									+ "where  Date("
									+ strDateFilter
									+ ") between '"
									+ fromDate
									+ "' and '"
									+ toDate
									+ "' "
									+ "and d.strBillNo not in(select strBillNo from tblbillsettlementdtl) "
									+ " and d.strBillNo not in(select strBillNo from tblqbillsettlementdtl) "
									+ "and d.strBillNo is not null ");

					sbSqlForBilled22
							.append("select a.strAdvBookingNo,DATE_FORMAT(a.dteAdvBookingDate,'%d-%m-%Y'),DATE_FORMAT(a.dteOrderFor,'%d-%m-%Y'),a.strPOSCode,ifnull(c.strCustomerName,'') "
									+ ",ifnull(i.strGroupName,''),sum(e.dblQuantity),sum(e.dblAmount),'',ifnull(f.strAdvOrderTypeName,'') "
									+ ",ifnull(d.strOperationType,''),'','0','"
									+ userCode
									+ "'"
									+ ",'"
									+ clientCode
									+ "',a.strManualAdvOrderNo "
									+ "from tblqadvbookbillhd a left outer join tblbillhd d on a.strAdvBookingNo=d.strAdvBookingNo "
									+ "left outer join tblqadvancereceipthd b on a.strAdvBookingNo=b.strAdvBookingNo "
									+ "left outer join tblcustomermaster c on a.strCustomerCode=c.strCustomerCode "
									+ "left outer join tblqadvbookbilldtl e on e.strAdvBookingNo=a.strAdvBookingNo "
									+ "left outer join tbladvanceordertypemaster f on a.strOrderType=f.strAdvOrderTypeCode "
									+ "left outer join tblitemmaster g on e.strItemCode=g.strItemCode "
									+ "left outer join tblsubgrouphd h on  g.strSubGroupCode=h.strSubGroupCode "
									+ "left outer join tblgrouphd i on h.strGroupCode=i.strGroupCode  "
									+ "where Date("
									+ strDateFilter
									+ ") between '"
									+ fromDate
									+ "' and '"
									+ toDate
									+ "' "
									+ "and d.strBillNo not in(select strBillNo from tblbillsettlementdtl) "
									+ " and d.strBillNo not in(select strBillNo from tblqbillsettlementdtl) ");

					sbSqlForBilled33
							.append("select a.strAdvBookingNo,DATE_FORMAT(a.dteAdvBookingDate,'%d-%m-%Y'),DATE_FORMAT(a.dteOrderFor,'%d-%m-%Y'),a.strPOSCode,ifnull(c.strCustomerName,'') "
									+ ",ifnull(i.strGroupName,''),sum(e.dblQuantity),sum(e.dblAmount),'',ifnull(f.strAdvOrderTypeName,'') "
									+ ",ifnull(d.strOperationType,''),'','0','"
									+ userCode
									+ "'"
									+ ",'"
									+ clientCode
									+ "',a.strManualAdvOrderNo "
									+ "from tblqadvbookbillhd a left outer join tblqbillhd d on a.strAdvBookingNo=d.strAdvBookingNo "
									+ "left outer join tblqadvancereceipthd b on a.strAdvBookingNo=b.strAdvBookingNo "
									+ "left outer join tblcustomermaster c on a.strCustomerCode=c.strCustomerCode "
									+ "left outer join tblqadvbookbilldtl e on e.strAdvBookingNo=a.strAdvBookingNo "
									+ "left outer join tbladvanceordertypemaster f on a.strOrderType=f.strAdvOrderTypeCode "
									+ "left outer join tblitemmaster g on e.strItemCode=g.strItemCode "
									+ "left outer join tblsubgrouphd h on  g.strSubGroupCode=h.strSubGroupCode "
									+ "left outer join tblgrouphd i on h.strGroupCode=i.strGroupCode  "
									+ "where  Date("
									+ strDateFilter
									+ ") between '"
									+ fromDate
									+ "' and '"
									+ toDate
									+ "' "
									+ "and d.strBillNo not in(select strBillNo from tblbillsettlementdtl) "
									+ " and d.strBillNo not in(select strBillNo from tblqbillsettlementdtl) "
									+ "and d.strSettelmentMode is not null ");

					if (!strReportType.equalsIgnoreCase("All")) {
						// settled
						sbSqlForBilled1.append(" and d.strOperationType='"
								+ strReportType + "' ");
						sbSqlForBilled2.append(" and d.strOperationType='"
								+ strReportType + "' ");
						sbSqlForBilled3.append(" and d.strOperationType='"
								+ strReportType + "' ");
						// billed
						sbSqlForBilled11.append(" and d.strOperationType='"
								+ strReportType + "' ");
						sbSqlForBilled22.append(" and d.strOperationType='"
								+ strReportType + "' ");
						sbSqlForBilled33.append(" and d.strOperationType='"
								+ strReportType + "' ");
					}

					// opened
					sbSqlForOpen
							.append("select a.strAdvBookingNo,DATE_FORMAT(a.dteAdvBookingDate,'%d-%m-%Y'),DATE_FORMAT(a.dteOrderFor,'%d-%m-%Y'),a.strPOSCode,ifnull(c.strCustomerName,'') "
									+ ",i.strGroupName,sum(e.dblQuantity),sum(e.dblAmount),'',ifnull(f.strAdvOrderTypeName,'') "
									+ ",ifnull(d.strOperationType,''),'','0','"
									+ userCode
									+ "'"
									+ ",'"
									+ clientCode
									+ "',a.strManualAdvOrderNo "
									+ "from tbladvbookbillhd a left outer join tblbillhd d on a.strAdvBookingNo=d.strAdvBookingNo "
									+ "left outer join tbladvancereceipthd b on a.strAdvBookingNo=b.strAdvBookingNo  "
									+ "left outer join tblcustomermaster c on a.strCustomerCode=c.strCustomerCode  "
									+ "left outer join tbladvbookbilldtl e on e.strAdvBookingNo=a.strAdvBookingNo "
									+ "left outer join tbladvanceordertypemaster f on a.strOrderType=f.strAdvOrderTypeCode "
									+ "left outer join tblitemmaster g on e.strItemCode=g.strItemCode "
									+ "left outer join tblsubgrouphd h on  g.strSubGroupCode=h.strSubGroupCode "
									+ "left outer join tblgrouphd i on h.strGroupCode=i.strGroupCode "
									+ "where  Date("
									+ strDateFilter
									+ ") between '"
									+ fromDate
									+ "' and '"
									+ toDate
									+ "'  "
									+ "and d.strBillNo is null ");

					if (strPOSType.equalsIgnoreCase("HOPOS")) {
						sbSqlForOpen.setLength(0);
						sbSqlForOpen
								.append("select a.strAdvBookingNo,DATE_FORMAT(a.dteAdvBookingDate,'%d-%m-%Y'),DATE_FORMAT(a.dteOrderFor,'%d-%m-%Y'),a.strPOSCode"
										+ ",ifnull(c.strCustomerName,'') ,i.strGroupName,sum(e.dblQuantity),sum(e.dblAmount),''"
										+ ",ifnull(f.strAdvOrderTypeName,'') ,ifnull(d.strOperationType,''),'','0'"
										+ ",'"
										+ userCode
										+ "','"
										+ clientCode
										+ "'"
										+ ",a.strManualAdvOrderNo "
										+ "from tblqadvbookbillhd a left outer join tblbillhd d on a.strAdvBookingNo=d.strAdvBookingNo "
										+ "left outer join tblqadvancereceipthd b on a.strAdvBookingNo=b.strAdvBookingNo "
										+ "left outer join tblcustomermaster c on a.strCustomerCode=c.strCustomerCode  "
										+ "left outer join tblqadvbookbilldtl e on e.strAdvBookingNo=a.strAdvBookingNo "
										+ "left outer join tbladvanceordertypemaster f on a.strOrderType=f.strAdvOrderTypeCode "
										+ "left outer join tblitemmaster g on e.strItemCode=g.strItemCode "
										+ "left outer join tblsubgrouphd h on  g.strSubGroupCode=h.strSubGroupCode "
										+ "left outer join tblgrouphd i on h.strGroupCode=i.strGroupCode "
										+ "where  Date("
										+ strDateFilter
										+ ") between '"
										+ fromDate
										+ "' and '"
										+ toDate
										+ "'  "
										+ "and d.strBillNo is null ");
					}
				}

				if (!"All".equalsIgnoreCase(strPOSCode)) {
					if (sbSqlForOpen.length() > 0) {
						// opened
						sbSqlForOpen.append(" and a.strPOSCode='" + strPOSCode
								+ "' ");
					}
					if (sbSqlForBilled1.length() > 0) {
						// settled
						sbSqlForBilled1.append(" and a.strPOSCode='"
								+ strPOSCode + "' ");
					}
					if (sbSqlForBilled2.length() > 0) {
						// settled
						sbSqlForBilled2.append(" and a.strPOSCode='"
								+ strPOSCode + "' ");
					}
					if (sbSqlForBilled3.length() > 0) {
						// settled
						sbSqlForBilled3.append(" and a.strPOSCode='"
								+ strPOSCode + "' ");
					}
					if (sbSqlForBilled11.length() > 0) {
						// billed
						sbSqlForBilled11.append(" and a.strPOSCode='"
								+ strPOSCode + "' ");
					}
					if (sbSqlForBilled22.length() > 0) {
						// billed
						sbSqlForBilled22.append(" and a.strPOSCode='"
								+ strPOSCode + "' ");
					}
					if (sbSqlForBilled33.length() > 0) {
						// billed
						sbSqlForBilled33.append(" and a.strPOSCode='"
								+ strPOSCode + "' ");
					}
				}
				if (!advOrderCode.equalsIgnoreCase("All")) {

					if (sbSqlForOpen.length() > 0) {
						// opened
						sbSqlForOpen.append(" and f.strAdvOrderTypeCode='"
								+ advOrderCode + "' ");
					}
					if (sbSqlForBilled1.length() > 0) {
						// settled
						sbSqlForBilled1.append(" and f.strAdvOrderTypeCode='"
								+ advOrderCode + "' ");
					}
					if (sbSqlForBilled2.length() > 0) {
						// settled
						sbSqlForBilled2.append(" and f.strAdvOrderTypeCode='"
								+ advOrderCode + "' ");
					}
					if (sbSqlForBilled3.length() > 0) {
						// settled
						sbSqlForBilled3.append(" and f.strAdvOrderTypeCode='"
								+ advOrderCode + "' ");
					}
					if (sbSqlForBilled11.length() > 0) {
						// billed
						sbSqlForBilled11.append(" and f.strAdvOrderTypeCode='"
								+ advOrderCode + "' ");
					}
					if (sbSqlForBilled22.length() > 0) {
						// billed
						sbSqlForBilled22.append(" and f.strAdvOrderTypeCode='"
								+ advOrderCode + "' ");
					}
					if (sbSqlForBilled33.length() > 0) {
						// billed
						sbSqlForBilled33.append(" and f.strAdvOrderTypeCode='"
								+ advOrderCode + "' ");
					}

				}

				if (sbSqlForOpen.length() > 0) {
					// opened
					sbSqlForOpen.append(" group by i.strGroupCode ");
				}
				if (sbSqlForBilled1.length() > 0) {
					// settled
					sbSqlForBilled1.append(" group by i.strGroupCode ");
				}
				if (sbSqlForBilled2.length() > 0) {
					// settled
					sbSqlForBilled2.append(" group by i.strGroupCode ");
				}
				if (sbSqlForBilled3.length() > 0) {
					// settled
					sbSqlForBilled3.append(" group by i.strGroupCode ");
				}

				if (sbSqlForBilled11.length() > 0) {
					// billled
					sbSqlForBilled11.append(" group by i.strGroupCode ");
				}
				if (sbSqlForBilled22.length() > 0) {
					// billled
					sbSqlForBilled22.append(" group by i.strGroupCode ");
				}
				if (sbSqlForBilled33.length() > 0) {
					// billled
					sbSqlForBilled33.append(" group by i.strGroupCode ");
				}
				if (sbSqlForOpen.length() > 0) {
					Query querySql = webPOSSessionFactory.getCurrentSession()
							.createSQLQuery(sbSqlForOpen.toString());
					listSql = querySql.list();

					if (listSql.size() > 0) {

						for (int i = 0; i < listSql.size(); i++) {
							Object[] obj = (Object[]) listSql.get(i);
							JSONObject jObj = new JSONObject();
							jObj.put("AdvBookingNo", obj[0].toString());
							jObj.put("AdvBookingDate", obj[1].toString());
							jObj.put("DteOrderFor", obj[2].toString());
							jObj.put("POSCode", obj[3].toString());
							jObj.put("CustomerName", obj[4].toString());
							jObj.put("GroupName", obj[5].toString());
							jObj.put("Quantity", obj[6].toString());
							jObj.put("GrandTotal", obj[7].toString());
							jObj.put("AdvOrderTypeName", obj[8].toString());

							jObj.put("OperationType", obj[9].toString());

							jObj.put("ManualAdvOrderNo", obj[10].toString());

							jArr.put(jObj);

						}

					}
				}
				if (sbSqlForBilled1.length() > 0) {

					Query querySql = webPOSSessionFactory.getCurrentSession()
							.createSQLQuery(sbSqlForBilled1.toString());
					listSql = querySql.list();

					if (listSql.size() > 0) {

						for (int i = 0; i < listSql.size(); i++) {
							Object[] obj = (Object[]) listSql.get(i);
							JSONObject jObj = new JSONObject();
							jObj.put("AdvBookingNo", obj[0].toString());
							jObj.put("AdvBookingDate", obj[1].toString());
							jObj.put("DteOrderFor", obj[2].toString());
							jObj.put("POSCode", obj[3].toString());
							jObj.put("CustomerName", obj[4].toString());
							jObj.put("GroupName", obj[5].toString());
							jObj.put("Quantity", obj[6].toString());
							jObj.put("GrandTotal", obj[7].toString());
							jObj.put("AdvOrderTypeName", obj[8].toString());

							jObj.put("OperationType", obj[9].toString());

							jObj.put("ManualAdvOrderNo", obj[10].toString());

							jArr.put(jObj);

						}

					}
				}
				if (sbSqlForBilled2.length() > 0) {

					Query querySql = webPOSSessionFactory.getCurrentSession()
							.createSQLQuery(sbSqlForBilled2.toString());
					listSql = querySql.list();

					if (listSql.size() > 0) {

						for (int i = 0; i < listSql.size(); i++) {
							Object[] obj = (Object[]) listSql.get(i);
							JSONObject jObj = new JSONObject();
							jObj.put("AdvBookingNo", obj[0].toString());
							jObj.put("AdvBookingDate", obj[1].toString());
							jObj.put("DteOrderFor", obj[2].toString());
							jObj.put("POSCode", obj[3].toString());
							jObj.put("CustomerName", obj[4].toString());
							jObj.put("GroupName", obj[5].toString());
							jObj.put("Quantity", obj[6].toString());
							jObj.put("GrandTotal", obj[7].toString());
							jObj.put("AdvOrderTypeName", obj[8].toString());

							jObj.put("OperationType", obj[9].toString());

							jObj.put("ManualAdvOrderNo", obj[10].toString());

							jArr.put(jObj);

						}

					}
				}
				if (sbSqlForBilled3.length() > 0) {

					Query querySql = webPOSSessionFactory.getCurrentSession()
							.createSQLQuery(sbSqlForBilled3.toString());
					listSql = querySql.list();

					if (listSql.size() > 0) {

						for (int i = 0; i < listSql.size(); i++) {
							Object[] obj = (Object[]) listSql.get(i);
							JSONObject jObj = new JSONObject();
							jObj.put("AdvBookingNo", obj[0].toString());
							jObj.put("AdvBookingDate", obj[1].toString());
							jObj.put("DteOrderFor", obj[2].toString());
							jObj.put("POSCode", obj[3].toString());
							jObj.put("CustomerName", obj[4].toString());
							jObj.put("GroupName", obj[5].toString());
							jObj.put("Quantity", obj[6].toString());
							jObj.put("GrandTotal", obj[7].toString());
							jObj.put("AdvOrderTypeName", obj[8].toString());

							jObj.put("OperationType", obj[9].toString());

							jObj.put("ManualAdvOrderNo", obj[10].toString());

							jArr.put(jObj);

						}

					}
				}
				if (sbSqlForBilled11.length() > 0) {

					Query querySql = webPOSSessionFactory.getCurrentSession()
							.createSQLQuery(sbSqlForBilled11.toString());
					listSql = querySql.list();

					if (listSql.size() > 0) {

						for (int i = 0; i < listSql.size(); i++) {
							Object[] obj = (Object[]) listSql.get(i);
							JSONObject jObj = new JSONObject();
							jObj.put("AdvBookingNo", obj[0].toString());
							jObj.put("AdvBookingDate", obj[1].toString());
							jObj.put("DteOrderFor", obj[2].toString());
							jObj.put("POSCode", obj[3].toString());
							jObj.put("CustomerName", obj[4].toString());
							jObj.put("GroupName", obj[5].toString());
							jObj.put("Quantity", obj[6].toString());
							jObj.put("GrandTotal", obj[7].toString());
							jObj.put("AdvOrderTypeName", obj[8].toString());

							jObj.put("OperationType", obj[9].toString());

							jObj.put("ManualAdvOrderNo", obj[10].toString());

							jArr.put(jObj);

						}

					}
				}
				if (sbSqlForBilled22.length() > 0) {

					Query querySql = webPOSSessionFactory.getCurrentSession()
							.createSQLQuery(sbSqlForBilled22.toString());
					listSql = querySql.list();

					if (listSql.size() > 0) {

						for (int i = 0; i < listSql.size(); i++) {
							Object[] obj = (Object[]) listSql.get(i);
							JSONObject jObj = new JSONObject();
							jObj.put("AdvBookingNo", obj[0].toString());
							jObj.put("AdvBookingDate", obj[1].toString());
							jObj.put("DteOrderFor", obj[2].toString());
							jObj.put("POSCode", obj[3].toString());
							jObj.put("CustomerName", obj[4].toString());
							jObj.put("GroupName", obj[5].toString());
							jObj.put("Quantity", obj[6].toString());
							jObj.put("GrandTotal", obj[7].toString());
							jObj.put("AdvOrderTypeName", obj[8].toString());

							jObj.put("OperationType", obj[9].toString());

							jObj.put("ManualAdvOrderNo", obj[10].toString());

							jArr.put(jObj);

						}

					}
				}
				if (sbSqlForBilled33.length() > 0) {

					Query querySql = webPOSSessionFactory.getCurrentSession()
							.createSQLQuery(sbSqlForBilled33.toString());
					listSql = querySql.list();

					if (listSql.size() > 0) {

						for (int i = 0; i < listSql.size(); i++) {
							Object[] obj = (Object[]) listSql.get(i);
							JSONObject jObj = new JSONObject();
							jObj.put("AdvBookingNo", obj[0].toString());
							jObj.put("AdvBookingDate", obj[1].toString());
							jObj.put("DteOrderFor", obj[2].toString());
							jObj.put("POSCode", obj[3].toString());
							jObj.put("CustomerName", obj[4].toString());
							jObj.put("GroupName", obj[5].toString());
							jObj.put("Quantity", obj[6].toString());
							jObj.put("GrandTotal", obj[7].toString());
							jObj.put("AdvOrderTypeName", obj[8].toString());

							jObj.put("OperationType", obj[9].toString());

							jObj.put("ManualAdvOrderNo", obj[10].toString());

							jArr.put(jObj);

						}

					}
				}
				jOBjRet.put("jArr", jArr);
				break;

			} // end switch cases
		} catch (Exception ex) {
			ex.printStackTrace();
		}

		return jOBjRet;

	}


	
	
	
	// ///////////

	public JSONObject funSalesReport(String fromDate, String toDate,
			String strPOSCode, String strShiftNo, String strUserCode,
			String field, String strPayMode, String strOperator,
			String strFromBill, String strToBill, String reportType,
			String Type, String Customer, String ConsolidatePOS,
			String ReportName, String LoginPOSCode) {

		StringBuilder sbSqlLive = new StringBuilder();
		StringBuilder sbSqlQFile = new StringBuilder();
		StringBuilder sbSqlFilters = new StringBuilder();
		StringBuilder sbSqlDisFilters = new StringBuilder();
		DecimalFormat decimalFormat;
		decimalFormat = new DecimalFormat("#.##");
		String AreaWisePricing = "Y";
		/*
		 * try{
		 * 
		 * JSONObject JSONAreaWisePricing=new
		 * clsSetupDao().funGetParameterValuePOSWise(strUserCode, LoginPOSCode,
		 * "gAreaWisePricing");
		 * AreaWisePricing=JSONAreaWisePricing.get("gAreaWisePricing"
		 * ).toString(); } catch(Exception e){ e.printStackTrace(); }
		 */
		double totalDiscAmt = 0, totalSubTotalDWise = 0, totalTaxAmt = 0, totalSettleAmt = 0, totalTipAmt = 0;

		JSONArray jArr = new JSONArray();
		JSONObject jOBjRet = new JSONObject();
		List<clsSalesFlashColumns> arrListSalesReport;
		BigDecimal totalAmount, temp, temp1, Disc;
		int rowCount = 0;

		double totalSale = 0;

		double totalQty = 0;
		double subTotal = 0.00;
		double discountTotal = 0.00;
		StringBuilder sbSqlLiveBill = new StringBuilder();
		StringBuilder sbSqlQFileBill = new StringBuilder();
		StringBuilder sbSql = new StringBuilder();
		StringBuilder sbFilters = new StringBuilder();
		Map map = new HashMap();
		List jColHeaderArr = new ArrayList();
		int colCount = 0;
		try {
			switch (ReportName) {

			case "SettlementWise":
				jColHeaderArr.add("POS");
				jColHeaderArr.add("Settlement Mode");
				jColHeaderArr.add("Sales Amount");
				jColHeaderArr.add("Sales %");
				colCount = 4;
				// Double totalQty;
				totalQty = new Double("0.00");
				totalAmount = new BigDecimal("0.00");
				temp = new BigDecimal("0.00");
				temp1 = new BigDecimal("0.00");

				StringBuilder sbLive = new StringBuilder();
				StringBuilder sbQFile = new StringBuilder();

				sbLive.setLength(0);
				sbQFile.setLength(0);
				sbFilters.setLength(0);

				sbLive.append("SELECT d.strPOSCode,b.strSettelmentCode, IFNULL(d.strPOSName,'') AS strPOSName, IFNULL(b.strSettelmentDesc,'') AS strSettelmentDesc "
						+ " , IFNULL(SUM(a.dblSettlementAmt),0.00) AS dblSettlementAmt,'"
						+ strUserCode
						+ "'"
						+ " ,b.strSettelmentType "
						+ " from "
						+ " tblbillsettlementdtl a "
						+ " LEFT OUTER JOIN tblsettelmenthd b ON a.strSettlementCode=b.strSettelmentCode "
						+ " LEFT OUTER JOIN tblbillhd c on a.strBillNo=c.strBillNo and a.strClientCode=c.strClientCode "
						+ " LEFT OUTER JOIN tblposmaster d on c.strPOSCode=d.strPosCode "
						+ " WHERE "
						+ field
						+ " BETWEEN '"
						+ fromDate
						+ "' AND '"
						+ toDate
						+ "' "
						+ "AND a.dblSettlementAmt>0 ");

				sbQFile.append("SELECT d.strPOSCode,b.strSettelmentCode, IFNULL(d.strPOSName,'') AS strPOSName, IFNULL(b.strSettelmentDesc,'') AS strSettelmentDesc "
						+ " ,IFNULL(SUM(a.dblSettlementAmt),0.00) AS dblSettlementAmt,'"
						+ strUserCode
						+ "' "
						+ " ,b.strSettelmentType "
						+ " from "
						+ " tblqbillsettlementdtl a "
						+ " LEFT OUTER JOIN tblsettelmenthd b ON a.strSettlementCode=b.strSettelmentCode "
						+ " LEFT OUTER JOIN tblqbillhd c on a.strBillNo=c.strBillNo and a.strClientCode=c.strClientCode "
						+ " LEFT OUTER JOIN tblposmaster d on c.strPOSCode=d.strPosCode "
						+ " WHERE "
						+ field
						+ " BETWEEN '"
						+ fromDate
						+ "' AND '"
						+ toDate
						+ "' "
						+ " AND a.dblSettlementAmt>0 ");

				if (!strPOSCode.equals("All") && !strOperator.equals("All")) {
					sbFilters.append("  AND d.strPOSCode = '" + strPOSCode
							+ "' and c.strUserCreated='" + strOperator + "' ");
				} else if (!strPOSCode.equals("All")
						&& strOperator.equals("All")) {
					sbFilters
							.append(" AND d.strPOSCode = '" + strPOSCode + "'");
				} else if (strPOSCode.equals("All")
						&& !strOperator.equals("All")) {
					sbFilters.append("  and c.strUserCreated='" + strOperator
							+ "'");
				}

				sbFilters.append(" AND c.intShiftCode = '" + strShiftNo + "' ");

				if (strFromBill.length() == 0 && strToBill.length() == 0) {
				} else {
					sbFilters.append(" and a.strBillNo between '" + strFromBill
							+ "' and '" + strToBill + "'");
				}
				if (!strPayMode.equalsIgnoreCase("All")) {
					sbFilters.append(" and b.strSettelmentDesc='" + strPayMode
							+ "' ");
				}

				if (ConsolidatePOS.equalsIgnoreCase("Y")) {
					sbFilters.append(" GROUP BY b.strSettelmentDesc ");
				} else {
					sbFilters
							.append(" GROUP BY b.strSettelmentDesc, d.strPosCode");
				}
				sbLive.append(" ").append(sbFilters);
				sbQFile.append(" ").append(sbFilters);

				mapPOSDtlForSettlement = new LinkedHashMap<String, List<Map<String, clsBillSettlementDtl>>>();

				Query queryLiveSettlementSales = webPOSSessionFactory
						.getCurrentSession().createSQLQuery(sbLive.toString());
				List listSettlementWiseSales = queryLiveSettlementSales.list();
				funGenerateSettlementWiseSales(listSettlementWiseSales);

				Query queryQSettlementSales = webPOSSessionFactory
						.getCurrentSession().createSQLQuery(sbQFile.toString());
				List listSettlementWiseSalesQ = queryQSettlementSales.list();
				funGenerateSettlementWiseSales(listSettlementWiseSalesQ);

				Iterator<Map.Entry<String, List<Map<String, clsBillSettlementDtl>>>> it = mapPOSDtlForSettlement
						.entrySet().iterator();
				List<clsBillSettlementDtl> lstTemp = new ArrayList<clsBillSettlementDtl>();

				List<clsSalesFlashColumns> arrTempListSalesReport = new ArrayList<clsSalesFlashColumns>();
				List listStockFlashModel = new ArrayList();

				while (it.hasNext()) {
					Map.Entry<String, List<Map<String, clsBillSettlementDtl>>> entry = it
							.next();
					List<Map<String, clsBillSettlementDtl>> listOfSettelment = entry
							.getValue();

					for (int i = 0; i < listOfSettelment.size(); i++) {

						clsBillSettlementDtl objSettlementDtl = listOfSettelment
								.get(i).entrySet().iterator().next().getValue();
						lstTemp.add(objSettlementDtl);
						totalSale += objSettlementDtl.getDblSettlementAmt();
						clsSalesFlashColumns obSalesFlashColumns = new clsSalesFlashColumns();
						obSalesFlashColumns.setStrField1(objSettlementDtl
								.getPosName());
						obSalesFlashColumns.setStrField2(objSettlementDtl
								.getStrSettlementName());
						obSalesFlashColumns
								.setStrField3(String.valueOf(objSettlementDtl
										.getDblSettlementAmt()));

						arrTempListSalesReport.add(obSalesFlashColumns);
						List DataList = new ArrayList<>();
						DataList.add(objSettlementDtl.getPosName());
						DataList.add(objSettlementDtl.getStrSettlementName());
						DataList.add(objSettlementDtl.getDblSettlementAmt());
						map.put(rowCount, DataList);
						rowCount++;
					}

				}
				try {
					BigDecimal bigtotalSale = new BigDecimal(totalSale);
					Gson gson = new Gson();
					Type type = new TypeToken<List<clsSalesFlashColumns>>() {
					}.getType();
					String gsonarrTempListSalesReport = gson.toJson(
							arrTempListSalesReport, type);
					jOBjRet.put("ListSettlementWiseSales",
							gsonarrTempListSalesReport);
					jOBjRet.put("TotalSale", bigtotalSale);
					jOBjRet.put("ColHeader", jColHeaderArr);
					jOBjRet.put("colCount", colCount);
					jOBjRet.put("RowCount", rowCount);
					// jOBjRet.put("listStockFlashModel", listStockFlashModel);

					for (int tblRow = 0; tblRow < map.size(); tblRow++) {
						List list = (List) map.get(tblRow);
						list.add((Double.parseDouble(list.get(2).toString()) / Double
								.parseDouble(bigtotalSale.toString())) * 100);
						System.out.println("map.get(tblRow)" + map.get(tblRow));
						jOBjRet.put("" + tblRow, list);
					}

				} catch (Exception e) {
					e.printStackTrace();
				}

				break;

			case "BillWise":
				List listRet = new ArrayList();
				jColHeaderArr.add("Bill No");
				jColHeaderArr.add("Date");
				jColHeaderArr.add("Bill time");
				jColHeaderArr.add("Table Name");
				jColHeaderArr.add("Cust Name");
				jColHeaderArr.add("POS");
				jColHeaderArr.add("Pay Mode");
				jColHeaderArr.add("Delivery Charge");
				jColHeaderArr.add("Sub Total");
				jColHeaderArr.add("Disc %");
				jColHeaderArr.add("Disc Amt");
				jColHeaderArr.add("TAX Amt");
				jColHeaderArr.add("Sales Amt");
				jColHeaderArr.add("Remark");
				jColHeaderArr.add("Tip");
				jColHeaderArr.add("Disc Remark");
				jColHeaderArr.add("Reason");
				colCount = 17;

				StringBuilder sbSqlBillWise = new StringBuilder();
				StringBuilder sbSqlBillWiseQFile = new StringBuilder();

				sbSqlBillWise.setLength(0);
				sbSqlBillWise
						.append("select a.strBillNo,left(a.dteBillDate,10),left(right(a.dteDateCreated,8),5) as BillTime "
								+ " ,ifnull(b.strTableName,'') as TableName,f.strPOSName, ifnull(d.strSettelmentDesc,'') as payMode "
								+ " ,ifnull(a.dblSubTotal,0.00),IFNULL(a.dblDiscountPer,0), IFNULL(a.dblDiscountAmt,0.00),a.dblTaxAmt "
								+ " ,ifnull(c.dblSettlementAmt,0.00),a.strUserCreated "
								+ " ,a.strUserEdited,a.dteDateCreated,a.dteDateEdited,a.strClientCode,a.strWaiterNo "
								+ " ,a.strCustomerCode,a.dblDeliveryCharges,ifnull(c.strRemark,''),ifnull(e.strCustomerName ,'NA') "
								+ " ,a.dblTipAmount,'"
								+ strUserCode
								+ "',a.strDiscountRemark,ifnull(h.strReasonName ,'NA') "
								+ " from tblbillhd  a left outer join  tbltablemaster b on a.strTableNo=b.strTableNo "
								+ " left outer join tblposmaster f on a.strPOSCode=f.strPOSCode "
								+ " left outer join tblbillsettlementdtl c on a.strBillNo=c.strBillNo and a.strClientCode=c.strClientCode "
								+ " left outer join tblsettelmenthd d on c.strSettlementCode=d.strSettelmentCode "
								+ " left outer join tblcustomermaster e on a.strCustomerCode=e.strCustomerCode "
								+ " left outer join tblreasonmaster h on a.strReasonCode=h.strReasonCode "
								+ " where "
								+ field
								+ " between '"
								+ fromDate
								+ "' and '" + toDate + "'");

				if (!strPOSCode.equals("All")) {
					sbSqlBillWise.append(" and a.strPOSCode='" + strPOSCode
							+ "' ");
				}

				sbSqlBillWise.append(" AND a.intShiftCode = '" + strShiftNo
						+ "' ");

				if (!strOperator.equals("All")) {
					sbSqlBillWise.append(" and  a.strUserCreated='"
							+ strOperator + "' ");
				}
				if (!strPayMode.equals("All")) {
					sbSqlBillWise.append(" and d.strSettelmentCode='"
							+ strPayMode + "' ");
				}
				if (strFromBill.trim().length() > 0
						&& strToBill.trim().length() > 0) {
					sbSqlBillWise.append(" and a.strBillNo between '"
							+ strFromBill + "' and '" + strToBill + "'");
				}
				sbSqlBillWise.append(" order by a.strBillNo desc ");

				sbSqlBillWiseQFile.setLength(0);
				sbSqlBillWiseQFile
						.append("select a.strBillNo,left(a.dteBillDate,10),left(right(a.dteDateCreated,8),5) as BillTime"
								+ " ,ifnull(b.strTableName,'') as TableName,f.strPOSName"
								+ ""
								+ ", ifnull(d.strSettelmentDesc,'') as payMode"
								+ " ,ifnull(a.dblSubTotal,0.00),IFNULL(a.dblDiscountPer,0), IFNULL(a.dblDiscountAmt,0.00),a.dblTaxAmt"
								+ " ,ifnull(c.dblSettlementAmt,0.00),a.strUserCreated,a.strUserEdited,a.dteDateCreated"
								+ " ,a.dteDateEdited,a.strClientCode,a.strWaiterNo,a.strCustomerCode,a.dblDeliveryCharges"
								+ " ,ifnull(c.strRemark,''),ifnull(e.strCustomerName ,'NA')"
								+ " ,a.dblTipAmount,'"
								+ strUserCode
								+ "',a.strDiscountRemark,ifnull(h.strReasonName ,'NA') "
								+ " from tblqbillhd a left outer join  tbltablemaster b on a.strTableNo=b.strTableNo "
								+ " left outer join tblposmaster f on a.strPOSCode=f.strPOSCode "
								+ " left outer join tblqbillsettlementdtl c on a.strBillNo=c.strBillNo and a.strClientCode=c.strClientCode "
								+ " left outer join tblsettelmenthd d on c.strSettlementCode=d.strSettelmentCode "
								+ " left outer join tblcustomermaster e on a.strCustomerCode=e.strCustomerCode "
								+ " left outer join tblreasonmaster h on a.strReasonCode=h.strReasonCode "
								+ " where "
								+ field
								+ " between '"
								+ fromDate
								+ "' and '" + toDate + "'");

				if (!strPOSCode.equals("All")) {
					sbSqlBillWiseQFile.append(" and a.strPOSCode='"
							+ strPOSCode + "' ");
				}

				sbSqlBillWiseQFile.append(" AND a.intShiftCode = '"
						+ strShiftNo + "' ");

				if (!strOperator.equals("All")) {
					sbSqlBillWiseQFile.append(" and  a.strUserCreated='"
							+ strOperator + "' ");
				}
				if (!strPayMode.equals("All")) {
					// selectQuery+="   and a.strSettelmentMode='"+cmbPayMode.getSelectedItem().toString()+"' ";
					sbSqlBillWiseQFile.append(" and d.strSettelmentCode='"
							+ strPayMode + "' ");
				}
				if (strFromBill.trim().length() > 0
						&& strToBill.trim().length() > 0) {
					sbSqlBillWise.append(" and a.strBillNo between '"
							+ strFromBill + "' and '" + strToBill + "'");
				}
				sbSqlBillWiseQFile.append(" order by a.strBillNo desc ");

				boolean flgRecords = false;

				Map<String, List<clsSalesFlashColumns>> hmBillWiseSales = new HashMap<String, List<clsSalesFlashColumns>>();
				int seqNo = 1;

				// for live Data
				Query queryBillWiseSales = webPOSSessionFactory
						.getCurrentSession().createSQLQuery(
								sbSqlBillWise.toString());
				List listBillWiseSales = queryBillWiseSales.list();
				if (listBillWiseSales.size() > 0) {
					for (int i = 0; i < listBillWiseSales.size(); i++) {
						Object[] obj = (Object[]) listBillWiseSales.get(i);
						List<clsSalesFlashColumns> arrListBillWiseSales = new ArrayList<clsSalesFlashColumns>();
						flgRecords = true;
						// objOperatorWiseSales.setStrSettlementDesc(obj[1].toString());
						String[] spDate = obj[1].toString().split("-");
						String billDate = spDate[2] + "-" + spDate[1] + "-"
								+ spDate[0];// billDate

						clsSalesFlashColumns objSalesFlashColumns = new clsSalesFlashColumns();
						objSalesFlashColumns.setStrField1(obj[0].toString());
						objSalesFlashColumns.setStrField2(billDate);
						objSalesFlashColumns.setStrField3(obj[2].toString());
						objSalesFlashColumns.setStrField4(obj[3].toString());
						objSalesFlashColumns.setStrField5(obj[20].toString());// Cust
																				// Name

						objSalesFlashColumns.setStrField6(obj[4].toString());
						objSalesFlashColumns.setStrField7(obj[5].toString());
						objSalesFlashColumns.setStrField8(obj[18].toString());
						objSalesFlashColumns.setStrField9(obj[6].toString());
						objSalesFlashColumns.setStrField10(obj[7].toString());
						objSalesFlashColumns.setStrField11(obj[8].toString());
						objSalesFlashColumns.setStrField12(obj[9].toString());
						objSalesFlashColumns.setStrField13(obj[10].toString());
						objSalesFlashColumns.setStrField14(obj[19].toString());
						objSalesFlashColumns.setStrField15(obj[21].toString());
						objSalesFlashColumns.setStrField16(obj[23].toString());
						objSalesFlashColumns.setStrField17(obj[24].toString());
						// objSalesFlashColumns.setSeqNo(Integer.parseInt(billNo.split("-")[0]));
						objSalesFlashColumns.setSeqNo(seqNo++);

						if (null != hmBillWiseSales.get(obj[0].toString())) {
							arrListBillWiseSales = hmBillWiseSales.get(obj[0]
									.toString());
							objSalesFlashColumns.setStrField9("0");
							objSalesFlashColumns.setStrField10("0");
							objSalesFlashColumns.setStrField11("0");
							objSalesFlashColumns.setStrField12("0");
							objSalesFlashColumns.setStrField15("0");
						}
						arrListBillWiseSales.add(objSalesFlashColumns);
						hmBillWiseSales.put(obj[0].toString(),
								arrListBillWiseSales);

						totalDiscAmt += Double.parseDouble(objSalesFlashColumns
								.getStrField11());
						totalSubTotalDWise += Double
								.parseDouble(objSalesFlashColumns
										.getStrField9());
						totalTaxAmt += Double.parseDouble(objSalesFlashColumns
								.getStrField12());
						totalSettleAmt += Double
								.parseDouble(objSalesFlashColumns
										.getStrField13());// Grand Total
						totalTipAmt += Double.parseDouble(objSalesFlashColumns
								.getStrField15());// tip Amt

					}
				}

				// for qfile data
				Query queryBillWiseSalesQ = webPOSSessionFactory
						.getCurrentSession().createSQLQuery(
								sbSqlBillWiseQFile.toString());
				List listBillWiseSalesQ = queryBillWiseSalesQ.list();
				if (listBillWiseSalesQ.size() > 0) {
					for (int i = 0; i < listBillWiseSalesQ.size(); i++) {
						Object[] obj = (Object[]) listBillWiseSalesQ.get(i);
						List<clsSalesFlashColumns> arrListBillWiseSales = new ArrayList<clsSalesFlashColumns>();
						flgRecords = true;

						// String billNo1=rsBillWiseSales.getString(1);
						// String billNo=billNo1.substring(1, billNo1.length());
						String[] spDate = obj[1].toString().split("-");
						String billDate = spDate[2] + "-" + spDate[1] + "-"
								+ spDate[0];// billDate

						clsSalesFlashColumns objSalesFlashColumns = new clsSalesFlashColumns();
						objSalesFlashColumns.setStrField1(obj[0].toString());
						objSalesFlashColumns.setStrField2(billDate);
						objSalesFlashColumns.setStrField3(obj[2].toString());
						objSalesFlashColumns.setStrField4(obj[3].toString());

						objSalesFlashColumns.setStrField5(obj[20].toString());// Cust
																				// Name
						objSalesFlashColumns.setStrField6(obj[4].toString());
						objSalesFlashColumns.setStrField7(obj[6].toString());
						objSalesFlashColumns.setStrField8(obj[18].toString());
						objSalesFlashColumns.setStrField9(obj[6].toString());
						objSalesFlashColumns.setStrField10(obj[7].toString());
						objSalesFlashColumns.setStrField11(obj[8].toString());
						objSalesFlashColumns.setStrField12(obj[9].toString());
						objSalesFlashColumns.setStrField13(obj[10].toString());
						objSalesFlashColumns.setStrField14(obj[19].toString());
						objSalesFlashColumns.setStrField15(obj[21].toString());
						objSalesFlashColumns.setStrField16(obj[23].toString());
						objSalesFlashColumns.setStrField17(obj[24].toString());
						// objSalesFlashColumns.setSeqNo(Integer.parseInt(billNo.split("-")[0]));
						objSalesFlashColumns.setSeqNo(seqNo++);

						if (null != hmBillWiseSales.get(obj[0].toString())) {
							arrListBillWiseSales = hmBillWiseSales.get(obj[0]
									.toString());
							objSalesFlashColumns.setStrField9("0");
							objSalesFlashColumns.setStrField10("0");
							objSalesFlashColumns.setStrField11("0");
							objSalesFlashColumns.setStrField12("0");
							objSalesFlashColumns.setStrField15("0");
						}
						arrListBillWiseSales.add(objSalesFlashColumns);
						hmBillWiseSales.put(obj[0].toString(),
								arrListBillWiseSales);

						totalDiscAmt += Double.parseDouble(objSalesFlashColumns
								.getStrField11());
						totalSubTotalDWise += Double
								.parseDouble(objSalesFlashColumns
										.getStrField9());
						totalTaxAmt += Double.parseDouble(objSalesFlashColumns
								.getStrField12());
						totalSettleAmt += Double
								.parseDouble(objSalesFlashColumns
										.getStrField13());// Grand Total
						totalTipAmt += Double.parseDouble(objSalesFlashColumns
								.getStrField15());// tip Amt
					}
				}
				System.out.println("Tip Amount->" + totalTipAmt);
				// fill arrTempListBillWiseSales from hashmap of bill
				// fill arrTempListBillWiseSales from hashmap of bill

				List<clsSalesFlashColumns> arrTempListBillWiseSales = new ArrayList<clsSalesFlashColumns>();
				for (Map.Entry<String, List<clsSalesFlashColumns>> entry : hmBillWiseSales
						.entrySet()) {
					for (clsSalesFlashColumns objSalesFlashColumns : entry
							.getValue()) {
						clsSalesFlashColumns objTempSalesFlashColumns = new clsSalesFlashColumns();
						objTempSalesFlashColumns
								.setStrField1(objSalesFlashColumns
										.getStrField1());
						objTempSalesFlashColumns
								.setStrField2(objSalesFlashColumns
										.getStrField2());
						objTempSalesFlashColumns
								.setStrField3(objSalesFlashColumns
										.getStrField3());
						objTempSalesFlashColumns
								.setStrField4(objSalesFlashColumns
										.getStrField4());
						objTempSalesFlashColumns
								.setStrField5(objSalesFlashColumns
										.getStrField5());
						objTempSalesFlashColumns
								.setStrField6(objSalesFlashColumns
										.getStrField6());
						objTempSalesFlashColumns
								.setStrField7(objSalesFlashColumns
										.getStrField7());
						objTempSalesFlashColumns
								.setStrField8(objSalesFlashColumns
										.getStrField8());
						objTempSalesFlashColumns
								.setStrField9(objSalesFlashColumns
										.getStrField9());
						objTempSalesFlashColumns
								.setStrField10(objSalesFlashColumns
										.getStrField10());
						objTempSalesFlashColumns
								.setStrField11(objSalesFlashColumns
										.getStrField11());
						objTempSalesFlashColumns
								.setStrField12(objSalesFlashColumns
										.getStrField12());
						objTempSalesFlashColumns
								.setStrField13(objSalesFlashColumns
										.getStrField13());
						objTempSalesFlashColumns
								.setStrField14(objSalesFlashColumns
										.getStrField14());
						objTempSalesFlashColumns
								.setStrField15(objSalesFlashColumns
										.getStrField15());
						objTempSalesFlashColumns
								.setStrField16(objSalesFlashColumns
										.getStrField16());
						objTempSalesFlashColumns
								.setStrField17(objSalesFlashColumns
										.getStrField17());
						objTempSalesFlashColumns.setSeqNo(objSalesFlashColumns
								.getSeqNo());
						arrTempListBillWiseSales.add(objTempSalesFlashColumns);

						List DataList = new ArrayList<>();
						DataList.add(objSalesFlashColumns.getStrField1());
						DataList.add(objSalesFlashColumns.getStrField2());
						DataList.add(objSalesFlashColumns.getStrField3());
						DataList.add(objSalesFlashColumns.getStrField4());
						DataList.add(objSalesFlashColumns.getStrField5());
						DataList.add(objSalesFlashColumns.getStrField6());
						DataList.add(objSalesFlashColumns.getStrField7());
						DataList.add(objSalesFlashColumns.getStrField8());
						DataList.add(objSalesFlashColumns.getStrField9());
						DataList.add(objSalesFlashColumns.getStrField10());
						DataList.add(objSalesFlashColumns.getStrField11());
						DataList.add(objSalesFlashColumns.getStrField12());
						DataList.add(objSalesFlashColumns.getStrField13());
						DataList.add(objSalesFlashColumns.getStrField14());
						DataList.add(objSalesFlashColumns.getStrField15());
						DataList.add(objSalesFlashColumns.getStrField16());
						DataList.add(objSalesFlashColumns.getStrField17());
						map.put(rowCount, DataList);
						rowCount++;
					}
				}

				// sort arrTempListBillWiseSales
				Collections.sort(arrTempListBillWiseSales,
						clsGlobalFunctions.COMPARATOR);
				System.out.print("@Dao " + arrTempListBillWiseSales.size());
				try {
					Gson gson = new Gson();
					Type type = new TypeToken<List<clsSalesFlashColumns>>() {
					}.getType();
					String gsonarrTempListBillWiseSales = gson.toJson(
							arrTempListBillWiseSales, type);
					jOBjRet.put("TempListBillWiseSales",
							gsonarrTempListBillWiseSales);
					jOBjRet.put("totalDiscAmt", totalDiscAmt);
					jOBjRet.put("totalSubTotal", totalSubTotalDWise);
					jOBjRet.put("totalTaxAmt", totalTaxAmt);
					jOBjRet.put("totalSettleAmt", totalSettleAmt);
					jOBjRet.put("totalTipAmt", totalTipAmt);
					jOBjRet.put("ColHeader", jColHeaderArr);
					jOBjRet.put("colCount", colCount);
					jOBjRet.put("RowCount", rowCount);
					// jOBjRet.put("listStockFlashModel", listStockFlashModel);

					for (int tblRow = 0; tblRow < map.size(); tblRow++) {
						List list = (List) map.get(tblRow);
						System.out.println("map.get(tblRow)" + map.get(tblRow));
						jOBjRet.put("" + tblRow, list);
					}

				} catch (Exception e) {
					e.printStackTrace();
				}
				break;

			case "ItemWise":
				jColHeaderArr.add("Item Name");
				jColHeaderArr.add("POS ");
				jColHeaderArr.add("Quantity");
				jColHeaderArr.add("sub Total ");
				jColHeaderArr.add("Sales Amount ");
				jColHeaderArr.add("Discount");
				colCount = 6;

				totalQty = new Double("0.00");
				totalAmount = new BigDecimal("0.00");
				temp = new BigDecimal("0.00");
				temp1 = new BigDecimal("0.00");

				String sqlFilters = "";
				if (field.equals("dteBillDate")) {
					field = "b.dteBillDate";
				} else {
					field = "date(b.dteBillDate)";
				}
				String sqlLive = "select a.strItemCode,a.strItemName,c.strPOSName"
						+ ",sum(a.dblQuantity),sum(a.dblTaxAmount)\n"
						+ ",sum(a.dblAmount)-sum(a.dblDiscountAmt),'"
						+ strUserCode
						+ "' "
						+ ",sum(a.dblAmount),sum(a.dblDiscountAmt),DATE_FORMAT(date(b.dteBillDate),'%d-%m-%Y'),b.strPOSCode "
						+ "from tblbilldtl a,tblbillhd b,tblposmaster c\n"
						+ "where a.strBillNo=b.strBillNo and b.strPOSCode=c.strPosCode and a.strClientCode=b.strClientCode "
						+ "and "
						+ field
						+ " BETWEEN '"
						+ fromDate
						+ "' AND '"
						+ toDate + "' ";

				String sqlQFile = "select a.strItemCode,a.strItemName,c.strPOSName"
						+ ",sum(a.dblQuantity),sum(a.dblTaxAmount)\n"
						+ ",sum(a.dblAmount)-sum(a.dblDiscountAmt),'"
						+ strUserCode
						+ "' "
						+ ",sum(a.dblAmount),sum(a.dblDiscountAmt),DATE_FORMAT(date(b.dteBillDate),'%d-%m-%Y'),b.strPOSCode "
						+ "from tblqbilldtl a,tblqbillhd b,tblposmaster c\n"
						+ "where a.strBillNo=b.strBillNo and b.strPOSCode=c.strPosCode and a.strClientCode=b.strClientCode "
						+ "and "
						+ field
						+ " BETWEEN '"
						+ fromDate
						+ "' AND '"
						+ toDate + "' ";

				String sqlModLive = "select a.strItemCode,a.strModifierName,c.strPOSName"
						+ " ,sum(a.dblQuantity),'0',sum(a.dblAmount)-sum(a.dblDiscAmt),'"
						+ strUserCode
						+ "' "
						+ " ,sum(a.dblAmount),sum(a.dblDiscAmt),DATE_FORMAT(date(b.dteBillDate),'%d-%m-%Y'),b.strPOSCode "
						+ " from tblbillmodifierdtl a,tblbillhd b,tblposmaster c,tblitemmaster d\n"
						+ " where a.strBillNo=b.strBillNo and b.strPOSCode=c.strPosCode and a.strClientCode=b.strClientCode "
						+ " and left(a.strItemCode,7)=d.strItemCode \n"
						+ " and "
						+ field
						+ " BETWEEN '"
						+ fromDate
						+ "' AND '"
						+ toDate + "' ";

				String sqlModQFile = "select a.strItemCode,a.strModifierName,c.strPOSName"
						+ " ,sum(a.dblQuantity),'0',sum(a.dblAmount)-sum(a.dblDiscAmt),'"
						+ strUserCode
						+ "' "
						+ " ,sum(a.dblAmount),sum(a.dblDiscAmt),DATE_FORMAT(date(b.dteBillDate),'%d-%m-%Y'),b.strPOSCode "
						+ " from tblqbillmodifierdtl a,tblqbillhd b,tblposmaster c,tblitemmaster d\n"
						+ " where a.strBillNo=b.strBillNo and b.strPOSCode=c.strPosCode and a.strClientCode=b.strClientCode "
						+ " and left(a.strItemCode,7)=d.strItemCode \n"
						+ " and "
						+ field
						+ " BETWEEN '"
						+ fromDate
						+ "' AND '"
						+ toDate + "' ";

				if (!strPOSCode.equals("All") && !strOperator.equals("All")) {
					sqlFilters += " AND b.strPOSCode = '" + strPOSCode
							+ "' and b.strUserCreated='" + strOperator + "' ";
				} else if (!strPOSCode.equals("All")
						&& strOperator.equals("All")) {
					sqlFilters += " AND b.strPOSCode = '" + strPOSCode + "' ";
				} else if (strPOSCode.equals("All")
						&& !strOperator.equals("All")) {
					sqlFilters += " AND b.strUserCreated='" + strOperator
							+ "' ";
				}
				sqlFilters += " AND b.intShiftCode = '" + strShiftNo + "' ";

				if (strFromBill.length() == 0 && strToBill.length() == 0) {
				} else {
					sqlFilters += " and a.strbillno between '" + strFromBill
							+ "' " + " and '" + strToBill + "'";
				}

				sqlFilters += " group by a.strItemCode,c.strPOSName "
						+ " order by b.dteBillDate ";
				sqlLive = sqlLive + " " + sqlFilters;
				sqlQFile = sqlQFile + " " + sqlFilters;

				sqlModLive = sqlModLive + " " + sqlFilters;
				sqlModQFile = sqlModQFile + " " + sqlFilters;

				System.out.println(sqlModQFile);

				mapPOSItemDtl = new LinkedHashMap<>();

				Query queryLiveItemSales = webPOSSessionFactory
						.getCurrentSession().createSQLQuery(sqlLive);
				List listItemWiseSales = queryLiveItemSales.list();
				funGenerateItemWiseSales(listItemWiseSales, fromDate, toDate,
						strPOSCode, strShiftNo, strUserCode, field, strPayMode,
						strOperator, strFromBill, strToBill, reportType, Type,
						Customer, ConsolidatePOS, ReportName);

				Query queryItemSalesQ = webPOSSessionFactory
						.getCurrentSession().createSQLQuery(sqlQFile);
				List listItemWiseSalesQ = queryItemSalesQ.list();
				funGenerateItemWiseSales(listItemWiseSalesQ, fromDate, toDate,
						strPOSCode, strShiftNo, strUserCode, field, strPayMode,
						strOperator, strFromBill, strToBill, reportType, Type,
						Customer, ConsolidatePOS, ReportName);

				Set<Entry<String, Map<String, clsBillItemDtl>>> set = mapPOSItemDtl
						.entrySet();
				List<Entry<String, Map<String, clsBillItemDtl>>> list = new ArrayList<Entry<String, Map<String, clsBillItemDtl>>>(
						set);

				Collections
						.sort(list,
								new Comparator<Map.Entry<String, Map<String, clsBillItemDtl>>>() {

									@Override
									public int compare(
											Entry<String, Map<String, clsBillItemDtl>> o1,
											Entry<String, Map<String, clsBillItemDtl>> o2) {

										Iterator<Entry<String, clsBillItemDtl>> it1 = o1
												.getValue().entrySet()
												.iterator();
										Iterator<Entry<String, clsBillItemDtl>> it2 = o2
												.getValue().entrySet()
												.iterator();

										if (it1.hasNext()) {
											if (it1.next()
													.getValue()
													.getItemCode()
													.substring(0, 7)
													.equalsIgnoreCase(
															it1.next()
																	.getValue()
																	.getItemCode()
																	.substring(
																			0,
																			7))) {
												return 0;
											} else {
												return 1;
											}
										}
										return 0;
									}

								});

				Iterator<Map.Entry<String, Map<String, clsBillItemDtl>>> posIterator = mapPOSItemDtl
						.entrySet().iterator();

				arrListSalesReport = new ArrayList<clsSalesFlashColumns>();

				while (posIterator.hasNext()) {
					Map<String, clsBillItemDtl> mapItemDtl = posIterator.next()
							.getValue();
					Iterator<Map.Entry<String, clsBillItemDtl>> itemIterator = mapItemDtl
							.entrySet().iterator();
					while (itemIterator.hasNext()) {
						clsBillItemDtl objGroupDtl = itemIterator.next()
								.getValue();
						clsSalesFlashColumns obj = new clsSalesFlashColumns();
						obj.setStrField1(objGroupDtl.getItemName());// itemName
						obj.setStrField2(objGroupDtl.getPosName());// posName
						obj.setStrField3(String.valueOf(objGroupDtl
								.getQuantity()));// qty
						obj.setStrField4(String.valueOf(objGroupDtl
								.getSubTotal()));// sunTotal
						obj.setStrField5(String.valueOf(objGroupDtl.getAmount()));// salesAmount
						obj.setStrField6(String.valueOf(objGroupDtl
								.getDiscountAmount()));// discount
						// records[6] = objGroupDtl.getBillDateTime();//date
						arrListSalesReport.add(obj);

						List DataList = new ArrayList<>();
						DataList.add(objGroupDtl.getItemName());
						DataList.add(objGroupDtl.getPosName());
						DataList.add(objGroupDtl.getQuantity());
						DataList.add(objGroupDtl.getSubTotal());
						DataList.add(objGroupDtl.getAmount());
						DataList.add(objGroupDtl.getDiscountAmount());
						map.put(rowCount, DataList);
						rowCount++;

						totalQty = totalQty + objGroupDtl.getQuantity();
						temp1 = new BigDecimal(objGroupDtl.getAmount());
						totalAmount = totalAmount.add(temp1);
						subTotal = subTotal + objGroupDtl.getSubTotal();
						discountTotal = discountTotal
								+ objGroupDtl.getDiscountAmount();

					}
				}
				try {
					Gson gson = new Gson();
					Type type = new TypeToken<List<clsSalesFlashColumns>>() {
					}.getType();
					String gsonarrTempListSalesReport = gson.toJson(
							arrListSalesReport, type);
					jOBjRet.put("ListItemWiseSales", gsonarrTempListSalesReport);
					jOBjRet.put("totalQty", totalQty);
					jOBjRet.put("totalAmount", totalAmount);
					jOBjRet.put("subTotal", subTotal);
					jOBjRet.put("discountTotal", discountTotal);
					jOBjRet.put("ColHeader", jColHeaderArr);
					jOBjRet.put("colCount", colCount);
					jOBjRet.put("RowCount", rowCount);
					for (int tblRow = 0; tblRow < map.size(); tblRow++) {
						List listmap = (List) map.get(tblRow);
						// listmap.add((Double.parseDouble(listmap.get(2).toString())/totalSale)*100);
						System.out.println("map.get(tblRow)" + map.get(tblRow));
						jOBjRet.put("" + tblRow, listmap);
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
				break;

			case "MenuHeadWise":

				jColHeaderArr.add("Menu Name");
				jColHeaderArr.add("POS ");
				jColHeaderArr.add("Quantity");
				jColHeaderArr.add("sub Total ");
				jColHeaderArr.add("Sales Amount ");
				jColHeaderArr.add("Discount");
				jColHeaderArr.add("Sales (%)");
				colCount = 7;
				String sql;
				try {
					sql = "";
					totalQty = new Double("0.00");
					totalAmount = new BigDecimal("0.00");
					temp = new BigDecimal("0.00");
					temp1 = new BigDecimal("0.00");

					if (field.equals("dteBillDate")) {
						field = "b.dteBillDate";
					} else {
						field = "date(b.dteBillDate)";
					}

					sbSqlQFile
							.append("SELECT  ifnull(d.strMenuCode,'ND'),ifnull(e.strMenuName,'ND'), sum(a.dblQuantity),\n"
									+ "sum(a.dblAmount)-sum(a.dblDiscountAmt),f.strPosName,'"
									+ strUserCode
									+ "',a.dblRate ,sum(a.dblAmount),sum(a.dblDiscountAmt),b.strPOSCode  "
									+ "FROM tblqbilldtl a\n"
									+ "left outer join tblqbillhd b on a.strBillNo=b.strBillNo and a.strClientCode=b.strClientCode "
									+ "left outer join tblposmaster f on b.strposcode=f.strposcode "
									+ "left outer join tblmenuitempricingdtl d on a.strItemCode = d.strItemCode "
									+ " and b.strposcode =d.strposcode ");

					if (AreaWisePricing.equals("Y"))// clsGlobalVarClass.gAreaWisePricing.equals("Y")
					{
						sbSqlQFile.append("and b.strAreaCode= d.strAreaCode ");
					}
					sbSqlQFile
							.append("left outer join tblmenuhd e on d.strMenuCode= e.strMenuCode");
					sbSqlQFile.append(" where " + field + " BETWEEN '"
							+ fromDate + "' AND '" + toDate + "' ");

					sbSqlLive
							.append("SELECT ifnull(d.strMenuCode,'ND'),ifnull(e.strMenuName,'ND'), sum(a.dblQuantity),\n"
									+ " sum(a.dblAmount)-sum(a.dblDiscountAmt),f.strPosName,'"
									+ strUserCode
									+ "',a.dblRate  ,sum(a.dblAmount),sum(a.dblDiscountAmt),b.strPOSCode  "
									+ " FROM tblbilldtl a\n"
									+ " left outer join tblbillhd b on a.strBillNo=b.strBillNo and a.strClientCode=b.strClientCode "
									+ " left outer join tblposmaster f on b.strposcode=f.strposcode "
									+ " left outer join tblmenuitempricingdtl d on a.strItemCode = d.strItemCode "
									+ " and b.strposcode =d.strposcode ");
					if (AreaWisePricing.equals("Y"))// clsGlobalVarClass.gAreaWisePricing.equals("Y")
					{
						sbSqlLive.append("and b.strAreaCode= d.strAreaCode ");
					}
					sbSqlLive
							.append("left outer join tblmenuhd e on d.strMenuCode= e.strMenuCode");
					sbSqlLive.append(" where " + field + " BETWEEN '"
							+ fromDate + "' AND '" + toDate + "' ");

					sqlModLive = "";
					sqlModLive = "SELECT  ifnull(d.strMenuCode,'ND'),ifnull(e.strMenuName,'ND'), sum(a.dblQuantity),\n"
							+ "sum(a.dblAmount)-sum(a.dblDiscAmt),f.strPosName,'"
							+ strUserCode
							+ "',a.dblRate ,sum(a.dblAmount),sum(a.dblDiscAmt),b.strPOSCode  "
							+ "FROM tblbillmodifierdtl a\n"
							+ "left outer join tblbillhd b on a.strBillNo=b.strBillNo and a.strClientCode=b.strClientCode "
							+ "left outer join tblposmaster f on b.strposcode=f.strposcode "
							+ "left outer join tblmenuitempricingdtl d on LEFT(a.strItemCode,7)= d.strItemCode "
							+ " and b.strposcode =d.strposcode ";
					if (AreaWisePricing.equals("Y"))// clsGlobalVarClass.gAreaWisePricing.equals("Y")
					{
						sqlModLive += "and b.strAreaCode= d.strAreaCode ";
					}
					sqlModLive += "left outer join tblmenuhd e on d.strMenuCode= e.strMenuCode";
					sqlModLive += " where " + field + " BETWEEN '" + fromDate
							+ "' AND '" + toDate + "' and a.dblAmount>0 ";

					sqlModQFile = "";
					sqlModQFile = "SELECT  ifnull(d.strMenuCode,'ND'),ifnull(e.strMenuName,'ND'), sum(a.dblQuantity),\n"
							+ "sum(a.dblAmount)-sum(a.dblDiscAmt),f.strPosName,'"
							+ strUserCode
							+ "',a.dblRate ,sum(a.dblAmount),sum(a.dblDiscAmt),b.strPOSCode  "
							+ "FROM tblqbillmodifierdtl a\n"
							+ "left outer join tblqbillhd b on a.strBillNo=b.strBillNo and a.strClientCode=b.strClientCode "
							+ "left outer join tblposmaster f on b.strposcode=f.strposcode "
							+ "left outer join tblmenuitempricingdtl d on LEFT(a.strItemCode,7)= d.strItemCode "
							+ " and b.strposcode =d.strposcode ";

					if (AreaWisePricing.equals("Y"))// clsGlobalVarClass.gAreaWisePricing.equals("Y")
					{
						sqlModQFile += "and b.strAreaCode= d.strAreaCode ";
					}
					sqlModQFile += "left outer join tblmenuhd e on d.strMenuCode= e.strMenuCode";
					sqlModQFile += " where " + field + " BETWEEN '" + fromDate
							+ "' AND '" + toDate + "' and a.dblAmount>0  ";

					if (!strPOSCode.equals("All") && !strOperator.equals("All")) {
						sbSqlFilters.append(" AND b.strPOSCode = '"
								+ strPOSCode + "' and d.strUserCreated='"
								+ strOperator.toString() + "'");
					} else if (!strPOSCode.equals("All")
							&& strOperator.equals("All")) {
						sbSqlFilters.append(" AND b.strPOSCode = '"
								+ strPOSCode + "'");
					} else if (strPOSCode.equals("All")
							&& !strOperator.equals("All")) {
						sbSqlFilters.append(" and b.strUserCreated='"
								+ strOperator.toString() + "'");
					}
					if (strFromBill.length() == 0
							&& strToBill.trim().length() == 0) {
						// sql_Filters+=" Group by b.strPoscode, d.strMenuCode,e.strMenuName";
					} else {
						sbSqlFilters.append(" and b.strBillNo between '"
								+ strFromBill + "' and '" + strToBill + "' ");
					}

					sbSqlFilters.append(" AND b.intShiftCode = '" + strShiftNo
							+ "' ");

					sbSqlFilters
							.append(" Group by b.strPoscode, d.strMenuCode,e.strMenuName");
					sbSqlFilters
							.append(" order by b.strPoscode, d.strMenuCode,e.strMenuName");

					sbSqlLive.append(sbSqlFilters);
					sbSqlQFile.append(sbSqlFilters);

					sqlModLive = sqlModLive + " " + sbSqlFilters.toString();
					sqlModQFile = sqlModQFile + " " + sbSqlFilters.toString();

					mapPOSMenuHeadDtl = new LinkedHashMap<>();

					Query queryMenuHeadSales = webPOSSessionFactory
							.getCurrentSession().createSQLQuery(
									sbSqlLive.toString());
					List listMenuHeadWiseSales = queryMenuHeadSales.list();
					funGenerateMenuHeadWiseSales(listMenuHeadWiseSales);

					queryMenuHeadSales = webPOSSessionFactory
							.getCurrentSession().createSQLQuery(sqlModLive);
					listMenuHeadWiseSales = queryMenuHeadSales.list();
					funGenerateMenuHeadWiseSales(listMenuHeadWiseSales);

					queryMenuHeadSales = webPOSSessionFactory
							.getCurrentSession().createSQLQuery(
									sbSqlQFile.toString());
					listMenuHeadWiseSales = queryMenuHeadSales.list();
					funGenerateMenuHeadWiseSales(listMenuHeadWiseSales);

					queryMenuHeadSales = webPOSSessionFactory
							.getCurrentSession().createSQLQuery(sqlModQFile);
					listMenuHeadWiseSales = queryMenuHeadSales.list();
					funGenerateMenuHeadWiseSales(listMenuHeadWiseSales);

					Iterator<Map.Entry<String, Map<String, clsBillItemDtl>>> posIterator1 = mapPOSMenuHeadDtl
							.entrySet().iterator();
					arrListSalesReport = new ArrayList<clsSalesFlashColumns>();
					totalSale = 0;
					while (posIterator1.hasNext()) {
						Map<String, clsBillItemDtl> mapItemDtl = posIterator1
								.next().getValue();
						Iterator<Map.Entry<String, clsBillItemDtl>> itemIterator = mapItemDtl
								.entrySet().iterator();
						while (itemIterator.hasNext()) {
							clsBillItemDtl objGroupDtl = itemIterator.next()
									.getValue();
							clsSalesFlashColumns obj = new clsSalesFlashColumns();
							obj.setStrField1(objGroupDtl.getMenuName());// menuName
							obj.setStrField2(objGroupDtl.getPosName());// posName

							obj.setStrField3(String.valueOf(objGroupDtl
									.getQuantity()));// qty
							obj.setStrField4(String.valueOf(objGroupDtl
									.getAmount()));// salesAmt
							obj.setStrField5(String.valueOf(objGroupDtl
									.getSubTotal()));// subTotal
							obj.setStrField6(String.valueOf(objGroupDtl
									.getDiscountAmount()));// discAmt
							arrListSalesReport.add(obj);

							List DataList = new ArrayList<>();
							DataList.add(objGroupDtl.getMenuName());
							DataList.add(objGroupDtl.getPosName());
							DataList.add(objGroupDtl.getQuantity());
							DataList.add(objGroupDtl.getSubTotal());
							DataList.add(objGroupDtl.getAmount());
							DataList.add(objGroupDtl.getDiscountAmount());
							map.put(rowCount, DataList);
							rowCount++;

							totalQty = totalQty + objGroupDtl.getQuantity();
							totalSale += objGroupDtl.getAmount();
							subTotal = subTotal + objGroupDtl.getSubTotal();
							discountTotal = discountTotal
									+ objGroupDtl.getDiscountAmount();

						}
					}

					try {
						BigDecimal big = new BigDecimal(totalSale);
						Gson gson = new Gson();
						Type type = new TypeToken<List<clsSalesFlashColumns>>() {
						}.getType();
						String gsonarrTempListSalesReport = gson.toJson(
								arrListSalesReport, type);
						jOBjRet.put("ListMenuHeadWiseSales",
								gsonarrTempListSalesReport);
						jOBjRet.put("totalQty", totalQty);
						jOBjRet.put("totalAmount", big);
						jOBjRet.put("subTotal", subTotal);
						jOBjRet.put("discountTotal", discountTotal);
						jOBjRet.put("ColHeader", jColHeaderArr);
						jOBjRet.put("colCount", colCount);
						jOBjRet.put("RowCount", rowCount);
						for (int tblRow = 0; tblRow < map.size(); tblRow++) {
							List listmap = (List) map.get(tblRow);
							listmap.add(decimalFormat.format((Double
									.parseDouble(listmap.get(4).toString()) / Double
									.parseDouble(big.toString())) * 100));
							jOBjRet.put("" + tblRow, listmap);
						}

					} catch (Exception e) {
						e.printStackTrace();
					}

				} catch (Exception e) {
					e.printStackTrace();
				}

				break;

			case "GroupWise":
				jColHeaderArr.add("Group Name");
				jColHeaderArr.add("POS ");
				jColHeaderArr.add("Quantity");
				jColHeaderArr.add("sub Total ");
				jColHeaderArr.add("Net Total");
				jColHeaderArr.add("Discount");
				jColHeaderArr.add("Sales (%)");
				colCount = 7;

				try {
					sql = "";
					totalQty = new Double("0.00");
					totalAmount = new BigDecimal("0.00");
					temp = new BigDecimal("0.00");
					temp1 = new BigDecimal("0.00");

					if (field.equals("dteBillDate")) {
						field = "a.dteBillDate";
					} else {
						field = "date(a.dteBillDate)";
					}

					sbSqlLive
							.append("SELECT c.strGroupCode,c.strGroupName,sum( b.dblQuantity),sum( b.dblAmount)-sum(b.dblDiscountAmt) "
									+ ",f.strPosName, '"
									+ strUserCode
									+ "',b.dblRate ,sum(b.dblAmount) "
									+ ",sum(b.dblDiscountAmt),a.strPOSCode,sum( b.dblAmount)-sum(b.dblDiscountAmt)+sum(b.dblTaxAmount) "
									+ "FROM tblbillhd a,tblbilldtl b,tblgrouphd c,tblsubgrouphd d"
									+ ",tblitemmaster e,tblposmaster f "
									+ "where a.strBillNo=b.strBillNo and a.strPOSCode=f.strPOSCode and a.strClientCode=b.strClientCode "
									+ "and b.strItemCode=e.strItemCode "
									+ "and c.strGroupCode=d.strGroupCode and d.strSubGroupCode=e.strSubGroupCode ");

					sbSqlQFile
							.append("SELECT c.strGroupCode,c.strGroupName,sum( b.dblQuantity),sum( b.dblAmount)-sum(b.dblDiscountAmt) "
									+ ",f.strPosName, '"
									+ strUserCode
									+ "',b.dblRate ,sum(b.dblAmount) "
									+ ",sum(b.dblDiscountAmt),a.strPOSCode,sum( b.dblAmount)-sum(b.dblDiscountAmt)+sum(b.dblTaxAmount) "
									+ "FROM tblqbillhd a,tblqbilldtl b,tblgrouphd c,tblsubgrouphd d"
									+ ",tblitemmaster e,tblposmaster f "
									+ "where a.strBillNo=b.strBillNo and a.strPOSCode=f.strPOSCode and a.strClientCode=b.strClientCode "
									+ "and b.strItemCode=e.strItemCode "
									+ "and c.strGroupCode=d.strGroupCode and d.strSubGroupCode=e.strSubGroupCode ");

					sqlModLive = "";
					sqlModLive = "select c.strGroupCode,c.strGroupName,sum(b.dblQuantity)"
							+ ",sum(b.dblAmount)-sum(b.dblDiscAmt),f.strPOSName,'"
							+ strUserCode
							+ "','0'"
							+ ",sum(b.dblAmount),sum(b.dblDiscAmt),a.strPOSCode,sum(b.dblAmount)-sum(b.dblDiscAmt) "
							+ " from tblbillmodifierdtl b,tblbillhd a,tblposmaster f,tblitemmaster d"
							+ ",tblsubgrouphd e,tblgrouphd c "
							+ " where a.strBillNo=b.strBillNo and a.strPOSCode=f.strPosCode and a.strClientCode=b.strClientCode "
							+ " and LEFT(b.strItemCode,7)=d.strItemCode "
							+ " and d.strSubGroupCode=e.strSubGroupCode and e.strGroupCode=c.strGroupCode "
							+ " and b.dblamount>0 "
							+ " and "
							+ field
							+ " BETWEEN '"
							+ fromDate
							+ "' AND '"
							+ toDate
							+ "' ";
					sqlModQFile = "";
					sqlModQFile = "select c.strGroupCode,c.strGroupName,sum(b.dblQuantity)"
							+ ",sum(b.dblAmount)-sum(b.dblDiscAmt),f.strPOSName,'"
							+ strUserCode
							+ "'"
							+ ",'0' ,sum(b.dblAmount),sum(b.dblDiscAmt),a.strPOSCode,sum(b.dblAmount)-sum(b.dblDiscAmt) "
							+ " from tblqbillmodifierdtl b,tblqbillhd a,tblposmaster f,tblitemmaster d"
							+ ",tblsubgrouphd e,tblgrouphd c "
							+ " where a.strBillNo=b.strBillNo and a.strPOSCode=f.strPosCode and a.strClientCode=b.strClientCode "
							+ " and LEFT(b.strItemCode,7)=d.strItemCode "
							+ " and d.strSubGroupCode=e.strSubGroupCode and e.strGroupCode=c.strGroupCode "
							+ " and b.dblamount>0 "
							+ " and "
							+ field
							+ " BETWEEN '"
							+ fromDate
							+ "' AND '"
							+ toDate
							+ "' ";

					if (!strPOSCode.equals("All") && !strOperator.equals("All")) {
						sbSqlFilters.append(" AND a.strPOSCode = '"
								+ strPOSCode + "' and a.strUserCreated='"
								+ strOperator + "' ");
					} else if (strPOSCode.equals("All")
							&& !strOperator.equals("All")) {
						sbSqlFilters.append(" and a.strUserCreated='"
								+ strOperator + "'");
					} else if (!strPOSCode.equals("All")
							&& strOperator.equals("All")) {
						sbSqlFilters.append(" AND a.strPOSCode = '"
								+ strPOSCode + "'");
					}

					sbSqlFilters.append(" AND a.intShiftCode = '" + strShiftNo
							+ "' ");

					if (ConsolidatePOS.equals("Y")) {
						if (strFromBill.length() == 0
								&& strToBill.trim().length() == 0) {
							sbSqlFilters
									.append(" and "
											+ field
											+ " BETWEEN '"
											+ fromDate
											+ "' AND '"
											+ toDate
											+ "'"
											+ " GROUP BY c.strGroupCode, c.strGroupName ");
						} else {
							sbSqlFilters
									.append(" WHERE "
											+ field
											+ " BETWEEN '"
											+ fromDate
											+ "' AND '"
											+ toDate
											+ "' "
											+ "and a.strBillNo between '"
											+ strFromBill
											+ "' and '"
											+ strToBill
											+ "'"
											+ " GROUP BY c.strGroupCode, c.strGroupName ");
						}
					} else {
						if (strFromBill.length() == 0
								&& strToBill.trim().length() == 0) {
							sbSqlFilters
									.append(" and "
											+ field
											+ " BETWEEN '"
											+ fromDate
											+ "' AND '"
											+ toDate
											+ "' "
											+ " GROUP BY c.strGroupCode, c.strGroupName, a.strPoscode ");
						} else {
							sbSqlFilters
									.append(" WHERE "
											+ field
											+ " BETWEEN '"
											+ fromDate
											+ "' AND '"
											+ toDate
											+ "' "
											+ "and a.strBillNo between '"
											+ strFromBill
											+ "' and '"
											+ strFromBill
											+ "'"
											+ " GROUP BY c.strGroupCode, c.strGroupName, a.strPoscode ");
						}
					}

					sbSqlLive.append(sbSqlFilters);
					sbSqlQFile.append(sbSqlFilters);
					sqlModLive += " " + sbSqlFilters;
					sqlModQFile += " " + sbSqlFilters;

					mapPOSDtlForGroupSubGroup = new LinkedHashMap<>();
					subTotal = 0.00;
					discountTotal = 0.00;

					Query queryGroupWiseSales = webPOSSessionFactory
							.getCurrentSession().createSQLQuery(
									sbSqlLive.toString());
					List listGroupWiseSales = queryGroupWiseSales.list();
					funGenerateGroupWiseSales(listGroupWiseSales);

					queryGroupWiseSales = webPOSSessionFactory
							.getCurrentSession().createSQLQuery(sqlModLive);
					listGroupWiseSales = queryGroupWiseSales.list();
					funGenerateGroupWiseSales(listGroupWiseSales);

					queryGroupWiseSales = webPOSSessionFactory
							.getCurrentSession().createSQLQuery(
									sbSqlQFile.toString());
					listGroupWiseSales = queryGroupWiseSales.list();
					funGenerateGroupWiseSales(listGroupWiseSales);

					queryGroupWiseSales = webPOSSessionFactory
							.getCurrentSession().createSQLQuery(sqlModQFile);
					listGroupWiseSales = queryGroupWiseSales.list();
					funGenerateGroupWiseSales(listGroupWiseSales);

					double totalSalesAmt = 0, totalGrandTotal = 0;
					arrListSalesReport = new ArrayList<clsSalesFlashColumns>();
					Iterator<Map.Entry<String, List<Map<String, clsGroupSubGroupWiseSales>>>> subGroupIt1 = mapPOSDtlForGroupSubGroup
							.entrySet().iterator();
					while (subGroupIt1.hasNext()) {
						Map.Entry<String, List<Map<String, clsGroupSubGroupWiseSales>>> entry = subGroupIt1
								.next();
						String posCode = entry.getKey();
						List<Map<String, clsGroupSubGroupWiseSales>> listOfGroup = entry
								.getValue();
						for (int i = 0; i < listOfGroup.size(); i++) {
							if (ConsolidatePOS.equalsIgnoreCase("Y")) {
								clsGroupSubGroupWiseSales objGroupDtl = listOfGroup
										.get(i).entrySet().iterator().next()
										.getValue();

								clsSalesFlashColumns obj = new clsSalesFlashColumns();
								obj.setStrField1(objGroupDtl.getGroupName());// groupName
								obj.setStrField2(objGroupDtl.getPosName());// POSName
																			// ...........pending
								obj.setStrField3(String.valueOf(objGroupDtl
										.getQty()));// qty
								obj.setStrField4(String.valueOf(objGroupDtl
										.getSalesAmt()));// salesAmount
								obj.setStrField5(String.valueOf(objGroupDtl
										.getSubTotal()));// subTotal
								obj.setStrField6(String.valueOf(objGroupDtl
										.getDiscAmt()));// discAmt

								Object[] arrObjRows = {
										objGroupDtl.getGroupName(),
										objGroupDtl.getQty(),
										objGroupDtl.getSalesAmt(),
										objGroupDtl.getSubTotal(),
										objGroupDtl.getDiscAmt() };

								List DataList = new ArrayList<>();
								DataList.add(objGroupDtl.getGroupName());
								DataList.add(objGroupDtl.getPosName());
								DataList.add(objGroupDtl.getQty());
								DataList.add(objGroupDtl.getSalesAmt());
								DataList.add(objGroupDtl.getSubTotal());
								DataList.add(objGroupDtl.getDiscAmt());
								map.put(rowCount, DataList);
								rowCount++;
								totalQty = totalQty + objGroupDtl.getQty();
								totalSalesAmt += objGroupDtl.getSalesAmt();
								subTotal = subTotal + objGroupDtl.getSubTotal();
								discountTotal = discountTotal
										+ objGroupDtl.getDiscAmt();
								totalGrandTotal += objGroupDtl.getGrandTotal();
								arrListSalesReport.add(obj);

							} else {
								clsGroupSubGroupWiseSales objGroupDtl = listOfGroup
										.get(i).entrySet().iterator().next()
										.getValue();
								clsSalesFlashColumns obj = new clsSalesFlashColumns();
								obj.setStrField1(objGroupDtl.getGroupName());// groupName
								obj.setStrField2(objGroupDtl.getPosName());// POSName
								obj.setStrField3(String.valueOf(objGroupDtl
										.getQty()));// qty
								obj.setStrField4(String.valueOf(objGroupDtl
										.getSalesAmt()));// salesAmount
								obj.setStrField5(String.valueOf(objGroupDtl
										.getSubTotal()));// subTotal
								obj.setStrField6(String.valueOf(objGroupDtl
										.getDiscAmt()));// discAmt

								List DataList = new ArrayList<>();
								DataList.add(objGroupDtl.getGroupName());
								DataList.add(objGroupDtl.getPosName());
								DataList.add(objGroupDtl.getQty());
								DataList.add(objGroupDtl.getSalesAmt());
								DataList.add(objGroupDtl.getSubTotal());
								DataList.add(objGroupDtl.getDiscAmt());
								map.put(rowCount, DataList);
								rowCount++;
								totalQty = totalQty + objGroupDtl.getQty();
								totalSalesAmt += objGroupDtl.getSalesAmt();
								subTotal = subTotal + objGroupDtl.getSubTotal();
								discountTotal = discountTotal
										+ objGroupDtl.getDiscAmt();
								totalGrandTotal += objGroupDtl.getGrandTotal();
								arrListSalesReport.add(obj);
							}
						}
					}
					try {
						BigDecimal bigtotalSalesAmt = new BigDecimal(
								totalSalesAmt);
						Gson gson = new Gson();
						Type type = new TypeToken<List<clsSalesFlashColumns>>() {
						}.getType();
						String gsonarrTempListSalesReport = gson.toJson(
								arrListSalesReport, type);
						jOBjRet.put("ListGroupWiseSales",
								gsonarrTempListSalesReport);
						jOBjRet.put("totalQty", totalQty);
						jOBjRet.put("totalAmount", bigtotalSalesAmt);
						jOBjRet.put("subTotal", subTotal);
						jOBjRet.put("discountTotal", discountTotal);
						jOBjRet.put("ColHeader", jColHeaderArr);
						jOBjRet.put("colCount", colCount);
						jOBjRet.put("RowCount", rowCount);
						for (int tblRow = 0; tblRow < map.size(); tblRow++) {
							List listmap = (List) map.get(tblRow);
							listmap.add(decimalFormat.format((Double
									.parseDouble(listmap.get(3).toString()) / Double
									.parseDouble(bigtotalSalesAmt.toString())) * 100));
							jOBjRet.put("" + tblRow, listmap);
						}

					} catch (Exception e) {
						e.printStackTrace();
					}

				} catch (Exception e) {
					e.printStackTrace();
				}
				break;

			case "SubGroupWise":

				jColHeaderArr.add("Sub Group Name");
				jColHeaderArr.add("POS ");
				jColHeaderArr.add("Quantity");
				jColHeaderArr.add("sub Total ");
				jColHeaderArr.add("Sales Amount");
				jColHeaderArr.add("Discount");
				jColHeaderArr.add("Sales (%)");
				colCount = 7;
				try {
					sql = "";
					totalQty = new Double("0.00");
					totalAmount = new BigDecimal("0.00");
					temp = new BigDecimal("0.00");

					temp1 = new BigDecimal("0.00");

					sbSqlLive.setLength(0);
					sbSqlQFile.setLength(0);
					sbSqlFilters.setLength(0);
					if (field.equals("dteBillDate")) {
						field = "a.dteBillDate";
					} else {
						field = "date(a.dteBillDate)";
					}

					sbSqlQFile
							.append("SELECT c.strSubGroupCode, c.strSubGroupName, sum( b.dblQuantity ) "
									+ " , sum( b.dblAmount )-sum(b.dblDiscountAmt), f.strPosName,'"
									+ strUserCode
									+ "',b.dblRate ,sum(b.dblAmount),sum(b.dblDiscountAmt),a.strPOSCode"
									+ " from tblqbillhd a,tblqbilldtl b,tblsubgrouphd c,tblitemmaster d "
									+ " ,tblposmaster f "
									+ " where a.strBillNo=b.strBillNo and a.strPOSCode=f.strPOSCode and a.strClientCode=b.strClientCode "
									+ " and b.strItemCode=d.strItemCode "
									+ " and c.strSubGroupCode=d.strSubGroupCode ");

					sbSqlLive
							.append(" SELECT c.strSubGroupCode, c.strSubGroupName, sum( b.dblQuantity ) "
									+ " , sum( b.dblAmount )-sum(b.dblDiscountAmt), f.strPosName,'"
									+ strUserCode
									+ "',b.dblRate ,sum(b.dblAmount),sum(b.dblDiscountAmt),a.strPOSCode"
									+ " from tblbillhd a,tblbilldtl b,tblsubgrouphd c,tblitemmaster d "
									+ " ,tblposmaster f "
									+ " where a.strBillNo=b.strBillNo and a.strPOSCode=f.strPOSCode and a.strClientCode=b.strClientCode "
									+ " and b.strItemCode=d.strItemCode "
									+ " and c.strSubGroupCode=d.strSubGroupCode ");
					sqlModLive = "";
					sqlModLive = "select c.strSubGroupCode,c.strSubGroupName"
							+ ",sum(b.dblQuantity),sum(b.dblAmount)-sum(b.dblDiscAmt),f.strPOSName"
							+ ",'"
							+ strUserCode
							+ "','0' ,sum(b.dblAmount),sum(b.dblDiscAmt),a.strPOSCode "
							+ " from tblbillmodifierdtl b,tblbillhd a,tblposmaster f,tblitemmaster d"
							+ ",tblsubgrouphd c"
							+ " where a.strBillNo=b.strBillNo and a.strPOSCode=f.strPosCode and a.strClientCode=b.strClientCode "
							+ " and LEFT(b.strItemCode,7)=d.strItemCode "
							+ " and d.strSubGroupCode=c.strSubGroupCode "
							+ " and b.dblamount>0 " + " and " + field
							+ " BETWEEN '" + fromDate + "' AND '" + toDate
							+ "' ";
					sqlModQFile = "";
					sqlModQFile = "select c.strSubGroupCode,c.strSubGroupName"
							+ ",sum(b.dblQuantity),sum(b.dblAmount)-sum(b.dblDiscAmt),f.strPOSName"
							+ ",'"
							+ strUserCode
							+ "','0' ,sum(b.dblAmount),sum(b.dblDiscAmt),a.strPOSCode "
							+ " from tblqbillmodifierdtl b,tblqbillhd a,tblposmaster f,tblitemmaster d"
							+ ",tblsubgrouphd c"
							+ " where a.strBillNo=b.strBillNo and a.strPOSCode=f.strPosCode and a.strClientCode=b.strClientCode "
							+ " and LEFT(b.strItemCode,7)=d.strItemCode "
							+ " and d.strSubGroupCode=c.strSubGroupCode "
							+ " and b.dblamount>0 " + " and " + field
							+ " BETWEEN '" + fromDate + "' AND '" + toDate
							+ "' ";

					if (!strPOSCode.equals("All") && !strOperator.equals("All")) {
						sbSqlFilters.append(" AND a.strPOSCode = '"
								+ strPOSCode + "' and a.strUserCreated='"
								+ strOperator + "'");
					} else if (!strPOSCode.equals("All")
							&& strOperator.equals("All")) {
						sbSqlFilters.append(" AND a.strPOSCode = '"
								+ strPOSCode + "' ");
					} else if (strPOSCode.equals("All")
							&& !strOperator.equals("All")) {
						sbSqlFilters.append(" and a.strUserCreated='"
								+ strOperator + "'");
					}

					sbSqlFilters.append(" AND a.intShiftCode = '" + strShiftNo
							+ "' ");

					if (ConsolidatePOS.equals("Y")) {
						if (strFromBill.length() == 0
								&& strToBill.trim().length() == 0) {
							sbSqlFilters
									.append(" and "
											+ field
											+ " BETWEEN '"
											+ fromDate
											+ "' AND '"
											+ toDate
											+ "' "
											+ " group by c.strSubGroupCode, c.strSubGroupName");
						} else {
							sbSqlFilters
									.append(" and "
											+ field
											+ " BETWEEN '"
											+ fromDate
											+ "' AND '"
											+ toDate
											+ "' "
											+ " and a.strBillNo between '"
											+ strFromBill
											+ "' and '"
											+ strToBill
											+ "' "
											+ " group by c.strSubGroupCode, c.strSubGroupName");
						}
					} else {
						if (strFromBill.length() == 0
								&& strToBill.trim().length() == 0) {
							sbSqlFilters
									.append(" and "
											+ field
											+ " BETWEEN '"
											+ fromDate
											+ "' AND '"
											+ toDate
											+ "'"
											+ " group by c.strSubGroupCode, c.strSubGroupName, a.strPoscode ");
						} else {
							sbSqlFilters
									.append(" and "
											+ field
											+ " BETWEEN '"
											+ fromDate
											+ "' AND '"
											+ toDate
											+ "' "
											+ " and a.strBillNo between '"
											+ strFromBill
											+ "' and '"
											+ strToBill
											+ "' "
											+ " group by c.strSubGroupCode, c.strSubGroupName, a.strPoscode");
						}
					}
					sbSqlLive.append(sbSqlFilters);
					sbSqlQFile.append(sbSqlFilters);
					sqlModLive += " " + sbSqlFilters;
					sqlModQFile += " " + sbSqlFilters;

					mapPOSDtlForGroupSubGroup = new LinkedHashMap<>();
					subTotal = 0.00;
					discountTotal = 0.00;

					Query querySubGroupWiseSales = webPOSSessionFactory
							.getCurrentSession().createSQLQuery(
									sbSqlLive.toString());
					List listSubGroupWiseSales = querySubGroupWiseSales.list();
					funGenerateSubGroupWiseSales(listSubGroupWiseSales);

					querySubGroupWiseSales = webPOSSessionFactory
							.getCurrentSession().createSQLQuery(sqlModLive);
					listSubGroupWiseSales = querySubGroupWiseSales.list();
					funGenerateSubGroupWiseSales(listSubGroupWiseSales);

					querySubGroupWiseSales = webPOSSessionFactory
							.getCurrentSession().createSQLQuery(
									sbSqlQFile.toString());
					listSubGroupWiseSales = querySubGroupWiseSales.list();
					funGenerateSubGroupWiseSales(listSubGroupWiseSales);

					querySubGroupWiseSales = webPOSSessionFactory
							.getCurrentSession().createSQLQuery(sqlModQFile);
					listSubGroupWiseSales = querySubGroupWiseSales.list();
					funGenerateSubGroupWiseSales(listSubGroupWiseSales);

					arrListSalesReport = new ArrayList<clsSalesFlashColumns>();
					double salesAmt = 0;
					Iterator<Map.Entry<String, List<Map<String, clsGroupSubGroupWiseSales>>>> iteratorPOS = mapPOSDtlForGroupSubGroup
							.entrySet().iterator();
					while (iteratorPOS.hasNext()) {
						Map.Entry<String, List<Map<String, clsGroupSubGroupWiseSales>>> entry = iteratorPOS
								.next();
						String posCode = entry.getKey();
						List<Map<String, clsGroupSubGroupWiseSales>> listOfGroup = entry
								.getValue();
						for (int i = 0; i < listOfGroup.size(); i++) {
							if (ConsolidatePOS.equalsIgnoreCase("Y")) {
								clsSalesFlashColumns obj = new clsSalesFlashColumns();
								clsGroupSubGroupWiseSales objGroupDtl = listOfGroup
										.get(i).entrySet().iterator().next()
										.getValue();
								obj.setStrField1(objGroupDtl.getGroupName());// groupName
								obj.setStrField2(objGroupDtl.getPosName());// pos
								obj.setStrField3(String.valueOf(objGroupDtl
										.getQty()));// qty
								obj.setStrField4(String.valueOf(objGroupDtl
										.getSalesAmt()));// salesAmount
								obj.setStrField5(String.valueOf(objGroupDtl
										.getSubTotal()));// subtotal
								obj.setStrField6(String.valueOf(objGroupDtl
										.getDiscAmt()));// discAmt

								List DataList = new ArrayList<>();
								DataList.add(objGroupDtl.getGroupName());
								DataList.add(objGroupDtl.getPosName());
								DataList.add(objGroupDtl.getQty());
								DataList.add(objGroupDtl.getSalesAmt());
								DataList.add(objGroupDtl.getSubTotal());
								DataList.add(objGroupDtl.getDiscAmt());
								map.put(rowCount, DataList);
								rowCount++;

								totalQty = totalQty + objGroupDtl.getQty();
								temp1 = temp1.add(new BigDecimal(objGroupDtl
										.getSubTotal()));
								salesAmt += salesAmt
										+ objGroupDtl.getSubTotal();
								subTotal = subTotal + objGroupDtl.getSubTotal();
								discountTotal = discountTotal
										+ objGroupDtl.getDiscAmt();
								arrListSalesReport.add(obj);
							} else {
								clsSalesFlashColumns obj = new clsSalesFlashColumns();
								clsGroupSubGroupWiseSales objGroupDtl = listOfGroup
										.get(i).entrySet().iterator().next()
										.getValue();
								obj.setStrField1(objGroupDtl.getGroupName());// groupName
								obj.setStrField2(objGroupDtl.getPosName());// pos
								obj.setStrField3(String.valueOf(objGroupDtl
										.getQty()));// qty
								obj.setStrField4(String.valueOf(objGroupDtl
										.getSalesAmt()));// salesAmount
								obj.setStrField5(String.valueOf(objGroupDtl
										.getSubTotal()));// subtotal
								obj.setStrField6(String.valueOf(objGroupDtl
										.getDiscAmt()));// discAmt

								List DataList = new ArrayList<>();
								DataList.add(objGroupDtl.getGroupName());
								DataList.add(objGroupDtl.getPosName());
								DataList.add(objGroupDtl.getQty());
								DataList.add(objGroupDtl.getSalesAmt());
								DataList.add(objGroupDtl.getSubTotal());
								DataList.add(objGroupDtl.getDiscAmt());
								map.put(rowCount, DataList);
								rowCount++;
								totalQty = totalQty + objGroupDtl.getQty();
								temp1 = temp1.add(new BigDecimal(objGroupDtl
										.getSubTotal()));
								subTotal = subTotal + objGroupDtl.getSubTotal();
								discountTotal = discountTotal
										+ objGroupDtl.getDiscAmt();
								arrListSalesReport.add(obj);
							}
						}
					}

					try {
						Gson gson = new Gson();
						Type type = new TypeToken<List<clsSalesFlashColumns>>() {
						}.getType();
						String gsonarrTempListSalesReport = gson.toJson(
								arrListSalesReport, type);
						jOBjRet.put("ListSubGroupWiseSales",
								gsonarrTempListSalesReport);
						jOBjRet.put("totalQty", totalQty);
						jOBjRet.put("SalesAmt", temp1);
						jOBjRet.put("subTotal", subTotal);
						jOBjRet.put("discountTotal", discountTotal);
						jOBjRet.put("ColHeader", jColHeaderArr);
						jOBjRet.put("colCount", colCount);
						jOBjRet.put("RowCount", rowCount);
						for (int tblRow = 0; tblRow < map.size(); tblRow++) {
							List listmap = (List) map.get(tblRow);
							listmap.add(decimalFormat.format((Double
									.parseDouble(listmap.get(3).toString()) / Double
									.parseDouble(temp1.toString())) * 100));
							jOBjRet.put("" + tblRow, listmap);
						}

					} catch (Exception e) {
						e.printStackTrace();
					}

				} catch (Exception e) {
					e.printStackTrace();
				}

				break;

			case "CustWise":

				jColHeaderArr.add("Customer Name");
				jColHeaderArr.add("No Of Bills");
				jColHeaderArr.add("Sales Amount");
				colCount = 3;
				if (reportType.equalsIgnoreCase("Item Wise")) {

					// StringBuilder sbSqlFilters = new StringBuilder();
					try {
						sql = "";
						sbSqlLiveBill.setLength(0);
						sbSqlQFileBill.setLength(0);
						sbSqlFilters.setLength(0);

						sbSqlLiveBill
								.append("select a.strBillNo,date(a.dteBillDate)"
										+ ",c.strCustomerCode,c.strCustomerName,d.strItemName"
										+ ",sum(b.dblQuantity),sum(b.dblAmount),'"
										+ strUserCode
										+ "' "
										+ "from tblbillhd a,tblbilldtl b,tblcustomermaster c,tblitemmaster d "
										+ "where a.strBillNo=b.strBillNo and a.strClientCode=b.strClientCode and a.strCustomerCode=c.strCustomerCode "
										+ "and b.strItemCode=d.strItemCode and a.strCustomerCode='"
										+ Customer
										+ "'"
										+ "and date(a.dteBillDate) between '"
										+ fromDate + "' and '" + toDate + "'");

						sbSqlQFileBill
								.append("select a.strBillNo,date(a.dteBillDate)"
										+ ",c.strCustomerCode,c.strCustomerName,d.strItemName"
										+ ",sum(b.dblQuantity),sum(b.dblAmount),'"
										+ strUserCode
										+ "' "
										+ "from tblqbillhd a,tblqbilldtl b,tblcustomermaster c,tblitemmaster d "
										+ "where a.strBillNo=b.strBillNo and a.strClientCode=b.strClientCode and a.strCustomerCode=c.strCustomerCode "
										+ "and b.strItemCode=d.strItemCode and a.strCustomerCode='"
										+ Customer
										+ "'"
										+ "and date(a.dteBillDate) between '"
										+ fromDate + "' and '" + toDate + "'");

						if (!strPOSCode.equals("All")) {
							sbSqlFilters.append(" and a.strPOSCode='"
									+ strPOSCode + "' ");
						}
						if (!strOperator.equals("All")) {
							sbSqlFilters.append(" and  a.strUserCreated='"
									+ strOperator + "' ");
						}
						if (!strPayMode.equals("All")) {
							sbSqlFilters.append(" and a.strSettelmentMode='"
									+ strPayMode + "' ");
						}
						if (strFromBill.length() == 0
								&& strToBill.trim().length() == 0) {

						} else {
							sbSqlFilters
									.append(" and a.strBillNo between '"
											+ strFromBill + "' and '"
											+ strToBill + "'");
						}

						sbSqlFilters.append(" AND a.intShiftCode = '"
								+ strShiftNo + "' ");

						sbSqlFilters.append(" group by a.strBillNo");

						double qty = 0, amount = 0;

						sbSqlLiveBill.append(sbSqlFilters);
						sbSqlQFileBill.append(sbSqlFilters);

						Query query = webPOSSessionFactory.getCurrentSession()
								.createSQLQuery(
										"truncate table tbltempsalesflash1;");

						String sqlInsertLiveBillSales = "insert into tbltempsalesflash1 "
								+ "(strbillno,dtebilldate,tmebilltime,strtablename,strposcode"
								+ ",strpaymode,dblsubtotal,struser) "
								+ "("
								+ sbSqlLiveBill + ");";
						String sqlInsertQFileBillSales = "insert into tbltempsalesflash1 "
								+ "(strbillno,dtebilldate,tmebilltime,strtablename,strposcode"
								+ ",strpaymode,dblsubtotal,struser) "
								+ "("
								+ sbSqlQFileBill + ");";

						query = webPOSSessionFactory.getCurrentSession()
								.createSQLQuery(sqlInsertLiveBillSales);
						query.executeUpdate();
						query = webPOSSessionFactory.getCurrentSession()
								.createSQLQuery(sqlInsertQFileBillSales);
						query.executeUpdate();

						sql = "select * from tbltempsalesflash1 where strUser='"
								+ strUserCode + "'";

						query = webPOSSessionFactory.getCurrentSession()
								.createSQLQuery(sql);
						List listSG = query.list();
						arrListSalesReport = new ArrayList<clsSalesFlashColumns>();

						if (listSG.size() > 0) {
							for (int i = 0; i < listSG.size(); i++) {
								clsSalesFlashColumns objsales = new clsSalesFlashColumns();
								Object[] obj = (Object[]) listSG.get(i);

								objsales.setStrField1(obj[0].toString());// Bill
																			// No
								String tempBillDate = obj[1].toString();
								String[] spDate = tempBillDate.split("-");
								String Billdate = spDate[2] + "-" + spDate[1]
										+ "-" + spDate[0];// Bill Date
								objsales.setStrField2(Billdate);
								objsales.setStrField3(obj[2].toString()); // Cust
																			// Code
								objsales.setStrField4(obj[3].toString());// Cust
																			// Name
								objsales.setStrField5(obj[4].toString());// Item
																			// Name
								objsales.setStrField6(obj[5].toString());// Qty
								objsales.setStrField7(obj[6].toString());// Amount

								List DataList = new ArrayList<>();
								DataList.add(obj[3].toString());
								DataList.add(obj[5].toString());
								DataList.add(obj[6].toString());

								map.put(rowCount, DataList);
								rowCount++;
								qty += Double.parseDouble(obj[5].toString());
								amount += Double.parseDouble(obj[6].toString());
								arrListSalesReport.add(objsales);
							}
						}
						try {
							Gson gson = new Gson();
							Type type = new TypeToken<List<clsSalesFlashColumns>>() {
							}.getType();
							String gsonarrTempListSalesReport = gson.toJson(
									arrListSalesReport, type);
							jOBjRet.put("ListCustWiseSales",
									gsonarrTempListSalesReport);
							jOBjRet.put("totalQty", qty);
							jOBjRet.put("SalesAmt", amount);
							jOBjRet.put("ColHeader", jColHeaderArr);
							jOBjRet.put("colCount", colCount);
							jOBjRet.put("RowCount", rowCount);
							for (int tblRow = 0; tblRow < map.size(); tblRow++) {
								List listmap = (List) map.get(tblRow);
								// listmap.add(decimalFormat.format((Double.parseDouble(listmap.get(3).toString())/salesAmt)*100));
								jOBjRet.put("" + tblRow, listmap);
							}

						} catch (Exception e) {
							e.printStackTrace();
						}

					} catch (Exception e) {
						e.printStackTrace();
					}
				} else if (reportType.equalsIgnoreCase("Customer Wise")) {

					try {
						sql = "";

						sbSqlLiveBill.setLength(0);
						sbSqlQFileBill.setLength(0);
						sbSqlFilters.setLength(0);

						sbSqlLiveBill
								.append("select b.strCustomerCode,b.strCustomerName "
										+ " ,a.strBillNo,sum(a.dblGrandTotal),'"
										+ strUserCode
										+ "' "
										+ " from tblbillhd a,tblcustomermaster b "
										+ " where a.strCustomerCode=b.strCustomerCode and a.strCustomerCode='"
										+ Customer
										+ "' "
										+ " and date(a.dteBillDate) between '"
										+ fromDate + "' and '" + toDate + "'");

						sbSqlQFileBill
								.append("select b.strCustomerCode,b.strCustomerName "
										+ " ,a.strBillNo,sum(a.dblGrandTotal),'"
										+ strUserCode
										+ "' "
										+ " from tblqbillhd a,tblcustomermaster b "
										+ " where a.strCustomerCode=b.strCustomerCode and a.strCustomerCode='"
										+ Customer
										+ "' "
										+ " and date(a.dteBillDate) between '"
										+ fromDate + "' and '" + toDate + "'");

						if (!strPOSCode.equals("All")) {
							sbSqlFilters.append(" and a.strPOSCode='"
									+ strPOSCode + "' ");
						}
						if (!strOperator.equals("All")) {
							sbSqlFilters.append(" and  a.strUserCreated='"
									+ strOperator + "' ");
						}
						if (!strPayMode.equals("All")) {
							sbSqlFilters.append(" and a.strSettelmentMode='"
									+ strPayMode + "' ");
						}
						if (strFromBill.length() == 0
								&& strToBill.trim().length() == 0) {
						} else {
							sbSqlFilters
									.append(" and a.strBillNo between '"
											+ strFromBill + "' and '"
											+ strToBill + "'");
						}

						sbSqlFilters.append(" AND a.intShiftCode = '"
								+ strShiftNo + "' ");

						sbSqlFilters.append(" group by a.strBillNo");

						double grandTotal = 0;
						double qty = 0, amount = 0;

						sbSqlLiveBill.append(sbSqlFilters);
						sbSqlQFileBill.append(sbSqlFilters);

						Query query = webPOSSessionFactory.getCurrentSession()
								.createSQLQuery(
										"truncate table tbltempsalesflash1;");

						String sqlInsertLiveBillSales = "insert into tbltempsalesflash1 "
								+ "(strbillno,dtebilldate,tmebilltime,strtablename,struser) "
								+ "(" + sbSqlLiveBill + ");";
						String sqlInsertQFileBillSales = "insert into tbltempsalesflash1 "
								+ "(strbillno,dtebilldate,tmebilltime,strtablename,struser) "
								+ "(" + sbSqlQFileBill + ");";

						query = webPOSSessionFactory.getCurrentSession()
								.createSQLQuery(sqlInsertLiveBillSales);
						query.executeUpdate();
						query = webPOSSessionFactory.getCurrentSession()
								.createSQLQuery(sqlInsertQFileBillSales);
						query.executeUpdate();
						sql = "select * from tbltempsalesflash1 where strUser='"
								+ strUserCode + "'";

						query = webPOSSessionFactory.getCurrentSession()
								.createSQLQuery(sql);
						List listSG = query.list();
						arrListSalesReport = new ArrayList<clsSalesFlashColumns>();

						if (listSG.size() > 0) {
							for (int i = 0; i < listSG.size(); i++) {
								flgRecords = true;

								clsSalesFlashColumns objsales = new clsSalesFlashColumns();
								Object[] obj = (Object[]) listSG.get(i);

								objsales.setStrField1(obj[0].toString()); // Cust
																			// Code
								objsales.setStrField2(obj[1].toString());// Cust
																			// Name
								objsales.setStrField3(obj[2].toString());// Count
								objsales.setStrField4(obj[3].toString());// Grand
																			// tot

								grandTotal += Double.parseDouble(obj[3]
										.toString());
								arrListSalesReport.add(objsales);

							}
						}
						try {
							Gson gson = new Gson();
							Type type = new TypeToken<List<clsSalesFlashColumns>>() {
							}.getType();
							String gsonarrTempListSalesReport = gson.toJson(
									arrListSalesReport, type);
							jOBjRet.put("ListCustWiseSales",
									gsonarrTempListSalesReport);
							jOBjRet.put("grandTotal", grandTotal);

						} catch (Exception e) {
							e.printStackTrace();
						}
					} catch (Exception e) {
						e.printStackTrace();
					}

				} else {

					try {
						sbSqlLiveBill.setLength(0);
						sbSqlQFileBill.setLength(0);
						sbSqlFilters.setLength(0);

						sbSqlLiveBill
								.append("select ifnull(b.strCustomerCode,'ND'),ifnull(b.strCustomerName,'ND')"
										+ ",ifnull(count(a.strBillNo),'0'),ifnull(sum(a.dblGrandTotal),'0.00'),'"
										+ strUserCode
										+ "' "
										+ "from tblbillhd a,tblcustomermaster b "
										+ "where a.strCustomerCode=b.strCustomerCode "
										+ "and date(a.dteBillDate) between '"
										+ fromDate + "' and '" + toDate + "'");

						sbSqlQFileBill
								.append("select ifnull(b.strCustomerCode,'ND'),ifnull(b.strCustomerName,'ND')"
										+ ",ifnull(count(a.strBillNo),'0'),ifnull(sum(a.dblGrandTotal),'0.00'),'"
										+ strUserCode
										+ "' "
										+ "from tblqbillhd a,tblcustomermaster b "
										+ "where a.strCustomerCode=b.strCustomerCode "
										+ "and date(a.dteBillDate) between '"
										+ fromDate + "' and '" + toDate + "'");

						if (!strPOSCode.equals("All")) {
							sbSqlFilters.append(" and a.strPOSCode='"
									+ strPOSCode + "' ");
						}
						if (!strOperator.equals("All")) {
							sbSqlFilters.append(" and  a.strUserCreated='"
									+ strOperator + "' ");
						}
						if (!strPayMode.equals("All")) {
							sbSqlFilters.append(" and a.strSettelmentMode='"
									+ strPayMode + "' ");
						}
						if (strFromBill.length() == 0
								&& strToBill.trim().length() == 0) {
						} else {
							sbSqlFilters
									.append(" and a.strBillNo between '"
											+ strFromBill + "' and '"
											+ strToBill + "'");
						}

						sbSqlFilters.append(" AND a.intShiftCode = '"
								+ strShiftNo + "' ");

						sbSqlFilters.append(" GROUP BY b.strCustomerCode");
						double grandTotal = 0;
						double qty = 0, amount = 0;

						sbSqlLiveBill.append(sbSqlFilters);
						sbSqlQFileBill.append(sbSqlFilters);
						Query query = webPOSSessionFactory.getCurrentSession()
								.createSQLQuery(
										"truncate table tbltempsalesflash1;");
						query.executeUpdate();

						String sqlInsertLiveBillSales = "insert into tbltempsalesflash1 "
								+ "(strbillno,dtebilldate,tmebilltime,strtablename,struser) "
								+ "(" + sbSqlLiveBill + ");";
						String sqlInsertQFileBillSales = "insert into tbltempsalesflash1 "
								+ "(strbillno,dtebilldate,tmebilltime,strtablename,struser) "
								+ "(" + sbSqlQFileBill + ");";

						query = webPOSSessionFactory.getCurrentSession()
								.createSQLQuery(sqlInsertLiveBillSales);
						query.executeUpdate();
						query = webPOSSessionFactory.getCurrentSession()
								.createSQLQuery(sqlInsertQFileBillSales);
						query.executeUpdate();
						sql = "select * from tbltempsalesflash1 where strUser='"
								+ strUserCode + "'";

						query = webPOSSessionFactory.getCurrentSession()
								.createSQLQuery(sql);
						List listSG = query.list();
						arrListSalesReport = new ArrayList<clsSalesFlashColumns>();
						int billCount = 0;

						if (listSG.size() > 0) {
							for (int i = 0; i < listSG.size(); i++) {
								flgRecords = true;

								clsSalesFlashColumns objsales = new clsSalesFlashColumns();
								Object[] obj = (Object[]) listSG.get(i);
								objsales.setStrField1(obj[1].toString());// Cust
																			// Name
								objsales.setStrField2(obj[2].toString());// count
								objsales.setStrField3(obj[3].toString());// Grand
																			// Total
								List DataList = new ArrayList<>();
								DataList.add(obj[1].toString());
								DataList.add(obj[2].toString());
								DataList.add(obj[3].toString());

								map.put(rowCount, DataList);
								rowCount++;
								billCount += Integer
										.parseInt(obj[2].toString());
								grandTotal += Double.parseDouble(obj[3]
										.toString());
								arrListSalesReport.add(objsales);
							}

						}
						try {
							Gson gson = new Gson();
							Type type = new TypeToken<List<clsSalesFlashColumns>>() {
							}.getType();
							String gsonarrTempListSalesReport = gson.toJson(
									arrListSalesReport, type);
							jOBjRet.put("ListCustWiseSales",
									gsonarrTempListSalesReport);
							jOBjRet.put("billCount", billCount);
							jOBjRet.put("grandTotal", grandTotal);
							jOBjRet.put("ColHeader", jColHeaderArr);
							jOBjRet.put("colCount", colCount);
							jOBjRet.put("RowCount", rowCount);
							for (int tblRow = 0; tblRow < map.size(); tblRow++) {
								List listmap = (List) map.get(tblRow);
								// listmap.add(decimalFormat.format((Double.parseDouble(listmap.get(3).toString())/salesAmt)*100));
								jOBjRet.put("" + tblRow, listmap);
							}
						} catch (Exception e) {
							e.printStackTrace();
						}

					} catch (Exception e) {
						e.printStackTrace();
					}
				}
				break;

			case "WaiterWise":
				jColHeaderArr.add("POS");
				jColHeaderArr.add("Waiter Full Name");
				jColHeaderArr.add("Waiter Short Name");
				jColHeaderArr.add("Sales Amount");

				colCount = 4;
				try {
					sql = "";

					totalQty = new Double("0.00");
					totalAmount = new BigDecimal("0.00");
					temp = new BigDecimal("0.00");
					temp1 = new BigDecimal("0.00");

					sbSqlLive.setLength(0);
					sbSqlQFile.setLength(0);

					sbSqlLive
							.append("select c.strPosName,b.strWShortName,b.strWFullName"
									+ ",SUM(d.dblSettlementAmt),'"
									+ strUserCode
									+ "',b.strWaiterNo,c.strPosCode "
									+ " from tblbillhd a,tblwaitermaster b, tblposmaster c,tblbillsettlementdtl d "
									+ " where a.strWaiterNo=b.strWaiterNo and a.strPOSCode=c.strPosCode "
									+ " and date( a.dteBillDate ) BETWEEN '"
									+ fromDate
									+ "' AND '"
									+ toDate
									+ "' "
									+ " and a.strBillNo=d.strBillNo and a.strClientCode=d.strClientCode ");

					sbSqlQFile
							.append("select c.strPosName,b.strWShortName,b.strWFullName"
									+ ",SUM(d.dblSettlementAmt),'"
									+ strUserCode
									+ "',b.strWaiterNo,c.strPosCode "
									+ " from tblqbillhd a,tblwaitermaster b, tblposmaster c,tblqbillsettlementdtl d "
									+ " where a.strWaiterNo=b.strWaiterNo and a.strPOSCode=c.strPosCode "
									+ " and date( a.dteBillDate ) BETWEEN '"
									+ fromDate
									+ "' AND '"
									+ toDate
									+ "'"
									+ " and a.strBillNo=d.strBillNo and a.strClientCode=d.strClientCode ");

					if (!strPOSCode.equals("All")) {
						sbSqlLive.append(" and a.strPOSCode='" + strPOSCode
								+ "' ");

						sbSqlQFile.append(" and a.strPOSCode='" + strPOSCode
								+ "' ");
					}
					sbSqlLive.append(" AND a.intShiftCode = '" + strShiftNo
							+ "' ");
					sbSqlQFile.append(" AND a.intShiftCode = '" + strShiftNo
							+ "' ");

					sbSqlLive.append(" group by a.strWaiterNo,a.strPOSCode");
					sbSqlQFile.append(" group by a.strWaiterNo,a.strPOSCode");
					mapPOSWaiterWiseSales = new LinkedHashMap<>();

					Query queryWaiterWiseSales = webPOSSessionFactory
							.getCurrentSession().createSQLQuery(
									sbSqlLive.toString());
					List listWaiterWiseSales = queryWaiterWiseSales.list();
					funGenerateWaiterWiseSales(listWaiterWiseSales);

					queryWaiterWiseSales = webPOSSessionFactory
							.getCurrentSession().createSQLQuery(
									sbSqlQFile.toString());
					listWaiterWiseSales = queryWaiterWiseSales.list();
					funGenerateWaiterWiseSales(listWaiterWiseSales);

					arrListSalesReport = new ArrayList<clsSalesFlashColumns>();
					totalSale = 0;
					Iterator<Map.Entry<String, Map<String, clsCommonBeanDtl>>> posIteratorWaiter = mapPOSWaiterWiseSales
							.entrySet().iterator();
					while (posIteratorWaiter.hasNext()) {
						Map<String, clsCommonBeanDtl> mapWaiterDtl = posIteratorWaiter
								.next().getValue();
						Iterator<Map.Entry<String, clsCommonBeanDtl>> itemIterator = mapWaiterDtl
								.entrySet().iterator();
						while (itemIterator.hasNext()) {
							clsCommonBeanDtl objWaiterDtl = itemIterator.next()
									.getValue();
							clsSalesFlashColumns objsales = new clsSalesFlashColumns();
							objsales.setStrField1(objWaiterDtl.getPosName());
							objsales.setStrField2(objWaiterDtl
									.getWaiterShortName());
							objsales.setStrField3(objWaiterDtl
									.getWaiterFullName());
							objsales.setStrField4(String.valueOf(objWaiterDtl
									.getSaleAmount()));

							arrListSalesReport.add(objsales);
							totalSale += objWaiterDtl.getSaleAmount();
							List DataList = new ArrayList<>();
							DataList.add(objWaiterDtl.getPosName());
							DataList.add(objWaiterDtl.getWaiterFullName());
							DataList.add(objWaiterDtl.getWaiterShortName());
							DataList.add(objWaiterDtl.getSaleAmount());
							map.put(rowCount, DataList);
							rowCount++;
						}
					}
					try {
						Gson gson = new Gson();
						Type type = new TypeToken<List<clsSalesFlashColumns>>() {
						}.getType();
						String gsonarrTempListSalesReport = gson.toJson(
								arrListSalesReport, type);
						jOBjRet.put("ListWaiterWiseSales",
								gsonarrTempListSalesReport);
						jOBjRet.put("TotalAmount", totalSale);
						jOBjRet.put("ColHeader", jColHeaderArr);
						jOBjRet.put("colCount", colCount);
						jOBjRet.put("RowCount", rowCount);
						for (int tblRow = 0; tblRow < map.size(); tblRow++) {
							List listmap = (List) map.get(tblRow);
							jOBjRet.put("" + tblRow, listmap);
						}
					} catch (Exception e) {
						e.printStackTrace();
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
				break;

			case "DeliveryBoyWise":
				jColHeaderArr.add("Delivery Boy Name");
				jColHeaderArr.add("POS");
				jColHeaderArr.add("Sales Amount");
				jColHeaderArr.add("Delivery Charges");
				colCount = 4;
				try {
					sql = "";
					totalAmount = new BigDecimal("0.00");
					temp = new BigDecimal("0.00");
					temp1 = new BigDecimal("0.00");

					sbSqlLiveBill.setLength(0);
					sbSqlQFileBill.setLength(0);

					sbSqlLiveBill
							.append("select a.strDPCode,b.strDPName,d.strPOSName"
									+ " ,sum(c.dblGrandTotal),sum(a.dblHomeDeliCharge),'"
									+ strUserCode
									+ "',a.strPOSCode "
									+ " from tblhomedelivery a,tbldeliverypersonmaster b,tblbillhd c, tblposmaster d "
									+ " WHERE a.strBillNo=c.strBillNo and a.strDPCode=b.strDPCode "
									+ " and c.strPOSCode=d.strPOSCode ");

					sbSqlQFileBill
							.append("select a.strDPCode,b.strDPName,d.strPOSName"
									+ " ,sum(c.dblGrandTotal),sum(a.dblHomeDeliCharge),'"
									+ strUserCode
									+ "',a.strPOSCode "
									+ " from tblhomedelivery a,tbldeliverypersonmaster b,tblqbillhd c, tblposmaster d "
									+ " WHERE a.strBillNo=c.strBillNo and a.strDPCode=b.strDPCode "
									+ " and c.strPOSCode=d.strPOSCode ");

					if (!strPOSCode.equals("All")) {
						sbSqlLiveBill.append(" AND a.strPOSCode = '"
								+ strPOSCode + "' ");
						sbSqlQFileBill.append(" AND a.strPOSCode = '"
								+ strPOSCode + "' ");
					}

					sbSqlLiveBill.append(" AND c.intShiftCode = '" + strShiftNo
							+ "' ");
					sbSqlQFileBill.append(" AND c.intShiftCode = '"
							+ strShiftNo + "' ");

					sbSqlLiveBill.append(" and date(a.dteDate) BETWEEN '"
							+ fromDate + "' AND '" + toDate + "'"
							+ " GROUP BY a.strDPCode");
					sbSqlQFileBill.append(" and date(a.dteDate) BETWEEN '"
							+ fromDate + "' AND '" + toDate + "'"
							+ " GROUP BY a.strDPCode");
					double totalAmt = 0;

					mapPOSDeliveryBoyWise = new LinkedHashMap<>();

					Query queryDeliveryBoyWiseSales = webPOSSessionFactory
							.getCurrentSession().createSQLQuery(
									sbSqlLiveBill.toString());
					List listDeliveryBoyWiseSales = queryDeliveryBoyWiseSales
							.list();
					funGenerateDelBoyWiseSales(listDeliveryBoyWiseSales);

					queryDeliveryBoyWiseSales = webPOSSessionFactory
							.getCurrentSession().createSQLQuery(
									sbSqlQFileBill.toString());
					listDeliveryBoyWiseSales = queryDeliveryBoyWiseSales.list();
					funGenerateDelBoyWiseSales(listDeliveryBoyWiseSales);
					arrListSalesReport = new ArrayList<clsSalesFlashColumns>();
					Iterator<Map.Entry<String, Map<String, clsCommonBeanDtl>>> posIteratorDelBoy = mapPOSDeliveryBoyWise
							.entrySet().iterator();
					while (posIteratorDelBoy.hasNext()) {
						Map<String, clsCommonBeanDtl> mapDBDtl = posIteratorDelBoy
								.next().getValue();
						Iterator<Map.Entry<String, clsCommonBeanDtl>> itemIterator = mapDBDtl
								.entrySet().iterator();
						while (itemIterator.hasNext()) {
							clsCommonBeanDtl objDBDtl = itemIterator.next()
									.getValue();
							clsSalesFlashColumns objsales = new clsSalesFlashColumns();

							objsales.setStrField1(objDBDtl.getDbName());
							objsales.setStrField2(objDBDtl.getPosName());
							objsales.setStrField3(String.valueOf(objDBDtl
									.getSaleAmount()));
							objsales.setStrField4(String.valueOf(objDBDtl
									.getDelCharges()));
							arrListSalesReport.add(objsales);
							totalAmt += objDBDtl.getSaleAmount();
							List DataList = new ArrayList<>();
							DataList.add(objDBDtl.getDbName());
							DataList.add(objDBDtl.getPosName());
							DataList.add(objDBDtl.getSaleAmount());
							DataList.add(objDBDtl.getDelCharges());
							map.put(rowCount, DataList);
							rowCount++;
						}
					}
					try {
						Gson gson = new Gson();
						Type type = new TypeToken<List<clsSalesFlashColumns>>() {
						}.getType();
						String gsonarrTempListSalesReport = gson.toJson(
								arrListSalesReport, type);
						jOBjRet.put("ListDelBoyWiseSales",
								gsonarrTempListSalesReport);
						jOBjRet.put("TotalAmount", totalAmt);
						jOBjRet.put("ColHeader", jColHeaderArr);
						jOBjRet.put("colCount", colCount);
						jOBjRet.put("RowCount", rowCount);
						for (int tblRow = 0; tblRow < map.size(); tblRow++) {
							List listmap = (List) map.get(tblRow);
							jOBjRet.put("" + tblRow, listmap);
						}

					} catch (Exception e) {
						e.printStackTrace();
					}
				}

				catch (Exception e) {
					e.printStackTrace();
				}
				break;

			case "CostCenterWise":
				jColHeaderArr.add("Cost Center Name");
				jColHeaderArr.add("POS");
				jColHeaderArr.add("Quantity");
				jColHeaderArr.add("Sub Total");
				jColHeaderArr.add("Sales Amount");
				jColHeaderArr.add("Discount");
				jColHeaderArr.add("Sales (%)");
				colCount = 7;
				try {
					totalQty = new Double("0.00");
					totalAmount = new BigDecimal("0.00");
					temp = new BigDecimal("0.00");
					temp1 = new BigDecimal("0.00");

					if (field.equals("dteBillDate")) {
						field = "d.dteBillDate";
					} else {
						field = "date(d.dteBillDate)";
					}
					sbSqlLive.setLength(0);
					sbSqlQFile.setLength(0);
					sbSqlFilters.setLength(0);

					sbSqlLive
							.append("SELECT ifnull(a.strCostCenterCode,'ND')"
									+ ", ifnull(a.strCostCenterName,'ND') ,sum( c.dblQuantity )"
									+ " ,sum( c.dblAmount )-sum(c.dblDiscountAmt), e.strPOSName,'"
									+ strUserCode
									+ "' "
									+ ",c.dblRate  ,sum(c.dblAmount),sum(c.dblDiscountAmt),e.strPosCode  "
									+ " from tblbilldtl c left outer join tblbillhd d on c.strBillNo = d.strBillNo "
									+ " and c.strClientCode=d.strClientCode "
									+ " left outer join tblposmaster e on d.strPOSCode = e.strPOSCode "
									+ " left outer join tblmenuitempricingdtl b on b.strItemCode = c.strItemCode \n"
									+ " and b.strposcode =d.strposcode\n"
									+ " left outer join tblcostcentermaster a on a.strCostCenterCode = b.strCostCenterCode\n"
									+ " where " + field + " BETWEEN '"
									+ fromDate + "' AND '" + toDate + "' ");
					if (AreaWisePricing.equals("Y"))// clsGlobalVarClass.gAreaWisePricing
					{
						sbSqlLive.append(" and d.strAreaCode=b.strAreaCode ");
					}

					// QFile Sql
					sbSqlQFile
							.append("SELECT ifnull(a.strCostCenterCode,'ND')"
									+ ", ifnull(a.strCostCenterName,'ND') ,sum( c.dblQuantity )"
									+ " ,sum( c.dblAmount )-sum(c.dblDiscountAmt), e.strPOSName,'"
									+ strUserCode
									+ "'"
									+ ",c.dblRate ,sum(c.dblAmount),sum(c.dblDiscountAmt),e.strPosCode "
									+ " from tblqbilldtl c left outer join tblqbillhd d on c.strBillNo = d.strBillNo "
									+ " and c.strClientCode=d.strClientCode "
									+ " left outer join tblposmaster e on d.strPOSCode = e.strPOSCode "
									+ " left outer join tblmenuitempricingdtl b on b.strItemCode = c.strItemCode \n"
									+ " and b.strposcode =d.strposcode\n"
									+ " left outer join tblcostcentermaster a on a.strCostCenterCode = b.strCostCenterCode\n"
									+ " where " + field + " BETWEEN '"
									+ fromDate + "' AND '" + toDate + "' ");
					if ("Y".equals("Y")) {
						sbSqlQFile.append(" and d.strAreaCode=b.strAreaCode ");
					}
					sqlModLive = "";
					sqlModLive = "SELECT ifnull(a.strCostCenterCode,'ND')"
							+ ", ifnull(a.strCostCenterName,'ND') ,sum( c.dblQuantity )"
							+ " ,sum(c.dblAmount)-sum(c.dblDiscAmt), e.strPOSName,'"
							+ strUserCode
							+ "'"
							+ ",c.dblRate ,sum( c.dblAmount ),sum(c.dblDiscAmt),e.strPosCode "
							+ " from tblbillmodifierdtl c left outer join tblbillhd d on c.strBillNo = d.strBillNo "
							+ " and c.strClientCode=d.strClientCode "
							+ " left outer join tblposmaster e on d.strPOSCode = e.strPOSCode "
							+ " left outer join tblmenuitempricingdtl b on b.strItemCode =LEFT(c.strItemCode,7)\n"
							+ " and b.strposcode =d.strposcode\n"
							+ " left outer join tblcostcentermaster a on a.strCostCenterCode = b.strCostCenterCode\n"
							+ " where " + field + " BETWEEN '" + fromDate
							+ "' AND '" + toDate + "' " + " and c.dblAmount>0";
					if (AreaWisePricing.equals("Y"))// clsGlobalVarClass.gAreaWisePricing
					{
						sqlModLive += " and d.strAreaCode=b.strAreaCode ";
					}
					sqlModQFile = "";
					sqlModQFile = "SELECT ifnull(a.strCostCenterCode,'ND')"
							+ ", ifnull(a.strCostCenterName,'ND') ,sum( c.dblQuantity )"
							+ " ,sum(c.dblAmount)-sum(c.dblDiscAmt), e.strPOSName,'"
							+ strUserCode
							+ "'"
							+ ",c.dblRate ,sum( c.dblAmount ),sum(c.dblDiscAmt),e.strPosCode "
							+ " from tblqbillmodifierdtl c left outer join tblqbillhd d on c.strBillNo = d.strBillNo "
							+ " and c.strClientCode=d.strClientCode "
							+ " left outer join tblposmaster e on d.strPOSCode = e.strPOSCode "
							+ " left outer join tblmenuitempricingdtl b on b.strItemCode =LEFT(c.strItemCode,7) \n"
							+ " and b.strposcode =d.strposcode\n"
							+ " left outer join tblcostcentermaster a on a.strCostCenterCode = b.strCostCenterCode\n"
							+ " where " + field + " BETWEEN '" + fromDate
							+ "' AND '" + toDate + "' " + " and c.dblAmount>0";
					if (AreaWisePricing.equals("Y"))// clsGlobalVarClass.gAreaWisePricing
					{
						sqlModQFile += " and d.strAreaCode=b.strAreaCode ";
					}

					if (!strPOSCode.equals("All") && !strOperator.equals("All")) {
						sbSqlFilters.append(" AND d.strPOSCode = '"
								+ strPOSCode + "' and d.strUserCreated='"
								+ strOperator + "'");
					} else if (!strPOSCode.equals("All")
							&& strOperator.equals("All")) {
						sbSqlFilters.append(" AND d.strPOSCode = '"
								+ strPOSCode + "'");
					} else if (strPOSCode.equals("All")
							&& !strOperator.equals("All")) {
						sbSqlFilters.append(" and d.strUserCreated='"
								+ strOperator + "'");
					}

					sbSqlFilters.append(" AND d.intShiftCode = '" + strShiftNo
							+ "' ");

					if (strFromBill.length() == 0 && strToBill.length() == 0) {
						sbSqlFilters
								.append(" GROUP BY b.strCostCenterCode,a.strCostCenterName, e.strPOSName,c.dblRate");
					} else {
						sbSqlFilters
								.append(" and d.strBillNo between '"
										+ strFromBill
										+ "' and '"
										+ strToBill
										+ "' "
										+ "GROUP BY b.strCostCenterCode,a.strCostCenterName, e.strPOSName,c.dblRate");
					}

					sbSqlLive.append(sbSqlFilters);
					sbSqlQFile.append(sbSqlFilters);
					sqlModLive = sqlModLive + " " + sbSqlFilters.toString();
					sqlModQFile = sqlModQFile + " " + sbSqlFilters.toString();
					subTotal = 0.00;
					discountTotal = 0.00;

					mapPOSCostCenterWiseSales = new LinkedHashMap<String, Map<String, clsCommonBeanDtl>>();

					Query queryCostCenterWiseSales = webPOSSessionFactory
							.getCurrentSession().createSQLQuery(
									sbSqlLive.toString());
					List listCostCenterWiseSales = queryCostCenterWiseSales
							.list();
					funGenerateCostCenterWiseSales(listCostCenterWiseSales);

					queryCostCenterWiseSales = webPOSSessionFactory
							.getCurrentSession().createSQLQuery(
									sbSqlQFile.toString());
					listCostCenterWiseSales = queryCostCenterWiseSales.list();
					funGenerateCostCenterWiseSales(listCostCenterWiseSales);

					queryCostCenterWiseSales = webPOSSessionFactory
							.getCurrentSession().createSQLQuery(
									sqlModLive.toString());
					listCostCenterWiseSales = queryCostCenterWiseSales.list();
					funGenerateCostCenterWiseSales(listCostCenterWiseSales);

					queryCostCenterWiseSales = webPOSSessionFactory
							.getCurrentSession().createSQLQuery(
									sqlModQFile.toString());
					listCostCenterWiseSales = queryCostCenterWiseSales.list();
					funGenerateCostCenterWiseSales(listCostCenterWiseSales);

					double totalAmt = 0;
					arrListSalesReport = new ArrayList<clsSalesFlashColumns>();
					Iterator<Map.Entry<String, Map<String, clsCommonBeanDtl>>> posIteratorCost = mapPOSCostCenterWiseSales
							.entrySet().iterator();
					while (posIteratorCost.hasNext()) {
						Map<String, clsCommonBeanDtl> mapCCDtl = posIteratorCost
								.next().getValue();
						Iterator<Map.Entry<String, clsCommonBeanDtl>> ccIterator = mapCCDtl
								.entrySet().iterator();
						while (ccIterator.hasNext()) {
							clsCommonBeanDtl objCCDtl = ccIterator.next()
									.getValue();
							clsSalesFlashColumns objsales = new clsSalesFlashColumns();
							objsales.setStrField1(objCCDtl.getCostCenterName());// ccName
							objsales.setStrField2(objCCDtl.getPosName());// posName
							objsales.setStrField3(String.valueOf(objCCDtl
									.getQty()));// Qty
							objsales.setStrField4(String.valueOf(objCCDtl
									.getSaleAmount()));// salesAmt
							objsales.setStrField5(String.valueOf(objCCDtl
									.getSubTotal()));// subTotal
							objsales.setStrField6(String.valueOf(objCCDtl
									.getDiscAmount()));// discAmt
							arrListSalesReport.add(objsales);

							List DataList = new ArrayList<>();
							DataList.add(objCCDtl.getCostCenterName());
							DataList.add(objCCDtl.getPosName());
							DataList.add(objCCDtl.getQty());
							DataList.add(objCCDtl.getSaleAmount());
							DataList.add(objCCDtl.getSubTotal());
							DataList.add(objCCDtl.getDiscAmount());
							map.put(rowCount, DataList);
							rowCount++;

							totalQty = totalQty + objCCDtl.getQty();
							totalAmt = totalAmt + objCCDtl.getSaleAmount();
							subTotal = subTotal + objCCDtl.getSubTotal();
							discountTotal = discountTotal
									+ objCCDtl.getDiscAmount();

						}
					}
					try {
						BigDecimal bigtotalAmt = new BigDecimal(totalAmt);
						Gson gson = new Gson();
						Type type = new TypeToken<List<clsSalesFlashColumns>>() {
						}.getType();
						String gsonarrTempListSalesReport = gson.toJson(
								arrListSalesReport, type);
						jOBjRet.put("ListCostCentWiseSales",
								gsonarrTempListSalesReport);
						jOBjRet.put("totalQty", totalQty);
						jOBjRet.put("totalAmt", bigtotalAmt);
						jOBjRet.put("subTotal", subTotal);
						jOBjRet.put("discountTotal", discountTotal);
						jOBjRet.put("ColHeader", jColHeaderArr);
						jOBjRet.put("colCount", colCount);
						jOBjRet.put("RowCount", rowCount);
						for (int tblRow = 0; tblRow < map.size(); tblRow++) {
							List listmap = (List) map.get(tblRow);
							listmap.add(decimalFormat.format((Double
									.parseDouble(listmap.get(3).toString()) / Double
									.parseDouble(bigtotalAmt.toString())) * 100));
							jOBjRet.put("" + tblRow, listmap);
						}
					} catch (Exception e) {
						e.printStackTrace();
					}
				} catch (Exception e) {
					e.printStackTrace();
				}

				break;

			case "HomeDeliveryWise":
				jColHeaderArr.add("Bill No");
				jColHeaderArr.add("POS");
				jColHeaderArr.add("Date");
				jColHeaderArr.add("Settle Mode");
				jColHeaderArr.add("Delivery Charges");
				jColHeaderArr.add("Disc Amt");
				jColHeaderArr.add("Tax Amt");
				jColHeaderArr.add("Amount");
				jColHeaderArr.add("Customer Name ");
				jColHeaderArr.add("Bulding");
				jColHeaderArr.add("Delv Boy");
				colCount = 11;
				try {
					sql = "";
					totalQty = new Double("0.00");
					totalAmount = new BigDecimal("0.00");
					temp = new BigDecimal("0.00");
					temp1 = new BigDecimal("0.00");
					BigDecimal sumDisc = new BigDecimal("0.00");
					BigDecimal sumtax = new BigDecimal("0.00");
					sbSqlLive.setLength(0);
					sbSqlQFile.setLength(0);

					sbSqlLive
							.append("SELECT ifnull(a.strBillNo,''),ifnull(f.strPosName,''),ifnull(DATE_FORMAT(date(b.dteBillDate),'%d-%m-%Y'),''),ifnull(b.strSettelmentMode,'') "
									+ " ,ifnull(b.dblDeliveryCharges,'') ,ifnull(b.dblDiscountAmt,''),ifnull(b.dblTaxAmt,''),ifnull(b.dblGrandTotal,'') ,"
									+ " ifnull(c.strCustomerName,''),ifnull(e.strBuildingName,''),ifnull(d.strDPName,''),'"
									+ strUserCode
									+ "' "
									+ " FROM tblhomedelivery a INNER JOIN tblbillhd b ON a.strBillNo = b.strBillNo "
									+ " INNER JOIN tblcustomermaster c ON a.strCustomerCode = c.strCustomerCode "
									+ " left OUTER Join tbldeliverypersonmaster d on a.strDPCode=d.strDPCode "
									+ " left OUTER Join tblbuildingmaster e on e.strBuildingCode=c.strBuldingCode"
									+ " left outer join tblposmaster f on b.strPOSCode=f.strPosCode "
									+ " WHERE date( b.dteBillDate ) BETWEEN '"
									+ fromDate + "' AND '" + toDate + "'");
					if (!strPOSCode.equals("All")) {
						sbSqlLive.append(" AND b.strPOSCode = '" + strPOSCode
								+ "'");
					}

					sbSqlLive.append(" AND b.intShiftCode = '" + strShiftNo
							+ "' ");

					sbSqlQFile
							.append("SELECT ifnull(a.strBillNo,''),ifnull(f.strPosName,''),ifnull(DATE_FORMAT(date(b.dteBillDate),'%d-%m-%Y'),''),ifnull(b.strSettelmentMode,'') "
									+ " ,ifnull(b.dblDeliveryCharges,'') ,ifnull(b.dblDiscountAmt,''),ifnull(b.dblTaxAmt,''),ifnull(b.dblGrandTotal,'') ,"
									+ " ifnull(c.strCustomerName,''),ifnull(e.strBuildingName,''),ifnull(d.strDPName,''),'"
									+ strUserCode
									+ "' "
									+ " FROM tblhomedelivery a INNER JOIN tblqbillhd b ON a.strBillNo = b.strBillNo "
									+ " INNER JOIN tblcustomermaster c ON a.strCustomerCode = c.strCustomerCode "
									+ " left OUTER Join tbldeliverypersonmaster d on a.strDPCode=d.strDPCode "
									+ " left OUTER Join tblbuildingmaster e on e.strBuildingCode=c.strBuldingCode "
									+ " left outer join tblposmaster f on b.strPOSCode=f.strPosCode "
									+ " WHERE date( b.dteBillDate ) BETWEEN '"
									+ fromDate + "' AND '" + toDate + "'");
					if (!strPOSCode.equals("All")) {
						sbSqlQFile.append(" AND b.strPOSCode = '" + strPOSCode
								+ "'");
					}

					sbSqlQFile.append(" AND b.intShiftCode = '" + strShiftNo
							+ "' ");

					arrListSalesReport = new ArrayList<clsSalesFlashColumns>();
					Query queryHomeDelWiseSales = webPOSSessionFactory
							.getCurrentSession().createSQLQuery(
									sbSqlLive.toString());
					List listHomeDelWiseSales = queryHomeDelWiseSales.list();

					try {
						if (listHomeDelWiseSales.size() > 0) {
							for (int i = 0; i < listHomeDelWiseSales.size(); i++) {

								Object[] obj = (Object[]) listHomeDelWiseSales
										.get(i);
								clsSalesFlashColumns objsales = new clsSalesFlashColumns();
								objsales.setStrField1(obj[0].toString());// bilNo
								objsales.setStrField2(obj[1].toString());// posName
								objsales.setStrField3(obj[2].toString());// billDate
								objsales.setStrField4(obj[3].toString());// settleMode
								objsales.setStrField5(obj[4].toString());// delCharges
								objsales.setStrField6(obj[5].toString());// disc
								objsales.setStrField7(obj[6].toString());// taxAmt
								objsales.setStrField8(obj[7].toString());// totalAmt
								objsales.setStrField9(obj[8].toString());// custName
								objsales.setStrField10(obj[9].toString());// address
								objsales.setStrField11(obj[10].toString());// delBoy
								sumDisc = sumDisc.add(new BigDecimal(obj[5]
										.toString()));
								sumtax = sumtax.add(new BigDecimal(obj[6]
										.toString()));
								temp1 = temp1.add(new BigDecimal(obj[7]
										.toString()));
								arrListSalesReport.add(objsales);

								List DataList = new ArrayList<>();
								DataList.add(obj[0].toString());
								DataList.add(obj[1].toString());
								DataList.add(obj[2].toString());
								DataList.add(obj[3].toString());
								DataList.add(obj[4].toString());
								DataList.add(obj[5].toString());
								DataList.add(obj[6].toString());
								DataList.add(obj[7].toString());
								DataList.add(obj[8].toString());
								DataList.add(obj[9].toString());
								DataList.add(obj[10].toString());
								map.put(rowCount, DataList);
								rowCount++;

							}
						}
					} catch (Exception e) {

					}

					queryHomeDelWiseSales = webPOSSessionFactory
							.getCurrentSession().createSQLQuery(
									sbSqlQFile.toString());
					listHomeDelWiseSales = queryHomeDelWiseSales.list();
					try {
						if (listHomeDelWiseSales.size() > 0) {
							for (int i = 0; i < listHomeDelWiseSales.size(); i++) {
								Object[] obj = (Object[]) listHomeDelWiseSales
										.get(i);
								clsSalesFlashColumns objsales = new clsSalesFlashColumns();
								objsales.setStrField1(obj[0].toString());// bilNo
								objsales.setStrField2(obj[1].toString());// posName
								objsales.setStrField3(obj[2].toString());// billDate
								objsales.setStrField4(obj[3].toString());// settleMode
								objsales.setStrField5(obj[4].toString());// delCharges
								objsales.setStrField6(obj[5].toString());// disc
								objsales.setStrField7(obj[6].toString());// taxAmt
								objsales.setStrField8(obj[7].toString());// totalAmt
								objsales.setStrField9(obj[8].toString());// custName
								objsales.setStrField10(obj[9].toString());// address
								objsales.setStrField11(obj[10].toString());// delBoy
								sumDisc = sumDisc.add(new BigDecimal(obj[5]
										.toString()));
								sumtax = sumtax.add(new BigDecimal(obj[6]
										.toString()));
								temp1 = temp1.add(new BigDecimal(obj[7]
										.toString()));
								arrListSalesReport.add(objsales);

								List DataList = new ArrayList<>();
								DataList.add(obj[0].toString());
								DataList.add(obj[1].toString());
								DataList.add(obj[2].toString());
								DataList.add(obj[3].toString());
								DataList.add(obj[4].toString());
								DataList.add(obj[5].toString());
								DataList.add(obj[6].toString());
								DataList.add(obj[7].toString());
								DataList.add(obj[8].toString());
								DataList.add(obj[9].toString());
								DataList.add(obj[10].toString());
								map.put(rowCount, DataList);
								rowCount++;
							}
						}
					} catch (Exception e) {
						e.printStackTrace();
					}

					try {
						Gson gson = new Gson();
						Type type = new TypeToken<List<clsSalesFlashColumns>>() {
						}.getType();
						String gsonarrTempListSalesReport = gson.toJson(
								arrListSalesReport, type);
						jOBjRet.put("ListHomeDelWiseSales",
								gsonarrTempListSalesReport);
						jOBjRet.put("sumDisc", sumDisc);
						jOBjRet.put("sumtax", sumtax);
						jOBjRet.put("SalesAmt", temp1);
						jOBjRet.put("ColHeader", jColHeaderArr);
						jOBjRet.put("colCount", colCount);
						jOBjRet.put("RowCount", rowCount);
						for (int tblRow = 0; tblRow < map.size(); tblRow++) {
							List listmap = (List) map.get(tblRow);
							// listmap.add(decimalFormat.format((Double.parseDouble(listmap.get(3).toString())/totalAmt)*100));
							jOBjRet.put("" + tblRow, listmap);
						}
					} catch (Exception e) {
						e.printStackTrace();
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
				break;

			case "TableWise":
				jColHeaderArr.add("POS ");
				jColHeaderArr.add("Table Name");
				jColHeaderArr.add("sales Amount");
				colCount = 3;
				totalQty = new Double("0.00");
				totalAmount = new BigDecimal("0.00");
				temp = new BigDecimal("0.00");
				temp1 = new BigDecimal("0.00");
				try {
					sqlQFile = "";
					sqlQFile = "select c.strPOSName,b.strTableName,'0',SUM(d.dblSettlementAmt)"
							+ ",'"
							+ strPOSCode
							+ "','"
							+ strUserCode
							+ "','0' ,'ND','ND',a.strTableNo "
							+ " from tblqbillhd a,tbltablemaster b,tblposmaster c,tblqbillsettlementdtl d "
							+ " where date( a.dteBillDate ) BETWEEN '"
							+ fromDate
							+ "' AND '"
							+ toDate
							+ "' "
							+ " and a.strTableNo=b.strTableNo and a.strPOSCode=c.strPOSCode"
							+ " and a.strBillNo=d.strBillNo and a.strClientCode=d.strClientCode ";

					String sqlLiveTables = "select c.strPOSName,b.strTableName,'0',SUM(d.dblSettlementAmt)"
							+ ",'"
							+ strPOSCode
							+ "','"
							+ strUserCode
							+ "','0' ,'ND','ND',a.strTableNo "
							+ " from tblbillhd a,tbltablemaster b,tblposmaster c,tblbillsettlementdtl d "
							+ " where date( a.dteBillDate ) BETWEEN '"
							+ fromDate
							+ "' AND '"
							+ toDate
							+ "' "
							+ " and a.strTableNo=b.strTableNo and a.strPOSCode=c.strPOSCode and a.strBillNo=d.strBillNo "
							+ " and a.strClientCode=d.strClientCode ";

					if (!strPOSCode.equals("All")) {
						sqlQFile += " AND a.strPOSCode = '" + strPOSCode + "'";
						sqlLiveTables += " AND a.strPOSCode = '" + strPOSCode
								+ "'";
					}

					sqlLiveTables += " AND a.intShiftCode = '" + strShiftNo
							+ "' ";
					sqlQFile += " AND a.intShiftCode = '" + strShiftNo + "' ";

					sqlQFile += " group by a.strTableNo ";
					sqlLiveTables += " group by a.strTableNo ";

					mapPOSTableWiseSales = new LinkedHashMap<String, Map<String, clsCommonBeanDtl>>();

					arrListSalesReport = new ArrayList<clsSalesFlashColumns>();
					Query queryTableWiseSales = webPOSSessionFactory
							.getCurrentSession().createSQLQuery(
									sqlLiveTables.toString());
					List listTableWiseSales = queryTableWiseSales.list();
					funGenerateTableWiseSales(listTableWiseSales);
					queryTableWiseSales = webPOSSessionFactory
							.getCurrentSession().createSQLQuery(
									sqlQFile.toString());
					listTableWiseSales = queryTableWiseSales.list();
					funGenerateTableWiseSales(listTableWiseSales);
					totalSale = 0;
					Iterator<Map.Entry<String, Map<String, clsCommonBeanDtl>>> posIteratorTable = mapPOSTableWiseSales
							.entrySet().iterator();
					while (posIteratorTable.hasNext()) {
						Map<String, clsCommonBeanDtl> mapTblDtl = posIteratorTable
								.next().getValue();
						Iterator<Map.Entry<String, clsCommonBeanDtl>> tblIterator = mapTblDtl
								.entrySet().iterator();
						while (tblIterator.hasNext()) {
							clsCommonBeanDtl objTblDtl = tblIterator.next()
									.getValue();
							clsSalesFlashColumns objsales = new clsSalesFlashColumns();
							objsales.setStrField1(objTblDtl.getPosName());
							objsales.setStrField2(objTblDtl.getTableName());
							objsales.setStrField3(String.valueOf(objTblDtl
									.getSaleAmount()));
							temp1 = temp1.add(new BigDecimal(String
									.valueOf(objTblDtl.getSaleAmount())));
							totalSale += objTblDtl.getSaleAmount();
							arrListSalesReport.add(objsales);
							List DataList = new ArrayList<>();
							DataList.add(objTblDtl.getPosName());
							DataList.add(objTblDtl.getTableName());
							DataList.add(objTblDtl.getSaleAmount());
							map.put(rowCount, DataList);
							rowCount++;
						}
					}
					try {
						Gson gson = new Gson();
						Type type = new TypeToken<List<clsSalesFlashColumns>>() {
						}.getType();
						String gsonarrTempListSalesReport = gson.toJson(
								arrListSalesReport, type);
						jOBjRet.put("ListTableWiseSales",
								gsonarrTempListSalesReport);
						jOBjRet.put("SalesAmt", temp1);
						jOBjRet.put("ColHeader", jColHeaderArr);
						jOBjRet.put("colCount", colCount);
						jOBjRet.put("RowCount", rowCount);
						for (int tblRow = 0; tblRow < map.size(); tblRow++) {
							List listmap = (List) map.get(tblRow);
							// listmap.add(decimalFormat.format((Double.parseDouble(listmap.get(3).toString())/totalAmt)*100));
							jOBjRet.put("" + tblRow, listmap);
						}
					} catch (Exception e) {
						e.printStackTrace();
					}

				} catch (Exception e) {
					e.printStackTrace();
				}
				break;

			case "HourlyWise":
				jColHeaderArr.add("Date Range");
				jColHeaderArr.add("On Of Bills Name");
				jColHeaderArr.add("sales Amount");
				jColHeaderArr.add("sales (%)");
				colCount = 4;
				try {
					sql = "";
					totalAmount = new BigDecimal("0.00");
					temp = new BigDecimal("0.00");
					temp1 = new BigDecimal("0.00");
					sqlQFile = "";
					sqlQFile = "select left(right(a.dteDateCreated,8),2),left(right(a.dteDateCreated,8),2) +1"
							+ ",count(*),sum(b.dblSettlementAmt),'"
							+ strPOSCode
							+ "'  "
							+ ",'"
							+ strUserCode
							+ "','0' ,'ND','ND'  \n"
							+ " from tblqbillhd a,tblqbillsettlementdtl b";

					String sqlLiveTables = "select left(right(a.dteDateCreated,8),2),left(right(a.dteDateCreated,8),2) +1"
							+ ",count(*),sum(b.dblSettlementAmt),'"
							+ strPOSCode
							+ "'  "
							+ ",'"
							+ strUserCode
							+ "','0' ,'ND','ND'  \n"
							+ " from tblbillhd a,tblbillsettlementdtl b ";

					String EnableShiftYN = "Y";

					if (!strPOSCode.equals("All")) {
						JSONObject JSONEnableShiftYN = new clsSetupDao()
								.funGetParameterValuePOSWise(strUserCode,
										strPOSCode, "gAreaWisePricing");
						// String
						// EnableShiftYN=JSONEnableShiftYN.get("gEnableShiftYN").toString();

						if (EnableShiftYN.equalsIgnoreCase("Y")) {
							sqlQFile += " WHERE a.strBillNo=b.strBillNo and a.strClientCode=b.strClientCode "
									+ " and a.strPOSCode='"
									+ strPOSCode
									+ "' and date(a.dteBillDate) BETWEEN '"
									+ fromDate
									+ "' AND '"
									+ toDate
									+ "'"
									+ " AND a.intShiftCode = '"
									+ strShiftNo
									+ "'  "
									+ " Group By left(right(a.dteDateCreated,8),2)";

							sqlLiveTables += " WHERE a.strBillNo=b.strBillNo and a.strClientCode=b.strClientCode"
									+ " and a.strPOSCode='"
									+ strPOSCode
									+ "' and date(a.dteBillDate) BETWEEN '"
									+ fromDate
									+ "' AND '"
									+ toDate
									+ "' "
									+ " AND a.intShiftCode = '"
									+ strShiftNo
									+ "' "
									+ " Group By left(right(a.dteDateCreated,8),2)";
						} else {
							sqlQFile += " WHERE a.strBillNo=b.strBillNo and a.strClientCode=b.strClientCode "
									+ "and a.strPOSCode='"
									+ strPOSCode
									+ "' and date(a.dteBillDate) BETWEEN '"
									+ fromDate
									+ "' AND '"
									+ toDate
									+ "' "
									+ " Group By left(right(a.dteDateCreated,8),2)";

							sqlLiveTables += " WHERE a.strBillNo=b.strBillNo and a.strClientCode=b.strClientCode "
									+ "and a.strPOSCode='"
									+ strPOSCode
									+ "' and date(a.dteBillDate) BETWEEN '"
									+ fromDate
									+ "' AND '"
									+ toDate
									+ "'"
									+ " Group By left(right(a.dteDateCreated,8),2)";
						}
					} else {
						JSONObject JSONEnableShiftYN = new clsSetupDao()
								.funGetParameterValuePOSWise(strUserCode,
										LoginPOSCode, "gAreaWisePricing");
						// String
						// EnableShiftYN=JSONEnableShiftYN.get("gEnableShiftYN").toString();

						if (EnableShiftYN.equalsIgnoreCase("Y")) {
							sqlQFile += " WHERE a.strBillNo=b.strBillNo and a.strClientCode=b.strClientCode "
									+ " and date(a.dteBillDate) BETWEEN '"
									+ fromDate
									+ "' AND '"
									+ toDate
									+ "' "
									+ " AND a.intShiftCode = '"
									+ strShiftNo
									+ "'  "
									+ " Group By left(right(a.dteDateCreated,8),2)";

							sqlLiveTables += " WHERE a.strBillNo=b.strBillNo and a.strClientCode=b.strClientCode "
									+ " and date(a.dteBillDate) BETWEEN '"
									+ fromDate
									+ "' AND '"
									+ toDate
									+ "' "
									+ " AND a.intShiftCode = '"
									+ strShiftNo
									+ "' "
									+ " Group By left(right(a.dteDateCreated,8),2)";
						} else {
							sqlQFile += " WHERE a.strBillNo=b.strBillNo and a.strClientCode=b.strClientCode "
									+ " and date(a.dteBillDate) BETWEEN '"
									+ fromDate
									+ "' AND '"
									+ toDate
									+ "' "
									+ " Group By left(right(a.dteDateCreated,8),2)";

							sqlLiveTables += " WHERE a.strBillNo=b.strBillNo and a.strClientCode=b.strClientCode "
									+ " and date(a.dteBillDate) BETWEEN '"
									+ fromDate
									+ "' AND '"
									+ toDate
									+ "' "
									+ " Group By left(right(a.dteDateCreated,8),2)";
						}
					}

					mapPOSHourlyWiseSales = new LinkedHashMap<String, Map<String, clsCommonBeanDtl>>();

					arrListSalesReport = new ArrayList<clsSalesFlashColumns>();
					Query queryHourWiseSales = webPOSSessionFactory
							.getCurrentSession().createSQLQuery(
									sqlLiveTables.toString());
					List listHourWiseSales = queryHourWiseSales.list();
					funGenerateHourlyWiseSales(listHourWiseSales);

					queryHourWiseSales = webPOSSessionFactory
							.getCurrentSession().createSQLQuery(
									sqlQFile.toString());
					listHourWiseSales = queryHourWiseSales.list();
					funGenerateHourlyWiseSales(listHourWiseSales);
					totalSale = 0;
					Iterator<Map.Entry<String, Map<String, clsCommonBeanDtl>>> posIteratorHour = mapPOSHourlyWiseSales
							.entrySet().iterator();
					while (posIteratorHour.hasNext()) {
						Map<String, clsCommonBeanDtl> mapHrlyDtl = posIteratorHour
								.next().getValue();
						Iterator<Map.Entry<String, clsCommonBeanDtl>> hrsIterator = mapHrlyDtl
								.entrySet().iterator();
						while (hrsIterator.hasNext()) {
							clsCommonBeanDtl objHrsDtl = hrsIterator.next()
									.getValue();
							clsSalesFlashColumns objsales = new clsSalesFlashColumns();

							objsales.setStrField1(objHrsDtl.getStartHrs() + "-"
									+ objHrsDtl.getEndHrs());
							objsales.setStrField2(String.valueOf(objHrsDtl
									.getNoOfBills()));
							objsales.setStrField3(String.valueOf(objHrsDtl
									.getSaleAmount()));
							temp1 = temp1.add(new BigDecimal(String
									.valueOf(objHrsDtl.getSaleAmount())));
							// totalSale+=objHrsDtl.getSaleAmount();
							arrListSalesReport.add(objsales);
							List DataList = new ArrayList<>();
							DataList.add(objHrsDtl.getStartHrs() + "-"
									+ objHrsDtl.getEndHrs());
							DataList.add(objHrsDtl.getNoOfBills());
							DataList.add(objHrsDtl.getSaleAmount());
							map.put(rowCount, DataList);
							rowCount++;

						}
					}

					try {
						Gson gson = new Gson();
						Type type = new TypeToken<List<clsSalesFlashColumns>>() {
						}.getType();
						String gsonarrTempListSalesReport = gson.toJson(
								arrListSalesReport, type);
						jOBjRet.put("ListHourWiseSales",
								gsonarrTempListSalesReport);
						jOBjRet.put("SalesAmt", temp1);
						jOBjRet.put("ColHeader", jColHeaderArr);
						jOBjRet.put("colCount", colCount);
						jOBjRet.put("RowCount", rowCount);
						for (int tblRow = 0; tblRow < map.size(); tblRow++) {
							List listmap = (List) map.get(tblRow);
							listmap.add(decimalFormat.format((Double
									.parseDouble(listmap.get(2).toString()) / Double
									.parseDouble(temp1.toString())) * 100));
							jOBjRet.put("" + tblRow, listmap);
						}
					} catch (Exception e) {
						e.printStackTrace();
					}
				} catch (Exception e) {
					e.printStackTrace();
				}

				break;
			// //

			case "AreaWise":
				// jColHeaderArr.add("POS");
				// jColHeaderArr.add("Area Name");
				// jColHeaderArr.add("sales Amount");
				// colCount=3;
				try {

					totalQty = new Double("0.00");
					totalAmount = new BigDecimal("0.00");
					temp = new BigDecimal("0.00");
					temp1 = new BigDecimal("0.00");
					if (field.equals("dteBillDate")) {
						field = "a.dteBillDate";
					} else {
						field = "date(a.dteBillDate)";
					}
					sqlQFile = "";
					sqlQFile = "select d.strPosName,c.strAreaName,'0', SUM(b.dblSettlementAmt),'"
							+ LoginPOSCode
							+ "' "
							+ " ,'"
							+ strUserCode
							+ "','0','ND','ND',a.strPosCode,a.strAreaCode "
							+ " from tblqbillhd a,tblqbillsettlementdtl b,tblareamaster c,tblposmaster d "
							+ " where "
							+ field
							+ " between '"
							+ fromDate
							+ "' and '"
							+ toDate
							+ "' "
							+ " and a.strBillNo=b.strBillNo and a.strClientCode=b.strClientCode "
							+ " and a.strAreaCode=c.strAreaCode "
							+ " and a.strPOSCode=d.strPosCode ";
					sqlLive = "";
					sqlLive = "select d.strPosName,c.strAreaName,'0', SUM(b.dblSettlementAmt),'"
							+ LoginPOSCode
							+ "' "
							+ " ,'"
							+ strUserCode
							+ "','0','ND','ND',a.strPosCode,a.strAreaCode "
							+ " from tblbillhd a,tblbillsettlementdtl b,tblareamaster c,tblposmaster d "
							+ " where "
							+ field
							+ " between '"
							+ fromDate
							+ "' and '"
							+ toDate
							+ "' "
							+ " and a.strBillNo=b.strBillNo and a.strClientCode=b.strClientCode "
							+ " and a.strAreaCode=c.strAreaCode and a.strPOSCode=d.strPosCode ";

					if (!strPOSCode.equals("All")) {
						sqlQFile += " and a.strPOSCode = '" + strPOSCode + "' ";
						sqlLive += " and  a.strPOSCode = '" + strPOSCode + "' ";
					}

					sqlQFile += " AND a.intShiftCode = '" + strShiftNo + "' ";
					sqlLive += " AND a.intShiftCode = '" + strShiftNo + "' ";
					sqlQFile += " group by a.strAreaCode ";
					sqlLive += " group by a.strAreaCode ";

					mapPOSAreaWiseSales = new LinkedHashMap<String, Map<String, clsCommonBeanDtl>>();
					arrListSalesReport = new ArrayList<clsSalesFlashColumns>();
					Query queryAreaWiseSales = webPOSSessionFactory
							.getCurrentSession().createSQLQuery(
									sqlLive.toString());
					List listAreaWiseSales = queryAreaWiseSales.list();
					funGenerateAreaWiseSales(listAreaWiseSales);
					queryAreaWiseSales = webPOSSessionFactory
							.getCurrentSession().createSQLQuery(
									sqlQFile.toString());
					listAreaWiseSales = queryAreaWiseSales.list();
					funGenerateAreaWiseSales(listAreaWiseSales);
					totalSale = 0;
					Iterator<Map.Entry<String, Map<String, clsCommonBeanDtl>>> posIteratorArea = mapPOSAreaWiseSales
							.entrySet().iterator();
					while (posIteratorArea.hasNext()) {
						Map<String, clsCommonBeanDtl> mapAreaDtl = posIteratorArea
								.next().getValue();
						Iterator<Map.Entry<String, clsCommonBeanDtl>> areaIterator = mapAreaDtl
								.entrySet().iterator();
						while (areaIterator.hasNext()) {
							clsCommonBeanDtl objAreaDtl = areaIterator.next()
									.getValue();
							clsSalesFlashColumns objsales = new clsSalesFlashColumns();

							objsales.setStrField1(objAreaDtl.getPosName());
							objsales.setStrField2(objAreaDtl.getAreaName());
							objsales.setStrField3(String.valueOf(objAreaDtl
									.getSaleAmount()));
							temp1 = temp1.add(new BigDecimal(String
									.valueOf(objAreaDtl.getSaleAmount())));
							// totalSale+=objAreaDtl.getSaleAmount();
							arrListSalesReport.add(objsales);

							// List DataList=new ArrayList<>();
							// DataList.add(objAreaDtl.getPosName());
							// DataList.add(objAreaDtl.getAreaName());
							// DataList.add(objAreaDtl.getSaleAmount());
							// map.put(rowCount,DataList );
							// rowCount++;
						}
					}
					try {
						Gson gson = new Gson();
						Type type = new TypeToken<List<clsSalesFlashColumns>>() {
						}.getType();
						String gsonarrTempListSalesReport = gson.toJson(
								arrListSalesReport, type);
						jOBjRet.put("ListAreaWiseSales",
								gsonarrTempListSalesReport);
						jOBjRet.put("SalesAmt", temp1);
						jOBjRet.put("ColHeader", jColHeaderArr);
						jOBjRet.put("colCount", colCount);
						jOBjRet.put("RowCount", rowCount);
						for (int tblRow = 0; tblRow < map.size(); tblRow++) {
							List listmap = (List) map.get(tblRow);
							// listmap.add(decimalFormat.format((Double.parseDouble(listmap.get(2).toString())/totalSale)*100));
							jOBjRet.put("" + tblRow, listmap);
						}
					} catch (Exception e) {
						e.printStackTrace();
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
				break;

			case "DayWiseSales":
				jColHeaderArr.add("Bill date");
				jColHeaderArr.add("No Of Bills");
				jColHeaderArr.add("Sub Total ");
				jColHeaderArr.add("Discount");
				jColHeaderArr.add("Tax Amount");
				jColHeaderArr.add("Grand Amount");
				colCount = 6;

				StringBuilder sbSqlForDiscount = new StringBuilder();
				temp = new BigDecimal("0.00");
				temp1 = new BigDecimal("0.00");
				double totalDiscount = 0,
				totAmount = 0;
				totalSubTotalDWise = 0;
				totalTaxAmt = 0;
				int totalNoOfBills = 0;

				try {

					sbSql.setLength(0);
					sbSql.append("select  DATE_FORMAT(date(a.dteBillDate),'%d-%m-%Y'),count(a.strBillNo),sum(a.dblSubTotal)"
							+ ",sum(a.dblDiscountAmt),sum(a.dblTaxAmt),'"
							+ strUserCode
							+ "',date(a.dteBillDate) "
							+ " from tblbillhd a "
							+ " where date(a.dteBillDate) between '"
							+ fromDate
							+ "' and '" + toDate + "' ");
					if (!strPOSCode.equals("All")) {
						sbSql.append(" and a.strPOSCode='" + strPOSCode + "'");
					}

					sbSql.append(" AND a.intShiftCode = '" + strShiftNo + "' ");
					sbSql.append(" group by date(a.dteBillDate)");

					arrListSalesReport = new ArrayList<clsSalesFlashColumns>();
					Query queryDayWiseSales = webPOSSessionFactory
							.getCurrentSession().createSQLQuery(
									sbSql.toString());
					List listDayWise = queryDayWiseSales.list();

					if (listDayWise.size() > 0) {
						for (int i = 0; i < listDayWise.size(); i++) {
							Object[] obj = (Object[]) listDayWise.get(i);
							double settlementAmt = 0;
							sbSqlForDiscount.setLength(0);
							sbSqlForDiscount
									.append("select sum(b.dblSettlementAmt) "
											+ " from tblbillhd a, tblbillsettlementdtl b "
											+ " where a.strBillNo=b.strBillNo "
											+ " and date(a.dteBillDate) = '"
											+ obj[6].toString() + "' ");
							if (!strPOSCode.equals("All")) {
								sbSqlForDiscount.append(" and a.strPOSCode='"
										+ strPOSCode + "'");
							}

							sbSqlForDiscount.append(" AND a.intShiftCode = '"
									+ strShiftNo + "' ");
							sbSqlForDiscount
									.append(" group by date(a.dteBillDate)");

							Query queryDayWiseSalesSettlementAmt = webPOSSessionFactory
									.getCurrentSession().createSQLQuery(
											sbSqlForDiscount.toString());
							List listDayWiseSt = queryDayWiseSalesSettlementAmt
									.list();

							if (listDayWiseSt.size() > 0) {
								// Object[] obj1 = (Object[])
								// listDayWiseSt.get(0);
								settlementAmt = Double
										.parseDouble(listDayWiseSt.get(0)
												.toString());

							}
							clsSalesFlashColumns objsales = new clsSalesFlashColumns();

							objsales.setStrField1(obj[0].toString()); // day
							objsales.setStrField2(obj[1].toString()); // noOfBills
							objsales.setStrField3(obj[2].toString()); // subTotal
							objsales.setStrField4(obj[3].toString()); // disc
							objsales.setStrField5(obj[4].toString()); // tax
							objsales.setStrField6(String.valueOf(settlementAmt));// sales

							totalNoOfBills = totalNoOfBills
									+ Integer.parseInt(obj[1].toString());
							totalSubTotalDWise = totalSubTotalDWise
									+ Double.parseDouble(obj[2].toString());
							totalDiscount = totalDiscount
									+ Double.parseDouble(obj[3].toString());
							totalTaxAmt = totalTaxAmt
									+ Double.parseDouble(obj[4].toString());
							totAmount = totAmount + settlementAmt;
							arrListSalesReport.add(objsales);

							List DataList = new ArrayList<>();
							DataList.add(obj[0].toString());
							DataList.add(obj[1].toString());
							DataList.add(obj[2].toString());
							DataList.add(obj[3].toString());
							DataList.add(obj[4].toString());
							DataList.add(settlementAmt);
							map.put(rowCount, DataList);
							rowCount++;
						}
					}

					sbSql.setLength(0);
					sbSql.append("select DATE_FORMAT(date(a.dteBillDate),'%d-%m-%Y'),count(a.strBillNo),sum(a.dblSubTotal)"
							+ ",sum(a.dblDiscountAmt),sum(a.dblTaxAmt),'"
							+ strUserCode
							+ "',date(a.dteBillDate) "
							+ " from tblqbillhd a "
							+ " where date(a.dteBillDate) between '"
							+ fromDate
							+ "' and '" + toDate + "' ");
					if (!strPOSCode.equals("All")) {
						sbSql.append(" and a.strPOSCode='" + strPOSCode + "'");
					}
					sbSql.append(" AND a.intShiftCode = '" + strShiftNo + "' ");
					sbSql.append(" group by date(a.dteBillDate)");

					queryDayWiseSales = webPOSSessionFactory
							.getCurrentSession().createSQLQuery(
									sbSql.toString());
					listDayWise = queryDayWiseSales.list();

					if (listDayWise.size() > 0) {
						for (int i = 0; i < listDayWise.size(); i++) {
							Object[] obj = (Object[]) listDayWise.get(i);
							double settlementAmt = 0;
							sbSqlForDiscount.setLength(0);
							sbSqlForDiscount
									.append("select sum(b.dblSettlementAmt) "
											+ " from tblqbillhd a, tblqbillsettlementdtl b "
											+ " where a.strBillNo=b.strBillNo "
											+ " and date(a.dteBillDate) = '"
											+ obj[6].toString() + "' ");
							if (!strPOSCode.equals("All")) {
								sbSqlForDiscount.append(" and a.strPOSCode='"
										+ strPOSCode + "'");
							}
							sbSqlForDiscount.append(" AND a.intShiftCode = '"
									+ strShiftNo + "' ");

							sbSqlForDiscount
									.append(" group by date(a.dteBillDate)");

							Query queryDayWiseSalesSettlementAmt = webPOSSessionFactory
									.getCurrentSession().createSQLQuery(
											sbSqlForDiscount.toString());
							List listDayWiseSt = queryDayWiseSalesSettlementAmt
									.list();

							if (listDayWiseSt.size() > 0) {
								settlementAmt = Double
										.parseDouble(listDayWiseSt.get(0)
												.toString());

							}
							clsSalesFlashColumns objsales = new clsSalesFlashColumns();

							objsales.setStrField1(obj[0].toString()); // day
							objsales.setStrField2(obj[1].toString()); // noOfBills
							objsales.setStrField3(obj[2].toString()); // subTotal
							objsales.setStrField4(obj[3].toString()); // disc
							objsales.setStrField5(obj[4].toString()); // tax
							objsales.setStrField6(String.valueOf(settlementAmt));// sales

							totalNoOfBills = totalNoOfBills
									+ Integer.parseInt(obj[1].toString());
							totalSubTotalDWise = totalSubTotalDWise
									+ Double.parseDouble(obj[2].toString());
							totalDiscount = totalDiscount
									+ Double.parseDouble(obj[3].toString());
							totalTaxAmt = totalTaxAmt
									+ Double.parseDouble(obj[4].toString());
							totAmount = totAmount + settlementAmt;
							arrListSalesReport.add(objsales);

							List DataList = new ArrayList<>();
							DataList.add(obj[0].toString());
							DataList.add(obj[1].toString());
							DataList.add(obj[2].toString());
							DataList.add(obj[3].toString());
							DataList.add(obj[4].toString());
							DataList.add(settlementAmt);
							map.put(rowCount, DataList);
							rowCount++;
						}

					}
					try {
						Gson gson = new Gson();
						Type type = new TypeToken<List<clsSalesFlashColumns>>() {
						}.getType();
						String gsonarrTempListSalesReport = gson.toJson(
								arrListSalesReport, type);
						jOBjRet.put("ListDayWiseSales",
								gsonarrTempListSalesReport);
						jOBjRet.put("totalNoOfBills", totalNoOfBills);
						jOBjRet.put("totalSubTotal", totalSubTotalDWise);
						jOBjRet.put("totalDiscount", totalDiscount);
						jOBjRet.put("totalTaxAmt", totalTaxAmt);
						jOBjRet.put("totAmount", totAmount);
						jOBjRet.put("ColHeader", jColHeaderArr);
						jOBjRet.put("colCount", colCount);
						jOBjRet.put("RowCount", rowCount);
						for (int tblRow = 0; tblRow < map.size(); tblRow++) {
							List listmap = (List) map.get(tblRow);
							// listmap.add(decimalFormat.format((Double.parseDouble(listmap.get(2).toString())/totalSale)*100));
							jOBjRet.put("" + tblRow, listmap);
						}
					} catch (Exception e) {
						e.printStackTrace();
					}

				} catch (Exception e) {
					e.printStackTrace();
				}
				break;

			case "TaxWiseSales":
				jColHeaderArr.add("Bill No");
				jColHeaderArr.add("Bill date");
				jColHeaderArr.add("Tax Code");
				jColHeaderArr.add("Tax Name ");
				jColHeaderArr.add("Tax Percentage");
				jColHeaderArr.add("Taxable Amount");
				jColHeaderArr.add("Tax Amount");
				colCount = 7;
				try {
					String prevBillNo = "";
					double totalTax = 0, totalTaxableAmt = 0;
					totalQty = new Double("0.00");
					totalAmount = new BigDecimal("0.00");
					temp = new BigDecimal("0.00");
					temp1 = new BigDecimal("0.00");

					sbSqlLive.setLength(0);
					sbSqlQFile.setLength(0);

					sbSqlLive
							.append("select a.strBillNo,date(a.dteBillDate),c.strTaxCode"
									+ " ,c.strTaxDesc,b.dblTaxableAmount,b.dblTaxAmount,c.dblPercent"
									+ " ,'"
									+ strUserCode
									+ "' "
									+ " from tblbillhd a,tblbilltaxdtl b,tbltaxhd c "
									+ " where a.strBillNo=b.strBillNo  and b.strTaxCode=c.strTaxCode "
									+ " and a.strClientCode=b.strClientCode and b.strClientCode=c.strClientCode "
									+ " and date(a.dteBillDate) between '"
									+ fromDate + "' and '" + toDate + "' ");

					sbSqlQFile
							.append("select a.strBillNo,date(a.dteBillDate),c.strTaxCode"
									+ " ,c.strTaxDesc,b.dblTaxableAmount,b.dblTaxAmount,c.dblPercent "
									+ " ,'"
									+ strUserCode
									+ "' "
									+ " from tblqbillhd a,tblqbilltaxdtl b,tbltaxhd c "
									+ " where a.strBillNo=b.strBillNo  and b.strTaxCode=c.strTaxCode "
									+ " and a.strClientCode=b.strClientCode and b.strClientCode=c.strClientCode "
									+ " and date(a.dteBillDate) between '"
									+ fromDate + "' and '" + toDate + "' ");

					if (!strPOSCode.equals("All")) {
						sbSqlLive.append(" and a.strPOSCode='" + strPOSCode
								+ "' ");
						sbSqlQFile.append(" and a.strPOSCode='" + strPOSCode
								+ "' ");
					}
					sbSqlLive.append(" AND a.intShiftCode = '" + strShiftNo
							+ "' ");
					sbSqlQFile.append(" AND a.intShiftCode = '" + strShiftNo
							+ "' ");

					sbSqlLive.append(" order by a.strBillNo desc");
					sbSqlQFile.append(" order by a.strBillNo desc");

					sbSqlLive.append(sbSqlFilters);
					sbSqlQFile.append(sbSqlFilters);

					arrListSalesReport = new ArrayList<clsSalesFlashColumns>();
					Query queryTaxWiseSales = webPOSSessionFactory
							.getCurrentSession().createSQLQuery(
									sbSqlLive.toString());
					List listTaxWise = queryTaxWiseSales.list();

					if (listTaxWise.size() > 0) {
						for (int i = 0; i < listTaxWise.size(); i++) {
							Object[] obj = (Object[]) listTaxWise.get(i);
							clsSalesFlashColumns objsales = new clsSalesFlashColumns();
							objsales.setStrField1(obj[0].toString());
							objsales.setStrField2(obj[1].toString());
							objsales.setStrField3(obj[2].toString());
							objsales.setStrField4(obj[3].toString());
							objsales.setStrField5(obj[6].toString());
							objsales.setStrField6(obj[4].toString());
							objsales.setStrField7(obj[5].toString());
							totalTax = totalTax
									+ Double.parseDouble(obj[5].toString());
							if (!prevBillNo.equals(obj[0].toString())) {
								totalTaxableAmt = totalTaxableAmt
										+ Double.parseDouble(obj[5].toString());
							}
							prevBillNo = obj[0].toString();
							arrListSalesReport.add(objsales);

							List DataList = new ArrayList<>();
							DataList.add(obj[0].toString());
							DataList.add(obj[1].toString());
							DataList.add(obj[2].toString());
							DataList.add(obj[3].toString());
							DataList.add(obj[6].toString());
							DataList.add(obj[4].toString());
							DataList.add(obj[5].toString());

							map.put(rowCount, DataList);
							rowCount++;

						}
					}
					// for day end
					queryTaxWiseSales = webPOSSessionFactory
							.getCurrentSession().createSQLQuery(
									sbSqlQFile.toString());
					listTaxWise = queryTaxWiseSales.list();

					if (listTaxWise.size() > 0) {
						for (int i = 0; i < listTaxWise.size(); i++) {
							Object[] obj = (Object[]) listTaxWise.get(i);
							clsSalesFlashColumns objsales = new clsSalesFlashColumns();

							objsales.setStrField1(obj[0].toString());
							objsales.setStrField2(obj[1].toString());
							objsales.setStrField3(obj[2].toString());
							objsales.setStrField4(obj[3].toString());
							objsales.setStrField5(obj[6].toString());
							objsales.setStrField6(obj[4].toString());
							objsales.setStrField7(obj[5].toString());
							totalTax = totalTax
									+ Double.parseDouble(obj[5].toString());
							if (!prevBillNo.equals(obj[0].toString())) {
								totalTaxableAmt = totalTaxableAmt
										+ Double.parseDouble(obj[5].toString());
							}
							prevBillNo = obj[0].toString();
							arrListSalesReport.add(objsales);

							List DataList = new ArrayList<>();
							DataList.add(obj[0].toString());
							DataList.add(obj[1].toString());
							DataList.add(obj[2].toString());
							DataList.add(obj[3].toString());
							DataList.add(obj[6].toString());
							DataList.add(obj[4].toString());
							DataList.add(obj[5].toString());

							map.put(rowCount, DataList);
							rowCount++;

						}
					}
					try {
						Gson gson = new Gson();
						Type type = new TypeToken<List<clsSalesFlashColumns>>() {
						}.getType();
						String gsonarrTempListSalesReport = gson.toJson(
								arrListSalesReport, type);
						jOBjRet.put("ListTaxWiseSales",
								gsonarrTempListSalesReport);
						jOBjRet.put("totalTaxableAmt", totalTaxableAmt);
						jOBjRet.put("totalTax", totalTax);
						jOBjRet.put("ColHeader", jColHeaderArr);
						jOBjRet.put("colCount", colCount);
						jOBjRet.put("RowCount", rowCount);
						for (int tblRow = 0; tblRow < map.size(); tblRow++) {
							List listmap = (List) map.get(tblRow);
							// listmap.add(decimalFormat.format((Double.parseDouble(listmap.get(2).toString())/totalSale)*100));
							jOBjRet.put("" + tblRow, listmap);
						}

					} catch (Exception e) {
						e.printStackTrace();
					}

				} catch (Exception e) {
					e.printStackTrace();
				}
				break;

			case "TipReport":
				jColHeaderArr.add("Bill No");
				jColHeaderArr.add("date");
				jColHeaderArr.add("Bill Time");
				jColHeaderArr.add("POS Code");
				jColHeaderArr.add("Set Mode ");
				jColHeaderArr.add("Discount %");
				jColHeaderArr.add("Disc Amount");
				jColHeaderArr.add("Sub Total");
				jColHeaderArr.add("Tax Amount");
				jColHeaderArr.add("Tip Amount");
				jColHeaderArr.add("Sales Amount");
				colCount = 11;
				try {
					sql = "";
					totalAmount = new BigDecimal("0.00");
					Disc = new BigDecimal("0.00");
					temp = new BigDecimal("0.00");
					temp1 = new BigDecimal("0.00");
					double tipAmountTotal = 0;

					sql = "select strBillNo,left(dteBillDate,10),left(right(dteDateCreated,8),5) as "
							+ "BillTime,strPOSCode,strSettelmentMode,dblDiscountPer,dblDiscountAmt,dblTaxAmt,"
							+ "dblSubTotal,dblTipAmount,dblGrandTotal,strUserCreated,strUserEdited,dteDateCreated,"
							+ "dteDateEdited,strClientCode,strTableNo,strWaiterNo,strCustomerCode from vqbillhd ";
					if (!strPOSCode.equals("All") && !strOperator.equals("All")) {
						sql += "where " + field + " between '" + fromDate
								+ "' and '" + toDate + "' and strPOSCode='"
								+ strPOSCode + "' and strUserCreated='"
								+ strOperator + "' and dblTipAmount>0";
					} else if (strPOSCode.equals("All")
							&& !strOperator.equals("All")) {
						sql += "where " + field + " between '" + fromDate
								+ "' and  strUserCreated='" + strOperator
								+ "' and dblTipAmount>0";
					} else if (!strPOSCode.equals("All")
							&& strOperator.equals("All")) {
						sql += " where " + field + " between '" + fromDate
								+ "' and '" + toDate + "' and strPOSCode='"
								+ strPOSCode + "' and dblTipAmount>0";
					} else if (strPOSCode.equals("All")
							&& strOperator.equals("All")) {
						sql += "where " + field + " between '" + fromDate
								+ "' and '" + toDate + "'  and dblTipAmount>0";
					}

					sql += " AND intShiftCode = '" + strShiftNo + "' ";
					if (strFromBill.length() == 0
							&& strToBill.trim().length() == 0) {
						sql += " order by strBillNo desc";
					} else {
						sql += " and strBillNo between '" + strFromBill
								+ "' and '" + strToBill
								+ "' order by strBillNo desc";
					}

					arrListSalesReport = new ArrayList<clsSalesFlashColumns>();
					Query queryTipReport = webPOSSessionFactory
							.getCurrentSession().createSQLQuery(sql);
					// Query queryTipWiseSales =
					// webPOSSessionFactory.getCurrentSession().createSQLQuery(sql);
					List listTipWise = queryTipReport.list();

					if (listTipWise.size() > 0) {
						for (int i = 0; i < listTipWise.size(); i++) {
							Object[] obj = (Object[]) listTipWise.get(i);
							clsSalesFlashColumns objsales = new clsSalesFlashColumns();

							objsales.setStrField1(obj[0].toString());
							String tempBillDate = obj[1].toString();
							String[] spDate = tempBillDate.split("-");
							objsales.setStrField2(spDate[2] + "-" + spDate[1]
									+ "-" + spDate[0]);
							objsales.setStrField3(obj[2].toString());
							objsales.setStrField4(obj[3].toString());
							objsales.setStrField5(obj[4].toString());
							objsales.setStrField6(obj[5].toString());
							objsales.setStrField7(obj[6].toString());
							objsales.setStrField8(obj[8].toString());
							objsales.setStrField9(obj[7].toString());
							objsales.setStrField10(obj[9].toString());
							objsales.setStrField11(obj[10].toString());

							Disc = Disc.add(new BigDecimal(obj[6].toString()));
							temp = temp.add(new BigDecimal(obj[7].toString()));
							subTotal = subTotal
									+ Double.parseDouble(obj[8].toString());
							temp1 = temp1
									.add(new BigDecimal(obj[10].toString()));
							tipAmountTotal = tipAmountTotal
									+ Double.parseDouble(obj[9].toString());

							arrListSalesReport.add(objsales);

							List DataList = new ArrayList<>();
							DataList.add(obj[0].toString());
							DataList.add(spDate[2] + "-" + spDate[1] + "-"
									+ spDate[0]);
							DataList.add(obj[2].toString());
							DataList.add(obj[3].toString());
							DataList.add(obj[4].toString());
							DataList.add(obj[5].toString());
							DataList.add(obj[6].toString());
							DataList.add(obj[7].toString());
							DataList.add(obj[8].toString());
							DataList.add(obj[9].toString());
							DataList.add(obj[10].toString());
							map.put(rowCount, DataList);
							rowCount++;
						}
					}
					try {
						Gson gson = new Gson();
						Type type = new TypeToken<List<clsSalesFlashColumns>>() {
						}.getType();
						String gsonarrTempListSalesReport = gson.toJson(
								arrListSalesReport, type);
						jOBjRet.put("ListTipWiseSales",
								gsonarrTempListSalesReport);
						jOBjRet.put("Disc", Disc);
						jOBjRet.put("totalTaxAmt", temp);
						jOBjRet.put("subTotal", subTotal);
						jOBjRet.put("SalesAmount", temp1);
						jOBjRet.put("tipAmountTotal", tipAmountTotal);
						jOBjRet.put("ColHeader", jColHeaderArr);
						jOBjRet.put("colCount", colCount);
						jOBjRet.put("RowCount", rowCount);
						for (int tblRow = 0; tblRow < map.size(); tblRow++) {
							List listmap = (List) map.get(tblRow);
							// listmap.add(decimalFormat.format((Double.parseDouble(listmap.get(2).toString())/totalSale)*100));
							jOBjRet.put("" + tblRow, listmap);
						}

					} catch (Exception e) {
						e.printStackTrace();
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
				break;

			case "ItemModifierWise":
				jColHeaderArr.add("Modifier Name");
				jColHeaderArr.add("POS");
				jColHeaderArr.add("Quantity");
				jColHeaderArr.add("Sales Amount");
				colCount = 4;
				try {

					sql = "";
					totalQty = new Double("0.00");
					totalAmount = new BigDecimal("0.00");
					temp = new BigDecimal("0.00");
					temp1 = new BigDecimal("0.00");

					sbSqlLiveBill.setLength(0);
					sbSqlQFileBill.setLength(0);
					sbSqlFilters.setLength(0);

					sbSqlLiveBill
							.append("SELECT b.strModifierCode, b.strModifierName"
									+ " ,c.strPOSName, sum( b.dblQuantity ), sum( b.dblAmount )"
									+ ",'"
									+ strUserCode
									+ "',a.strposcode "
									+ " FROM tblbillhd a, tblbillmodifierdtl b, tblposmaster c "
									+ " WHERE a.strbillno = b.strbillno and a.strClientCode=b.strClientCode and a.strposcode=c.strposcode "
									+ " and date( a.dteBillDate ) BETWEEN '"
									+ fromDate + "' AND '" + toDate + "'");

					sbSqlQFileBill
							.append("SELECT b.strModifierCode, b.strModifierName"
									+ " ,c.strPOSName, sum( b.dblQuantity ), sum( b.dblAmount ) "
									+ ",'"
									+ strUserCode
									+ "',a.strposcode "
									+ " FROM tblqbillhd a, tblqbillmodifierdtl b, tblposmaster c "
									+ " WHERE a.strbillno = b.strbillno and a.strClientCode=b.strClientCode and a.strposcode=c.strposcode "
									+ " and date( a.dteBillDate ) BETWEEN '"
									+ fromDate + "' AND '" + toDate + "'");

					if (!strPOSCode.equals("All") && !strOperator.equals("All")) {
						sbSqlFilters.append(" AND a.strPOSCode = '"
								+ strPOSCode + "' and a.strUserCreated='"
								+ strOperator.toString() + "' ");
					} else if (!strPOSCode.equals("All")
							&& strOperator.equals("All")) {
						sbSqlFilters.append(" AND a.strPOSCode = '"
								+ strPOSCode + "' ");
					} else if (strPOSCode.equals("All")
							&& !strOperator.equals("All")) {
						sbSqlFilters.append(" AND a.strUserCreated='"
								+ strOperator + "' ");
					}

					sbSqlFilters.append(" AND a.intShiftCode = '" + strShiftNo
							+ "' ");

					if (strFromBill.length() == 0
							&& strToBill.trim().length() == 0) {
					} else {
						sbSqlFilters.append(" and a.strbillno between '"
								+ strFromBill + "' and '" + strToBill + "'");
					}
					sbSqlFilters
							.append(" GROUP BY a.strposcode, b.strModifierCode, b.strModifierName ");

					sbSqlLiveBill.append(sbSqlFilters);
					sbSqlQFileBill.append(sbSqlFilters);

					mapPOSModifierWiseSales = new LinkedHashMap<String, Map<String, clsCommonBeanDtl>>();

					arrListSalesReport = new ArrayList<clsSalesFlashColumns>();
					Query queryModWiseSales = webPOSSessionFactory
							.getCurrentSession().createSQLQuery(
									sbSqlLiveBill.toString());
					List listModWiseSales = queryModWiseSales.list();
					funGenerateModifierWiseSales(listModWiseSales);

					queryModWiseSales = webPOSSessionFactory
							.getCurrentSession().createSQLQuery(
									sbSqlQFileBill.toString());
					listModWiseSales = queryModWiseSales.list();
					funGenerateModifierWiseSales(listModWiseSales);

					Iterator<Map.Entry<String, Map<String, clsCommonBeanDtl>>> posIteratorMod = mapPOSModifierWiseSales
							.entrySet().iterator();
					while (posIteratorMod.hasNext()) {
						Map<String, clsCommonBeanDtl> mapModiDtl = posIteratorMod
								.next().getValue();
						Iterator<Map.Entry<String, clsCommonBeanDtl>> modiIterator = mapModiDtl
								.entrySet().iterator();
						while (modiIterator.hasNext()) {
							clsCommonBeanDtl objModiDtl = modiIterator.next()
									.getValue();
							clsSalesFlashColumns objsales = new clsSalesFlashColumns();

							objsales.setStrField1(objModiDtl.getModiName());
							objsales.setStrField2(objModiDtl.getPosName());
							objsales.setStrField3(String.valueOf(objModiDtl
									.getQty()));
							objsales.setStrField4(String.valueOf(objModiDtl
									.getSaleAmount()));

							totalQty = totalQty + objModiDtl.getQty();
							temp1 = new BigDecimal(objModiDtl.getSaleAmount());
							totalAmount = totalAmount.add(temp1);
							arrListSalesReport.add(objsales);

							List DataList = new ArrayList<>();
							DataList.add(objModiDtl.getModiName());
							DataList.add(objModiDtl.getPosName());
							DataList.add(objModiDtl.getQty());
							DataList.add(objModiDtl.getSaleAmount());
							map.put(rowCount, DataList);
							rowCount++;
						}
					}
					try {
						Gson gson = new Gson();
						Type type = new TypeToken<List<clsSalesFlashColumns>>() {
						}.getType();
						String gsonarrTempListSalesReport = gson.toJson(
								arrListSalesReport, type);
						jOBjRet.put("ListModWiseSales",
								gsonarrTempListSalesReport);
						jOBjRet.put("totalQty", totalQty);
						jOBjRet.put("totalAmount", totalAmount);
						jOBjRet.put("ColHeader", jColHeaderArr);
						jOBjRet.put("colCount", colCount);
						jOBjRet.put("RowCount", rowCount);
						for (int tblRow = 0; tblRow < map.size(); tblRow++) {
							List listmap = (List) map.get(tblRow);
							// listmap.add(decimalFormat.format((Double.parseDouble(listmap.get(2).toString())/totalSale)*100));
							jOBjRet.put("" + tblRow, listmap);
						}
					} catch (Exception e) {
						e.printStackTrace();
					}

				} catch (Exception e) {
					e.printStackTrace();
				}
				break;

			case "MenuHeadWiseWithModifier":
				jColHeaderArr.add("Menu Name");
				jColHeaderArr.add("POS");
				jColHeaderArr.add("Quantity");
				jColHeaderArr.add("Sales Amount");
				colCount = 4;
				try {
					// StringBuilder sbSql = new StringBuilder();
					totalQty = new Double("0.00");
					totalAmount = new BigDecimal("0.00");
					temp = new BigDecimal("0.00");
					temp1 = new BigDecimal("0.00");
					arrListSalesReport = new ArrayList<clsSalesFlashColumns>();
					sbSql.setLength(0);
					sbSql.append("select count(*) from vqbillhd where date(dteBillDate) between '"
							+ fromDate + "' and '" + toDate + "'   ");

					sbSql.append(" AND intShiftCode = '" + strShiftNo + "' ");
					Query queryMenuHeadModSales = webPOSSessionFactory
							.getCurrentSession().createSQLQuery(
									sbSql.toString());
					List listMenuHeadModWiseSales = queryMenuHeadModSales
							.list();
					int cnt = 0;
					if (listMenuHeadModWiseSales.size() > 0) {
						// System.out.println(listMenuHeadModWiseSales.get(0));
						cnt = Integer.parseInt(listMenuHeadModWiseSales.get(0)
								.toString());
						// System.out.println(cnt);
					}

					if (cnt > 0) {
						sbSql.setLength(0);
						sbSql.append("select d.strMenuName,e.strPosName,sum(b.dblQuantity),sum(b.dblAmount)-sum(b.dblDiscountAmt),sum(b.dblAmount),d.strMenuCode "
								+ " from tblbillhd a,tblbilldtl b,tblmenuitempricingdtl c,tblmenuhd d,tblposmaster e "
								+ " where a.strBillNo=b.strBillNo and b.strItemCode=c.strItemCode and c.strMenuCode=d.strMenuCode "
								+ " and a.strPOSCode=e.strPosCode and a.strPOSCode=c.strPosCode ");
						if (AreaWisePricing.equals("Y")) {
							sbSql.append(" and a.strAreaCode=c.strAreaCode ");
						}
						if (!strPOSCode.equals("All")
								&& !strOperator.equals("All")) {
							sbSql.append(" AND a.strPOSCode = '" + strPOSCode
									+ "' and a.strUserCreated='" + strOperator
									+ "'");
						} else if (!strPOSCode.equals("All")
								&& strOperator.equals("All")) {
							sbSql.append(" AND a.strPOSCode = '" + strPOSCode
									+ "'");
						} else if (strPOSCode.equals("All")
								&& !strOperator.equals("All")) {
							sbSql.append(" and a.strUserCreated='"
									+ strOperator + "'");
						}

						sbSql.append(" AND a.intShiftCode = '" + strShiftNo
								+ "' ");

						if (strFromBill.length() == 0
								&& strToBill.trim().length() == 0) {
							sbSql.append(" and date( a.dteBillDate ) BETWEEN '"
									+ fromDate + "' AND '" + toDate + "'"
									+ " group by c.strMenuCode,a.strPOSCode ");
						} else {
							sbSql.append(" and date( a.dteBillDate ) BETWEEN '"
									+ fromDate + "' AND '" + toDate
									+ "' AND a.strBillNo between '"
									+ strFromBill + "' and '" + strToBill + "'"
									+ " group by c.strMenuCode,a.strPOSCode ");
						}
						queryMenuHeadModSales = webPOSSessionFactory
								.getCurrentSession().createSQLQuery(
										sbSql.toString());
						listMenuHeadModWiseSales = queryMenuHeadModSales.list();
						// System.out.println(sbSql.toString());
						if (listMenuHeadModWiseSales.size() > 0) {
							for (int i = 0; i < listMenuHeadModWiseSales.size(); i++) {
								Object[] obj = (Object[]) listMenuHeadModWiseSales
										.get(i);
								clsSalesFlashColumns objsales = new clsSalesFlashColumns();
								StringBuilder sbSqlMod = new StringBuilder();
								sbSqlMod.setLength(0);
								sbSqlMod.append(" select d.strMenuName,e.strPosName,sum(b.dblQuantity) "
										+ " ,sum(b.dblAmount)-sum(b.dblDiscAmt),sum(b.dblAmount) "
										+ " from tblbillhd a,tblbillmodifierdtl b,tblmenuitempricingdtl c,tblmenuhd d,tblposmaster e "
										+ " where a.strBillNo=b.strBillNo and left(b.strItemCode,7)=c.strItemCode "
										+ " and c.strMenuCode=d.strMenuCode and a.strPOSCode=e.strPosCode "
										+ " and a.strPOSCode=c.strPosCode  and a.strAreaCode=c.strAreaCode "
										+ " and b.dblAmount>0 and c.strMenuCode='"
										+ obj[5].toString()
										+ "' "
										+ " and date(a.dteBillDate) BETWEEN '"
										+ fromDate + "' and '" + toDate + "' ");

								sbSqlMod.append(" AND a.intShiftCode = '"
										+ strShiftNo + "' ");
								// System.out.println(sbSqlMod.toString());
								Query qModifier = webPOSSessionFactory
										.getCurrentSession().createSQLQuery(
												sbSqlMod.toString());
								List listModifier = qModifier.list();

								// ResultSet rsModifier =
								// clsGlobalVarClass.dbMysql.executeResultSet(sbSqlMod.toString());
								double temp_Modifier_Qty = 0.00;
								double temp_Modifier_Amt = 0.00;
								if (listModifier.size() > 0) {
									for (int k = 0; k < listModifier.size(); k++) {

										Object[] ob = (Object[]) listMenuHeadModWiseSales
												.get(k);
										temp_Modifier_Qty += Double
												.parseDouble(ob[2].toString());
										temp_Modifier_Amt += Double
												.parseDouble(ob[3].toString());
									}
								}
								objsales.setStrField1(obj[0].toString());
								objsales.setStrField2(obj[1].toString());
								objsales.setStrField3(String.valueOf((Double
										.parseDouble(obj[2].toString()) + temp_Modifier_Qty)));
								objsales.setStrField4(String.valueOf(new BigDecimal(
										obj[3].toString()).add(new BigDecimal(
										String.valueOf(temp_Modifier_Amt)))));

								temp_Modifier_Qty = 0.00;
								temp_Modifier_Amt = 0.00;
								totalQty = totalQty
										+ new Double(
												String.valueOf((Double
														.parseDouble(obj[2]
																.toString()) + temp_Modifier_Qty)));
								temp1 = temp1
										.add(new BigDecimal(
												String.valueOf(new BigDecimal(
														obj[3].toString()).add(new BigDecimal(
														String.valueOf(temp_Modifier_Amt))))));

								arrListSalesReport.add(objsales);
								List DataList = new ArrayList<>();
								DataList.add(obj[0].toString());
								DataList.add(obj[1].toString());
								DataList.add(obj[2].toString());
								DataList.add(obj[3].toString());
								map.put(rowCount, DataList);
								rowCount++;
							}

						}
						sbSql.setLength(0);
						sbSql.append("select d.strMenuName,e.strPosName,sum(b.dblQuantity),sum(b.dblAmount)-sum(b.dblDiscountAmt)"
								+ " ,sum(b.dblAmount),d.strMenuCode "
								+ " from tblqbillhd a,tblqbilldtl b,tblmenuitempricingdtl c,tblmenuhd d,tblposmaster e "
								+ " where a.strBillNo=b.strBillNo and b.strItemCode=c.strItemCode and c.strMenuCode=d.strMenuCode "
								+ " and a.strPOSCode=e.strPosCode and a.strPOSCode=c.strPosCode ");
						if (AreaWisePricing.equals("Y")) {
							sbSql.append(" and a.strAreaCode=c.strAreaCode ");
						}
						if (!strPOSCode.equals("All")
								&& !strOperator.equals("All")) {
							sbSql.append(" AND a.strPOSCode = '" + strPOSCode
									+ "' and a.strUserCreated='" + strOperator
									+ "'");
						} else if (!strPOSCode.equals("All")
								&& strOperator.equals("All")) {
							sbSql.append(" AND a.strPOSCode = '" + strPOSCode
									+ "'");
						} else if (strPOSCode.equals("All")
								&& !strOperator.equals("All")) {
							sbSql.append(" and a.strUserCreated='"
									+ strOperator + "'");
						}

						sbSql.append(" AND a.intShiftCode = '" + strShiftNo
								+ "' ");

						if (strFromBill.length() == 0
								&& strToBill.trim().length() == 0) {

							sbSql.append(" and date( a.dteBillDate ) BETWEEN '"
									+ fromDate + "' AND '" + toDate + "'"
									+ " group by c.strMenuCode,a.strPOSCode ");
						} else {
							sbSql.append(" and date( a.dteBillDate ) BETWEEN '"
									+ fromDate + "' AND '" + toDate + "' "
									+ " AND a.strBillNo between '"
									+ strFromBill + "' and '" + strToBill + "'"
									+ " group by c.strMenuCode,a.strPOSCode ");
						}

						// System.out.println(sbSql.toString());
						queryMenuHeadModSales = webPOSSessionFactory
								.getCurrentSession().createSQLQuery(
										sbSql.toString());
						listMenuHeadModWiseSales = queryMenuHeadModSales.list();
						// System.out.println(sbSql.toString());
						if (listMenuHeadModWiseSales.size() > 0) {
							for (int i = 0; i < listMenuHeadModWiseSales.size(); i++) {
								Object[] obj = (Object[]) listMenuHeadModWiseSales
										.get(i);
								clsSalesFlashColumns objsales = new clsSalesFlashColumns();

								StringBuilder sbSqlMod = new StringBuilder();
								sbSqlMod.setLength(0);
								sbSqlMod.append(" select d.strMenuName,e.strPosName,sum(b.dblQuantity) "
										+ " ,sum(b.dblAmount)-sum(b.dblDiscAmt),sum(b.dblAmount) "
										+ " from tblqbillhd a,tblqbillmodifierdtl b,tblmenuitempricingdtl c,tblmenuhd d,tblposmaster e "
										+ " where a.strBillNo=b.strBillNo and left(b.strItemCode,7)=c.strItemCode "
										+ " and c.strMenuCode=d.strMenuCode and a.strPOSCode=e.strPosCode "
										+ " and a.strPOSCode=c.strPosCode and a.strAreaCode=c.strAreaCode "
										+ " and b.dblAmount>0 and c.strMenuCode='"
										+ obj[5].toString()
										+ "' "
										+ " and date(a.dteBillDate) BETWEEN '"
										+ fromDate + "' and '" + toDate + "' ");

								sbSqlMod.append(" AND a.intShiftCode = '"
										+ strShiftNo + "' ");
								// System.out.println(sbSqlMod.toString());

								Query qModifier = webPOSSessionFactory
										.getCurrentSession().createSQLQuery(
												sbSqlMod.toString());
								List listModifier = qModifier.list();

								double temp_Modifier_Qty = 0.00;
								double temp_Modifier_Amt = 0.00;

								if (listModifier.size() > 0) {
									for (int k = 0; k < listModifier.size(); k++) {

										Object[] ob = (Object[]) listMenuHeadModWiseSales
												.get(k);
										temp_Modifier_Qty += Double
												.parseDouble(ob[2].toString());
										temp_Modifier_Amt += Double
												.parseDouble(ob[3].toString());
									}
								}
								objsales.setStrField1(obj[0].toString());
								objsales.setStrField2(obj[1].toString());
								objsales.setStrField3(String.valueOf((Double
										.parseDouble(obj[2].toString()) + temp_Modifier_Qty)));
								objsales.setStrField4(String.valueOf(new BigDecimal(
										obj[3].toString()).add(new BigDecimal(
										String.valueOf(temp_Modifier_Amt)))));

								temp_Modifier_Qty = 0.00;
								temp_Modifier_Amt = 0.00;
								totalQty = totalQty
										+ new Double(
												String.valueOf((Double
														.parseDouble(obj[2]
																.toString()) + temp_Modifier_Qty)));
								temp1 = temp1
										.add(new BigDecimal(
												String.valueOf(new BigDecimal(
														obj[3].toString()).add(new BigDecimal(
														String.valueOf(temp_Modifier_Amt))))));

								arrListSalesReport.add(objsales);
								List DataList = new ArrayList<>();
								DataList.add(obj[0].toString());
								DataList.add(obj[1].toString());
								DataList.add(obj[2].toString());
								DataList.add(obj[3].toString());
								map.put(rowCount, DataList);
								rowCount++;

							}

						}
					}
					try {
						Gson gson = new Gson();
						Type type = new TypeToken<List<clsSalesFlashColumns>>() {
						}.getType();
						String gsonarrTempListSalesReport = gson.toJson(
								arrListSalesReport, type);
						jOBjRet.put("ListMenuHeadModWiseSales",
								gsonarrTempListSalesReport);
						jOBjRet.put("totalQty", totalQty);
						jOBjRet.put("totalAmount", temp1);
						jOBjRet.put("ColHeader", jColHeaderArr);
						jOBjRet.put("colCount", colCount);
						jOBjRet.put("RowCount", rowCount);
						for (int tblRow = 0; tblRow < map.size(); tblRow++) {
							List listmap = (List) map.get(tblRow);
							// listmap.add(decimalFormat.format((Double.parseDouble(listmap.get(2).toString())/totalSale)*100));
							jOBjRet.put("" + tblRow, listmap);
						}

					} catch (Exception e) {
						e.printStackTrace();
					}

				} catch (Exception e) {
					e.printStackTrace();
				}
				break;

			case "ItemHourlyWise":
				jColHeaderArr.add("Time Range");
				jColHeaderArr.add("Item Name");
				jColHeaderArr.add("Quantity");
				jColHeaderArr.add("Item Amount");
				jColHeaderArr.add("Discount");
				colCount = 5;
				try {

					StringBuilder sbSqlModLiveBill = new StringBuilder();
					StringBuilder sbSqlQModFileBill = new StringBuilder();
					totalAmount = new BigDecimal("0.00");
					temp = new BigDecimal("0.00");
					temp1 = new BigDecimal("0.00");

					sbSqlLiveBill.setLength(0);
					sbSqlQFileBill.setLength(0);
					sbSqlModLiveBill.setLength(0);
					sbSqlQModFileBill.setLength(0);

					sbSqlLiveBill
							.append("select left(right(b.dteDateCreated,8),2)"
									+ " ,left(right(b.dteDateCreated,8),2)+1,a.strItemName,sum(a.dblQuantity),"
									+ " sum(a.dblAmount)-sum(a.dblDiscountAmt) as Total,"
									+ " sum(a.dblDiscountAmt) as Discount,'"
									+ strUserCode
									+ "' "
									+ " from tblbilldtl a,tblbillhd b,tblitemmaster c "
									+ " where a.strBillNo=b.strBillNo and a.strClientCode=b.strClientCode and a.strItemCode=c.strItemCode "
									+ " and date(b.dteBillDate) BETWEEN '"
									+ fromDate + "' AND '" + toDate + "' ");
					if (!strPOSCode.equals("All")) {
						sbSqlLiveBill.append(" and strPOSCode='" + strPOSCode
								+ "' ");
					}

					sbSqlLiveBill.append(" AND b.intShiftCode = '" + strShiftNo
							+ "' ");
					sbSqlLiveBill.append(" group by a.strItemName");

					sbSqlQFileBill
							.append("select left(right(b.dteDateCreated,8),2)"
									+ " ,left(right(b.dteDateCreated,8),2)+1,a.strItemName,sum(a.dblQuantity),"
									+ " sum(a.dblAmount)-sum(a.dblDiscountAmt) as Total,"
									+ " sum(a.dblDiscountAmt) as Discount,'"
									+ strUserCode
									+ "' "
									+ " from tblqbilldtl a,tblqbillhd b,tblitemmaster c "
									+ " where a.strBillNo=b.strBillNo and a.strClientCode=b.strClientCode and a.strItemCode=c.strItemCode "
									+ " and date(b.dteBillDate) BETWEEN '"
									+ fromDate + "' AND '" + toDate + "' ");
					if (!strPOSCode.equals("All")) {
						sbSqlQFileBill.append(" and strPOSCode='" + strPOSCode
								+ "' ");
					}

					sbSqlQFileBill.append(" AND b.intShiftCode = '"
							+ strShiftNo + "' ");
					sbSqlQFileBill.append(" group by a.strItemName");

					sbSqlModLiveBill
							.append("select left(right(b.dteDateCreated,8),2)"
									+ " , left(right(b.dteDateCreated,8),2)+1,a.strModifierName,sum(a.dblQuantity),"
									+ " sum(a.dblAmount)-sum(a.dblDiscAmt) as Total,"
									+ " sum(a.dblDiscAmt) as Discount,'"
									+ strUserCode
									+ "' "
									+ " from tblbillmodifierdtl a,tblbillhd b,tblitemmaster c "
									+ " where a.strBillNo=b.strBillNo and a.strClientCode=b.strClientCode and Left(a.strItemCode,7)=c.strItemCode "
									+ " and date(b.dteBillDate) BETWEEN '"
									+ fromDate + "' AND '" + toDate + "' ");
					if (!strPOSCode.equals("All")) {
						sbSqlModLiveBill.append(" and strPOSCode='"
								+ strPOSCode + "' ");
					}

					sbSqlModLiveBill.append(" AND b.intShiftCode = '"
							+ strShiftNo + "' ");
					sbSqlModLiveBill.append(" group by a.strModifierName");

					sbSqlQModFileBill
							.append("select left(right(b.dteDateCreated,8),2)"
									+ " , left(right(b.dteDateCreated,8),2)+1,a.strModifierName,sum(a.dblQuantity),"
									+ " sum(a.dblAmount)-sum(a.dblDiscAmt) as Total,"
									+ " sum(a.dblDiscAmt) as Discount,'"
									+ strUserCode
									+ "' "
									+ " from tblqbillmodifierdtl a,tblqbillhd b,tblitemmaster c "
									+ " where a.strBillNo=b.strBillNo and a.strClientCode=b.strClientCode and Left(a.strItemCode,7)=c.strItemCode "
									+ " and date(b.dteBillDate) BETWEEN '"
									+ fromDate + "' AND '" + toDate + "' ");
					if (!strPOSCode.equals("All")) {
						sbSqlQModFileBill.append(" and strPOSCode='"
								+ strPOSCode + "' ");
					}

					sbSqlQModFileBill.append(" AND b.intShiftCode = '"
							+ strShiftNo + "' ");
					sbSqlQModFileBill.append(" group by a.strModifierName");

					arrListSalesReport = new ArrayList<clsSalesFlashColumns>();
					Query queryItemHourlyWiseSales = webPOSSessionFactory
							.getCurrentSession().createSQLQuery(
									sbSqlLiveBill.toString());
					List listItemHourlyWiseSales = queryItemHourlyWiseSales
							.list();
					if (listItemHourlyWiseSales.size() > 0) {
						for (int k = 0; k < listItemHourlyWiseSales.size(); k++) {

							Object[] obj = (Object[]) listItemHourlyWiseSales
									.get(k);
							clsSalesFlashColumns objsales = new clsSalesFlashColumns();
							objsales.setStrField1(obj[0].toString() + "-"
									+ obj[1].toString());
							objsales.setStrField2(obj[2].toString());
							objsales.setStrField3(obj[3].toString());
							objsales.setStrField4(obj[4].toString());
							objsales.setStrField5(obj[5].toString());
							temp = temp.add(new BigDecimal(obj[3].toString()));
							temp1 = temp1
									.add(new BigDecimal(obj[4].toString()));
							arrListSalesReport.add(objsales);
							arrListSalesReport.add(objsales);

							List DataList = new ArrayList<>();
							DataList.add(obj[0].toString() + "-"
									+ obj[1].toString());
							DataList.add(obj[2].toString());
							DataList.add(obj[3].toString());
							DataList.add(obj[4].toString());
							DataList.add(obj[5].toString());
							map.put(rowCount, DataList);
							rowCount++;

						}
					}
					queryItemHourlyWiseSales = webPOSSessionFactory
							.getCurrentSession().createSQLQuery(
									sbSqlQFileBill.toString());
					listItemHourlyWiseSales = queryItemHourlyWiseSales.list();
					if (listItemHourlyWiseSales.size() > 0) {
						for (int k = 0; k < listItemHourlyWiseSales.size(); k++) {

							Object[] obj = (Object[]) listItemHourlyWiseSales
									.get(k);
							clsSalesFlashColumns objsales = new clsSalesFlashColumns();
							objsales.setStrField1(obj[0].toString() + "-"
									+ obj[1].toString());
							objsales.setStrField2(obj[2].toString());
							objsales.setStrField3(obj[3].toString());
							objsales.setStrField4(obj[4].toString());
							objsales.setStrField5(obj[5].toString());
							temp = temp.add(new BigDecimal(obj[3].toString()));
							temp1 = temp1
									.add(new BigDecimal(obj[4].toString()));
							arrListSalesReport.add(objsales);
							List DataList = new ArrayList<>();
							DataList.add(obj[0].toString() + "-"
									+ obj[1].toString());
							DataList.add(obj[2].toString());
							DataList.add(obj[3].toString());
							DataList.add(obj[4].toString());
							DataList.add(obj[5].toString());
							map.put(rowCount, DataList);
							rowCount++;
						}
					}

					queryItemHourlyWiseSales = webPOSSessionFactory
							.getCurrentSession().createSQLQuery(
									sbSqlModLiveBill.toString());
					listItemHourlyWiseSales = queryItemHourlyWiseSales.list();
					if (listItemHourlyWiseSales.size() > 0) {
						for (int k = 0; k < listItemHourlyWiseSales.size(); k++) {

							Object[] obj = (Object[]) listItemHourlyWiseSales
									.get(k);
							clsSalesFlashColumns objsales = new clsSalesFlashColumns();
							objsales.setStrField1(obj[0].toString() + "-"
									+ obj[1].toString());
							objsales.setStrField2(obj[2].toString());
							objsales.setStrField3(obj[3].toString());
							objsales.setStrField4(obj[4].toString());
							objsales.setStrField5(obj[5].toString());
							temp = temp.add(new BigDecimal(obj[3].toString()));
							temp1 = temp1
									.add(new BigDecimal(obj[4].toString()));
							arrListSalesReport.add(objsales);
							List DataList = new ArrayList<>();
							DataList.add(obj[0].toString() + "-"
									+ obj[1].toString());
							DataList.add(obj[2].toString());
							DataList.add(obj[3].toString());
							DataList.add(obj[4].toString());
							DataList.add(obj[5].toString());
							map.put(rowCount, DataList);
							rowCount++;
						}
					}

					queryItemHourlyWiseSales = webPOSSessionFactory
							.getCurrentSession().createSQLQuery(
									sbSqlQModFileBill.toString());
					listItemHourlyWiseSales = queryItemHourlyWiseSales.list();
					if (listItemHourlyWiseSales.size() > 0) {
						for (int k = 0; k < listItemHourlyWiseSales.size(); k++) {

							Object[] obj = (Object[]) listItemHourlyWiseSales
									.get(k);
							clsSalesFlashColumns objsales = new clsSalesFlashColumns();
							objsales.setStrField1(obj[0].toString() + "-"
									+ obj[1].toString());
							objsales.setStrField2(obj[2].toString());
							objsales.setStrField3(obj[3].toString());
							objsales.setStrField4(obj[4].toString());
							objsales.setStrField5(obj[5].toString());
							temp = temp.add(new BigDecimal(obj[3].toString()));
							temp1 = temp1
									.add(new BigDecimal(obj[4].toString()));
							arrListSalesReport.add(objsales);
							List DataList = new ArrayList<>();
							DataList.add(obj[0].toString() + "-"
									+ obj[1].toString());
							DataList.add(obj[2].toString());
							DataList.add(obj[3].toString());
							DataList.add(obj[4].toString());
							DataList.add(obj[5].toString());
							map.put(rowCount, DataList);
							rowCount++;
						}
					}

					try {
						Gson gson = new Gson();
						Type type = new TypeToken<List<clsSalesFlashColumns>>() {
						}.getType();
						String gsonarrTempListSalesReport = gson.toJson(
								arrListSalesReport, type);
						jOBjRet.put("ListItemHourlyWiseSales",
								gsonarrTempListSalesReport);
						jOBjRet.put("totalAmount", temp);
						jOBjRet.put("totalDisc", temp1);
						jOBjRet.put("ColHeader", jColHeaderArr);
						jOBjRet.put("colCount", colCount);
						jOBjRet.put("RowCount", rowCount);
						for (int tblRow = 0; tblRow < map.size(); tblRow++) {
							List listmap = (List) map.get(tblRow);
							// listmap.add(decimalFormat.format((Double.parseDouble(listmap.get(2).toString())/totalSale)*100));
							jOBjRet.put("" + tblRow, listmap);
						}

					} catch (Exception e) {
						e.printStackTrace();
					}

				} catch (Exception e) {
					e.printStackTrace();
				}
				break;

			case "OperatorWise":
				jColHeaderArr.add("Operator Code");
				jColHeaderArr.add("Operator  Name");
				jColHeaderArr.add("POS");
				jColHeaderArr.add("Payment Mode");
				jColHeaderArr.add("Discount Amount");
				jColHeaderArr.add("Sales Amount");
				colCount = 6;
				mapOperatorDtls = new HashMap<String, List<clsOperatorDtl>>();
				StringBuilder sbSqlDisLive = new StringBuilder();
				StringBuilder sbSqlQDisFile = new StringBuilder();

				try {
					sql = "";
					totalAmount = new BigDecimal("0.00");
					temp = new BigDecimal("0.00");
					temp1 = new BigDecimal("0.00");

					sbSqlLive.setLength(0);
					sbSqlQFile.setLength(0);
					sbSqlDisLive.setLength(0);
					sbSqlQDisFile.setLength(0);
					sbSqlFilters.setLength(0);
					sbSqlDisFilters.setLength(0);

					sbSqlLive
							.append(" SELECT a.strUserCode, a.strUserName, c.strPOSName,e.strSettelmentDesc "
									+ " ,sum(d.dblSettlementAmt),'SANGUINE',c.strPosCode, d.strSettlementCode "
									+ " FROM tbluserhd a "
									+ " INNER JOIN tblbillhd b ON a.strUserCode = b.strUserCreated "
									+ " inner join tblposmaster c on b.strPOSCode=c.strPOSCode "
									+ " inner join tblbillsettlementdtl d on b.strBillNo=d.strBillNo and b.strClientCode=d.strClientCode "
									+ " inner join tblsettelmenthd e on d.strSettlementCode=e.strSettelmentCode "
									+ " WHERE date( b.dteBillDate ) BETWEEN '"
									+ fromDate + "' AND '" + toDate + "' ");

					sbSqlQFile
							.append(" SELECT a.strUserCode, a.strUserName, c.strPOSName,e.strSettelmentDesc "
									+ " ,sum(d.dblSettlementAmt),'SANGUINE',c.strPosCode, d.strSettlementCode "
									+ " FROM tbluserhd a "
									+ " INNER JOIN tblqbillhd b ON a.strUserCode = b.strUserCreated "
									+ " inner join tblposmaster c on b.strPOSCode=c.strPOSCode "
									+ " inner join tblqbillsettlementdtl d on b.strBillNo=d.strBillNo and b.strClientCode=d.strClientCode "
									+ " inner join tblsettelmenthd e on d.strSettlementCode=e.strSettelmentCode "
									+ " WHERE date( b.dteBillDate ) BETWEEN '"
									+ fromDate + "' AND '" + toDate + "' ");

					if (!strPOSCode.equals("All") && !strOperator.equals("All")) {
						sbSqlFilters.append(" AND b.strPOSCode = '"
								+ strPOSCode + "' and b.strUserCreated='"
								+ strOperator + "'");
					} else if (!strPOSCode.equals("All")
							&& strOperator.equals("All")) {
						sbSqlFilters.append(" AND b.strPOSCode = '"
								+ strPOSCode + "'");
					} else if (strPOSCode.equals("All")
							&& !strOperator.equals("All")) {
						sbSqlFilters.append("  and b.strUserCreated='"
								+ strOperator + "'");
					}

					sbSqlFilters.append(" AND b.intShiftCode = '" + strShiftNo
							+ "' ");
					sbSqlFilters
							.append(" GROUP BY a.strUserCode, b.strPosCode, d.strSettlementCode");

					sbSqlLive.append(sbSqlFilters);
					sbSqlQFile.append(sbSqlFilters);

					Map<String, Map<String, clsOperatorDtl>> hmOperatorWiseSales = new HashMap<String, Map<String, clsOperatorDtl>>();
					Map<String, clsOperatorDtl> hmSettlementDtl = null;
					clsOperatorDtl objOperatorWiseSales = null;

					arrListSalesReport = new ArrayList<clsSalesFlashColumns>();
					Query queryOperatorWiseSales = webPOSSessionFactory
							.getCurrentSession().createSQLQuery(
									sbSqlLive.toString());
					List listOperatorWiseSales = queryOperatorWiseSales.list();
					if (listOperatorWiseSales.size() > 0) {
						for (int k = 0; k < listOperatorWiseSales.size(); k++) {

							Object[] obj = (Object[]) listOperatorWiseSales
									.get(k);
							if (hmOperatorWiseSales.containsKey(obj[0]
									.toString())) {
								hmSettlementDtl = hmOperatorWiseSales
										.get(obj[0].toString());
								if (hmSettlementDtl.containsKey(obj[7]
										.toString())) {
									objOperatorWiseSales = hmSettlementDtl
											.get(obj[7].toString());
									objOperatorWiseSales
											.setSettleAmt(objOperatorWiseSales
													.getSettleAmt()
													+ Double.parseDouble(obj[4]
															.toString()));
								} else {
									objOperatorWiseSales = new clsOperatorDtl();
									objOperatorWiseSales.setStrUserCode(obj[0]
											.toString());
									objOperatorWiseSales.setStrUserName(obj[1]
											.toString());
									objOperatorWiseSales.setStrPOSName(obj[2]
											.toString());
									objOperatorWiseSales
											.setStrSettlementDesc(obj[3]
													.toString());
									objOperatorWiseSales.setSettleAmt(Double
											.parseDouble(obj[4].toString()));
									objOperatorWiseSales.setStrPOSCode(obj[6]
											.toString());
									objOperatorWiseSales.setDiscountAmt(0);
								}
								hmSettlementDtl.put(obj[7].toString(),
										objOperatorWiseSales);
							} else {
								objOperatorWiseSales = new clsOperatorDtl();
								objOperatorWiseSales.setStrUserCode(obj[0]
										.toString());
								objOperatorWiseSales.setStrUserName(obj[1]
										.toString());
								objOperatorWiseSales.setStrPOSName(obj[2]
										.toString());
								objOperatorWiseSales
										.setStrSettlementDesc(obj[3].toString());
								objOperatorWiseSales.setSettleAmt(Double
										.parseDouble(obj[4].toString()));
								objOperatorWiseSales.setStrPOSCode(obj[6]
										.toString());
								objOperatorWiseSales.setDiscountAmt(0);

								hmSettlementDtl = new HashMap<String, clsOperatorDtl>();
								hmSettlementDtl.put(obj[7].toString(),
										objOperatorWiseSales);
							}
							hmOperatorWiseSales.put(obj[0].toString(),
									hmSettlementDtl);
						}

					}
					queryOperatorWiseSales = webPOSSessionFactory
							.getCurrentSession().createSQLQuery(
									sbSqlQFile.toString());
					listOperatorWiseSales = queryOperatorWiseSales.list();
					if (listOperatorWiseSales.size() > 0) {
						for (int k = 0; k < listOperatorWiseSales.size(); k++) {

							Object[] obj = (Object[]) listOperatorWiseSales
									.get(k);
							if (hmOperatorWiseSales.containsKey(obj[0]
									.toString())) {
								hmSettlementDtl = hmOperatorWiseSales
										.get(obj[0].toString());
								if (hmSettlementDtl.containsKey(obj[7]
										.toString())) {
									objOperatorWiseSales = hmSettlementDtl
											.get(obj[7].toString());
									objOperatorWiseSales
											.setSettleAmt(objOperatorWiseSales
													.getSettleAmt()
													+ Double.parseDouble(obj[4]
															.toString()));
								} else {
									objOperatorWiseSales = new clsOperatorDtl();
									objOperatorWiseSales.setStrUserCode(obj[0]
											.toString());
									objOperatorWiseSales.setStrUserName(obj[1]
											.toString());
									objOperatorWiseSales.setStrPOSName(obj[2]
											.toString());
									objOperatorWiseSales
											.setStrSettlementDesc(obj[3]
													.toString());
									objOperatorWiseSales.setSettleAmt(Double
											.parseDouble(obj[4].toString()));
									objOperatorWiseSales.setStrPOSCode(obj[6]
											.toString());
									objOperatorWiseSales.setDiscountAmt(0);
								}
								hmSettlementDtl.put(obj[7].toString(),
										objOperatorWiseSales);
							} else {
								objOperatorWiseSales = new clsOperatorDtl();
								objOperatorWiseSales.setStrUserCode(obj[0]
										.toString());
								objOperatorWiseSales.setStrUserName(obj[1]
										.toString());
								objOperatorWiseSales.setStrPOSName(obj[2]
										.toString());
								objOperatorWiseSales
										.setStrSettlementDesc(obj[3].toString());
								objOperatorWiseSales.setSettleAmt(Double
										.parseDouble(obj[4].toString()));
								objOperatorWiseSales.setStrPOSCode(obj[6]
										.toString());
								objOperatorWiseSales.setDiscountAmt(0);

								hmSettlementDtl = new HashMap<String, clsOperatorDtl>();
								hmSettlementDtl.put(obj[7].toString(),
										objOperatorWiseSales);
							}
							hmOperatorWiseSales.put(obj[0].toString(),
									hmSettlementDtl);
						}
					}

					sbSqlDisLive
							.append("SELECT a.strUserCode, a.strUserName, c.strPOSName"
									+ " ,sum(b.dblDiscountAmt),'SANGUINE',c.strPosCode "
									+ " FROM tbluserhd a "
									+ " INNER JOIN tblbillhd b ON a.strUserCode = b.strUserCreated "
									+ " inner join tblposmaster c on b.strPOSCode=c.strPOSCode "
									+ " WHERE date( b.dteBillDate ) BETWEEN '"
									+ fromDate + "' AND '" + toDate + "' ");

					sbSqlQDisFile
							.append("  SELECT a.strUserCode, a.strUserName, c.strPOSName "
									+ " ,sum(b.dblDiscountAmt),'SANGUINE',c.strPosCode "
									+ " FROM tbluserhd a "
									+ " INNER JOIN tblqbillhd b ON a.strUserCode = b.strUserCreated "
									+ " inner join tblposmaster c on b.strPOSCode=c.strPOSCode "
									+ " WHERE date( b.dteBillDate ) BETWEEN '"
									+ fromDate + "' AND '" + toDate + "' ");

					if (!strPOSCode.equals("All") && !strOperator.equals("All")) {
						sbSqlDisFilters.append(" AND b.strPOSCode = '"
								+ strPOSCode + "' and b.strUserCreated='"
								+ strOperator + "'");
					} else if (!strPOSCode.equals("All")
							&& strOperator.equals("All")) {
						sbSqlDisFilters.append(" AND b.strPOSCode = '"
								+ strPOSCode + "'");
					} else if (strPOSCode.equals("All")
							&& !strOperator.equals("All")) {
						sbSqlDisFilters.append("  and b.strUserCreated='"
								+ strOperator.toString() + "'");
					}

					sbSqlDisFilters.append(" AND b.intShiftCode = '"
							+ strShiftNo + "' ");
					sbSqlDisFilters
							.append(" GROUP BY a.strUserCode, b.strPosCode");

					sbSqlDisLive.append(sbSqlDisFilters);
					sbSqlQDisFile.append(sbSqlDisFilters);

					queryOperatorWiseSales = webPOSSessionFactory
							.getCurrentSession().createSQLQuery(
									sbSqlDisLive.toString());
					listOperatorWiseSales = queryOperatorWiseSales.list();
					if (listOperatorWiseSales.size() > 0) {
						for (int k = 0; k < listOperatorWiseSales.size(); k++) {
							Object[] obj = (Object[]) listOperatorWiseSales
									.get(k);
							if (hmOperatorWiseSales.containsKey(obj[0]
									.toString())) {
								hmSettlementDtl = hmOperatorWiseSales
										.get(obj[0].toString());
								Set<String> setKeys = hmSettlementDtl.keySet();
								for (String keys : setKeys) {
									objOperatorWiseSales = hmSettlementDtl
											.get(keys);
									objOperatorWiseSales
											.setDiscountAmt(objOperatorWiseSales
													.getDiscountAmt()
													+ Double.parseDouble(obj[3]
															.toString()));
									hmSettlementDtl.put(keys,
											objOperatorWiseSales);
									break;
								}
								hmOperatorWiseSales.put(obj[0].toString(),
										hmSettlementDtl);
							}
						}

					}
					queryOperatorWiseSales = webPOSSessionFactory
							.getCurrentSession().createSQLQuery(
									sbSqlQDisFile.toString());
					listOperatorWiseSales = queryOperatorWiseSales.list();
					if (listOperatorWiseSales.size() > 0) {
						for (int k = 0; k < listOperatorWiseSales.size(); k++) {
							Object[] obj = (Object[]) listOperatorWiseSales
									.get(k);

							if (hmOperatorWiseSales.containsKey(obj[0]
									.toString())) {
								hmSettlementDtl = hmOperatorWiseSales
										.get(obj[0].toString());
								Set<String> setKeys = hmSettlementDtl.keySet();
								for (String keys : setKeys) {
									objOperatorWiseSales = hmSettlementDtl
											.get(keys);
									objOperatorWiseSales
											.setDiscountAmt(objOperatorWiseSales
													.getDiscountAmt()
													+ Double.parseDouble(obj[3]
															.toString()));
									hmSettlementDtl.put(keys,
											objOperatorWiseSales);
									break;
								}
								hmOperatorWiseSales.put(obj[0].toString(),
										hmSettlementDtl);
							}
						}
					}

					double discAmt = 0, totalAmt = 0;
					// Object[] arrObjTableRowData=new Object[6];
					for (Map.Entry<String, Map<String, clsOperatorDtl>> entry : hmOperatorWiseSales
							.entrySet()) {
						Map<String, clsOperatorDtl> hmOpSettlementDtl = entry
								.getValue();
						for (Map.Entry<String, clsOperatorDtl> entryOp : hmOpSettlementDtl
								.entrySet()) {
							clsSalesFlashColumns objsales = new clsSalesFlashColumns();
							clsOperatorDtl objOperatorDtl = entryOp.getValue();

							objsales.setStrField1(objOperatorDtl
									.getStrUserCode());// userCode
							objsales.setStrField2(objOperatorDtl
									.getStrUserName());// userName
							objsales.setStrField3(objOperatorDtl
									.getStrPOSName());// posName
							objsales.setStrField4(objOperatorDtl
									.getStrSettlementDesc());// payMode
							objsales.setStrField5(String.valueOf(objOperatorDtl
									.getDiscountAmt()));// disc
							objsales.setStrField6(String.valueOf(objOperatorDtl
									.getSettleAmt()));// saleAmt
							discAmt += objOperatorDtl.getDiscountAmt();
							totalAmt += objOperatorDtl.getSettleAmt();
							arrListSalesReport.add(objsales);

							List DataList = new ArrayList<>();
							DataList.add(objOperatorDtl.getStrUserCode());
							DataList.add(objOperatorDtl.getStrUserName());
							DataList.add(objOperatorDtl.getStrPOSName());
							DataList.add(objOperatorDtl.getStrSettlementDesc());
							DataList.add(objOperatorDtl.getDiscountAmt());
							DataList.add(objOperatorDtl.getSettleAmt());

							map.put(rowCount, DataList);
							rowCount++;
						}
					}
					try {
						Gson gson = new Gson();
						Type type = new TypeToken<List<clsSalesFlashColumns>>() {
						}.getType();
						String gsonarrTempListSalesReport = gson.toJson(
								arrListSalesReport, type);
						jOBjRet.put("ListOperatorWiseSales",
								gsonarrTempListSalesReport);
						jOBjRet.put("totalAmount", totalAmt);
						jOBjRet.put("totalDisc", discAmt);
						jOBjRet.put("ColHeader", jColHeaderArr);
						jOBjRet.put("colCount", colCount);
						jOBjRet.put("RowCount", rowCount);
						for (int tblRow = 0; tblRow < map.size(); tblRow++) {
							List listmap = (List) map.get(tblRow);
							// listmap.add(decimalFormat.format((Double.parseDouble(listmap.get(2).toString())/totalSale)*100));
							jOBjRet.put("" + tblRow, listmap);
						}
					} catch (Exception e) {
						e.printStackTrace();
					}

				} catch (Exception e) {
					e.printStackTrace();
				}
				break;

			case "MonthlySalesFlash":
				jColHeaderArr.add(" Month");
				jColHeaderArr.add("Year");
				jColHeaderArr.add("Total Sales");
				colCount = 3;
				StringBuilder sqlLiveData = new StringBuilder();
				StringBuilder sqlQData = new StringBuilder();
				try {
					// 2016-11-5
					fromDate = fromDate.substring(5, 7);
					toDate = toDate.substring(5, 7);
					Date objDate = new SimpleDateFormat("dd/MM/yyyy")
							.parse(fromDate);
					fromDate = String.valueOf(objDate.getMonth() + 1);
					objDate = new SimpleDateFormat("dd/MM/yyyy").parse(toDate);
					// toDate = String.valueOf(objDate.getMonth() + 1);
				} catch (Exception e) {
					e.printStackTrace();
				}
				try {

					sqlLiveData.setLength(0);
					sqlQData.setLength(0);
					sbFilters.setLength(0);

					sqlLiveData
							.append("SELECT c.strPOSName, MONTHNAME(DATE(a.dteBillDate)), YEAR(DATE(a.dteBillDate))"
									+ " ,sum(d.dblSettlementAmt),sum(a.dblGrandTotal),a.strPOSCode"
									+ " ,month(a.dteBillDate) "
									+ " FROM tblbillhd a,tblsettelmenthd b,tblposmaster c,tblbillsettlementdtl d "
									+ " WHERE d.strSettlementCode=b.strSettelmentCode AND a.strBillNo = d.strBillNo "
									+ " AND a.strPOSCode=c.strPOSCode and a.strClientCode=d.strClientCode "
									+ " AND MONTH(DATE(dteBillDate)) BETWEEN '"
									+ fromDate + "' AND '" + toDate + "' ");

					sqlQData.append("SELECT c.strPOSName, MONTHNAME(DATE(a.dteBillDate)), YEAR(DATE(a.dteBillDate))"
							+ " ,sum(d.dblSettlementAmt),sum(a.dblGrandTotal),a.strPOSCode"
							+ " ,month(a.dteBillDate) "
							+ " FROM tblqbillhd a,tblsettelmenthd b,tblposmaster c,tblqbillsettlementdtl d\n"
							+ " WHERE d.strSettlementCode=b.strSettelmentCode AND a.strBillNo = d.strBillNo "
							+ " AND a.strPOSCode=c.strPOSCode and a.strClientCode=d.strClientCode "
							+ " AND MONTH(DATE(dteBillDate)) BETWEEN '"
							+ fromDate + "' AND '" + toDate + "' ");

					if (!strPOSCode.equals("All") && !strOperator.equals("All")) {
						sbFilters.append(" AND a.strPOSCode = '" + strPOSCode
								+ "' and a.strUserCreated='" + strOperator
								+ "'");
					} else if (!strPOSCode.equals("All")
							&& strOperator.equals("All")) {
						sbFilters.append(" AND a.strPOSCode = '" + strPOSCode
								+ "'");
					} else if (strPOSCode.equals("All")
							&& !strOperator.equals("All")) {
						sbFilters.append("  and a.strUserCreated='"
								+ strOperator + "'");
					}

					if (strFromBill.length() == 0
							&& strToBill.trim().length() == 0) {
					} else {
						sbFilters.append(" and a.strBillNo between '"
								+ strFromBill + "' and '" + strToBill + "'");
					}

					sbFilters.append(" AND a.intShiftCode = '" + strShiftNo
							+ "' ");
					sbFilters
							.append(" GROUP BY a.strPOSCode, MONTHNAME(DATE(dteBillDate)) ");

					sqlLiveData.append(" ").append(sbFilters);
					sqlQData.append(" ").append(sbFilters);

					mapPOSMonthWiseSales = new LinkedHashMap<String, Map<String, clsCommonBeanDtl>>();

					arrListSalesReport = new ArrayList<clsSalesFlashColumns>();
					Query queryMonthlyWiseSales = webPOSSessionFactory
							.getCurrentSession().createSQLQuery(
									sqlLiveData.toString());
					List listMonthlyWiseSales = queryMonthlyWiseSales.list();

					Object[] arrObj = (Object[]) listMonthlyWiseSales.get(0);
					String a = arrObj[3].toString();
					System.out.println(Double.parseDouble(a));

					funGenerateMonthWiseSales(listMonthlyWiseSales);

					queryMonthlyWiseSales = webPOSSessionFactory
							.getCurrentSession().createSQLQuery(
									sqlQData.toString());
					listMonthlyWiseSales = queryMonthlyWiseSales.list();
					funGenerateMonthWiseSales(listMonthlyWiseSales);

					Double total = 0.0;
					Iterator<Map.Entry<String, Map<String, clsCommonBeanDtl>>> posIteratorMonth = mapPOSMonthWiseSales
							.entrySet().iterator();
					while (posIteratorMonth.hasNext()) {
						Map<String, clsCommonBeanDtl> mapMonthDtl = posIteratorMonth
								.next().getValue();
						Iterator<Map.Entry<String, clsCommonBeanDtl>> monthIterator = mapMonthDtl
								.entrySet().iterator();
						while (monthIterator.hasNext()) {
							clsCommonBeanDtl objMonthDtl = monthIterator.next()
									.getValue();
							clsSalesFlashColumns objsales = new clsSalesFlashColumns();

							objsales.setStrField1(objMonthDtl.getMonthName());// Monthname
							objsales.setStrField2(objMonthDtl.getYear());// year
							objsales.setStrField3(String.valueOf(objMonthDtl
									.getSaleAmount()));// totalamt
							total += objMonthDtl.getSaleAmount();
							arrListSalesReport.add(objsales);

							List DataList = new ArrayList<>();
							DataList.add(objMonthDtl.getMonthName());
							DataList.add(objMonthDtl.getYear());
							DataList.add(objMonthDtl.getSaleAmount());
							map.put(rowCount, DataList);
							rowCount++;
						}
					}
					try {
						Gson gson = new Gson();
						Type type = new TypeToken<List<clsSalesFlashColumns>>() {
						}.getType();
						String gsonarrTempListSalesReport = gson.toJson(
								arrListSalesReport, type);
						jOBjRet.put("ListMonthlySales",
								gsonarrTempListSalesReport);
						jOBjRet.put("totalSale", total);
						jOBjRet.put("ColHeader", jColHeaderArr);
						jOBjRet.put("colCount", colCount);
						jOBjRet.put("RowCount", rowCount);
						for (int tblRow = 0; tblRow < map.size(); tblRow++) {
							List listmap = (List) map.get(tblRow);
							// listmap.add(decimalFormat.format((Double.parseDouble(listmap.get(2).toString())/totalSale)*100));
							jOBjRet.put("" + tblRow, listmap);
						}

					} catch (Exception e) {
						e.printStackTrace();
					}

				} catch (Exception e) {
					e.printStackTrace();
				}
				break;

			/*
			 * default: throw new
			 * IllegalArgumentException("  report name not match");
			 */
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return jOBjRet;

	}

	// funPromotionFlash
	// funPromotionFlash
	public JSONObject funPromotionFlash(String fromDate, String toDate,
			String strPOSCode, String strShiftNo, String strUserCode,
			String promoCode) {
		JSONArray jArr = new JSONArray();
		JSONObject jOBjRet = new JSONObject();
		StringBuilder sqlLiveData = new StringBuilder();
		StringBuilder sqlQData = new StringBuilder();
		try {
			sqlLiveData
					.append(" select a.strBillNo ,DATE_FORMAT(b.dteBillDate,'%d-%m-%y') ,a.strItemCode ,c.strItemName, "
							+ " a.dblQuantity ,a.dblQuantity*a.dblRate "
							+ " from tblbillpromotiondtl a,tblbillhd b,tblitemmaster c "
							+ " where a.strBillNo=b.strBillNo and a.strItemCode=c.strItemCode"
							+ " and date(dteBillDate) between '"
							+ fromDate
							+ "' and '" + toDate + "'  ");

			sqlQData.append(" select a.strBillNo ,DATE_FORMAT(b.dteBillDate,'%d-%m-%y') ,a.strItemCode ,c.strItemName, "
					+ " a.dblQuantity,a.dblQuantity*a.dblRate  "
					+ " from tblqbillpromotiondtl a,tblqbillhd b,tblitemmaster c "
					+ " where a.strBillNo=b.strBillNo and a.strItemCode=c.strItemCode "
					+ " and date(dteBillDate) between '"
					+ fromDate
					+ "' and '"
					+ toDate + "'  ");

			if (!promoCode.equalsIgnoreCase("All")) {
				sqlLiveData.append(" and a.strPromotionCode='" + promoCode
						+ "' ");
				sqlQData.append(" and a.strPromotionCode='" + promoCode + "' ");
			}
			if (!strPOSCode.equalsIgnoreCase("All")) {
				sqlLiveData.append(" and b.strPOSCode='" + strPOSCode + "' ");
				sqlQData.append(" and b.strPOSCode='" + strPOSCode + "' ");
			}

			sqlLiveData.append(" and b.intShiftCode ='" + strShiftNo + "' ");
			sqlQData.append(" and b.intShiftCode ='" + strShiftNo + "' ");

			List<clsBillItemDtl> listOfPromotionBillData = new ArrayList<clsBillItemDtl>();
			Query qLive = webPOSSessionFactory.getCurrentSession()
					.createSQLQuery(sqlLiveData.toString());
			List list = qLive.list();
			if (list.size() > 0) {
				for (int i = 0; i < list.size(); i++) {
					Object[] ob = (Object[]) list.get(i);
					JSONObject jObj = new JSONObject();
					jObj.put("strBillNo", ob[0].toString());
					jObj.put("dteBillDate", ob[1].toString());
					jObj.put("strItemCode", ob[2].toString());
					jObj.put("strItemName", ob[3].toString());
					jObj.put("dblQuantity", ob[4].toString());
					jObj.put("dblAmount", ob[5].toString());
					jArr.put(jObj);
				}

			}

			Query queryQ = webPOSSessionFactory.getCurrentSession()
					.createSQLQuery(sqlQData.toString());
			List qlist = queryQ.list();
			if (qlist.size() > 0) {
				for (int i = 0; i < qlist.size(); i++) {
					Object[] ob = (Object[]) qlist.get(i);
					JSONObject jObj = new JSONObject();
					jObj.put("strBillNo", ob[0].toString());
					jObj.put("dteBillDate", ob[1].toString());
					jObj.put("strItemCode", ob[2].toString());
					jObj.put("strItemName", ob[3].toString());
					jObj.put("dblQuantity", ob[4].toString());
					jObj.put("dblAmount", ob[5].toString());
					jArr.put(jObj);
				}

			}

			jOBjRet.put("jArr", jArr);

		} catch (Exception e) {
			e.printStackTrace();
		}
		return jOBjRet;
	}

	
	public JSONObject funCounterWiseSalesReport(String fromDate, String toDate,
			String strPOSCode, String strShiftNo, String strUserCode,
			String reportType) {
		JSONArray jArr = new JSONArray();
		JSONObject jOBjRet = new JSONObject();
		StringBuilder sbSqlLive = new StringBuilder();
		StringBuilder sbSqlQfile = new StringBuilder();
		StringBuilder sbFilter = new StringBuilder();

		if (reportType.equalsIgnoreCase("Menu Wise")) {
			sbSqlLive.setLength(0);
			sbSqlQfile.setLength(0);
			sbFilter.setLength(0);
			sbSqlLive
					.append(" select ifnull(b.strCounterCode,'NA') as strCounterCode ,"
							+ " ifnull(d.strCounterName,'NA') as   strCounterName ,ifNull(e.strMenuCode,'NA') as strMenuCode,"
							+ " ifnull(e.strMenuName,'NA') as strMenuName,  b.dblRate,sum(b.dblquantity) as dblquantity ,"
							+ " sum(b.dblamount) as dblamount"
							+ " from tblbillhd a ,tblbilldtl b ,tblmenuitempricingdtl c ,tblcounterhd d,tblmenuhd e "
							+ " where a.strBillNo=b.strBillNo and b.stritemcode = c.strItemCode and b.strCounterCode=d.strCounterCode "
							+ " and a.strPOSCode = c.strPosCode "
							+ " and c.strMenuCode=e.strMenuCode and date(a.dteBillDate) between '"
							+ fromDate + "' and '" + toDate + "' ");

			sbSqlQfile
					.append(" select ifnull(b.strCounterCode,'NA') as strCounterCode ,"
							+ " ifnull(d.strCounterName,'NA') as   strCounterName ,ifNull(e.strMenuCode,'NA') as strMenuCode,"
							+ " ifnull(e.strMenuName,'NA') as strMenuName,  b.dblRate,sum(b.dblquantity) as dblquantity ,"
							+ " sum(b.dblamount) as dblamount"
							+ " from tblqbillhd a ,tblqbilldtl b ,tblmenuitempricingdtl c ,tblcounterhd d,tblmenuhd e "
							+ " where a.strBillNo=b.strBillNo and b.stritemcode = c.strItemCode and b.strCounterCode=d.strCounterCode "
							+ " and a.strPOSCode = c.strPosCode "
							+ " and c.strMenuCode=e.strMenuCode and date(a.dteBillDate) between '"
							+ fromDate + "' and '" + toDate + "' ");

			if (!strPOSCode.equals("All")) {
				sbFilter.append(" AND a.strPoscode = '" + strPOSCode + "' ");
			}
			sbFilter.append(" and a.intShiftCode = '" + strShiftNo + "' ");

			sbFilter.append("  and a.strAdvBookingNo ='' "
					+ " group by b.strCounterCode,d.strCounterName, e.strMenuCode,e.strMenuName "
					+ " order by d.strCounterName,e.strMenuName  ");
			sbSqlLive.append(sbFilter);
			sbSqlQfile.append(sbFilter);
			List<clsCounterDtlBean> listOfCounterWiseMenuHeadWiseData = new ArrayList<>();

			Query qCounterData = webPOSSessionFactory.getCurrentSession()
					.createSQLQuery(sbSqlLive.toString());
			List list = qCounterData.list();
			if (list.size() > 0) {
				for (int i = 0; i < list.size(); i++) {
					Object[] ob = (Object[]) list.get(i);
					// JSONObject jObj =new JSONObject();
					clsCounterDtlBean obj = new clsCounterDtlBean();
					obj.setStrCounterCode(ob[0].toString());
					obj.setStrCounterName(ob[1].toString());
					obj.setStrMenuCode(ob[2].toString());
					obj.setStrMenuName(ob[3].toString());
					obj.setDblRate(Double.parseDouble(ob[4].toString()));
					obj.setDblQuantity(Double.parseDouble(ob[5].toString()));
					obj.setDblAmount(Double.parseDouble(ob[6].toString()));

					listOfCounterWiseMenuHeadWiseData.add(obj);
				}
			}
			// QData
			qCounterData = webPOSSessionFactory.getCurrentSession()
					.createSQLQuery(sbSqlQfile.toString());
			list = qCounterData.list();
			if (list.size() > 0) {
				for (int i = 0; i < list.size(); i++) {
					Object[] ob = (Object[]) list.get(i);
					// JSONObject jObj =new JSONObject();
					clsCounterDtlBean obj = new clsCounterDtlBean();
					obj.setStrCounterCode(ob[0].toString());
					obj.setStrCounterName(ob[1].toString());
					obj.setStrMenuCode(ob[2].toString());
					obj.setStrMenuName(ob[3].toString());
					obj.setDblRate(Double.parseDouble(ob[4].toString()));
					obj.setDblQuantity(Double.parseDouble(ob[5].toString()));
					obj.setDblAmount(Double.parseDouble(ob[6].toString()));

					listOfCounterWiseMenuHeadWiseData.add(obj);
				}
			}
			Comparator<clsCounterDtlBean> counterCodeComparator = new Comparator<clsCounterDtlBean>() {

				@Override
				public int compare(clsCounterDtlBean o1, clsCounterDtlBean o2) {
					return o1.getStrCounterCode().compareTo(
							o2.getStrCounterCode());
				}
			};
			Comparator<clsCounterDtlBean> menuCodeComparator = new Comparator<clsCounterDtlBean>() {

				@Override
				public int compare(clsCounterDtlBean o1, clsCounterDtlBean o2) {
					return o1.getStrMenuCode().compareTo(o2.getStrMenuCode());
				}
			};
			Collections.sort(listOfCounterWiseMenuHeadWiseData,
					new clsCounterComparator(counterCodeComparator,
							menuCodeComparator));

			try {
				Gson gson = new Gson();
				Type type = new TypeToken<List<clsCounterDtlBean>>() {
				}.getType();
				String gsonarrTempListReport = gson.toJson(
						listOfCounterWiseMenuHeadWiseData, type);
				jOBjRet.put("ListCounterWiseMenuHead", gsonarrTempListReport);

			} catch (Exception e) {
				e.printStackTrace();
			}

		} else if (reportType.equalsIgnoreCase("Group Wise")) {
			sbSqlLive.setLength(0);
			sbSqlQfile.setLength(0);
			sbFilter.setLength(0);
			try {
				sbSqlLive
						.append(" select ifnull(d.strCounterCode,'NA') as strCounterCode ,ifnull(d.strCounterName,'NA') as strCounterName , "
								+ " ifNull(h.strGroupCode,'NA') as strGroupCode,ifnull(h.strGroupName,'NA') as strGroupName,b.dblRate,sum(b.dblquantity) as dblquantity ,sum(b.dblamount) as dblamount"
								+ " from tblbillhd a ,tblbilldtl b,tblcounterhd d, tblitemmaster f,tblsubgrouphd g,tblgrouphd h "
								+ " where a.strBillNo=b.strBillNo and b.strCounterCode=d.strCounterCode "
								+ " and b.stritemcode=f.strItemCode and f.strSubGroupCode=g.strSubGroupCode"
								+ " and g.strGroupCode=h.strGroupCode and date(a.dteBillDate) between '"
								+ fromDate + "' and '" + toDate + "'  ");

				sbSqlQfile
						.append(" select ifnull(d.strCounterCode,'NA') as strCounterCode ,ifnull(d.strCounterName,'NA') as strCounterName , "
								+ " ifNull(h.strGroupCode,'NA') as strGroupCode,ifnull(h.strGroupName,'NA') as strGroupName,b.dblRate,sum(b.dblquantity) as dblquantity ,sum(b.dblamount) as dblamount"
								+ " from tblqbillhd a ,tblqbilldtl b,tblcounterhd d, tblitemmaster f,tblsubgrouphd g,tblgrouphd h "
								+ " where a.strBillNo=b.strBillNo and b.strCounterCode=d.strCounterCode "
								+ " and b.stritemcode=f.strItemCode and f.strSubGroupCode=g.strSubGroupCode"
								+ " and g.strGroupCode=h.strGroupCode and date(a.dteBillDate) between '"
								+ fromDate + "' and '" + toDate + "'  ");

				if (!strPOSCode.equals("All")) {
					sbFilter.append(" AND a.strPoscode = '" + strPOSCode + "' ");
				}

				sbFilter.append(" and a.intShiftCode = '" + strShiftNo + "' ");
				sbFilter.append(" and a.strAdvBookingNo ='' "
						+ " group by d.strCounterCode,d.strCounterName, h.strGroupName,g.strSubGroupCode "
						+ " order by d.strCounterName,h.strGroupName  ");

				sbSqlLive.append(sbFilter);
				sbSqlQfile.append(sbFilter);

				List<clsCounterDtlBean> listOfCounterWiseGroupWiseData = new ArrayList<>();

				// live data
				Query qCounterData = webPOSSessionFactory.getCurrentSession()
						.createSQLQuery(sbSqlLive.toString());
				List list = qCounterData.list();
				if (list.size() > 0) {
					for (int i = 0; i < list.size(); i++) {
						Object[] ob = (Object[]) list.get(i);
						// JSONObject jObj =new JSONObject();
						clsCounterDtlBean obj = new clsCounterDtlBean();
						obj.setStrCounterCode(ob[0].toString());
						obj.setStrCounterName(ob[1].toString());
						obj.setStrGroupCode(ob[2].toString());
						obj.setStrGroupName(ob[3].toString());
						obj.setDblRate(Double.parseDouble(ob[4].toString()));
						obj.setDblQuantity(Double.parseDouble(ob[5].toString()));
						obj.setDblAmount(Double.parseDouble(ob[6].toString()));

						listOfCounterWiseGroupWiseData.add(obj);
					}
				}

				// QData
				qCounterData = webPOSSessionFactory.getCurrentSession()
						.createSQLQuery(sbSqlQfile.toString());
				list = qCounterData.list();
				if (list.size() > 0) {
					for (int i = 0; i < list.size(); i++) {
						Object[] ob = (Object[]) list.get(i);
						// JSONObject jObj =new JSONObject();
						clsCounterDtlBean obj = new clsCounterDtlBean();
						obj.setStrCounterCode(ob[0].toString());
						obj.setStrCounterName(ob[1].toString());
						obj.setStrGroupCode(ob[2].toString());
						obj.setStrGroupName(ob[3].toString());
						obj.setDblRate(Double.parseDouble(ob[4].toString()));
						obj.setDblQuantity(Double.parseDouble(ob[5].toString()));
						obj.setDblAmount(Double.parseDouble(ob[6].toString()));

						listOfCounterWiseGroupWiseData.add(obj);
					}
				}
				Comparator<clsCounterDtlBean> counterCodeComparator = new Comparator<clsCounterDtlBean>() {

					@Override
					public int compare(clsCounterDtlBean o1,
							clsCounterDtlBean o2) {
						return o1.getStrCounterCode().compareTo(
								o2.getStrCounterCode());
					}
				};
				Comparator<clsCounterDtlBean> groupCodeComparator = new Comparator<clsCounterDtlBean>() {

					@Override
					public int compare(clsCounterDtlBean o1,
							clsCounterDtlBean o2) {
						return o1.getStrGroupCode().compareToIgnoreCase(
								o2.getStrGroupCode());
					}
				};
				Comparator<clsCounterDtlBean> groupNameComparator = new Comparator<clsCounterDtlBean>() {

					@Override
					public int compare(clsCounterDtlBean o1,
							clsCounterDtlBean o2) {
						return o1.getStrGroupName().compareToIgnoreCase(
								o2.getStrGroupName());
					}
				};
				Collections.sort(listOfCounterWiseGroupWiseData,
						new clsCounterComparator(counterCodeComparator,
								groupCodeComparator, groupNameComparator));

				try {
					Gson gson = new Gson();
					Type type = new TypeToken<List<clsCounterDtlBean>>() {
					}.getType();
					String gsonarrTempListReport = gson.toJson(
							listOfCounterWiseGroupWiseData, type);
					jOBjRet.put("ListCounterGroupWise", gsonarrTempListReport);

				} catch (Exception e) {
					e.printStackTrace();
				}

			} catch (Exception e) {
				e.printStackTrace();
			}
		} else {
			sbSqlLive.setLength(0);
			sbSqlQfile.setLength(0);
			sbFilter.setLength(0);
			try {
				sbSqlLive
						.append(" select ifnull(d.strCounterCode,'NA') as strCounterCode ,ifnull(d.strCounterName,'NA') as strCounterName , "
								+ " e.strSubGroupCode,e.strSubGroupName, "
								+ " b.dblRate,sum(b.dblquantity) as dblquantity ,sum(b.dblamount) as dblamount"
								+ " from tblbillhd a ,tblbilldtl b,tblitemmaster c ,tblcounterhd d ,tblsubgrouphd e "
								+ " where a.strBillNo=b.strBillNo and b.strCounterCode=d.strCounterCode "
								+ " and b.stritemcode=c.strItemCode and c.strSubGroupCode=e.strSubGroupCode "
								+ " and date(a.dteBillDate) between '"
								+ fromDate + "' and '" + toDate + "'  ");

				sbSqlQfile
						.append(" select ifnull(d.strCounterCode,'NA') as strCounterCode ,ifnull(d.strCounterName,'NA') as strCounterName , "
								+ " e.strSubGroupCode,e.strSubGroupName, "
								+ " b.dblRate,sum(b.dblquantity) as dblquantity ,sum(b.dblamount) as dblamount"
								+ " from tblqbillhd a ,tblqbilldtl b,tblitemmaster c ,tblcounterhd d ,tblsubgrouphd e "
								+ " where a.strBillNo=b.strBillNo and b.strCounterCode=d.strCounterCode "
								+ " and b.stritemcode=c.strItemCode and c.strSubGroupCode=e.strSubGroupCode "
								+ " and date(a.dteBillDate) between '"
								+ fromDate + "' and '" + toDate + "'  ");

				if (!strPOSCode.equals("All")) {
					sbFilter.append(" AND a.strPoscode = '" + strPOSCode + "' ");
				}

				sbFilter.append(" and a.intShiftCode = '" + strShiftNo + "' ");
				sbFilter.append(" and a.strAdvBookingNo ='' "
						+ " group by d.strCounterCode,d.strCounterName, e.strSubGroupCode,e.strSubGroupName "
						+ " order by d.strCounterName,e.strSubGroupName   ");
				sbSqlLive.append(sbFilter);
				sbSqlQfile.append(sbFilter);

				List<clsCounterDtlBean> listOfSubGroupWiseCounterData = new ArrayList<>();

				// live data
				Query qCounterData = webPOSSessionFactory.getCurrentSession()
						.createSQLQuery(sbSqlLive.toString());
				List list = qCounterData.list();
				if (list.size() > 0) {
					for (int i = 0; i < list.size(); i++) {
						Object[] ob = (Object[]) list.get(i);
						// JSONObject jObj =new JSONObject();
						clsCounterDtlBean obj = new clsCounterDtlBean();
						obj.setStrCounterCode(ob[0].toString());
						obj.setStrCounterName(ob[1].toString());
						obj.setStrSubGroupCode(ob[2].toString());
						obj.setStrSubGroupName(ob[3].toString());
						obj.setDblRate(Double.parseDouble(ob[4].toString()));
						obj.setDblQuantity(Double.parseDouble(ob[5].toString()));
						obj.setDblAmount(Double.parseDouble(ob[6].toString()));

						listOfSubGroupWiseCounterData.add(obj);
					}
				}

				// QData
				qCounterData = webPOSSessionFactory.getCurrentSession()
						.createSQLQuery(sbSqlQfile.toString());
				list = qCounterData.list();
				if (list.size() > 0) {
					for (int i = 0; i < list.size(); i++) {
						Object[] ob = (Object[]) list.get(i);
						// JSONObject jObj =new JSONObject();
						clsCounterDtlBean obj = new clsCounterDtlBean();
						obj.setStrCounterCode(ob[0].toString());
						obj.setStrCounterName(ob[1].toString());
						obj.setStrSubGroupCode(ob[2].toString());
						obj.setStrSubGroupName(ob[3].toString());
						obj.setDblRate(Double.parseDouble(ob[4].toString()));
						obj.setDblQuantity(Double.parseDouble(ob[5].toString()));
						obj.setDblAmount(Double.parseDouble(ob[6].toString()));

						listOfSubGroupWiseCounterData.add(obj);
					}
				}
				try {
					Gson gson = new Gson();
					Type type = new TypeToken<List<clsCounterDtlBean>>() {
					}.getType();
					String gsonarrTempListReport = gson.toJson(
							listOfSubGroupWiseCounterData, type);
					jOBjRet.put("ListCounterSubGroupWise",
							gsonarrTempListReport);

				} catch (Exception e) {
					e.printStackTrace();
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		return jOBjRet;
	}

	// funTaxBreakupSummaryReport
	public JSONObject funTaxBreakupSummaryReport(String fromDate,
			String toDate, String strPOSCode, String strShiftNo,
			String strUserCode) {
		JSONArray jArr = new JSONArray();
		JSONObject jOBjRet = new JSONObject();

		try {

			Map<String, clsTaxCalculationDtls> mapTaxDtl = new HashMap<>();
			StringBuilder sqlTaxBuilder = new StringBuilder();
			StringBuilder sqlMenuBreakupBuilder = new StringBuilder();

			sqlTaxBuilder.setLength(0);
			sqlTaxBuilder
					.append("SELECT b.strTaxCode,c.strTaxDesc,sum(b.dblTaxableAmount) ,sum(b.dblTaxAmount) "
							+ "FROM tblBillHd a "
							+ "INNER JOIN tblBillTaxDtl b ON a.strBillNo = b.strBillNo "
							+ "INNER JOIN tblTaxHd c ON b.strTaxCode = c.strTaxCode "
							+ "LEFT OUTER JOIN tblposmaster d ON a.strposcode=d.strposcode "
							+ "where date(a.dteBillDate) between '"
							+ fromDate
							+ "' and '" + toDate + "' ");
			if (!strPOSCode.equalsIgnoreCase("All")) {
				sqlTaxBuilder.append("and a.strPOSCode='" + strPOSCode + "'  ");
			}

			sqlTaxBuilder.append("and a.intShiftCode='" + strShiftNo + "' ");
			sqlTaxBuilder.append("group by c.strTaxCode,c.strTaxDesc ");
			Query qTaxBreakData = webPOSSessionFactory.getCurrentSession()
					.createSQLQuery(sqlTaxBuilder.toString());
			List list = qTaxBreakData.list();
			if (list.size() > 0) {
				for (int i = 0; i < list.size(); i++) {
					Object[] ob = (Object[]) list.get(i);
					if (mapTaxDtl.containsKey(ob[0].toString()))// taxCode
					{
						clsTaxCalculationDtls obj = mapTaxDtl.get(ob[0]
								.toString());
						obj.setTaxableAmount(obj.getTaxableAmount()
								+ Double.parseDouble(ob[2].toString()));
						obj.setTaxAmount(obj.getTaxAmount()
								+ Double.parseDouble(ob[3].toString()));
					} else {
						clsTaxCalculationDtls obj = new clsTaxCalculationDtls();

						obj.setTaxCode(ob[0].toString());
						obj.setTaxName(ob[1].toString());
						obj.setTaxableAmount(Double.parseDouble(ob[2]
								.toString()));
						obj.setTaxAmount(Double.parseDouble(ob[3].toString()));

						mapTaxDtl.put(ob[0].toString(), obj);

					}
				}
			}

			sqlTaxBuilder.setLength(0);
			sqlTaxBuilder
					.append("SELECT b.strTaxCode,c.strTaxDesc,sum(b.dblTaxableAmount) as dblTaxableAmount,sum(b.dblTaxAmount) as dblTaxAmount "
							+ "FROM tblqBillHd a "
							+ "INNER JOIN tblqBillTaxDtl b ON a.strBillNo = b.strBillNo "
							+ "INNER JOIN tblTaxHd c ON b.strTaxCode = c.strTaxCode "
							+ "LEFT OUTER JOIN tblposmaster d ON a.strposcode=d.strposcode "
							+ "where date(a.dteBillDate) between '"
							+ fromDate
							+ "' and '" + toDate + "' ");
			if (!strPOSCode.equalsIgnoreCase("All")) {
				sqlTaxBuilder.append("and a.strPOSCode='" + strPOSCode + "'  ");
			}

			sqlTaxBuilder.append("and a.intShiftCode='" + strShiftNo + "' ");
			sqlTaxBuilder.append("group by c.strTaxCode,c.strTaxDesc ");
			qTaxBreakData = webPOSSessionFactory.getCurrentSession()
					.createSQLQuery(sqlTaxBuilder.toString());
			list = qTaxBreakData.list();
			if (list.size() > 0) {
				for (int i = 0; i < list.size(); i++) {
					Object[] ob = (Object[]) list.get(i);
					if (mapTaxDtl.containsKey(ob[0].toString()))// taxCode
					{
						clsTaxCalculationDtls obj = mapTaxDtl.get(ob[0]
								.toString());
						obj.setTaxableAmount(obj.getTaxableAmount()
								+ Double.parseDouble(ob[2].toString()));
						obj.setTaxAmount(obj.getTaxAmount()
								+ Double.parseDouble(ob[3].toString()));
					} else {
						clsTaxCalculationDtls obj = new clsTaxCalculationDtls();
						obj.setTaxCode(ob[0].toString());
						obj.setTaxName(ob[1].toString());
						obj.setTaxableAmount(Double.parseDouble(ob[2]
								.toString()));
						obj.setTaxAmount(Double.parseDouble(ob[3].toString()));
						mapTaxDtl.put(ob[0].toString(), obj);

					}
				}
			}
			List<clsTaxCalculationDtls> listOfTaxDtl = new LinkedList<>();
			for (clsTaxCalculationDtls objTaxDtl : mapTaxDtl.values()) {
				listOfTaxDtl.add(objTaxDtl);
			}

			Map<String, clsTaxCalculationDtls> mapMenuBreakupDtl = new HashMap<>();

			// live menuBreakup
			sqlMenuBreakupBuilder.setLength(0);
			sqlMenuBreakupBuilder
					.append("select d.strItemCode,d.strItemName,sum(d.dblamount)"
							+ " from tblbillhd a  left Outer join tblbilltaxdtl b on a.strBillNo=b.strBillNo "
							+ " left outer join tbltaxhd c on b.strTaxCode=c.strTaxCode "
							+ " left outer join tblbilldtl d on a.strBillNo=d.strBillNo "
							+ " where date(a.dteBillDate) between '"
							+ fromDate
							+ "' and '"
							+ toDate
							+ "' "
							+ " and b.dblTaxableAmount IS NOT NULL ");
			if (!strPOSCode.equalsIgnoreCase("All")) {
				sqlMenuBreakupBuilder.append(" and a.strPOSCode='" + strPOSCode
						+ "' ");
			}

			sqlMenuBreakupBuilder.append(" and a.intShiftCode='" + strShiftNo
					+ "' ");
			sqlMenuBreakupBuilder
					.append(" group by d.strItemCode,d.strItemName order by d.strItemName ");
			Query qMenuBreakData = webPOSSessionFactory.getCurrentSession()
					.createSQLQuery(sqlMenuBreakupBuilder.toString());
			List listMenuBreak = qMenuBreakData.list();
			if (listMenuBreak.size() > 0) {
				for (int i = 0; i < listMenuBreak.size(); i++) {
					Object[] ob = (Object[]) listMenuBreak.get(i);

					if (mapMenuBreakupDtl.containsKey(ob[0].toString()))// itemName
					{
						clsTaxCalculationDtls obj = mapTaxDtl.get(ob[0]
								.toString());
						obj.setTaxAmount(obj.getTaxAmount()
								+ Double.parseDouble(ob[2].toString()));
					} else {
						clsTaxCalculationDtls obj = new clsTaxCalculationDtls();
						obj.setTaxCode(ob[0].toString());
						obj.setTaxName(ob[1].toString());
						obj.setTaxAmount(Double.parseDouble(ob[2].toString()));
						mapMenuBreakupDtl.put(ob[0].toString(), obj);

					}
				}
			}

			sqlMenuBreakupBuilder.setLength(0);
			sqlMenuBreakupBuilder
					.append("select d.strItemCode,d.strItemName,sum(d.dblamount)"
							+ " from tblqbillhd a  left Outer join tblqbilltaxdtl b on a.strBillNo=b.strBillNo "
							+ " left outer join tbltaxhd c on b.strTaxCode=c.strTaxCode "
							+ " left outer join tblqbilldtl d on a.strBillNo=d.strBillNo "
							+ " where date(a.dteBillDate) between '"
							+ fromDate
							+ "' and '"
							+ toDate
							+ "' "
							+ " and b.dblTaxableAmount IS NOT NULL ");
			if (!strPOSCode.equalsIgnoreCase("All")) {
				sqlMenuBreakupBuilder.append(" and a.strPOSCode='" + strPOSCode
						+ "' ");
			}

			sqlMenuBreakupBuilder.append(" and a.intShiftCode='" + strShiftNo
					+ "' ");
			sqlMenuBreakupBuilder
					.append(" group by d.strItemCode,d.strItemName order by d.strItemName ");
			qMenuBreakData = webPOSSessionFactory.getCurrentSession()
					.createSQLQuery(sqlMenuBreakupBuilder.toString());
			listMenuBreak = qMenuBreakData.list();
			if (listMenuBreak.size() > 0) {
				for (int i = 0; i < listMenuBreak.size(); i++) {
					Object[] ob = (Object[]) listMenuBreak.get(i);
					if (mapMenuBreakupDtl.containsKey(ob[0].toString()))// itemName
					{
						clsTaxCalculationDtls obj = mapTaxDtl.get(ob[0]
								.toString());
						obj.setTaxAmount(obj.getTaxAmount()
								+ Double.parseDouble(ob[2].toString()));
					} else {
						clsTaxCalculationDtls obj = new clsTaxCalculationDtls();
						obj.setTaxCode(ob[0].toString());
						obj.setTaxName(ob[1].toString());
						obj.setTaxAmount(Double.parseDouble(ob[2].toString()));
						mapMenuBreakupDtl.put(ob[0].toString(), obj);

					}
				}
			}
			List<clsTaxCalculationDtls> listOfMenuHeadBreakupDtl = new LinkedList<>();
			for (clsTaxCalculationDtls objMenuDtl : mapMenuBreakupDtl.values()) {
				listOfMenuHeadBreakupDtl.add(objMenuDtl);
			}
			try {
				Gson gson = new Gson();
				Type type = new TypeToken<List<clsTaxCalculationDtls>>() {
				}.getType();
				String gsonarrTempListReport1 = gson.toJson(listOfTaxDtl, type);
				String gsonarrTempListReport2 = gson.toJson(
						listOfMenuHeadBreakupDtl, type);
				jOBjRet.put("listOfTaxDtl", gsonarrTempListReport1);
				jOBjRet.put("listOfMenuHeadBreakupDtl", gsonarrTempListReport2);

			} catch (Exception e) {
				e.printStackTrace();
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return jOBjRet;
	}

	// funWaiterWiseIncentiveReport
	// funWaiterWiseIncentiveReport
		public JSONObject funWaiterWiseIncentiveReport(String fromDate,
				String toDate, String strPOSCode, String strShiftNo,
				String strUserCode, String reportType) {
			JSONArray jArr = new JSONArray();
			JSONObject jOBjRet = new JSONObject();
			try {
				if (reportType.equalsIgnoreCase("Summary")) {
					StringBuilder sqlBuilder = new StringBuilder();
					List<clsBillDtl> listOfWaiterWiseItemSales = new ArrayList<>();

					// Q Data
					sqlBuilder.setLength(0);
					sqlBuilder
							.append("select e.strWaiterNo,ifnull(e.strWShortName,'ND')strWShortName,sum(b.dblQuantity)dblQuantity,sum(b.dblAmount)dblAmount,"
									+ "round(sum(b.dblAmount)*(d.strIncentives/100),2)dblIncentives "
									+ "from tblqbillhd a,tblqbilldtl b,tblitemmaster c,tblsubgrouphd d,tblwaitermaster e "
									+ "where date(a.dtebilldate) between '"
									+ fromDate
									+ "' and '"
									+ toDate
									+ "' "
									+ "and a.strBillNo=b.strBillNo "
									+ "and b.strItemCode=c.strItemCode "
									+ "and c.strSubGroupCode=d.strSubGroupCode "
									+ "and a.strWaiterNo=e.strWaiterNo ");
					if (!strPOSCode.equalsIgnoreCase("All")) {
						sqlBuilder.append("and a.strPOSCode='" + strPOSCode + "' ");
					}
					sqlBuilder.append("and a.intShiftCode='" + strShiftNo + "' ");

					sqlBuilder.append("group by e.strWaiterNo "
							+ "order by e.strWaiterNo ");

					Query qWaiterIncentive = webPOSSessionFactory
							.getCurrentSession().createSQLQuery(
									sqlBuilder.toString());
					List list = qWaiterIncentive.list();
					if (list.size() > 0) {
						for (int i = 0; i < list.size(); i++) {
							Object[] ob = (Object[]) list.get(i);
							clsBillDtl obj = new clsBillDtl();
							obj.setStrWaiterNo(ob[0].toString());
							obj.setStrWShortName(ob[1].toString());
							obj.setDblQuantity(Double.parseDouble(ob[2].toString()));
							obj.setDblAmount(Double.parseDouble(ob[3].toString()));
							obj.setDblIncentive(Double.parseDouble(ob[4].toString()));
							listOfWaiterWiseItemSales.add(obj);
						}
					}
					// Live Data
					sqlBuilder.setLength(0);
					sqlBuilder
							.append("select e.strWaiterNo,ifnull(e.strWShortName,'ND')strWShortName,sum(b.dblQuantity)dblQuantity,sum(b.dblAmount)dblAmount,"
									+ "round(sum(b.dblAmount)*(d.strIncentives/100),2)dblIncentives "
									+ "from tblbillhd a,tblbilldtl b,tblitemmaster c,tblsubgrouphd d,tblwaitermaster e "
									+ "where date(a.dtebilldate) between '"
									+ fromDate
									+ "' and '"
									+ toDate
									+ "' "
									+ "and a.strBillNo=b.strBillNo "
									+ "and b.strItemCode=c.strItemCode "
									+ "and c.strSubGroupCode=d.strSubGroupCode "
									+ "and a.strWaiterNo=e.strWaiterNo ");
					if (!strPOSCode.equalsIgnoreCase("All")) {
						sqlBuilder.append("and a.strPOSCode='" + strPOSCode + "' ");
					}

					sqlBuilder.append("and a.intShiftCode='" + strShiftNo + "' ");
					sqlBuilder.append("group by e.strWaiterNo "
							+ "order by e.strWaiterNo ");

					qWaiterIncentive = webPOSSessionFactory.getCurrentSession()
							.createSQLQuery(sqlBuilder.toString());
					list = qWaiterIncentive.list();
					if (list.size() > 0) {
						for (int i = 0; i < list.size(); i++) {
							Object[] ob = (Object[]) list.get(i);
							clsBillDtl obj = new clsBillDtl();
							obj.setStrWaiterNo(ob[0].toString());
							obj.setStrWShortName(ob[1].toString());
							obj.setDblQuantity(Double.parseDouble(ob[2].toString()));
							obj.setDblAmount(Double.parseDouble(ob[3].toString()));
							obj.setDblIncentive(Double.parseDouble(ob[4].toString()));
							listOfWaiterWiseItemSales.add(obj);
						}
					}
					Comparator<clsBillDtl> waiterCodeComparator = new Comparator<clsBillDtl>() {

						@Override
						public int compare(clsBillDtl o1, clsBillDtl o2) {
							return o1.getStrWaiterNo().compareTo(
									o2.getStrWaiterNo());
						}
					};

					Collections.sort(listOfWaiterWiseItemSales,
							new clsWaiterWiseSalesComparator(waiterCodeComparator));
					try {
						Gson gson = new Gson();
						Type type = new TypeToken<List<clsBillDtl>>() {
						}.getType();
						String gsonarrTempListReport = gson.toJson(
								listOfWaiterWiseItemSales, type);
						jOBjRet.put("ListWaiterWiseIncentiveSummary",
								gsonarrTempListReport);

					} catch (Exception e) {
						e.printStackTrace();
					}

					// call for view report

				} else {
					StringBuilder sqlBuilder = new StringBuilder();
					List<clsBillDtl> listOfWaiterWiseItemSales = new ArrayList<>();

					// Q Data
					sqlBuilder.setLength(0);
					sqlBuilder
							.append("select e.strWaiterNo,ifnull(e.strWShortName,'ND')strWShortName,d.strSubGroupCode,d.strSubGroupName,a.strBillNo "
									+ ",sum(b.dblQuantity)dblQuantity,sum(b.dblAmount)dblAmount, "
									+ "round(sum(b.dblAmount)*(d.strIncentives/100),2)dblIncentives,round(d.strIncentives,2) as strIncentivePer "
									+ "from tblqbillhd a,tblqbilldtl b,tblitemmaster c,tblsubgrouphd d,tblwaitermaster e "
									+ "where date(a.dtebilldate) between '"
									+ fromDate
									+ "' and '"
									+ toDate
									+ "' "
									+ "and a.strBillNo=b.strBillNo "
									+ "and b.strItemCode=c.strItemCode "
									+ "and c.strSubGroupCode=d.strSubGroupCode "
									+ "and a.strWaiterNo=e.strWaiterNo ");
					if (!strPOSCode.equalsIgnoreCase("All")) {
						sqlBuilder.append("and a.strPOSCode='" + strPOSCode + "' ");
					}

					sqlBuilder.append("and a.intShiftCode='" + strShiftNo + "' ");
					sqlBuilder.append("group by e.strWaiterNo,a.strBillNo "
							+ "order by e.strWaiterNo,a.strBillNo ");

					Query qWaiterIncentive = webPOSSessionFactory
							.getCurrentSession().createSQLQuery(
									sqlBuilder.toString());
					List list = qWaiterIncentive.list();
					if (list.size() > 0) {
						for (int i = 0; i < list.size(); i++) {
							Object[] ob = (Object[]) list.get(i);
							clsBillDtl obj = new clsBillDtl();
							obj.setStrWaiterNo(ob[0].toString());
							obj.setStrWShortName(ob[1].toString());
							obj.setStrSubGroupCode(ob[2].toString());
							obj.setStrSubGroupName(ob[4].toString());
							obj.setStrBillNo(ob[4].toString());
							obj.setDblQuantity(Double.parseDouble(ob[5].toString()));
							obj.setDblAmount(Double.parseDouble(ob[6].toString()));
							obj.setDblIncentive(Double.parseDouble(ob[7].toString()));
							obj.setDblIncentivePer(Double.parseDouble(ob[8]
									.toString()));
							listOfWaiterWiseItemSales.add(obj);

						}
					}

					// Live Data
					sqlBuilder.setLength(0);
					sqlBuilder
							.append("select e.strWaiterNo,ifnull(e.strWShortName,'ND')strWShortName,d.strSubGroupCode,d.strSubGroupName,a.strBillNo "
									+ ",sum(b.dblQuantity)dblQuantity,sum(b.dblAmount)dblAmount, "
									+ "round(sum(b.dblAmount)*(d.strIncentives/100),2)dblIncentives,round(d.strIncentives,2) as strIncentivePer "
									+ "from tblbillhd a,tblbilldtl b,tblitemmaster c,tblsubgrouphd d,tblwaitermaster e "
									+ "where date(a.dtebilldate) between '"
									+ fromDate
									+ "' and '"
									+ toDate
									+ "' "
									+ "and a.strBillNo=b.strBillNo "
									+ "and b.strItemCode=c.strItemCode "
									+ "and c.strSubGroupCode=d.strSubGroupCode "
									+ "and a.strWaiterNo=e.strWaiterNo ");
					if (!strPOSCode.equalsIgnoreCase("All")) {
						sqlBuilder.append("and a.strPOSCode='" + strPOSCode + "' ");
					}

					sqlBuilder.append("and a.intShiftCode='" + strShiftNo + "' ");
					sqlBuilder.append("group by e.strWaiterNo,a.strBillNo "
							+ "order by e.strWaiterNo,a.strBillNo ");
					qWaiterIncentive = webPOSSessionFactory.getCurrentSession()
							.createSQLQuery(sqlBuilder.toString());
					list = qWaiterIncentive.list();
					if (list.size() > 0) {
						for (int i = 0; i < list.size(); i++) {
							Object[] ob = (Object[]) list.get(i);
							clsBillDtl obj = new clsBillDtl();
							obj.setStrWaiterNo(ob[0].toString());
							obj.setStrWShortName(ob[1].toString());
							obj.setStrSubGroupCode(ob[2].toString());
							obj.setStrSubGroupName(ob[4].toString());
							obj.setStrBillNo(ob[4].toString());
							obj.setDblQuantity(Double.parseDouble(ob[5].toString()));
							obj.setDblAmount(Double.parseDouble(ob[6].toString()));
							obj.setDblIncentive(Double.parseDouble(ob[7].toString()));
							obj.setDblIncentivePer(Double.parseDouble(ob[8]
									.toString()));
							listOfWaiterWiseItemSales.add(obj);

						}
					}
					Comparator<clsBillDtl> waiterCodeComparator = new Comparator<clsBillDtl>() {
						@Override
						public int compare(clsBillDtl o1, clsBillDtl o2) {
							return o1.getStrWaiterNo().compareTo(
									o2.getStrWaiterNo());
						}
					};
					Comparator<clsBillDtl> billNoComparator = new Comparator<clsBillDtl>() {
						@Override
						public int compare(clsBillDtl o1, clsBillDtl o2) {
							return o1.getStrBillNo().compareTo(o2.getStrBillNo());
						}
					};
					Comparator<clsBillDtl> subGroupCodeComparator = new Comparator<clsBillDtl>() {
						@Override
						public int compare(clsBillDtl o1, clsBillDtl o2) {
							return o1.getStrSubGroupCode().compareTo(
									o2.getStrSubGroupCode());
						}
					};
					Collections.sort(listOfWaiterWiseItemSales,
							new clsWaiterWiseSalesComparator(waiterCodeComparator,
									billNoComparator, subGroupCodeComparator));

					// call for view report
					try {
						Gson gson = new Gson();
						Type type = new TypeToken<List<clsBillDtl>>() {
						}.getType();
						String gsonarrTempListReport = gson.toJson(
								listOfWaiterWiseItemSales, type);
						jOBjRet.put("ListWaiterWiseIncentiveDetail",
								gsonarrTempListReport);

					} catch (Exception e) {
						e.printStackTrace();
					}
				}

			} catch (Exception e) {
				e.printStackTrace();
			}

			return jOBjRet;
		}

	
	
	public JSONObject funDeliveryBoyWiseIncentiveReport(String fromDate,
			String toDate, String strPOSCode, String strShiftNo,
			String strUserCode, String reportType, String dpCode) {
		JSONArray jArr = new JSONArray();
		JSONObject jOBjRet = new JSONObject();

		try {
			if (reportType.equalsIgnoreCase("Summary")) {
				StringBuilder sqlBuilder = new StringBuilder();
				List<clsBillDtl> listOfDelBoyIncentives = new ArrayList<>();

				// Q Data
				sqlBuilder.setLength(0);
				sqlBuilder
						.append("select e.strDPCode,e.strDPName,sum(c.dblSubTotal)dblSubTotal,sum(b.dblDBIncentives) dblDBIncentives "
								+ "from tblhomedelivery a,tblhomedeldtl b,tblqbillhd c "
								+ ",tblareawisedelboywisecharges d,tbldeliverypersonmaster e,tblqadvbookbillhd f "
								+ ",tblcustomermaster g "
								+ "where date(c.dteBillDate) between '"
								+ fromDate
								+ "' and '"
								+ toDate
								+ "' "
								+ "and a.strBillNo=b.strBillNo  "
								+ "and a.strBillNo=c.strBillNo "
								+ "and b.strDPCode= d.strDeliveryBoyCode "
								+ "and d.strDeliveryBoyCode=e.strDPCode "
								+ "and c.strAdvBookingNo=f.strAdvBookingNo "
								+ "and c.strCustomerCode=g.strCustomerCode "
								+ "and g.strBuldingCode=d.strCustAreaCode ");
				if (!strPOSCode.equalsIgnoreCase("All")) {
					sqlBuilder.append("and c.strPOSCode='" + strPOSCode + "' ");
				}
				sqlBuilder.append("and c.intShiftCode='" + strShiftNo + "' ");
				if (!dpCode.equalsIgnoreCase("All")) {
					sqlBuilder.append("and b.strDPCode='" + dpCode + "' ");
				}
				sqlBuilder.append("group by e.strDPCode "
						+ "order by e.strDPCode ");
				Query qDBIncentive = webPOSSessionFactory.getCurrentSession()
						.createSQLQuery(sqlBuilder.toString());
				List list = qDBIncentive.list();
				if (list.size() > 0) {
					for (int i = 0; i < list.size(); i++) {
						Object[] ob = (Object[]) list.get(i);
						clsBillDtl obj = new clsBillDtl();
						obj.setStrDelBoyCode(ob[0].toString());
						obj.setStrDelBoyName(ob[1].toString());
						obj.setDblAmount(Double.parseDouble(ob[2].toString()));
						obj.setDblIncentive(Double.parseDouble(ob[3].toString()));
						listOfDelBoyIncentives.add(obj);
					}
				}
				// Live Data
				sqlBuilder.setLength(0);
				sqlBuilder
						.append("select e.strDPCode,e.strDPName,sum(c.dblSubTotal)dblSubTotal,sum(b.dblDBIncentives) dblDBIncentives "
								+ "from tblhomedelivery a,tblhomedeldtl b,tblbillhd c "
								+ ",tblareawisedelboywisecharges d,tbldeliverypersonmaster e,tbladvbookbillhd f "
								+ ",tblcustomermaster g "
								+ "where date(c.dteBillDate) between '"
								+ fromDate
								+ "' and '"
								+ toDate
								+ "' "
								+ "and a.strBillNo=b.strBillNo  "
								+ "and a.strBillNo=c.strBillNo "
								+ "and b.strDPCode= d.strDeliveryBoyCode "
								+ "and d.strDeliveryBoyCode=e.strDPCode "
								+ "and c.strAdvBookingNo=f.strAdvBookingNo "
								+ "and c.strCustomerCode=g.strCustomerCode "
								+ "and g.strBuldingCode=d.strCustAreaCode ");
				if (!strPOSCode.equalsIgnoreCase("All")) {
					sqlBuilder.append("and c.strPOSCode='" + strPOSCode + "' ");
				}
				sqlBuilder.append("and c.intShiftCode='" + strShiftNo + "' ");
				if (!dpCode.equalsIgnoreCase("All")) {
					sqlBuilder.append("and b.strDPCode='" + dpCode + "' ");
				}
				sqlBuilder.append("group by e.strDPCode "
						+ "order by e.strDPCode ");

				qDBIncentive = webPOSSessionFactory.getCurrentSession()
						.createSQLQuery(sqlBuilder.toString());
				list = qDBIncentive.list();
				if (list.size() > 0) {
					for (int i = 0; i < list.size(); i++) {
						Object[] ob = (Object[]) list.get(i);
						clsBillDtl obj = new clsBillDtl();
						obj.setStrDelBoyCode(ob[0].toString());
						obj.setStrDelBoyName(ob[1].toString());
						obj.setDblAmount(Double.parseDouble(ob[2].toString()));
						obj.setDblIncentive(Double.parseDouble(ob[3].toString()));
						listOfDelBoyIncentives.add(obj);
					}
				}
				Comparator<clsBillDtl> delBoyCodeComparator = new Comparator<clsBillDtl>() {
					@Override
					public int compare(clsBillDtl o1, clsBillDtl o2) {
						return o1.getStrDelBoyCode().compareTo(
								o2.getStrDelBoyCode());
					}
				};

				Collections.sort(listOfDelBoyIncentives,
						new clsWaiterWiseSalesComparator(delBoyCodeComparator));
				// call for view report
				try {
					Gson gson = new Gson();
					Type type = new TypeToken<List<clsBillDtl>>() {
					}.getType();
					String gsonarrTempListReport = gson.toJson(
							listOfDelBoyIncentives, type);
					jOBjRet.put("ListDBWiseIncentiveSummary",
							gsonarrTempListReport);

				} catch (Exception e) {
					e.printStackTrace();
				}
			} else {
				StringBuilder sqlBuilder = new StringBuilder();
				List<clsBillDtl> listOfDelBoyIncentives = new ArrayList<>();

				// Q Data
				sqlBuilder.setLength(0);
				sqlBuilder
						.append("select e.strDPCode,e.strDPName,a.strBillNo,date(c.dteBillDate) as dteBillDate,TIME_FORMAT(time(dteBillDate),\"%r\") as tmeBillTime "
								+ ",ifnull(h.strBuildingName,'') as strArea,ifnull(date(c.dteSettleDate),'') as dteSettleDate "
								+ ",ifnull(TIME_FORMAT(time(c.dteSettleDate),\"%r\"),'') as tmeSettleTime,sum(b.dblDBIncentives)dblDBIncentives "
								+ "from tblhomedelivery a,tblhomedeldtl b,tblqbillhd c "
								+ ",tblareawisedelboywisecharges d,tbldeliverypersonmaster e "
								+ ",tblcustomermaster g "
								+ "left outer join tblbuildingmaster h on g.strBuldingCode=h.strBuildingCode "
								+ "where date(c.dteBillDate) between '"
								+ fromDate
								+ "' and '"
								+ toDate
								+ "' "
								+ "and a.strBillNo=b.strBillNo   "
								+ "and a.strBillNo=c.strBillNo  "
								+ "and b.strDPCode= d.strDeliveryBoyCode "
								+ "and d.strDeliveryBoyCode=e.strDPCode  "
								+ "and c.strCustomerCode=g.strCustomerCode "
								+ "and g.strBuldingCode=d.strCustAreaCode ");
				if (!strPOSCode.equalsIgnoreCase("All")) {
					sqlBuilder.append("and c.strPOSCode='" + strPOSCode + "' ");
				}
				sqlBuilder.append("and c.intShiftCode='" + strShiftNo + "' ");
				if (!dpCode.equalsIgnoreCase("All")) {
					sqlBuilder.append("and b.strDPCode='" + dpCode + "' ");
				}
				sqlBuilder.append("group by e.strDPCode,c.strBillNo "
						+ "order by e.strDPCode,c.strBillNo ");

				Query qDBIncentive = webPOSSessionFactory.getCurrentSession()
						.createSQLQuery(sqlBuilder.toString());
				List list = qDBIncentive.list();
				if (list.size() > 0) {
					for (int i = 0; i < list.size(); i++) {
						Object[] ob = (Object[]) list.get(i);
						clsBillDtl obj = new clsBillDtl();
						obj.setStrDelBoyCode(ob[0].toString());
						obj.setStrDelBoyName(ob[1].toString());
						obj.setStrBillNo(ob[2].toString());
						obj.setDteBillDate(ob[3].toString());
						obj.setTmeBillTime(ob[4].toString());
						obj.setStrArea(ob[5].toString());
						obj.setDteBillSettleDate(ob[6].toString());
						obj.setTmeBillTime(ob[7].toString());
						obj.setDblIncentive(Double.parseDouble(ob[8].toString()));

						listOfDelBoyIncentives.add(obj);
					}
				}

				// Live Data
				sqlBuilder.setLength(0);
				sqlBuilder
						.append("select e.strDPCode,e.strDPName,a.strBillNo,date(c.dteBillDate) as dteBillDate,TIME_FORMAT(time(dteBillDate),\"%r\") as tmeBillTime "
								+ ",ifnull(h.strBuildingName,'') as strArea,ifnull(date(c.dteSettleDate),'') as dteSettleDate "
								+ ",ifnull(TIME_FORMAT(time(c.dteSettleDate),\"%r\"),'') as tmeSettleTime,sum(b.dblDBIncentives)dblDBIncentives "
								+ "from tblhomedelivery a,tblhomedeldtl b,tblbillhd c "
								+ ",tblareawisedelboywisecharges d,tbldeliverypersonmaster e "
								+ ",tblcustomermaster g "
								+ "left outer join tblbuildingmaster h on g.strBuldingCode=h.strBuildingCode "
								+ "where date(c.dteBillDate) between '"
								+ fromDate
								+ "' and '"
								+ toDate
								+ "' "
								+ "and a.strBillNo=b.strBillNo   "
								+ "and a.strBillNo=c.strBillNo  "
								+ "and b.strDPCode= d.strDeliveryBoyCode "
								+ "and d.strDeliveryBoyCode=e.strDPCode  "
								+ "and c.strCustomerCode=g.strCustomerCode "
								+ "and g.strBuldingCode=d.strCustAreaCode ");
				if (!strPOSCode.equalsIgnoreCase("All")) {
					sqlBuilder.append("and c.strPOSCode='" + strPOSCode + "' ");
				}
				sqlBuilder.append("and c.intShiftCode='" + strShiftNo + "' ");
				if (!dpCode.equalsIgnoreCase("All")) {
					sqlBuilder.append("and b.strDPCode='" + dpCode + "' ");
				}
				sqlBuilder.append("group by e.strDPCode,c.strBillNo "
						+ "order by e.strDPCode,c.strBillNo ");

				qDBIncentive = webPOSSessionFactory.getCurrentSession()
						.createSQLQuery(sqlBuilder.toString());
				list = qDBIncentive.list();
				if (list.size() > 0) {
					for (int i = 0; i < list.size(); i++) {
						Object[] ob = (Object[]) list.get(i);
						clsBillDtl obj = new clsBillDtl();
						obj.setStrDelBoyCode(ob[0].toString());
						obj.setStrDelBoyName(ob[1].toString());
						obj.setStrBillNo(ob[2].toString());
						obj.setDteBillDate(ob[3].toString());
						obj.setTmeBillTime(ob[4].toString());
						obj.setStrArea(ob[5].toString());
						obj.setDteBillSettleDate(ob[6].toString());
						obj.setTmeBillTime(ob[7].toString());
						obj.setDblIncentive(Double.parseDouble(ob[8].toString()));

						listOfDelBoyIncentives.add(obj);
					}
				}

				Comparator<clsBillDtl> delBoyCodeComparator = new Comparator<clsBillDtl>() {

					@Override
					public int compare(clsBillDtl o1, clsBillDtl o2) {
						return o1.getStrDelBoyCode().compareTo(
								o2.getStrDelBoyCode());
					}
				};

				Comparator<clsBillDtl> billNoComparator = new Comparator<clsBillDtl>() {

					@Override
					public int compare(clsBillDtl o1, clsBillDtl o2) {
						return o1.getStrBillNo().compareTo(o2.getStrBillNo());
					}
				};

				Collections.sort(listOfDelBoyIncentives,
						new clsWaiterWiseSalesComparator(delBoyCodeComparator,
								billNoComparator));
				try {
					Gson gson = new Gson();
					Type type = new TypeToken<List<clsBillDtl>>() {
					}.getType();
					String gsonarrTempListReport = gson.toJson(
							listOfDelBoyIncentives, type);
					jOBjRet.put("ListDBWiseIncentiveDetails",
							gsonarrTempListReport);

				} catch (Exception e) {
					e.printStackTrace();
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return jOBjRet;
	}

	
	
	public JSONObject funAdvanceOrderReport(String fromDate, String toDate,
			String strPOSCode, String strShiftNo, String strUserCode,
			String orderType) {
		JSONArray jArr = new JSONArray();
		JSONObject jOBjRet = new JSONObject();

		List<clsAdvOrderItemDtl> listOdAdvOrderItemDtl = new ArrayList<>();
		StringBuilder sqlBuilder = new StringBuilder();
		try {
			// for live data
			sqlBuilder.setLength(0);
			sqlBuilder
					.append("select a.strAdvBookingNo,DATE_FORMAT(a.dteAdvBookingDate,'%d-%m-%Y') as dteAdvBookingDate,DATE_FORMAT(a.dteOrderFor,'%d-%m-%Y') as  dteOrderFor,ifnull(f.strCustomerName,'NA') as strCustomerName ,f.longMobileNo "
							+ ",b.strItemCode,b.strItemName,d.strCharCode,ifnull(d.strCharName,'') as strCharName,ifnull(c.strCharValues,'') as strCharValues, "
							+ "sum(b.dblQuantity) as dblQuantity ,sum(b.dblAmount)/sum(b.dblQuantity) as dblRate,sum(b.dblAmount) as dblAmount,sum(b.dblWeight) as dblWeight, "
							+ "e.dblAdvDeposite "
							+ "from tbladvbookbillhd a "
							+ "inner join tbladvbookbilldtl b on a.strAdvBookingNo=b.strAdvBookingNo and a.strClientCode=b.strClientCode "
							+ "left outer join tbladvbookbillchardtl c on a.strAdvBookingNo=c.strAdvBookingNo and b.strItemCode=c.strItemCode and a.strClientCode=c.strClientCode "
							+ "left outer join tblcharactersticsmaster d on c.strCharCode=d.strCharCode and c.strClientCode=d.strClientCode "
							+ "left outer join tbladvancereceipthd e on a.strAdvBookingNo=e.strAdvBookingNo and a.strClientCode=e.strClientCode "
							+ "left outer join tblcustomermaster f on a.strCustomerCode=f.strCustomerCode and a.strClientCode=f.strClientCode "
							+ "where date(a.dteOrderFor) between '"
							+ fromDate
							+ "' and '" + toDate + "' ");
			if (!strPOSCode.equals("All")) {
				sqlBuilder.append(" and a.strPOSCode='" + strPOSCode + "'  ");
			}
			if (!orderType.equalsIgnoreCase("All")
					&& orderType.equalsIgnoreCase("Advance Order")) {
				sqlBuilder.append(" and a.strUrgentOrder='N'  ");
			} else if (!orderType.equalsIgnoreCase("All")
					&& orderType.equalsIgnoreCase("Urgent Order")) {
				sqlBuilder.append(" and a.strUrgentOrder='Y'  ");
			}
			sqlBuilder
					.append("group by a.strAdvBookingNo,b.strItemCode,c.strCharCode,c.strCharValues "
							+ "order by a.strAdvBookingNo,b.strItemCode,c.strCharCode,c.strCharValues ");

			String itemCode = "", advOrderNO = "";
			clsAdvOrderItemDtl objAdvOrderItemDtl = null;
			boolean flag = false;
			double totalAdvAmt = 0.00;

			Query qAdvanceOrder = webPOSSessionFactory.getCurrentSession()
					.createSQLQuery(sqlBuilder.toString());
			List list = qAdvanceOrder.list();
			if (list.size() > 0) {
				for (int i = 0; i < list.size(); i++) {
					Object[] ob = (Object[]) list.get(i);
					if (itemCode.equals(ob[5].toString())
							&& advOrderNO.equals(ob[0].toString())) {
						objAdvOrderItemDtl
								.setStrCharNameValuePair(objAdvOrderItemDtl
										.getStrCharNameValuePair()
										+ "  "
										+ ob[8].toString()
										+ "-->"
										+ ob[9].toString());
					} else {
						objAdvOrderItemDtl = new clsAdvOrderItemDtl();

						if (advOrderNO == "") {
							totalAdvAmt += Double
									.parseDouble(ob[14].toString());
						} else if (advOrderNO.equals(ob[0].toString())) {
						} else if (!advOrderNO.equals(ob[0].toString())) {
							totalAdvAmt += Double
									.parseDouble(ob[14].toString());
						}
						itemCode = ob[5].toString();
						advOrderNO = ob[0].toString();

						objAdvOrderItemDtl.setStrAdvBookingNo(ob[0].toString());
						objAdvOrderItemDtl.setDteAdvBookingDate(ob[1]
								.toString());
						objAdvOrderItemDtl.setDteOrderFor(ob[2].toString());
						objAdvOrderItemDtl.setStrCustomerName(ob[3].toString());
						objAdvOrderItemDtl.setLongMobileNo(ob[4].toString());
						objAdvOrderItemDtl.setStrItemCode(ob[5].toString());
						objAdvOrderItemDtl.setStrItemName(ob[6].toString());
						objAdvOrderItemDtl.setStrCharCode(ob[7].toString());
						objAdvOrderItemDtl.setStrCharName(ob[8].toString());
						objAdvOrderItemDtl.setStrCharValues(ob[9].toString());
						objAdvOrderItemDtl.setDblQuantity(Double
								.parseDouble(ob[10].toString()));
						objAdvOrderItemDtl.setDblRate(Double.parseDouble(ob[11]
								.toString()));
						objAdvOrderItemDtl.setDblAmount(Double
								.parseDouble(ob[12].toString()));
						objAdvOrderItemDtl.setDblWeight(Double
								.parseDouble(ob[13].toString()));
						objAdvOrderItemDtl.setDblAdvDeposite(Double
								.parseDouble(ob[14].toString()));
						objAdvOrderItemDtl.setDblTotalAmount(Double
								.parseDouble(ob[12].toString()));
						objAdvOrderItemDtl.setStrCharNameValuePair(ob[8]
								.toString() + "-->" + ob[9].toString());

						listOdAdvOrderItemDtl.add(objAdvOrderItemDtl);
					}
				}
			}

			// for q data
			sqlBuilder.setLength(0);
			sqlBuilder
					.append("select a.strAdvBookingNo,DATE_FORMAT(a.dteAdvBookingDate,'%d-%m-%Y') as dteAdvBookingDate,DATE_FORMAT(a.dteOrderFor,'%d-%m-%Y') as  dteOrderFor,ifnull(f.strCustomerName,'NA') as strCustomerName ,f.longMobileNo "
							+ ",b.strItemCode,b.strItemName,d.strCharCode,ifnull(d.strCharName,'') as strCharName,ifnull(c.strCharValues,'') as strCharValues, "
							+ "sum(b.dblQuantity) as dblQuantity ,sum(b.dblAmount)/sum(b.dblQuantity) as dblRate,sum(b.dblAmount) as dblAmount,sum(b.dblWeight) as dblWeight, "
							+ "e.dblAdvDeposite "
							+ "from tblqadvbookbillhd a "
							+ "inner join tblqadvbookbilldtl b on a.strAdvBookingNo=b.strAdvBookingNo and a.strClientCode=b.strClientCode "
							+ "left outer join tblqadvbookbillchardtl c on a.strAdvBookingNo=c.strAdvBookingNo and b.strItemCode=c.strItemCode and a.strClientCode=c.strClientCode "
							+ "left outer join tblcharactersticsmaster d on c.strCharCode=d.strCharCode and c.strClientCode=d.strClientCode "
							+ "left outer join tblqadvancereceipthd e on a.strAdvBookingNo=e.strAdvBookingNo and a.strClientCode=e.strClientCode "
							+ "left outer join tblcustomermaster f on a.strCustomerCode=f.strCustomerCode and a.strClientCode=f.strClientCode "
							+ "where date(a.dteOrderFor) between '"
							+ fromDate
							+ "' and '" + toDate + "' ");
			if (!strPOSCode.equals("All")) {
				sqlBuilder.append(" and a.strPOSCode='" + strPOSCode + "'  ");
			}
			if (!orderType.equalsIgnoreCase("All")
					&& orderType.equalsIgnoreCase("Advance Order")) {
				sqlBuilder.append(" and a.strUrgentOrder='N'  ");
			} else if (!orderType.equalsIgnoreCase("All")
					&& orderType.equalsIgnoreCase("Urgent Order")) {
				sqlBuilder.append(" and a.strUrgentOrder='Y'  ");
			}
			sqlBuilder
					.append("group by a.strAdvBookingNo,b.strItemCode,c.strCharCode,c.strCharValues "
							+ "order by a.strAdvBookingNo,b.strItemCode,c.strCharCode,c.strCharValues ");

			itemCode = "";
			advOrderNO = "";
			qAdvanceOrder = webPOSSessionFactory.getCurrentSession()
					.createSQLQuery(sqlBuilder.toString());
			list = qAdvanceOrder.list();
			if (list.size() > 0) {
				for (int i = 0; i < list.size(); i++) {
					Object[] ob = (Object[]) list.get(i);
					if (itemCode.equals(ob[5].toString())
							&& advOrderNO.equals(ob[0].toString())) {
						objAdvOrderItemDtl
								.setStrCharNameValuePair(objAdvOrderItemDtl
										.getStrCharNameValuePair()
										+ "  "
										+ ob[8].toString()
										+ "-->"
										+ ob[9].toString());
					} else {
						objAdvOrderItemDtl = new clsAdvOrderItemDtl();

						if (advOrderNO == "") {
							totalAdvAmt += Double
									.parseDouble(ob[14].toString());
						} else if (advOrderNO.equals(ob[0].toString())) {
						} else if (!advOrderNO.equals(ob[0].toString())) {
							totalAdvAmt += Double
									.parseDouble(ob[14].toString());
						}
						itemCode = ob[5].toString();
						advOrderNO = ob[0].toString();

						objAdvOrderItemDtl.setStrAdvBookingNo(ob[0].toString());
						objAdvOrderItemDtl.setDteAdvBookingDate(ob[1]
								.toString());
						objAdvOrderItemDtl.setDteOrderFor(ob[2].toString());
						objAdvOrderItemDtl.setStrCustomerName(ob[3].toString());
						objAdvOrderItemDtl.setLongMobileNo(ob[4].toString());
						objAdvOrderItemDtl.setStrItemCode(ob[5].toString());
						objAdvOrderItemDtl.setStrItemName(ob[6].toString());
						objAdvOrderItemDtl.setStrCharCode(ob[7].toString());
						objAdvOrderItemDtl.setStrCharName(ob[8].toString());
						objAdvOrderItemDtl.setStrCharValues(ob[9].toString());
						objAdvOrderItemDtl.setDblQuantity(Double
								.parseDouble(ob[10].toString()));
						objAdvOrderItemDtl.setDblRate(Double.parseDouble(ob[11]
								.toString()));
						objAdvOrderItemDtl.setDblAmount(Double
								.parseDouble(ob[12].toString()));
						objAdvOrderItemDtl.setDblWeight(Double
								.parseDouble(ob[13].toString()));
						objAdvOrderItemDtl.setDblAdvDeposite(Double
								.parseDouble(ob[14].toString()));
						objAdvOrderItemDtl.setDblTotalAmount(Double
								.parseDouble(ob[12].toString()));
						objAdvOrderItemDtl.setStrCharNameValuePair(ob[8]
								.toString() + "-->" + ob[9].toString());

						listOdAdvOrderItemDtl.add(objAdvOrderItemDtl);
					}
				}
			}
			try {
				Gson gson = new Gson();
				Type type = new TypeToken<List<clsAdvOrderItemDtl>>() {
				}.getType();
				String gsonarrTempListReport = gson.toJson(
						listOdAdvOrderItemDtl, type);
				jOBjRet.put("ListAdvanceOrder", gsonarrTempListReport);

			} catch (Exception e) {
				e.printStackTrace();
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		return jOBjRet;
	}

	
	public JSONObject funItemMasterListingReport(String fromDate,
			String toDate, String strPOSCode, String strShiftNo,
			String strUserCode) {
		JSONArray jArr = new JSONArray();
		JSONObject jOBjRet = new JSONObject();

		try {

			List<clsBillDtl> listOfItemMasterListing = new ArrayList<>();
			StringBuilder sqlBuilder = new StringBuilder();

			sqlBuilder.setLength(0);
			sqlBuilder
					.append("select a.strItemCode,a.strItemName,b.strSubGroupName,c.strGroupName,ifnull(a.strTaxIndicator,'') "
							+ "from tblitemmaster a,tblsubgrouphd b,tblgrouphd c "
							+ "where a.strSubGroupCode=b.strSubGroupCode "
							+ "and b.strGroupCode=c.strGroupCode "
							+ "group by c.strGroupCode,b.strSubGroupCode,a.strItemCode,a.strItemName "
							+ "order by c.strGroupCode,b.strSubGroupCode,a.strItemCode,a.strItemName ");
			clsBillDtl objItemDtl = null;
			Query qAdvanceOrder = webPOSSessionFactory.getCurrentSession()
					.createSQLQuery(sqlBuilder.toString());
			List list = qAdvanceOrder.list();
			if (list.size() > 0) {
				for (int i = 0; i < list.size(); i++) {
					Object[] ob = (Object[]) list.get(i);
					objItemDtl = new clsBillDtl();
					objItemDtl.setStrItemCode(ob[0].toString());
					objItemDtl.setStrItemName(ob[1].toString());
					objItemDtl.setStrSubGroupName(ob[2].toString());
					objItemDtl.setStrGroupName(ob[3].toString());
					objItemDtl.setStrTaxIndicator(ob[4].toString());

					listOfItemMasterListing.add(objItemDtl);
				}
			}
			try {
				Gson gson = new Gson();
				Type type = new TypeToken<List<clsBillDtl>>() {
				}.getType();
				String gsonarrTempListReport = gson.toJson(
						listOfItemMasterListing, type);
				jOBjRet.put("ListItemMaster", gsonarrTempListReport);

			} catch (Exception e) {
				e.printStackTrace();
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return jOBjRet;
	}

	private void funGenerateSettlementWiseSales(List list) {
		try {
			if (list.size() > 0) {
				for (int i = 0; i < list.size(); i++) {
					Object[] obj = (Object[]) list.get(i);

					String posCode = obj[0].toString();
					String posName = obj[2].toString();
					String settlementCode = obj[1].toString();
					String settlementDesc = obj[3].toString();
					double settlementAmt = Double
							.parseDouble(obj[4].toString());
					String settlementType = obj[6].toString();

					if (mapPOSDtlForSettlement.containsKey(posCode)) {
						List<Map<String, clsBillSettlementDtl>> listOfSettlement = mapPOSDtlForSettlement
								.get(posCode);
						boolean isSettlementExists = false;
						int settlementIndex = 0;
						for (int j = 0; j < listOfSettlement.size(); j++) {
							if (listOfSettlement.get(j).containsKey(
									settlementCode)) {
								isSettlementExists = true;
								settlementIndex = j;
								break;
							}
						}
						if (isSettlementExists) {
							Map<String, clsBillSettlementDtl> mapSettlementCodeDtl = listOfSettlement
									.get(settlementIndex);
							clsBillSettlementDtl objBillSettlementDtl = mapSettlementCodeDtl
									.get(settlementCode);
							objBillSettlementDtl
									.setStrSettlementCode(settlementCode);
							objBillSettlementDtl
									.setDblSettlementAmt(objBillSettlementDtl
											.getDblSettlementAmt()
											+ settlementAmt);
							objBillSettlementDtl.setPosName(posName);
							TotSale = TotSale + settlementAmt;
						} else {
							Map<String, clsBillSettlementDtl> mapSettlementCodeDtl = new LinkedHashMap<>();
							clsBillSettlementDtl objBillSettlementDtl = new clsBillSettlementDtl(
									settlementCode, settlementDesc,
									settlementAmt, posName, settlementType);
							mapSettlementCodeDtl.put(settlementCode,
									objBillSettlementDtl);
							listOfSettlement.add(mapSettlementCodeDtl);
							TotSale = TotSale + settlementAmt;
						}
					} else {
						List<Map<String, clsBillSettlementDtl>> listOfSettelment = new ArrayList<>();
						Map<String, clsBillSettlementDtl> mapSettlementCodeDtl = new LinkedHashMap<>();
						clsBillSettlementDtl objBillSettlementDtl = new clsBillSettlementDtl(
								settlementCode, settlementDesc, settlementAmt,
								posName, settlementType);
						mapSettlementCodeDtl.put(settlementCode,
								objBillSettlementDtl);
						listOfSettelment.add(mapSettlementCodeDtl);
						TotSale = TotSale + settlementAmt;
						mapPOSDtlForSettlement.put(posCode, listOfSettelment);
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private void funGenerateItemWiseSales(List list, String fromDate,
			String toDate, String strPOSCode, String strShiftNo,
			String strUserCode, String field, String strPayMode,
			String strOperator, String strFromBill, String strToBill,
			String reportType, String Type, String Customer,
			String ConsolidatePOS, String ReportName) {
		try {
			if (list.size() > 0) {
				for (int i = 0; i < list.size(); i++) {
					Object[] obj = (Object[]) list.get(i);
					String itemCode = obj[0].toString();// itemCode
					String itemName = obj[1].toString();// itemName
					String posName = obj[2].toString();// posName
					double qty = Double.parseDouble(obj[3].toString());// qty
					double salesAmt = Double.parseDouble(obj[7].toString());// salesAmount
					double subTotal = Double.parseDouble(obj[5].toString());// subTotal
					double discAmt = Double.parseDouble(obj[8].toString());// discount
					String date = obj[9].toString();// date
					String posCode = obj[10].toString();// posCode

					String compare = itemCode;
					if (itemCode.contains("M")) {
						compare = itemName;
					} else {
						compare = itemCode;
					}

					if (mapPOSItemDtl.containsKey(posCode)) {
						Map<String, clsBillItemDtl> mapItemDtl = mapPOSItemDtl
								.get(posCode);
						if (mapItemDtl.containsKey(compare)) {
							clsBillItemDtl objItemDtl = mapItemDtl.get(compare);
							objItemDtl.setQuantity(objItemDtl.getQuantity()
									+ qty);
							objItemDtl.setAmount(objItemDtl.getAmount()
									+ salesAmt);
							objItemDtl.setSubTotal(objItemDtl.getSubTotal()
									+ subTotal);
							objItemDtl.setDiscountAmount(objItemDtl
									.getDiscountAmount() + discAmt);
						} else {
							clsBillItemDtl objItemDtl = new clsBillItemDtl(
									date, itemCode, itemName, qty, salesAmt,
									discAmt, posName, subTotal);
							mapItemDtl.put(compare, objItemDtl);
						}
					} else {
						Map<String, clsBillItemDtl> mapItemDtl = new LinkedHashMap<>();
						clsBillItemDtl objItemDtl = new clsBillItemDtl(date,
								itemCode, itemName, qty, salesAmt, discAmt,
								posName, subTotal);
						mapItemDtl.put(compare, objItemDtl);
						mapPOSItemDtl.put(posCode, mapItemDtl);
					}

					if (!itemCode.contains("M")) {
						funCreateModifierQuery(itemCode, fromDate, toDate,
								strPOSCode, strShiftNo, strUserCode, field,
								strPayMode, strOperator, strFromBill,
								strToBill, reportType, Type, Customer,
								ConsolidatePOS, ReportName);
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private void funCreateModifierQuery(String itemCode, String fromDate,
			String toDate, String strPOSCode, String strShiftNo,
			String strUserCode, String field, String strPayMode,
			String strOperator, String strFromBill, String strToBill,
			String reportType, String Type, String Customer,
			String ConsolidatePOS, String ReportName) {
		try {
			String sqlModLive = "select a.strItemCode,a.strModifierName,c.strPOSName"
					+ ",sum(a.dblQuantity),'0.0',sum(a.dblAmount)-sum(a.dblDiscAmt),'"
					+ strUserCode
					+ "' "
					+ ",sum(a.dblAmount),sum(a.dblDiscAmt),DATE_FORMAT(date(b.dteBillDate),'%d-%m-%Y'),b.strPOSCode "
					+ "from tblbillmodifierdtl a,tblbillhd b,tblposmaster c\n"
					+ "where a.strBillNo=b.strBillNo and b.strPOSCode=c.strPosCode  \n"
					+ "and date( b.dteBillDate ) BETWEEN '"
					+ fromDate
					+ "' AND '"
					+ toDate
					+ "' "
					+ "and left(a.strItemCode,7)='"
					+ itemCode + "' ";

			// String pos = funGetSelectedPosCode();
			String sqlFilters = "";
			if (!strPOSCode.equals("All") && !strOperator.equals("All")) {
				sqlFilters += " AND b.strPOSCode = '" + strPOSCode
						+ "' and b.strUserCreated='" + strOperator + "' ";
			} else if (!strPOSCode.equals("All") && strOperator.equals("All")) {
				sqlFilters += " AND b.strPOSCode = '" + strPOSCode + "' ";
			} else if (strPOSCode.equals("All") && !strOperator.equals("All")) {
				sqlFilters += " AND b.strUserCreated='"
						+ strOperator.toString() + "' ";
			}
			if (strFromBill.length() == 0 && strToBill.length() == 0) {

			} else {
				sqlFilters += " and a.strbillno between '" + strFromBill + "' "
						+ " and '" + strToBill + "'";
			}

			sqlFilters += " AND b.intShiftCode = '" + strShiftNo + "' ";

			sqlFilters += " group by a.strItemCode,a.strModifierName,c.strPOSName  "
					+ " order by b.dteBillDate ";

			sqlModLive = sqlModLive + " " + sqlFilters;

			Query queryModLive = webPOSSessionFactory.getCurrentSession()
					.createSQLQuery(sqlModLive.toString());
			List listModLive = queryModLive.list();
			funGenerateItemWiseSales(listModLive, fromDate, toDate, strPOSCode,
					strShiftNo, strUserCode, field, strPayMode, strOperator,
					strFromBill, strToBill, reportType, Type, Customer,
					ConsolidatePOS, ReportName);

			/*
			 * ResultSet
			 * rs=clsGlobalVarClass.dbMysql.executeResultSet(sqlModLive
			 * .toString()); funGenerateItemWiseSales(rs);
			 */

			// qmodifiers
			String sqlModQFile = "select a.strItemCode,a.strModifierName,c.strPOSName"
					+ ",sum(a.dblQuantity),'0.0',sum(a.dblAmount)-sum(a.dblDiscAmt),'"
					+ strUserCode
					+ "' "
					+ ",sum(a.dblAmount),sum(a.dblDiscAmt),DATE_FORMAT(date(b.dteBillDate),'%d-%m-%Y'),b.strPOSCode "
					+ "from tblqbillmodifierdtl a,tblqbillhd b,tblposmaster c\n"
					+ "where a.strBillNo=b.strBillNo and b.strPOSCode=c.strPosCode  \n"
					+ "and date( b.dteBillDate ) BETWEEN '"
					+ fromDate
					+ "' AND '"
					+ toDate
					+ "' "
					+ "and left(a.strItemCode,7)='"
					+ itemCode + "' ";

			sqlModQFile = sqlModQFile + " " + sqlFilters;

			Query queryModLiveQ = webPOSSessionFactory.getCurrentSession()
					.createSQLQuery(sqlModQFile.toString());
			List listModLiveQ = queryModLiveQ.list();
			funGenerateItemWiseSales(listModLiveQ, fromDate, toDate,
					strPOSCode, strShiftNo, strUserCode, field, strPayMode,
					strOperator, strFromBill, strToBill, reportType, Type,
					Customer, ConsolidatePOS, ReportName);

		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private void funGenerateMenuHeadWiseSales(List list) {
		try {
			if (list.size() > 0) {
				for (int i = 0; i < list.size(); i++) {
					Object[] obj = (Object[]) list.get(i);

					String posCode = obj[9].toString();// posCode
					String posName = obj[4].toString();// posName
					String menuCode = obj[0].toString();// menuCode
					String menuName = obj[1].toString();// menuName
					double qty = Double.parseDouble(obj[2].toString());// qty
					double salesAmt = Double.parseDouble(obj[7].toString());// salesAmt
					double subTotal = Double.parseDouble(obj[3].toString());// subTotal
					double discAmt = Double.parseDouble(obj[8].toString());// disc

					if (mapPOSMenuHeadDtl.containsKey(posCode)) {
						Map<String, clsBillItemDtl> mapItemDtl = mapPOSMenuHeadDtl
								.get(posCode);
						if (mapItemDtl.containsKey(menuCode)) {
							clsBillItemDtl objItemDtl = mapItemDtl
									.get(menuCode);
							objItemDtl.setQuantity(objItemDtl.getQuantity()
									+ qty);
							objItemDtl.setAmount(objItemDtl.getAmount()
									+ salesAmt);
							objItemDtl.setSubTotal(objItemDtl.getSubTotal()
									+ subTotal);
							objItemDtl.setDiscountAmount(objItemDtl
									.getDiscountAmount() + discAmt);
						} else {
							clsBillItemDtl objItemDtl = new clsBillItemDtl(qty,
									salesAmt, discAmt, posName, subTotal,
									menuCode, menuName);
							mapItemDtl.put(menuCode, objItemDtl);
						}
					} else {
						Map<String, clsBillItemDtl> mapItemDtl = new LinkedHashMap<>();
						clsBillItemDtl objItemDtl = new clsBillItemDtl(qty,
								salesAmt, discAmt, posName, subTotal, menuCode,
								menuName);
						mapItemDtl.put(menuCode, objItemDtl);
						mapPOSMenuHeadDtl.put(posCode, mapItemDtl);
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private void funGenerateGroupWiseSales(List list) {
		try {
			if (list.size() > 0) {
				for (int i = 0; i < list.size(); i++) {
					Object[] obj = (Object[]) list.get(i);

					if (mapPOSDtlForGroupSubGroup
							.containsKey(obj[9].toString()))// posCode
					{
						String posCode = obj[9].toString();
						String groupCode = obj[0].toString();
						List<Map<String, clsGroupSubGroupWiseSales>> listOfGroup = mapPOSDtlForGroupSubGroup
								.get(posCode);
						boolean isGroupExists = false;
						int groupIndex = 0;
						for (int j = 0; j < listOfGroup.size(); j++) {
							if (listOfGroup.get(j).containsKey(groupCode)) {
								isGroupExists = true;
								groupIndex = j;
								break;
							}
						}
						if (isGroupExists) {
							Map<String, clsGroupSubGroupWiseSales> mapGroupCodeDtl = listOfGroup
									.get(groupIndex);
							clsGroupSubGroupWiseSales objGroupCodeDtl = mapGroupCodeDtl
									.get(groupCode);
							objGroupCodeDtl.setGroupCode(obj[0].toString());
							objGroupCodeDtl.setGroupName(obj[1].toString());
							objGroupCodeDtl.setPosName(obj[4].toString());
							objGroupCodeDtl.setQty(objGroupCodeDtl.getQty()
									+ Double.parseDouble(obj[2].toString()));
							objGroupCodeDtl.setSubTotal(objGroupCodeDtl
									.getSubTotal()
									+ Double.parseDouble(obj[3].toString()));
							objGroupCodeDtl.setSalesAmt(objGroupCodeDtl
									.getSalesAmt()
									+ Double.parseDouble(obj[7].toString()));
							objGroupCodeDtl.setDiscAmt(objGroupCodeDtl
									.getDiscAmt()
									+ Double.parseDouble(obj[8].toString()));
							objGroupCodeDtl.setGrandTotal(objGroupCodeDtl
									.getGrandTotal()
									+ Double.parseDouble(obj[10].toString()));
						} else {
							Map<String, clsGroupSubGroupWiseSales> mapGroupCodeDtl = new LinkedHashMap<>();
							clsGroupSubGroupWiseSales objGroupCodeDtl = new clsGroupSubGroupWiseSales(
									obj[0].toString(), obj[1].toString(),
									obj[4].toString(),
									Double.parseDouble(obj[2].toString()),
									Double.parseDouble(obj[3].toString()),
									Double.parseDouble(obj[7].toString()),
									Double.parseDouble(obj[8].toString()),
									Double.parseDouble(obj[10].toString()));
							mapGroupCodeDtl.put(obj[0].toString(),
									objGroupCodeDtl);
							listOfGroup.add(mapGroupCodeDtl);
						}
					} else {
						List<Map<String, clsGroupSubGroupWiseSales>> listOfGroupDtl = new ArrayList<>();
						Map<String, clsGroupSubGroupWiseSales> mapGroupCodeDtl = new LinkedHashMap<>();
						clsGroupSubGroupWiseSales objGroupCodeDtl = new clsGroupSubGroupWiseSales(
								obj[0].toString(), obj[1].toString(),
								obj[4].toString(), Double.parseDouble(obj[2]
										.toString()), Double.parseDouble(obj[3]
										.toString()), Double.parseDouble(obj[7]
										.toString()), Double.parseDouble(obj[8]
										.toString()),
								Double.parseDouble(obj[10].toString()));
						mapGroupCodeDtl.put(obj[0].toString(), objGroupCodeDtl);
						listOfGroupDtl.add(mapGroupCodeDtl);
						mapPOSDtlForGroupSubGroup.put(obj[9].toString(),
								listOfGroupDtl);
					}
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private void funGenerateSubGroupWiseSales(List list) {
		try {
			if (list.size() > 0) {
				for (int i = 0; i < list.size(); i++) {
					Object[] obj = (Object[]) list.get(i);
					if (mapPOSDtlForGroupSubGroup
							.containsKey(obj[9].toString()))// posCode
					{
						String posCode = obj[9].toString();
						String groupCode = obj[0].toString();
						List<Map<String, clsGroupSubGroupWiseSales>> listOfGroup = mapPOSDtlForGroupSubGroup
								.get(posCode);

						boolean isGroupExists = false;
						int groupIndex = 0;
						for (int j = 0; j < listOfGroup.size(); j++) {
							if (listOfGroup.get(j).containsKey(groupCode)) {
								isGroupExists = true;
								groupIndex = j;
								break;
							}
						}
						if (isGroupExists) {
							Map<String, clsGroupSubGroupWiseSales> mapGroupCodeDtl = listOfGroup
									.get(groupIndex);
							clsGroupSubGroupWiseSales objGroupCodeDtl = mapGroupCodeDtl
									.get(groupCode);
							objGroupCodeDtl.setGroupCode(obj[0].toString());
							objGroupCodeDtl.setGroupName(obj[1].toString());
							objGroupCodeDtl.setPosName(obj[4].toString());
							objGroupCodeDtl.setQty(objGroupCodeDtl.getQty()
									+ Double.parseDouble(obj[2].toString()));
							objGroupCodeDtl.setSubTotal(objGroupCodeDtl
									.getSubTotal()
									+ Double.parseDouble(obj[3].toString()));
							objGroupCodeDtl.setSalesAmt(objGroupCodeDtl
									.getSalesAmt()
									+ Double.parseDouble(obj[7].toString()));
							objGroupCodeDtl.setDiscAmt(objGroupCodeDtl
									.getDiscAmt()
									+ Double.parseDouble(obj[8].toString()));
							objGroupCodeDtl.setGrandTotal(objGroupCodeDtl
									.getGrandTotal() + 0.00);
						} else {
							Map<String, clsGroupSubGroupWiseSales> mapGroupCodeDtl = new LinkedHashMap<>();
							clsGroupSubGroupWiseSales objGroupCodeDtl = new clsGroupSubGroupWiseSales(
									obj[0].toString(), obj[1].toString(),
									obj[4].toString(),
									Double.parseDouble(obj[2].toString()),
									Double.parseDouble(obj[3].toString()),
									Double.parseDouble(obj[7].toString()),
									Double.parseDouble(obj[8].toString()), 0.00);
							mapGroupCodeDtl.put(obj[0].toString(),
									objGroupCodeDtl);
							listOfGroup.add(mapGroupCodeDtl);
						}
					} else {
						List<Map<String, clsGroupSubGroupWiseSales>> listOfGroupDtl = new ArrayList<>();
						Map<String, clsGroupSubGroupWiseSales> mapGroupCodeDtl = new LinkedHashMap<>();
						clsGroupSubGroupWiseSales objGroupCodeDtl = new clsGroupSubGroupWiseSales(
								obj[0].toString(), obj[1].toString(),
								obj[4].toString(), Double.parseDouble(obj[2]
										.toString()), Double.parseDouble(obj[3]
										.toString()), Double.parseDouble(obj[7]
										.toString()), Double.parseDouble(obj[8]
										.toString()), 0.00);
						mapGroupCodeDtl.put(obj[0].toString(), objGroupCodeDtl);
						listOfGroupDtl.add(mapGroupCodeDtl);
						mapPOSDtlForGroupSubGroup.put(obj[9].toString(),
								listOfGroupDtl);
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private void funGenerateWaiterWiseSales(List list) {
		try {
			if (list.size() > 0) {
				for (int i = 0; i < list.size(); i++) {
					Object[] obj = (Object[]) list.get(i);
					String waiterCode = obj[5].toString();// waiterNo
					String waiterShortName = obj[1].toString();// waiterShortName
					String waiterFullName = obj[2].toString();// waiterFullName
					String posCode = obj[6].toString();// posCode
					String posName = obj[0].toString();// posName
					double salesAmount = Double.parseDouble(obj[3].toString());// salesAmount

					if (mapPOSWaiterWiseSales.containsKey(posCode)) {
						Map<String, clsCommonBeanDtl> mapWaiterDtl = mapPOSWaiterWiseSales
								.get(posCode);
						if (mapWaiterDtl.containsKey(waiterCode)) {
							clsCommonBeanDtl objWaiterDtl = mapWaiterDtl
									.get(waiterCode);
							objWaiterDtl.setSaleAmount(objWaiterDtl
									.getSaleAmount() + salesAmount);
						} else {
							clsCommonBeanDtl objWaiterDtl = new clsCommonBeanDtl(
									posCode, posName, waiterCode,
									waiterShortName, waiterFullName,
									salesAmount);
							mapWaiterDtl.put(waiterCode, objWaiterDtl);
						}
					} else {
						Map<String, clsCommonBeanDtl> mapWaiterDtl = new LinkedHashMap<>();
						clsCommonBeanDtl objWaiterDtl = new clsCommonBeanDtl(
								posCode, posName, waiterCode, waiterShortName,
								waiterFullName, salesAmount);
						mapWaiterDtl.put(waiterCode, objWaiterDtl);
						mapPOSWaiterWiseSales.put(posCode, mapWaiterDtl);
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private void funGenerateDelBoyWiseSales(List list) {
		try {
			if (list.size() > 0) {
				for (int i = 0; i < list.size(); i++) {
					Object[] obj = (Object[]) list.get(i);

					String dbCode = obj[0].toString(); // dbCode
					String dbName = obj[1].toString();// dbName
					String posCode = obj[6].toString();// posCode
					String posName = obj[2].toString();// posName
					double salesAmount = Double.parseDouble(obj[3].toString());// salesAmount
					double delCharges = Double.parseDouble(obj[4].toString());// delCharges

					if (mapPOSDeliveryBoyWise.containsKey(posCode)) {
						Map<String, clsCommonBeanDtl> mapDBDtl = mapPOSDeliveryBoyWise
								.get(posCode);
						if (mapDBDtl.containsKey(dbCode)) {
							clsCommonBeanDtl objDelBoyDtl = mapDBDtl
									.get(dbCode);
							objDelBoyDtl.setSaleAmount(objDelBoyDtl
									.getSaleAmount() + salesAmount);
							objDelBoyDtl.setDelCharges(objDelBoyDtl
									.getDelCharges() + delCharges);
						} else {
							clsCommonBeanDtl objDBDtl = new clsCommonBeanDtl(
									posCode, posName, salesAmount, dbCode,
									dbName, delCharges);
							mapDBDtl.put(dbCode, objDBDtl);
						}
					} else {
						Map<String, clsCommonBeanDtl> mapDBDtl = new LinkedHashMap<>();
						clsCommonBeanDtl objDBDtl = new clsCommonBeanDtl(
								posCode, posName, salesAmount, dbCode, dbName,
								delCharges);
						mapDBDtl.put(dbCode, objDBDtl);
						mapPOSDeliveryBoyWise.put(posCode, mapDBDtl);
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private void funGenerateCostCenterWiseSales(List list) {
		try {
			if (list.size() > 0) {
				for (int i = 0; i < list.size(); i++) {
					Object[] obj = (Object[]) list.get(i);

					String costCenterCode = obj[0].toString();// ccCode
					String costCenterName = obj[1].toString();// ccName
					String posCode = obj[9].toString();// posCode
					String posName = obj[4].toString();// posName
					double qty = Double.parseDouble(obj[2].toString());// qty
					double subTotal = Double.parseDouble(obj[3].toString());// subTotal
					double salesAmount = Double.parseDouble(obj[7].toString());// salesAmount
					double discAmt = Double.parseDouble(obj[8].toString());// disc

					if (mapPOSCostCenterWiseSales.containsKey(posCode)) {
						Map<String, clsCommonBeanDtl> mapCCDtl = mapPOSCostCenterWiseSales
								.get(posCode);
						if (mapCCDtl.containsKey(costCenterCode)) {
							clsCommonBeanDtl objCCDtl = mapCCDtl
									.get(costCenterCode);

							objCCDtl.setQty(objCCDtl.getQty() + qty);
							objCCDtl.setSubTotal(objCCDtl.getSubTotal()
									+ subTotal);
							objCCDtl.setSaleAmount(objCCDtl.getSaleAmount()
									+ salesAmount);
							objCCDtl.setDiscAmount(objCCDtl.getDiscAmount()
									+ discAmt);
						} else {
							clsCommonBeanDtl objCCDtl = new clsCommonBeanDtl(
									posCode, posName, qty, salesAmount,
									subTotal, costCenterCode, costCenterName,
									discAmt);
							mapCCDtl.put(costCenterCode, objCCDtl);
						}
					} else {
						Map<String, clsCommonBeanDtl> mapCCDtl = new LinkedHashMap<>();
						clsCommonBeanDtl objCCDtl = new clsCommonBeanDtl(
								posCode, posName, qty, salesAmount, subTotal,
								costCenterCode, costCenterName, discAmt);
						mapCCDtl.put(costCenterCode, objCCDtl);

						mapPOSCostCenterWiseSales.put(posCode, mapCCDtl);
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private void funGenerateTableWiseSales(List list)

	{
		try {
			if (list.size() > 0) {
				for (int i = 0; i < list.size(); i++) {
					Object[] obj = (Object[]) list.get(i);
					String posName = obj[0].toString();// posName
					String tableName = obj[1].toString();// tableName
					double saleAmount = Double.parseDouble(obj[3].toString());// salesAmount
					String posCode = obj[4].toString();// posCode
					String tableNo = obj[9].toString();// tableNo

					if (mapPOSTableWiseSales.containsKey(posCode)) {
						Map<String, clsCommonBeanDtl> mapTblDtl = mapPOSTableWiseSales
								.get(posCode);
						if (mapTblDtl.containsKey(tableNo)) {
							clsCommonBeanDtl objTblDtl = mapTblDtl.get(tableNo);

							objTblDtl.setSaleAmount(objTblDtl.getSaleAmount()
									+ saleAmount);
						} else {
							clsCommonBeanDtl objTblDtl = new clsCommonBeanDtl(
									posCode, posName, saleAmount, tableNo,
									tableName);
							mapTblDtl.put(tableNo, objTblDtl);
						}
					} else {
						Map<String, clsCommonBeanDtl> mapTblDtl = new LinkedHashMap<>();
						clsCommonBeanDtl objTblDtl = new clsCommonBeanDtl(
								posCode, posName, saleAmount, tableNo,
								tableName);
						mapTblDtl.put(tableNo, objTblDtl);

						mapPOSTableWiseSales.put(posCode, mapTblDtl);
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private void funGenerateHourlyWiseSales(List list) {
		try {
			if (list.size() > 0) {
				for (int i = 0; i < list.size(); i++) {
					Object[] obj = (Object[]) list.get(i);

					String startHour = obj[0].toString();// startHour
					String endHour = obj[1].toString();// endHour
					double noOfBills = Double.parseDouble(obj[2].toString());
					double saleAmount = Double.parseDouble(obj[3].toString());

					if (mapPOSHourlyWiseSales.containsKey(startHour)) {
						Map<String, clsCommonBeanDtl> mapHrlyDtl = mapPOSHourlyWiseSales
								.get(startHour);
						if (mapHrlyDtl.containsKey(startHour)) {
							clsCommonBeanDtl objHrlyDtl = mapHrlyDtl
									.get(startHour);

							objHrlyDtl.setNoOfBills(objHrlyDtl.getNoOfBills()
									+ noOfBills);
							objHrlyDtl.setSaleAmount(objHrlyDtl.getSaleAmount()
									+ saleAmount);
						} else {
							clsCommonBeanDtl objHrlyDtl = new clsCommonBeanDtl(
									saleAmount, startHour, endHour, noOfBills);
							mapHrlyDtl.put(startHour, objHrlyDtl);
						}
					} else {
						Map<String, clsCommonBeanDtl> mapHrlyDtl = new LinkedHashMap<>();
						clsCommonBeanDtl objHrlyDtl = new clsCommonBeanDtl(
								saleAmount, startHour, endHour, noOfBills);
						mapHrlyDtl.put(startHour, objHrlyDtl);
						mapPOSHourlyWiseSales.put(startHour, mapHrlyDtl);
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private void funGenerateAreaWiseSales(List list) {
		try {
			if (list.size() > 0) {
				for (int i = 0; i < list.size(); i++) {
					Object[] obj = (Object[]) list.get(i);

					String posCode = obj[9].toString();// posCode
					String areaCode = obj[10].toString();// areaCode
					String posName = obj[0].toString();// posName
					String areaName = obj[1].toString();// areaName
					double saleAmount = Double.parseDouble(obj[3].toString());

					if (mapPOSAreaWiseSales.containsKey(posCode)) {
						Map<String, clsCommonBeanDtl> mapAreaDtl = mapPOSAreaWiseSales
								.get(posCode);
						if (mapAreaDtl.containsKey(areaCode)) {
							clsCommonBeanDtl objAreaDtl = mapAreaDtl
									.get(areaCode);
							objAreaDtl.setSaleAmount(objAreaDtl.getSaleAmount()
									+ saleAmount);
						} else {
							clsCommonBeanDtl objAreaDtl = new clsCommonBeanDtl(
									posCode, posName, areaCode, areaName,
									saleAmount);
							mapAreaDtl.put(areaCode, objAreaDtl);
						}
					} else {
						Map<String, clsCommonBeanDtl> mapAreaDtl = new LinkedHashMap<>();
						clsCommonBeanDtl objAreaDtl = new clsCommonBeanDtl(
								posCode, posName, areaCode, areaName,
								saleAmount);
						mapAreaDtl.put(areaCode, objAreaDtl);
						mapPOSAreaWiseSales.put(posCode, mapAreaDtl);
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private void funGenerateModifierWiseSales(List list) {
		try {
			if (list.size() > 0) {
				for (int i = 0; i < list.size(); i++) {
					Object[] obj = (Object[]) list.get(i);

					String posCode = obj[6].toString();// posCode
					String posName = obj[2].toString();// posName
					String modiCode = obj[0].toString();// modiCode
					String modiName = obj[1].toString();// modiName
					double qty = Double.parseDouble(obj[3].toString());// qty
					double saleAmount = Double.parseDouble(obj[4].toString());// saleAmount

					if (mapPOSModifierWiseSales.containsKey(posCode)) {
						Map<String, clsCommonBeanDtl> mapModiDtl = mapPOSModifierWiseSales
								.get(posCode);
						if (mapModiDtl.containsKey(modiName)) {
							clsCommonBeanDtl objModiDtl = mapModiDtl
									.get(modiName);
							objModiDtl.setQty(objModiDtl.getQty() + qty);
							objModiDtl.setSaleAmount(objModiDtl.getSaleAmount()
									+ saleAmount);
						} else {
							clsCommonBeanDtl objModiDtl = new clsCommonBeanDtl(
									posCode, posName, qty, saleAmount,
									modiCode, modiName);
							mapModiDtl.put(modiName, objModiDtl);
						}
					} else {
						Map<String, clsCommonBeanDtl> mapModiDtl = new LinkedHashMap<>();
						clsCommonBeanDtl objModiDtl = new clsCommonBeanDtl(
								posCode, posName, qty, saleAmount, modiCode,
								modiName);
						mapModiDtl.put(modiName, objModiDtl);
						mapPOSModifierWiseSales.put(posCode, mapModiDtl);
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private void funGenerateMonthWiseSales(List list) {
		try {
			if (list.size() > 0) {
				for (int i = 0; i < list.size(); i++) {
					Object[] obj = (Object[]) list.get(i);
					String posCode = obj[5].toString();// posCode
					String posName = obj[0].toString(); // posName
					String monthCode = obj[6].toString();// monthCode
					String monthName = obj[1].toString();// monthName
					String year = obj[2].toString();// year
					double saleAmount = Double.parseDouble(obj[3].toString()); // saleAmount

					if (mapPOSMonthWiseSales.containsKey(year)) {
						Map<String, clsCommonBeanDtl> mapMonthDtl = mapPOSMonthWiseSales
								.get(year);
						if (mapMonthDtl.containsKey(monthCode)) {
							clsCommonBeanDtl objMonthDtl = mapMonthDtl
									.get(monthCode);
							objMonthDtl.setSaleAmount(objMonthDtl
									.getSaleAmount() + saleAmount);
							mapMonthDtl.put(monthCode, objMonthDtl);
						} else {
							clsCommonBeanDtl objMonthDtl = new clsCommonBeanDtl(
									saleAmount, posCode, posName, monthCode,
									monthName, year);
							mapMonthDtl.put(monthCode, objMonthDtl);
						}
					} else {
						Map<String, clsCommonBeanDtl> mapMonthDtl = new LinkedHashMap<>();
						clsCommonBeanDtl objMonthDtl = new clsCommonBeanDtl(
								saleAmount, posCode, posName, monthCode,
								monthName, year);
						mapMonthDtl.put(monthCode, objMonthDtl);
						mapPOSMonthWiseSales.put(year, mapMonthDtl);
					}
				}
			}
		} catch (Exception ex) {
			ex.printStackTrace();
		}
	}

	public JSONObject funDayEndFlashReportDtl(String fromDate, String toDate,
			String strPOSCode) {
		List listRet = new ArrayList();
		StringBuilder sbSqlLive = new StringBuilder();
		StringBuilder sbSqlQFile = new StringBuilder();
		StringBuilder sbSqlFilters = new StringBuilder();
		JSONArray jArr = new JSONArray();
		JSONObject jOBjRet = new JSONObject();
		double sumtSale = 0.00, sumFloat = 0.00, sumCash = 0.00, sumAdvance = 0.00, sumTransferIn = 0.00, sumTotalReceipt = 0.00;
		double sumPay = 0.00, sumWithDrawal = 0.00, sumTransferOut = 0.00, sumTotalPay = 0.00, sumCashInhand = 0.00;
		double sumHdAmt = 0.00, sumDining = 0.00, sumTaleAway = 0.00, sumNoOfBill = 0.00, sumNoOfVoidedBill = 0.00, sumNoOfModifyBill = 0.00, sumRefund = 0.00;

		sbSqlLive.setLength(0);
		sbSqlQFile.setLength(0);
		sbSqlFilters.setLength(0);

		try {

			sbSqlLive
					.append("select b.strPOSName,DATE_FORMAT(date(a.dtePOSDate),'%d-%m-%Y'),dblHDAmt,dblDiningAmt,dblTakeAway,dblTotalSale,dblFloat"
							+ ",dblCash,dblAdvance,dblTransferIn,dblTotalReceipt,dblPayments,dblWithdrawal,dblTransferOut,dblRefund"
							+ ",dblTotalPay,dblCashInHand,dblNoOfBill,dblNoOfVoidedBill,dblNoOfModifyBill "
							+ " from tbldayendprocess a,tblposmaster b where a.strPOSCode=b.strPOSCode "
							+ "and date(a.dtePOSDate) between '"
							+ fromDate
							+ "' and '" + toDate + "'  ");

			if (!strPOSCode.equalsIgnoreCase("All")) {
				sbSqlFilters
						.append(" AND a.strPOSCode = '" + strPOSCode + "' ");
			}

			sbSqlLive.append(sbSqlFilters);
			Query querySqlLive = webPOSSessionFactory.getCurrentSession()
					.createSQLQuery(sbSqlLive.toString());
			List listSqlLive = querySqlLive.list();
			if (listSqlLive.size() > 0) {

				for (int i = 0; i < listSqlLive.size(); i++) {
					Object[] obj = (Object[]) listSqlLive.get(i);
					JSONObject jObj = new JSONObject();
					jObj.put("strPOSName", obj[0].toString());
					jObj.put("dtePOSDate", obj[1].toString());
					jObj.put("dblHDAmt", obj[2].toString());
					jObj.put("dblDiningAmt", obj[3].toString());
					jObj.put("dblTakeAway", obj[4].toString());
					jObj.put("dblTotalSale", obj[5].toString());
					jObj.put("dblFloat", obj[6].toString());
					jObj.put("dblCash", obj[7].toString());
					jObj.put("dblAdvance", obj[8].toString());
					jObj.put("dblTransferIn", obj[9].toString());
					jObj.put("dblTotalReceipt", obj[10].toString());
					jObj.put("dblPayments", obj[11].toString());
					jObj.put("dblWithdrawal", obj[12].toString());
					jObj.put("dblTransferOut", obj[13].toString());
					jObj.put("dblRefund", obj[14].toString());
					jObj.put("dblTotalPay", obj[15].toString());
					jObj.put("dblCashInHand", obj[16].toString());
					jObj.put("dblNoOfBill", obj[17].toString());
					jObj.put("dblNoOfVoidedBill", obj[18].toString());
					jObj.put("dblNoOfModifyBill", obj[19].toString());

					sumHdAmt += Double.parseDouble(obj[2].toString());
					sumDining += Double.parseDouble(obj[3].toString());
					sumTaleAway += Double.parseDouble(obj[4].toString());
					sumtSale += Double.parseDouble(obj[5].toString());
					sumFloat += Double.parseDouble(obj[6].toString());
					sumCash += Double.parseDouble(obj[7].toString());
					sumAdvance += Double.parseDouble(obj[8].toString());
					sumTransferIn += Double.parseDouble(obj[9].toString());
					sumTotalReceipt += Double.parseDouble(obj[10].toString());
					sumPay = sumPay += Double.parseDouble(obj[11].toString());
					sumWithDrawal += Double.parseDouble(obj[12].toString());
					sumTransferOut += Double.parseDouble(obj[13].toString());
					sumRefund += Double.parseDouble(obj[14].toString());
					sumTotalPay += Double.parseDouble(obj[15].toString());
					sumCashInhand += Double.parseDouble(obj[16].toString());
					sumNoOfBill += Double.parseDouble(obj[17].toString());
					sumNoOfVoidedBill += Double.parseDouble(obj[18].toString());
					sumNoOfModifyBill += Double.parseDouble(obj[19].toString());
					jArr.put(jObj);
				}
				// jOBjRet.put("jArr", jArr);
			}
			// listRet.add(listSqlLive);

			JSONObject jObjTatol = new JSONObject();

			jObjTatol.put("sumHdAmt", sumHdAmt);
			jObjTatol.put("sumDining", sumDining);
			jObjTatol.put("sumTaleAway", sumTaleAway);
			jObjTatol.put("sumtSale", sumtSale);
			jObjTatol.put("sumFloat", sumFloat);
			jObjTatol.put("sumCash", sumCash);
			jObjTatol.put("sumAdvance", sumAdvance);
			jObjTatol.put("sumTransferIn", sumTransferIn);
			jObjTatol.put("sumTotalReceipt", sumTotalReceipt);
			jObjTatol.put("sumPay", sumPay);
			jObjTatol.put("sumWithDrawal", sumWithDrawal);
			jObjTatol.put("sumTransferOut", sumTransferOut);
			jObjTatol.put("sumRefund", sumRefund);
			jObjTatol.put("sumTotalPay", sumTotalPay);
			jObjTatol.put("sumCashInhand", sumCashInhand);
			jObjTatol.put("sumNoOfBill", sumNoOfBill);
			jObjTatol.put("sumNoOfVoidedBill", sumNoOfVoidedBill);
			jObjTatol.put("sumNoOfModifyBill", sumNoOfModifyBill);

			jOBjRet.put("jArr", jArr);
			jOBjRet.put("jObjTatol", jObjTatol);
		} catch (Exception ex) {
			ex.printStackTrace();
		}

		return jOBjRet;

	}

	public JSONObject funDebitCardFlashReportDtl(String fromDate,
			String toDate, String strPOSCode, String auditType,
			String strShiftNo) {
		List listRet = new ArrayList();
		StringBuilder sbSqlLive = new StringBuilder();
		StringBuilder sbSqlLive1 = new StringBuilder();
		StringBuilder sbSqlLive2 = new StringBuilder();
		StringBuilder sbSqlQFile = new StringBuilder();
		StringBuilder sbSqlFilters = new StringBuilder();
		JSONArray jArr = new JSONArray();
		JSONObject jOBjRet = new JSONObject();
		JSONArray jArrColHeader = new JSONArray();
		Query querySqlLive;
		List listSqlLive;
		JSONObject jObjTatol;

		sbSqlLive.setLength(0);
		sbSqlQFile.setLength(0);
		sbSqlFilters.setLength(0);
		double total = 0.0;
		try {

			switch (auditType) {

			case "Consumption Report":

				sbSqlLive
						.append("select c.strPosName,b.strBillNo,a.strCardNo,ifnull(d.strCustomerName,''), "
								+ " date(b.dteBillDate),time(b.dteBillDate),b.dblTransactionAmt "
								+ " from tbldebitcardmaster a left outer join tblcustomermaster d on a.strCustomerCode=d.strCustomerCode, "
								+ " tbldebitcardbilldetails b,tblposmaster c "
								+ " where a.strCardNo=b.strCardNo and b.strPOSCode=c.strPosCode "
								+ " and date(b.dteBillDate) between '"
								+ fromDate + "' and '" + toDate + "' ");

				if (!strPOSCode.equalsIgnoreCase("All")) {
					sbSqlFilters.append(" AND b.strPOSCode = '" + strPOSCode
							+ "' ");
				}

				sbSqlFilters.append(" group by d.strCustomerName ");

				sbSqlLive.append(sbSqlFilters);

				querySqlLive = webPOSSessionFactory.getCurrentSession()
						.createSQLQuery(sbSqlLive.toString());
				listSqlLive = querySqlLive.list();
				if (listSqlLive.size() > 0) {

					for (int i = 0; i < listSqlLive.size(); i++) {
						Object[] obj = (Object[]) listSqlLive.get(i);
						JSONObject jObj = new JSONObject();
						jObj.put("strPOSName", obj[0].toString());
						jObj.put("strBillNo", obj[1].toString());
						jObj.put("strCardNo", obj[2].toString());
						jObj.put("strCustomerName", obj[3].toString());
						jObj.put("dteBillDate", obj[4].toString());
						jObj.put("dteBillTime", obj[5].toString());
						jObj.put("dblTransactionAmt", obj[6].toString());

						total += Double.parseDouble(obj[6].toString());

						jArr.put(jObj);
					}
				}

				jObjTatol = new JSONObject();

				jObjTatol.put("total", total);

				jOBjRet.put("jArr", jArr);
				jOBjRet.put("jObjTatol", jObjTatol);

				break;

			case "Recharge Details":

				sbSqlLive
						.append("select ifnull(d.strPosName,''),c.intRechargeNo,a.strCardNo,ifnull(b.strCustomerName,'')"
								+ " ,date(c.dteDateCreated),time(c.dteDateCreated),c.dblRechargeAmount"
								+ " ,ifnull(e.strUserCode,'NA'),ifnull(e.strUserName,'NA') "
								+ " from tbldebitcardmaster a left outer join tblcustomermaster b on a.strCustomerCode=b.strCustomerCode "
								+ " left outer join tbldebitcardrecharge c on a.strCardString=c.strCardString "
								+ " left outer join tblposmaster d on c.strPOSCode=d.strPosCode "
								+ " left outer join tbluserhd e on c.strUserCreated=e.strUserCode "
								+ " where date(c.dteDateCreated) between '"
								+ fromDate
								+ "' and '"
								+ toDate
								+ "' AND c.strTransferBalance<>'Y'");

				if (!strPOSCode.equalsIgnoreCase("All")) {
					sbSqlFilters.append(" AND c.strPOSCode = '" + strPOSCode
							+ "' ");
				}

				sbSqlLive.append(sbSqlFilters);

				querySqlLive = webPOSSessionFactory.getCurrentSession()
						.createSQLQuery(sbSqlLive.toString());
				listSqlLive = querySqlLive.list();
				if (listSqlLive.size() > 0) {

					for (int i = 0; i < listSqlLive.size(); i++) {

						Object[] obj = (Object[]) listSqlLive.get(i);
						JSONObject jObj = new JSONObject();
						jObj.put("strPOSName", obj[0].toString());
						jObj.put("intRechargeNo", obj[1].toString());
						jObj.put("strCardNo", obj[2].toString());
						jObj.put("strCustomerName", obj[3].toString());
						jObj.put("dteBillDate", obj[4].toString());
						jObj.put("dteBillTime", obj[5].toString());
						jObj.put("dblRechargeAmount", obj[6].toString());
						jObj.put("strUserCode", obj[7].toString());
						jObj.put("strUserName", obj[8].toString());

						total += Double.parseDouble(obj[6].toString());

						jArr.put(jObj);
					}
				}

				jObjTatol = new JSONObject();

				jObjTatol.put("total", total);

				jOBjRet.put("jArr", jArr);
				jOBjRet.put("jObjTatol", jObjTatol);

				break;

			case "Refund Details":

				sbSqlLive
						.append("select d.strPosName,c.strRefundNo,a.strCardNo,ifnull(b.strCustomerName,'') "
								+ ",date(c.dteDateCreated),time(c.dteDateCreated),c.dblRefundAmt "
								+ " from tbldebitcardmaster a left outer join tblcustomermaster b on a.strCustomerCode=b.strCustomerCode "
								+ " left outer join tbldebitcardrefundamt c on a.strCardString=c.strCardString "
								+ " inner join tblposmaster d on c.strPOSCode=d.strPosCode ");

				if (!strPOSCode.equalsIgnoreCase("All")) {
					sbSqlFilters.append(" AND c.strPOSCode = '" + strPOSCode
							+ "' ");
				}

				sbSqlFilters.append(" where date(c.dteDateCreated) between '"
						+ fromDate + "' and '" + toDate + "' ");

				sbSqlLive.append(sbSqlFilters);

				querySqlLive = webPOSSessionFactory.getCurrentSession()
						.createSQLQuery(sbSqlLive.toString());
				listSqlLive = querySqlLive.list();
				if (listSqlLive.size() > 0) {

					for (int i = 0; i < listSqlLive.size(); i++) {

						Object[] obj = (Object[]) listSqlLive.get(i);
						JSONObject jObj = new JSONObject();
						jObj.put("strPOSName", obj[0].toString());
						jObj.put("strRefundNo", obj[1].toString());
						jObj.put("strCardNo", obj[2].toString());
						jObj.put("strCustomerName", obj[3].toString());
						jObj.put("dteBillDate", obj[4].toString());
						jObj.put("dteBillTime", obj[5].toString());
						jObj.put("dblRefundAmt", obj[6].toString());

						total += Double.parseDouble(obj[6].toString());

						jArr.put(jObj);
					}
				}

				jObjTatol = new JSONObject();

				jObjTatol.put("total", total);

				jOBjRet.put("jArr", jArr);
				jOBjRet.put("jObjTatol", jObjTatol);

				break;

			case "Debit Card Status":

				Map<String, clsDebitCardDetailBean> map = new HashMap<String, clsDebitCardDetailBean>();

				double totalBalance = 0.0,
				balanceAmt = 0.0;
				double totalRechargeAmt = 0.0,
				totalRefundAmt = 0.0,
				totalRedeemAmt = 0.0;

				sbSqlLive
						.append("select a.strCardNo,ifnull(sum(b.dblRechargeAmount),0.00) "
								+ " from tbldebitcardmaster a left outer join tbldebitcardrecharge b on a.strCardString=b.strCardString "
								+ " where date(b.dteDateCreated) between '"
								+ fromDate
								+ "' and '"
								+ toDate
								+ "' and b.strTransferBalance='N' "
								+ " group by a.strCardNo");

				sbSqlLive1
						.append("select a.strCardNo,ifnull(sum(b.dblRefundAmt),0.00) "
								+ " from tbldebitcardmaster a left outer join tbldebitcardrefundamt b on a.strCardString=b.strCardString "
								+ " where date(b.dteDateCreated) between '"
								+ fromDate
								+ "' and '"
								+ toDate
								+ "' "
								+ " group by a.strCardNo");

				sbSqlLive2
						.append("select b.strCardNo,ifnull(sum(b.dblTransactionAmt),0.00) "
								+ " from tbldebitcardbilldetails b "
								+ " where date(b.dteBillDate) between '"
								+ fromDate
								+ "' and '"
								+ toDate
								+ "' "
								+ " group by b.strCardNo");

				sbSqlLive.append(sbSqlFilters);
				sbSqlLive1.append(sbSqlFilters);
				sbSqlLive2.append(sbSqlFilters);

				querySqlLive = webPOSSessionFactory.getCurrentSession()
						.createSQLQuery(sbSqlLive.toString());
				listSqlLive = querySqlLive.list();
				if (listSqlLive.size() > 0) {

					for (int i = 0; i < listSqlLive.size(); i++) {

						Object[] obj = (Object[]) listSqlLive.get(i);
						String strCardNo = obj[0].toString();

						if (map.containsKey(strCardNo)) {

							clsDebitCardDetailBean objDebitCardDtl = map
									.get(strCardNo);
							objDebitCardDtl.setDblRechargeAmt(objDebitCardDtl
									.getDblRechargeAmt()
									+ Double.parseDouble(obj[1].toString()));
							map.put(strCardNo, objDebitCardDtl);
						} else {
							clsDebitCardDetailBean objDebitCardDtl = new clsDebitCardDetailBean();
							objDebitCardDtl.setStrCardNo(strCardNo);
							objDebitCardDtl.setStrCustomerName("");
							objDebitCardDtl.setDblRechargeAmt(Double
									.parseDouble(obj[1].toString()));
							objDebitCardDtl.setDblRedeemAmt(0);
							objDebitCardDtl.setDblRefundAmt(0);
							map.put(strCardNo, objDebitCardDtl);
						}

					}
				}

				querySqlLive = webPOSSessionFactory.getCurrentSession()
						.createSQLQuery(sbSqlLive1.toString());
				listSqlLive = querySqlLive.list();
				if (listSqlLive.size() > 0) {

					for (int i = 0; i < listSqlLive.size(); i++) {

						Object[] obj = (Object[]) listSqlLive.get(i);
						if (map.containsKey(map.get(obj[0].toString()))) {

							clsDebitCardDetailBean objDebitCardDtl = map
									.get(map.get(obj[0].toString()));
							objDebitCardDtl.setDblRefundAmt(objDebitCardDtl
									.getDblRefundAmt()
									+ Double.parseDouble(obj[1].toString()));
							map.put(obj[0].toString(), objDebitCardDtl);
						} else {
							clsDebitCardDetailBean objDebitCardDtl = new clsDebitCardDetailBean();
							objDebitCardDtl.setStrCardNo(obj[0].toString());
							objDebitCardDtl.setStrCustomerName("");
							objDebitCardDtl.setDblRechargeAmt(0);
							objDebitCardDtl.setDblRedeemAmt(0);
							objDebitCardDtl.setDblRefundAmt(Double
									.parseDouble(obj[1].toString()));
							map.put(obj[0].toString(), objDebitCardDtl);
						}

					}
				}

				querySqlLive = webPOSSessionFactory.getCurrentSession()
						.createSQLQuery(sbSqlLive2.toString());
				listSqlLive = querySqlLive.list();
				if (listSqlLive.size() > 0) {

					for (int i = 0; i < listSqlLive.size(); i++) {

						Object[] obj = (Object[]) listSqlLive.get(i);
						String strCardNo = obj[0].toString();

						if (map.containsKey(strCardNo)) {

							clsDebitCardDetailBean objDebitCardDtl = map
									.get(strCardNo);
							objDebitCardDtl.setDblRedeemAmt(objDebitCardDtl
									.getDblRedeemAmt()
									+ Double.parseDouble(obj[1].toString()));
							map.put(strCardNo, objDebitCardDtl);
						} else {
							clsDebitCardDetailBean objDebitCardDtl = new clsDebitCardDetailBean();
							objDebitCardDtl.setStrCardNo(strCardNo);
							objDebitCardDtl.setStrCustomerName("");
							objDebitCardDtl.setDblRechargeAmt(0);
							objDebitCardDtl.setDblRedeemAmt(Double
									.parseDouble(obj[1].toString()));
							objDebitCardDtl.setDblRefundAmt(0);
							map.put(strCardNo, objDebitCardDtl);
						}

					}
				}

				for (Map.Entry<String, clsDebitCardDetailBean> entry : map
						.entrySet()) {
					clsDebitCardDetailBean objDebitCardDtl = entry.getValue();
					JSONObject jObj = new JSONObject();
					balanceAmt = objDebitCardDtl.getDblRechargeAmt()
							- (objDebitCardDtl.getDblRefundAmt() + objDebitCardDtl
									.getDblRedeemAmt());

					totalBalance += balanceAmt;
					totalRechargeAmt += objDebitCardDtl.getDblRechargeAmt();
					totalRefundAmt += objDebitCardDtl.getDblRefundAmt();
					totalRedeemAmt += objDebitCardDtl.getDblRedeemAmt();

					jObj.put("strCardNo", objDebitCardDtl.getStrCardNo());
					jObj.put("strCustomerName",
							objDebitCardDtl.getStrCustomerName());
					jObj.put("dblRechargeAmount",
							objDebitCardDtl.getDblRechargeAmt());
					jObj.put("dblRefundAmt", objDebitCardDtl.getDblRefundAmt());
					jObj.put("dblRedeemAmt", objDebitCardDtl.getDblRedeemAmt());
					jObj.put("balanceAmt",balanceAmt);
					jArr.put(jObj);

				}

				jObjTatol = new JSONObject();

				jObjTatol.put("totalBalance", totalBalance);
				jObjTatol.put("totalRechargeAmt", totalRechargeAmt);
				jObjTatol.put("totalRefundAmt", totalRefundAmt);
				jObjTatol.put("totalRedeemAmt", totalRedeemAmt);
				

				jOBjRet.put("jArr", jArr);
				jOBjRet.put("jObjTatol", jObjTatol);

				break;

			case "Unused Card Balance":

				sbSqlLive
						.append("select strCardNo,date(dtePOSDate),strUserCreated,sum(dblCardAmt) "
								+ " from tbldebitcardrevenue "
								+ " where date(dtePOSDate) between '"
								+ fromDate
								+ "' and '"
								+ toDate
								+ "' "
								+ " group by strCardNo "
								+ " order by date(dtePOSDate)");

				querySqlLive = webPOSSessionFactory.getCurrentSession()
						.createSQLQuery(sbSqlLive.toString());
				listSqlLive = querySqlLive.list();
				if (listSqlLive.size() > 0) {

					for (int i = 0; i < listSqlLive.size(); i++) {

						Object[] obj = (Object[]) listSqlLive.get(i);
						JSONObject jObj = new JSONObject();
						jObj.put("strCardNo", obj[0].toString());
						jObj.put("dtePOSDate", obj[1].toString());
						jObj.put("strUserCreated", obj[2].toString());
						jObj.put("dblCardAmt", obj[3].toString());

						total += Double.parseDouble(obj[3].toString());

						jArr.put(jObj);
					}
				}

				jObjTatol = new JSONObject();

				jObjTatol.put("total", total);

				jOBjRet.put("jArr", jArr);
				jOBjRet.put("jObjTatol", jObjTatol);

				break;

			case "User Wise Recharge Details":

				sbSqlLive
						.append("select ifnull(d.strPosName,''),ifnull(e.strUserName,'NA'),ifnull(g.strSettelmentDesc,'NA'), sum(f.dblRechargeAmt) "
								+ "from tbldebitcardmaster a "
								+ "left outer join tblcustomermaster b on a.strCustomerCode=b.strCustomerCode  "
								+ "left outer join tbldebitcardrecharge c on a.strCardString=c.strCardString  "
								+ "left outer join tblposmaster d on c.strPOSCode=d.strPosCode  "
								+ "left outer join tbluserhd e on c.strUserCreated=e.strUserCode "
								+ "left outer join tbldcrechargesettlementdtl f on c.intRechargeNo=f.strRechargeNo "
								+ "left outer join tblsettelmenthd g on f.strSettlementCode =g.strSettelmentCode "
								+ "where date(c.dteDateCreated) between '"
								+ fromDate
								+ "' and '"
								+ toDate
								+ "' "
								+ "AND c.strTransferBalance<>'Y' ");

				if (!strPOSCode.equalsIgnoreCase("All")) {
					sbSqlFilters.append(" AND c.strPOSCode = '" + strPOSCode
							+ "' ");
				}

				sbSqlFilters
						.append("group by d.strPosCode,e.strUserName,ifnull(g.strSettelmentDesc,'NA') "
								+ "order by d.strPosCode,e.strUserName,g.strSettelmentDesc");

				sbSqlLive.append(sbSqlFilters);

				querySqlLive = webPOSSessionFactory.getCurrentSession()
						.createSQLQuery(sbSqlLive.toString());
				listSqlLive = querySqlLive.list();
				if (listSqlLive.size() > 0) {

					for (int i = 0; i < listSqlLive.size(); i++) {

						Object[] obj = (Object[]) listSqlLive.get(i);
						JSONObject jObj = new JSONObject();

						jObj.put("strPOSName", obj[0].toString());
						jObj.put("strUserName", obj[1].toString());
						jObj.put("strSettelmentDesc", obj[2].toString());
						jObj.put("dblRechargeAmt", obj[3].toString());

						total += Double.parseDouble(obj[3].toString());

						jArr.put(jObj);
					}
				}

				jObjTatol = new JSONObject();

				jObjTatol.put("total", total);

				jOBjRet.put("jArr", jArr);
				jOBjRet.put("jObjTatol", jObjTatol);

				break;

			}// end of Switch case

		}// end of try

		catch (Exception ex) {
			ex.printStackTrace();
		}

		return jOBjRet;

	}

	public JSONObject funAIPBReportDtl(String fromDate, String toDate,
			String strPOSCode, String strShiftNo) {
		List listRet = new ArrayList();
		StringBuilder sbSqlLive = new StringBuilder();
		StringBuilder sqlDineIn = new StringBuilder();
		StringBuilder sbSqlQFile = new StringBuilder();
		StringBuilder sbSqlFilters = new StringBuilder();
		JSONArray jArr = new JSONArray();
		JSONArray jArr1 = new JSONArray();
		JSONObject jOBjRet = new JSONObject();

		sbSqlLive.setLength(0);
		sbSqlQFile.setLength(0);
		sbSqlFilters.setLength(0);
		Query querySql;
		try {

			querySql = webPOSSessionFactory.getCurrentSession().createSQLQuery(
					" truncate table tblatvreport");
			querySql.executeUpdate();

			if (!strPOSCode.equalsIgnoreCase("All")) {
				sbSqlFilters
						.append(" AND b.strPOSCode = '" + strPOSCode + "' ");
			}

			sbSqlFilters.append(" and b.intShiftCode = '" + strShiftNo + "' ");

			sbSqlLive
					.append("Insert into tblatvreport(strPosCode,strPosName,dteDate,dblDiningAmt)"
							+ " select * from ("
							+ " select  b.strPOSCode,c.strPOSName,date(b.dteBillDate),sum(dblQuantity) as ItemQty "
							+ " from tblBillDtl a, tblBillHd b,tblposmaster c"
							+ " Where b.strOperationType='Dine In' "
							+ " and  Date(b.dteBillDate) between '"
							+ fromDate
							+ "' and '"
							+ toDate
							+ "' "
							+ " and a.strBillNo = b.strBillNo "
							+ " and b.strPOSCode=c.strPOSCode");

			sbSqlLive.append(sbSqlFilters
					+ " group by date(b.dteBillDate),c.strPOSCode");

			sbSqlLive
					.append(" UNION ALL "
							+ " select  b.strPOSCode,c.strPOSName,date(b.dteBillDate),sum(dblQuantity) as ItemQty "
							+ " from tblqBillDtl a, tblqBillHd b,tblposmaster c"
							+ " Where b.strOperationType='Dine In' and  Date(b.dteBillDate) between '"
							+ fromDate + "' and '" + toDate + "' "
							+ " and a.strBillNo = b.strBillNo "
							+ " and b.strPOSCode=c.strPOSCode");

			sbSqlLive.append(sbSqlFilters
					+ " group by date(b.dteBillDate),c.strPOSCode");
			sbSqlLive.append(" ) d");

			querySql = webPOSSessionFactory.getCurrentSession().createSQLQuery(
					sbSqlLive.toString());
			querySql.executeUpdate();
			// Dine In
			sbSqlLive.setLength(0);
			sbSqlLive
					.append(" select date(b.dteBillDate), b.strPOSCode, Count(*) as NoOfBills,c.strPOSName "
							+ " FROM tblBillHd b,tblPOSMaster c "
							+ " Where b.strOperationType='Dine In' "
							+ " and  Date(b.dteBillDate) between '"
							+ fromDate
							+ "' and '"
							+ toDate
							+ "' "
							+ " and b.strPOSCode=c.strPOSCode ");

			sbSqlLive.append(sbSqlFilters
					+ " group by date(b.dteBillDate),c.strPOSCode");

			sbSqlLive.append(" UNION ALL ");

			sbSqlLive
					.append("select date(b.dteBillDate),  b.strPOSCode, Count(*) as NoOfBills,c.strPOSName "
							+ " from tblqBillHd b,tblPOSMaster c "
							+ " Where b.strOperationType='Dine In' "
							+ " and  Date(b.dteBillDate) between '"
							+ fromDate
							+ "' and '"
							+ toDate
							+ "' "
							+ " and b.strPOSCode=c.strPOSCode ");

			sbSqlLive.append(sbSqlFilters
					+ " group by date(b.dteBillDate),c.strPOSCode");

			Query querySqlLive = webPOSSessionFactory.getCurrentSession()
					.createSQLQuery(sbSqlLive.toString());
			List listSqlLive = querySqlLive.list();
			if (listSqlLive.size() > 0) {

				for (int i = 0; i < listSqlLive.size(); i++) {

					Object[] obj = (Object[]) listSqlLive.get(i);
					sbSqlLive.setLength(0);
					sbSqlLive
							.append("update tblatvreport set dblDiningNoBill='"
									+ obj[2] + "' ,strPOSName='" + obj[3]
									+ "' " + "where dteDate = '" + obj[0]
									+ "'  and strPOSCode ='" + obj[1] + "'");
					querySql = webPOSSessionFactory.getCurrentSession()
							.createSQLQuery(sbSqlLive.toString());
					querySql.executeUpdate();
				}
			}

			// Home Delivery
			sbSqlLive.setLength(0);
			sbSqlLive
					.append("select  b.strPOSCode,date(b.dteBillDate),  sum(dblQuantity) as ItemQty "
							+ " from tblBillDtl a, tblBillHd b,tblPOSMaster c"
							+ " Where b.strOperationType='Home Delivery' "
							+ " and  Date(b.dteBillDate) between '"
							+ fromDate
							+ "' and '"
							+ toDate
							+ "' "
							+ " and a.strBillNo = b.strBillNo "
							+ " and b.strPOSCode=c.strPOSCode ");
			sbSqlLive.append(sbSqlFilters
					+ " group by date(b.dteBillDate),c.strPOSCode");
			sbSqlLive.append(" UNION ALL ");
			sbSqlLive
					.append("select  b.strPOSCode,date(b.dteBillDate),  sum(dblQuantity) as ItemQty "
							+ " from tblqBillDtl a, tblqBillHd b,tblPOSMaster c"
							+ " Where b.strOperationType='Home Delivery' "
							+ " and  Date(b.dteBillDate) between '"
							+ fromDate
							+ "' and '"
							+ toDate
							+ "' "
							+ " and a.strBillNo = b.strBillNo "
							+ " and b.strPOSCode=c.strPOSCode ");
			sbSqlLive.append(sbSqlFilters
					+ " group by date(b.dteBillDate),c.strPOSCode");

			querySqlLive = webPOSSessionFactory.getCurrentSession()
					.createSQLQuery(sbSqlLive.toString());
			listSqlLive = querySqlLive.list();
			if (listSqlLive.size() > 0) {

				for (int i = 0; i < listSqlLive.size(); i++) {

					Object[] obj = (Object[]) listSqlLive.get(i);
					sbSqlLive.setLength(0);
					sbSqlLive.append("update tblatvreport set dblHDAmt='"
							+ obj[2] + "' " + " where dteDate = '" + obj[1]
							+ "'  and strPOSCode ='" + obj[0] + "'");
					querySql = webPOSSessionFactory.getCurrentSession()
							.createSQLQuery(sbSqlLive.toString());
					querySql.executeUpdate();
				}
			}

			// no of home delivery bills

			sbSqlLive.setLength(0);
			sbSqlLive
					.append("select date(b.dteBillDate),  b.strPOSCode, Count(*) as NoOfBills,c.strPOSName "
							+ " from tblBillHd b,tblPOSMaster c "
							+ " Where b.strOperationType='Home Delivery' "
							+ " and b.strPOSCode=c.strPOSCode"
							+ " and  Date(b.dteBillDate) between '"
							+ fromDate
							+ "' and '" + toDate + "' ");
			sbSqlLive.append(sbSqlFilters
					+ " group by date(b.dteBillDate),c.strPOSCode");
			sbSqlLive.append(" UNION ALL ");
			sbSqlLive
					.append(" select date(b.dteBillDate),  b.strPOSCode, Count(*) as NoOfBills,c.strPOSName "
							+ " from tblqBillHd b ,tblPOSMaster c"
							+ " Where b.strOperationType='Home Delivery'"
							+ " and b.strPOSCode=c.strPOSCode"
							+ " and  Date(b.dteBillDate) between '"
							+ fromDate
							+ "' and '" + toDate + "' ");
			sbSqlLive.append(sbSqlFilters
					+ " group by date(b.dteBillDate),c.strPOSCode");

			querySqlLive = webPOSSessionFactory.getCurrentSession()
					.createSQLQuery(sbSqlLive.toString());
			listSqlLive = querySqlLive.list();
			if (listSqlLive.size() > 0) {

				for (int i = 0; i < listSqlLive.size(); i++) {

					Object[] obj = (Object[]) listSqlLive.get(i);
					sbSqlLive.setLength(0);
					sbSqlLive.append("update tblatvreport set dblHDNoBill='"
							+ obj[2] + "' ,strPosName='" + obj[3] + "' "
							+ " where dteDate = '" + obj[0]
							+ "'  and strPOSCode ='" + obj[1] + "'");
					querySql = webPOSSessionFactory.getCurrentSession()
							.createSQLQuery(sbSqlLive.toString());
					querySql.executeUpdate();
				}
			}

			// Take Away
			sbSqlLive.setLength(0);
			sbSqlLive
					.append("select  b.strPOSCode,c.strPOSName,date(b.dteBillDate),  sum(dblQuantity) as ItemQty "
							+ " from tblBillDtl a, tblBillHd b,tblPOSMaster c"
							+ " Where b.strOperationType='Take Away' "
							+ " and  Date(b.dteBillDate) between '"
							+ fromDate
							+ "' and '"
							+ toDate
							+ "' "
							+ " and a.strBillNo = b.strBillNo "
							+ " and b.strPOSCode=c.strPOSCode");
			sbSqlLive.append(sbSqlFilters
					+ " group by date(b.dteBillDate),c.strPOSCode");
			sbSqlLive.append(" UNION ALL ");
			sbSqlLive
					.append("select  b.strPOSCode,c.strPOSName,date(b.dteBillDate),  sum(dblQuantity) as ItemQty "
							+ " from tblqBillDtl a, tblqBillHd b,tblPOSMaster c"
							+ " Where b.strOperationType='Take Away' "
							+ " and  Date(b.dteBillDate) between '"
							+ fromDate
							+ "' and '"
							+ toDate
							+ "' "
							+ " and a.strBillNo = b.strBillNo "
							+ " and b.strPOSCode=c.strPOSCode");
			sbSqlLive.append(sbSqlFilters
					+ " group by date(b.dteBillDate),c.strPOSCode");

			querySqlLive = webPOSSessionFactory.getCurrentSession()
					.createSQLQuery(sbSqlLive.toString());
			listSqlLive = querySqlLive.list();

			if (listSqlLive.size() > 0) {

				for (int i = 0; i < listSqlLive.size(); i++) {

					Object[] obj = (Object[]) listSqlLive.get(i);
					sbSqlLive.setLength(0);
					sbSqlLive.append("update tblatvreport set dblTAAmt='"
							+ obj[3] + "',strPosName='" + obj[1] + "' "
							+ " where dteDate = '" + obj[2]
							+ "'  and strPOSCode ='" + obj[0] + "'");

					querySql = webPOSSessionFactory.getCurrentSession()
							.createSQLQuery(sbSqlLive.toString());
					querySql.executeUpdate();
				}
			}

			// no of take away bills
			sbSqlLive.setLength(0);
			sbSqlLive
					.append("select date(b.dteBillDate),  b.strPOSCode, Count(*) as NoOfBills,c.strPOSName "
							+ " from tblBillHd b,tblPOSMaster c"
							+ " Where b.strOperationType='Take Away' "
							+ " and Date(b.dteBillDate) between '"
							+ fromDate
							+ "' and '"
							+ toDate
							+ "' "
							+ " and b.strPOSCode=c.strPOSCode ");
			sbSqlLive.append(sbSqlFilters
					+ " group by date(b.dteBillDate),c.strPOSCode");
			sbSqlLive.append(" UNION ALL ");
			sbSqlLive
					.append("select date(b.dteBillDate)e,  b.strPOSCode, Count(*) as NoOfBills,c.strPOSName "
							+ " from tblqBillHd b,tblPOSMaster c"
							+ " Where b.strOperationType='Take Away' "
							+ " and Date(b.dteBillDate) between '"
							+ fromDate
							+ "' and '"
							+ toDate
							+ "' "
							+ " and b.strPOSCode=c.strPOSCode ");
			sbSqlLive.append(sbSqlFilters
					+ " group by date(b.dteBillDate),c.strPOSCode");

			querySqlLive = webPOSSessionFactory.getCurrentSession()
					.createSQLQuery(sbSqlLive.toString());
			listSqlLive = querySqlLive.list();

			if (listSqlLive.size() > 0) {

				for (int i = 0; i < listSqlLive.size(); i++) {

					Object[] obj = (Object[]) listSqlLive.get(i);
					sbSqlLive.setLength(0);
					sbSqlLive.append("update tblatvreport set dblTANoBill='"
							+ obj[2] + "' ,strPosName='" + obj[3] + "'"
							+ "where dteDate = '" + obj[0]
							+ "'  and strPOSCode ='" + obj[1] + "'");
					querySql = webPOSSessionFactory.getCurrentSession()
							.createSQLQuery(sbSqlLive.toString());
					querySql.executeUpdate();
				}
			}

			sbSqlLive.setLength(0);
			sbSqlLive
					.append("update tblatvreport set dblDiningAvg=  dblDiningAmt/dblDiningNoBill, dblHDAvg= dblHDAmt/dblHDNoBill, dblTAAvg= dblTAAmt/dblTANoBill");
			querySql = webPOSSessionFactory.getCurrentSession().createSQLQuery(
					sbSqlLive.toString());
			querySql.executeUpdate();

			sbSqlLive.setLength(0);
			sbSqlLive
					.append("select a.strPosCode,a.strPosName,a.dteDate,a.dblDiningAmt,ifnull(a.dblDiningNoBill,0.0)"
							+ " ,ifnull(a.dblDiningAvg,0.0),ifnull(a.dblHDAmt,0.0),"
							+ " ifnull(a.dblHDNoBill,0.0),ifnull(a.dblHdAvg,0.0)"
							+ " ,ifnull(a.dblTAAmt,0.0),ifnull(a.dblTANoBill,0.0)"
							+ " ,ifnull(a.dblTAAvg,0.0) from tblatvreport a");
			querySql = webPOSSessionFactory.getCurrentSession().createSQLQuery(
					sbSqlLive.toString());

			List listSqlFile = querySql.list();
			if (listSqlFile.size() > 0) {

				for (int i = 0; i < listSqlFile.size(); i++) {
					Object[] obj = (Object[]) listSqlFile.get(i);
					JSONObject jObj = new JSONObject();
					jObj.put("strPosCode", obj[0].toString());
					jObj.put("strPosName", obj[1].toString());
					jObj.put("dteDate", obj[2].toString());
					jObj.put("dblDiningAmt", obj[3].toString());
					jObj.put("dblDiningNoBill", obj[4].toString());
					jObj.put("dblDiningAvg", obj[5].toString());
					jObj.put("dblHDAmt", obj[6].toString());
					jObj.put("dblHDNoBill", obj[7].toString());
					jObj.put("dblHdAvg", obj[8].toString());
					jObj.put("dblTAAmt", obj[9].toString());
					jObj.put("dblTANoBill", obj[10].toString());
					jObj.put("dblTAAvg", obj[11].toString());
					jArr.put(jObj);
				}
				// jOBjRet.put("jArr", jArr);
			}

			sbSqlLive.setLength(0);
			sbSqlLive
					.append("select a.strClientCode,a.strClientName,a.strAddressLine1,"
							+ "a.strAddressLine2,a.strAddressLine3,"
							+ "a.strEmail,a.strCityName,a.strState,"
							+ "a.strCountry,a.intTelephoneNo from  tblsetup a");

			querySql = webPOSSessionFactory.getCurrentSession().createSQLQuery(
					sbSqlLive.toString());
			listSqlFile = querySql.list();
			if (listSqlFile.size() > 0) {

				for (int i = 0; i < listSqlFile.size(); i++) {
					Object[] obj = (Object[]) listSqlFile.get(i);
					JSONObject jObj = new JSONObject();
					jObj.put("strClientCode", obj[0].toString());
					jObj.put("strClientName", obj[1].toString());
					jObj.put("strAddressLine1", obj[2].toString());
					jObj.put("strAddressLine2", obj[3].toString());
					jObj.put("strAddressLine3", obj[4].toString());
					jObj.put("strEmail", obj[5].toString());
					jObj.put("strCityName", obj[6].toString());
					jObj.put("strState", obj[7].toString());
					jObj.put("strCountry", obj[8].toString());
					jObj.put("intTelephoneNo", obj[9].toString());

					jArr1.put(jObj);
				}
				// jOBjRet.put("jArr", jArr);
			}
			jOBjRet.put("jArr", jArr);
			jOBjRet.put("jArr1", jArr1);

		}

		catch (Exception ex) {
			ex.printStackTrace();
		}
		return jOBjRet;
	}

	public JSONObject funATVReportDtl(String fromDate, String toDate,
			String strPOSCode, String strShiftNo) {
		List listRet = new ArrayList();
		StringBuilder sbSqlLive = new StringBuilder();
		StringBuilder sqlDineIn = new StringBuilder();
		StringBuilder sbSqlQFile = new StringBuilder();
		StringBuilder sbSqlFilters = new StringBuilder();
		JSONArray jArr = new JSONArray();
		JSONArray jArr1 = new JSONArray();
		JSONObject jOBjRet = new JSONObject();

		sbSqlLive.setLength(0);
		sbSqlQFile.setLength(0);
		sbSqlFilters.setLength(0);
		Query querySql;
		try {

			querySql = webPOSSessionFactory.getCurrentSession().createSQLQuery(
					" truncate table tblatvreport");
			querySql.executeUpdate();

			if (!strPOSCode.equalsIgnoreCase("All")) {
				sbSqlFilters
						.append(" AND b.strPOSCode = '" + strPOSCode + "' ");
			}

			sbSqlFilters.append(" and b.intShiftCode = '" + strShiftNo + "' ");

			sbSqlLive
					.append("Insert into tblatvreport(strPosCode,strPosName,dteDate,dblDiningAmt)"
							+ " select * from ("
							+ " select  b.strPOSCode,c.strPOSName,b.dteBillDate,sum(dblQuantity) as ItemQty "
							+ " from tblBillDtl a, tblBillHd b,tblposmaster c"
							+ " Where b.strOperationType='Dine In' "
							+ " and  Date(b.dteBillDate) between '"
							+ fromDate
							+ "' and '"
							+ toDate
							+ "' "
							+ " and a.strBillNo = b.strBillNo "
							+ " and b.strPOSCode=c.strPOSCode");

			sbSqlLive.append(sbSqlFilters
					+ " group by date(b.dteBillDate),c.strPOSCode");

			sbSqlLive
					.append(" UNION ALL "
							+ " select  b.strPOSCode,c.strPOSName,date(b.dteBillDate),sum(dblQuantity) as ItemQty "
							+ " from tblqBillDtl a, tblqBillHd b,tblposmaster c"
							+ " Where b.strOperationType='Dine In' and  Date(b.dteBillDate) between '"
							+ fromDate + "' and '" + toDate + "' "
							+ " and a.strBillNo = b.strBillNo "
							+ " and b.strPOSCode=c.strPOSCode");
			sbSqlLive.append(sbSqlFilters
					+ " group by date(b.dteBillDate),c.strPOSCode");
			sbSqlLive.append(" ) d");

			querySql = webPOSSessionFactory.getCurrentSession().createSQLQuery(
					sbSqlLive.toString());
			querySql.executeUpdate();

			// Dine In
			sbSqlLive.setLength(0);
			sbSqlLive
					.append("select date(b.dteBillDate),  b.strPOSCode, Count(*) as NoOfBills,c.strPOSName "
							+ " from tblBillHd b,tblPOSMaster c "
							+ " Where b.strOperationType='Dine In' "
							+ " and  Date(b.dteBillDate) between '"
							+ fromDate
							+ "' and '"
							+ toDate
							+ "' "
							+ " and b.strPOSCode=c.strPOSCode ");

			sbSqlLive.append(sbSqlFilters
					+ " group by date(b.dteBillDate),c.strPOSCode");

			sbSqlLive.append(" UNION ALL ");

			sbSqlLive
					.append("select date(b.dteBillDate),  b.strPOSCode, Count(*) as NoOfBills,c.strPOSName "
							+ " from tblqBillHd b,tblPOSMaster c "
							+ " Where b.strOperationType='Dine In' "
							+ " and  Date(b.dteBillDate) between '"
							+ fromDate
							+ "' and '"
							+ toDate
							+ "' "
							+ " and b.strPOSCode=c.strPOSCode ");

			sbSqlLive.append(sbSqlFilters
					+ " group by date(b.dteBillDate),c.strPOSCode");

			Query querySqlLive = webPOSSessionFactory.getCurrentSession()
					.createSQLQuery(sbSqlLive.toString());
			List listSqlLive = querySqlLive.list();
			if (listSqlLive.size() > 0) {

				for (int i = 0; i < listSqlLive.size(); i++) {

					Object[] obj = (Object[]) listSqlLive.get(i);
					sbSqlLive.setLength(0);
					sbSqlLive
							.append("update tblatvreport set dblDiningNoBill='"
									+ obj[2] + "' ,strPOSName='" + obj[3]
									+ "' " + "where dteDate = '" + obj[0]
									+ "'  and strPOSCode ='" + obj[1] + "'");
					querySql = webPOSSessionFactory.getCurrentSession()
							.createSQLQuery(sbSqlLive.toString());
					querySql.executeUpdate();
				}
			}

			// Home Delivery
			sbSqlLive.setLength(0);
			sbSqlLive
					.append("select  b.strPOSCode,date(b.dteBillDate),  sum(dblQuantity) as ItemQty "
							+ " from tblBillDtl a, tblBillHd b,tblPOSMaster c"
							+ " Where b.strOperationType='Home Delivery' "
							+ " and  Date(b.dteBillDate) between '"
							+ fromDate
							+ "' and '"
							+ toDate
							+ "' "
							+ " and a.strBillNo = b.strBillNo "
							+ " and b.strPOSCode=c.strPOSCode ");
			sbSqlLive.append(sbSqlFilters
					+ " group by date(b.dteBillDate),c.strPOSCode");
			sbSqlLive.append(" UNION ALL ");
			sbSqlLive
					.append("select  b.strPOSCode,date(b.dteBillDate),  sum(dblQuantity) as ItemQty "
							+ " from tblqBillDtl a, tblqBillHd b,tblPOSMaster c"
							+ " Where b.strOperationType='Home Delivery' "
							+ " and  Date(b.dteBillDate) between '"
							+ fromDate
							+ "' and '"
							+ toDate
							+ "' "
							+ " and a.strBillNo = b.strBillNo "
							+ " and b.strPOSCode=c.strPOSCode ");
			sbSqlLive.append(sbSqlFilters
					+ " group by date(b.dteBillDate),c.strPOSCode");

			querySqlLive = webPOSSessionFactory.getCurrentSession()
					.createSQLQuery(sbSqlLive.toString());
			listSqlLive = querySqlLive.list();
			if (listSqlLive.size() > 0) {

				for (int i = 0; i < listSqlLive.size(); i++) {

					Object[] obj = (Object[]) listSqlLive.get(i);
					sbSqlLive.setLength(0);
					sbSqlLive.append("update tblatvreport set dblHDAmt='"
							+ obj[2] + "' " + " where dteDate = '" + obj[1]
							+ "'  and strPOSCode ='" + obj[0] + "'");
					querySql = webPOSSessionFactory.getCurrentSession()
							.createSQLQuery(sbSqlLive.toString());
					querySql.executeUpdate();
				}
			}

			// no of home delivery bills

			sbSqlLive.setLength(0);
			sbSqlLive
					.append("select date(b.dteBillDate),  b.strPOSCode, Count(*) as NoOfBills,c.strPOSName "
							+ " from tblBillHd b,tblPOSMaster c "
							+ " Where b.strOperationType='Home Delivery' "
							+ " and b.strPOSCode=c.strPOSCode"
							+ " and  Date(b.dteBillDate) between '"
							+ fromDate
							+ "' and '" + toDate + "' ");
			sbSqlLive.append(sbSqlFilters
					+ " group by date(b.dteBillDate),c.strPOSCode");
			sbSqlLive.append(" UNION ALL ");
			sbSqlLive
					.append(" select date(b.dteBillDate),  b.strPOSCode, Count(*) as NoOfBills,c.strPOSName "
							+ " from tblqBillHd b ,tblPOSMaster c"
							+ " Where b.strOperationType='Home Delivery'"
							+ " and b.strPOSCode=c.strPOSCode"
							+ " and  Date(b.dteBillDate) between '"
							+ fromDate
							+ "' and '" + toDate + "' ");
			sbSqlLive.append(sbSqlFilters
					+ " group by date(b.dteBillDate),c.strPOSCode");

			querySqlLive = webPOSSessionFactory.getCurrentSession()
					.createSQLQuery(sbSqlLive.toString());
			listSqlLive = querySqlLive.list();
			if (listSqlLive.size() > 0) {

				for (int i = 0; i < listSqlLive.size(); i++) {

					Object[] obj = (Object[]) listSqlLive.get(i);
					sbSqlLive.setLength(0);
					sbSqlLive.append("update tblatvreport set dblHDNoBill='"
							+ obj[2] + "' ,strPosName='" + obj[3] + "' "
							+ " where dteDate = '" + obj[0]
							+ "'  and strPOSCode ='" + obj[1] + "'");
					querySql = webPOSSessionFactory.getCurrentSession()
							.createSQLQuery(sbSqlLive.toString());
					querySql.executeUpdate();
				}
			}

			// Take Away
			sbSqlLive.setLength(0);
			sbSqlLive
					.append("select  b.strPOSCode,c.strPOSName,date(b.dteBillDate),  sum(dblQuantity) as ItemQty "
							+ " from tblBillDtl a, tblBillHd b,tblPOSMaster c"
							+ " Where b.strOperationType='Take Away' "
							+ " and  Date(b.dteBillDate) between '"
							+ fromDate
							+ "' and '"
							+ toDate
							+ "' "
							+ " and a.strBillNo = b.strBillNo "
							+ " and b.strPOSCode=c.strPOSCode");
			sbSqlLive.append(sbSqlFilters
					+ " group by date(b.dteBillDate),c.strPOSCode");
			sbSqlLive.append(" UNION ALL ");
			sbSqlLive
					.append("select  b.strPOSCode,c.strPOSName,date(b.dteBillDate),  sum(dblQuantity) as ItemQty "
							+ " from tblqBillDtl a, tblqBillHd b,tblPOSMaster c"
							+ " Where b.strOperationType='Take Away' "
							+ " and  Date(b.dteBillDate) between '"
							+ fromDate
							+ "' and '"
							+ toDate
							+ "' "
							+ " and a.strBillNo = b.strBillNo "
							+ " and b.strPOSCode=c.strPOSCode");
			sbSqlLive.append(sbSqlFilters
					+ " group by date(b.dteBillDate),c.strPOSCode");

			querySqlLive = webPOSSessionFactory.getCurrentSession()
					.createSQLQuery(sbSqlLive.toString());
			listSqlLive = querySqlLive.list();

			if (listSqlLive.size() > 0) {

				for (int i = 0; i < listSqlLive.size(); i++) {

					Object[] obj = (Object[]) listSqlLive.get(i);
					sbSqlLive.setLength(0);
					sbSqlLive.append("update tblatvreport set dblTAAmt='"
							+ obj[3] + "',strPosName='" + obj[1] + "' "
							+ " where dteDate = '" + obj[2]
							+ "'  and strPOSCode ='" + obj[0] + "'");

					querySql = webPOSSessionFactory.getCurrentSession()
							.createSQLQuery(sbSqlLive.toString());
					querySql.executeUpdate();
				}
			}

			// no of take away bills
			sbSqlLive.setLength(0);
			sbSqlLive
					.append("select date(b.dteBillDate),  b.strPOSCode, Count(*) as NoOfBills,c.strPOSName "
							+ " from tblBillHd b,tblPOSMaster c"
							+ " Where b.strOperationType='Take Away' "
							+ " and Date(b.dteBillDate) between '"
							+ fromDate
							+ "' and '"
							+ toDate
							+ "' "
							+ " and b.strPOSCode=c.strPOSCode ");
			sbSqlLive.append(sbSqlFilters
					+ " group by date(b.dteBillDate),c.strPOSCode");
			sbSqlLive.append(" UNION ALL ");
			sbSqlLive
					.append("select date(b.dteBillDate)e,  b.strPOSCode, Count(*) as NoOfBills,c.strPOSName "
							+ " from tblqBillHd b,tblPOSMaster c"
							+ " Where b.strOperationType='Take Away' "
							+ " and Date(b.dteBillDate) between '"
							+ fromDate
							+ "' and '"
							+ toDate
							+ "' "
							+ " and b.strPOSCode=c.strPOSCode ");
			sbSqlLive.append(sbSqlFilters
					+ " group by date(b.dteBillDate),c.strPOSCode");

			querySqlLive = webPOSSessionFactory.getCurrentSession()
					.createSQLQuery(sbSqlLive.toString());
			listSqlLive = querySqlLive.list();

			if (listSqlLive.size() > 0) {

				for (int i = 0; i < listSqlLive.size(); i++) {

					Object[] obj = (Object[]) listSqlLive.get(i);
					sbSqlLive.setLength(0);
					sbSqlLive.append("update tblatvreport set dblTANoBill='"
							+ obj[2] + "' ,strPosName='" + obj[3] + "'"
							+ "where dteDate = '" + obj[0]
							+ "'  and strPOSCode ='" + obj[1] + "'");
					querySql = webPOSSessionFactory.getCurrentSession()
							.createSQLQuery(sbSqlLive.toString());
					querySql.executeUpdate();
				}
			}

			sbSqlLive.setLength(0);
			sbSqlLive
					.append("update tblatvreport set dblDiningAvg=  dblDiningAmt/dblDiningNoBill, dblHDAvg= dblHDAmt/dblHDNoBill, dblTAAvg= dblTAAmt/dblTANoBill");
			querySql = webPOSSessionFactory.getCurrentSession().createSQLQuery(
					sbSqlLive.toString());
			querySql.executeUpdate();

			sbSqlLive.setLength(0);
			sbSqlLive
					.append("select a.strPosCode,a.strPosName,a.dteDate,a.dblDiningAmt,ifnull(a.dblDiningNoBill,0.0)"
							+ " ,ifnull(a.dblDiningAvg,0.0),ifnull(a.dblHDAmt,0.0),"
							+ " ifnull(a.dblHDNoBill,0.0),ifnull(a.dblHdAvg,0.0)"
							+ " ,ifnull(a.dblTAAmt,0.0),ifnull(a.dblTANoBill,0.0)"
							+ " ,ifnull(a.dblTAAvg,0.0) from tblatvreport a");
			querySql = webPOSSessionFactory.getCurrentSession().createSQLQuery(
					sbSqlLive.toString());

			List listSqlFile = querySql.list();
			if (listSqlFile.size() > 0) {

				for (int i = 0; i < listSqlFile.size(); i++) {
					Object[] obj = (Object[]) listSqlFile.get(i);
					JSONObject jObj = new JSONObject();
					jObj.put("strPosCode", obj[0].toString());
					jObj.put("strPosName", obj[1].toString());
					jObj.put("dteDate", obj[2].toString());
					jObj.put("dblDiningAmt", obj[3].toString());
					jObj.put("dblDiningNoBill", obj[4].toString());
					jObj.put("dblDiningAvg", obj[5].toString());
					jObj.put("dblHDAmt", obj[6].toString());
					jObj.put("dblHDNoBill", obj[7].toString());
					jObj.put("dblHdAvg", obj[8].toString());
					jObj.put("dblTAAmt", obj[9].toString());
					jObj.put("dblTANoBill", obj[10].toString());
					jObj.put("dblTAAvg", obj[11].toString());
					jArr.put(jObj);
				}
				// jOBjRet.put("jArr", jArr);
			}

			sbSqlLive.setLength(0);
			sbSqlLive
					.append("select a.strClientCode,a.strClientName,a.strAddressLine1,"
							+ "a.strAddressLine2,a.strAddressLine3,"
							+ "a.strEmail,a.strCityName,a.strState,"
							+ "a.strCountry,a.intTelephoneNo from  tblsetup a");

			querySql = webPOSSessionFactory.getCurrentSession().createSQLQuery(
					sbSqlLive.toString());
			listSqlFile = querySql.list();
			if (listSqlFile.size() > 0) {

				for (int i = 0; i < listSqlFile.size(); i++) {
					Object[] obj = (Object[]) listSqlFile.get(i);
					JSONObject jObj = new JSONObject();
					jObj.put("strClientCode", obj[0].toString());
					jObj.put("strClientName", obj[1].toString());
					jObj.put("strAddressLine1", obj[2].toString());
					jObj.put("strAddressLine2", obj[3].toString());
					jObj.put("strAddressLine3", obj[4].toString());
					jObj.put("strEmail", obj[5].toString());
					jObj.put("strCityName", obj[6].toString());
					jObj.put("strState", obj[7].toString());
					jObj.put("strCountry", obj[8].toString());
					jObj.put("intTelephoneNo", obj[9].toString());

					jArr1.put(jObj);
				}
				// jOBjRet.put("jArr", jArr);
			}
			jOBjRet.put("jArr", jArr);
			jOBjRet.put("jArr1", jArr1);

		}

		catch (Exception ex) {
			ex.printStackTrace();
		}
		return jOBjRet;
	}

	public JSONObject funAPCReportDtl(String fromDate, String toDate,
			String strPOSCode, String strShiftNo, String strPowWise,
			String strDateWise) {
		List listRet = new ArrayList();

		JSONArray jArr = new JSONArray();
		JSONArray jArr1 = new JSONArray();
		JSONObject jOBjRet = new JSONObject();

		StringBuilder sqlNonComplimentaryBuilder = new StringBuilder();
		StringBuilder sqlComplimentaryBuilder = new StringBuilder();
		StringBuilder sbSqlLive = new StringBuilder();
		StringBuilder sqlFilter = new StringBuilder();

		sqlNonComplimentaryBuilder.setLength(0);
		sqlComplimentaryBuilder.setLength(0);
		sqlFilter.setLength(0);
		Query querySql;
		try {

			querySql = webPOSSessionFactory.getCurrentSession().createSQLQuery(
					" truncate table tblatvreport");
			querySql.executeUpdate();

			String posCode = "a.strPOSCode";
			String posName = "d.strPosName";

			if (strPOSCode.equalsIgnoreCase("All")
					&& strPowWise.equalsIgnoreCase("No")) {
				posCode = "'All'";
				posName = "'All'";
			}
			sqlNonComplimentaryBuilder.append("select " + posCode + " ," + posName + ",date(a.dteBillDate) as Date,(sum(a.dblGrandTotal) ) as DiningAmt,sum(intPaxNo)/count(a.strBillNo),'0' "
	                + "from vqbillhd a,vqbillsettlementdtl b,tblsettelmenthd c,tblposmaster d "
	                + "where Date(a.dteBillDate) between '" + fromDate + "' and '" + toDate + "' "
	                + "and a.strPOSCode=d.strPosCode "
	                + "and a.strBillNo=b.strBillNo "
	                + "and b.strSettlementCode=c.strSettelmentCode "
	                + "and a.strOperationType='DineIn' "
	                + "and date(a.dteBillDate)=date(b.dteBillDate) "
	                + "and c.strSettelmentType<>'Complementary' "
	                + "group by a.strPOSCode,date(a.dteBillDate) ");

			sqlComplimentaryBuilder.append("select " + posCode + " ," + posName + ",date(a.dteBillDate)  as Date,(sum(a.dblGrandTotal) ) as DiningAmt,sum(intPaxNo)/count(a.strBillNo),'0' "
			                + "from vqbillhd a,vqbillsettlementdtl b,tblsettelmenthd c,tblposmaster d "
			                + "where Date(a.dteBillDate) between '" + fromDate + "' and '" + toDate + "' "
			                + "and a.strPOSCode=d.strPosCode "
			                + "and a.strBillNo=b.strBillNo "
			                + "and b.strSettlementCode=c.strSettelmentCode "
			                + "and a.strOperationType='DineIn' "
			                + "and date(a.dteBillDate)=date(b.dteBillDate) "
			                + "and c.strSettelmentType='Complementary' "
			                + "group by a.strPOSCode,date(a.dteBillDate)  ");

			if (!strPOSCode.equalsIgnoreCase("All")) {
				sqlFilter.append(" AND a.strPOSCode = '" + strPOSCode + "' ");
			}

			// sHIFT nO
			sqlFilter.append(" and a.intShiftCode = '" + strShiftNo + "' ");

			// posWise and Data Wise Filter

			if (strPowWise.equalsIgnoreCase("Yes")|| strDateWise.equalsIgnoreCase("Yes")) {
				if (strPowWise.equalsIgnoreCase("Yes")&& strDateWise.equalsIgnoreCase("Yes")) {
					sqlFilter.append("group by a.strPOSCode,date(a.dteBillDate) ");
				} 
				else if (strPowWise.equalsIgnoreCase("Yes")) {
					sqlFilter.append("group by a.strPOSCode ");
				} 
				else if (strDateWise.equalsIgnoreCase("Yes")) {
					sqlFilter.append("group by date(a.dteBillDate) ");
				}
			} else {
				sqlFilter.append(" ");
			}			

			
			/*sqlNonComplimentaryBuilder.append(sqlFilter);
			sqlComplimentaryBuilder.append(sqlFilter); */
			
			 Map<String, clsAPCReportBean> mapAPCReport = new HashMap<>();
			 
			 querySql = webPOSSessionFactory.getCurrentSession().createSQLQuery(sqlNonComplimentaryBuilder.toString());
				List listnonComplementary = querySql.list();
		        
				for (int i = 0; i < listnonComplementary.size(); i++) 
		        {
					Object[] obj = (Object[]) listnonComplementary.get(i);
		            String key="";
		            if (strPowWise.equalsIgnoreCase("Yes") || strDateWise.equalsIgnoreCase("Yes"))
		            {
		                if (strPowWise.equalsIgnoreCase("Yes") && strDateWise.equalsIgnoreCase("Yes"))
		                {
		                    key=obj[0].toString()+"!"+obj[2].toString();//posCode+date
		                }
		                else if (strPowWise.equalsIgnoreCase("Yes"))
		                {
		                    key=obj[0].toString();//posCode
		                }
		                else if (strDateWise.equalsIgnoreCase("Yes"))
		                {
		                    key=obj[2].toString();//date
		                }
		            }
		            else
		            {
		                sqlFilter.append(" ");
		            }
			
			
			
			
		            if(mapAPCReport.containsKey(key))
		            {
		                clsAPCReportBean objAPCReport=mapAPCReport.get(key);
		                
		                objAPCReport.setDblDiningAmt(objAPCReport.getDblDiningAmt()+Double.parseDouble(obj[3].toString()));//dining amt
		                objAPCReport.setDblPAXNo(objAPCReport.getDblPAXNo()+Double.parseDouble(obj[4].toString()));//PAX
		                
		                mapAPCReport.put(key, objAPCReport);
		            }
		            else
		            {
		                clsAPCReportBean objAPCReport=new clsAPCReportBean();
		                
		                objAPCReport.setStrPOSCode(obj[0].toString());//posCode
		                objAPCReport.setStrPOSName(obj[1].toString());//posName
		                objAPCReport.setDteBillDate(obj[2].toString());//date
		                objAPCReport.setDblDiningAmt(Double.parseDouble(obj[3].toString()));//dining amt
		                objAPCReport.setDblPAXNo(Double.parseDouble(obj[4].toString()));//PAX
		                
		                mapAPCReport.put(key, objAPCReport);
		            }
		            
		        }
		       

				// truncate
				querySql = webPOSSessionFactory.getCurrentSession().createSQLQuery("truncate tblatvreport");
				querySql.executeUpdate();
			
		        
		        for(clsAPCReportBean objAPCReport:mapAPCReport.values())
		        {
		                    //insert non complimentary sales
		        	querySql = webPOSSessionFactory.getCurrentSession().createSQLQuery("Insert into tblatvreport "
		                + "(strPosCode,strPosName,dteDate,dblDiningAmt,dblDiningNoBill,dblHDNoBill) "
		                + "values('"+objAPCReport.getStrPOSCode()+"','"+objAPCReport.getStrPOSName()+"','"+objAPCReport.getDteBillDate()+"','"+objAPCReport.getDblDiningAmt()+"','"+objAPCReport.getDblPAXNo()+"','0') ");
		        	querySql.executeUpdate();
		        }
		

			querySql = webPOSSessionFactory.getCurrentSession().createSQLQuery("update tblatvreport set dblDiningAvg=  dblDiningAmt/dblDiningNoBill");
			querySql.executeUpdate();

			
			// Complimentary

			querySql = webPOSSessionFactory.getCurrentSession().createSQLQuery(
					sqlComplimentaryBuilder.toString());
			List listSqlLive = querySql.list();
			if (listSqlLive.size() > 0) {

				for (int i = 0; i < listSqlLive.size(); i++) {

					Object[] obj = (Object[]) listSqlLive.get(i);

					querySql = webPOSSessionFactory.getCurrentSession().createSQLQuery("update tblatvreport set dblHDNoBill='"
											+ obj[4] + "' "
											+ " where strPosCode='" + obj[0]
											+ "' and dteDate='" + obj[2]
											+ "'  ");
					querySql.executeUpdate();
				}
			}

			sbSqlLive.setLength(0);
			sbSqlLive
					.append("select a.strPosCode,a.strPosName,a.dteDate,a.dblDiningAmt,ifnull(a.dblDiningNoBill,0.0)"
							+ " ,ifnull(a.dblDiningAvg,0.0),ifnull(a.dblHDAmt,0.0),"
							+ " ifnull(a.dblHDNoBill,0.0),ifnull(a.dblHdAvg,0.0)"
							+ " ,ifnull(a.dblTAAmt,0.0),ifnull(a.dblTANoBill,0.0)"
							+ " ,ifnull(a.dblTAAvg,0.0) from tblatvreport a");
			querySql = webPOSSessionFactory.getCurrentSession().createSQLQuery(
					sbSqlLive.toString());

			List listSqlFile = querySql.list();
			if (listSqlFile.size() > 0) {

				for (int i = 0; i < listSqlFile.size(); i++) {
					Object[] obj = (Object[]) listSqlFile.get(i);
					JSONObject jObj = new JSONObject();
					jObj.put("strPosCode", obj[0].toString());
					jObj.put("strPosName", obj[1].toString());
					jObj.put("dteDate", obj[2].toString());
					jObj.put("dblDiningAmt", obj[3].toString());
					jObj.put("dblDiningNoBill", obj[4].toString());
					jObj.put("dblDiningAvg", obj[5].toString());
					jObj.put("dblHDAmt", obj[6].toString());
					jObj.put("dblHDNoBill", obj[7].toString());
					jObj.put("dblHdAvg", obj[8].toString());
					jObj.put("dblTAAmt", obj[9].toString());
					jObj.put("dblTANoBill", obj[10].toString());
					jObj.put("dblTAAvg", obj[11].toString());
					jArr.put(jObj);
				}
				// jOBjRet.put("jArr", jArr);
			}

			sbSqlLive.setLength(0);
			sbSqlLive
					.append("select a.strClientCode,a.strClientName,a.strAddressLine1,"
							+ "a.strAddressLine2,a.strAddressLine3,"
							+ "a.strEmail,a.strCityName,a.strState,"
							+ "a.strCountry,a.intTelephoneNo from  tblsetup a");

			querySql = webPOSSessionFactory.getCurrentSession().createSQLQuery(
					sbSqlLive.toString());
			listSqlFile = querySql.list();
			if (listSqlFile.size() > 0) {

				for (int i = 0; i < listSqlFile.size(); i++) {
					Object[] obj = (Object[]) listSqlFile.get(i);
					JSONObject jObj = new JSONObject();
					jObj.put("strClientCode", obj[0].toString());
					jObj.put("strClientName", obj[1].toString());
					jObj.put("strAddressLine1", obj[2].toString());
					jObj.put("strAddressLine2", obj[3].toString());
					jObj.put("strAddressLine3", obj[4].toString());
					jObj.put("strEmail", obj[5].toString());
					jObj.put("strCityName", obj[6].toString());
					jObj.put("strState", obj[7].toString());
					jObj.put("strCountry", obj[8].toString());
					jObj.put("intTelephoneNo", obj[9].toString());

					jArr1.put(jObj);
				}
				// jOBjRet.put("jArr", jArr);
			}
			jOBjRet.put("jArr", jArr);
			jOBjRet.put("jArr1", jArr1);

		}

		catch (Exception ex) {
			ex.printStackTrace();
		}
		return jOBjRet;
	}
	
	
	public JSONObject funDiscountWiseReportDtl(String fromDate,String toDate,String strPOSCode,String strShiftNo,String strViewType,String strUserCode)
	{
		List listRet =new ArrayList();
		 StringBuilder sbSqlLive = new StringBuilder();
         StringBuilder sbSqlQFile = new StringBuilder();
         StringBuilder sbSqlFilters = new StringBuilder();
         JSONArray jArr =new JSONArray();
         JSONObject jOBjRet=new JSONObject();
         

         sbSqlLive.setLength(0);
         sbSqlQFile.setLength(0);
         sbSqlFilters.setLength(0);
         if(strViewType.equalsIgnoreCase("Summary"))
         {

         try
         {
         sbSqlQFile.append("select d.strPosName,date(a.dteBillDate),a.strBillNo,b.dblDiscPer,b.dblDiscAmt,b.dblDiscOnAmt,b.strDiscOnType,b.strDiscOnValue "
                 + " ,c.strReasonName,b.strDiscRemarks,a.dblSubTotal,a.dblGrandTotal,b.strUserEdited "
                 + " from \n"
                 + " tblqbillhd a\n"
                 + " left outer join tblqbilldiscdtl b on b.strBillNo=a.strBillNo\n"
                 + " left outer join tblreasonmaster c on c.strReasonCode=b.strDiscReasonCode\n"
                 + " left outer join tblposmaster d on d.strPOSCode=a.strPOSCode\n"
                 + " where  (b.dblDiscAmt> 0.00 or b.dblDiscPer >0.0) \n"
                 + " and date(a.dteBillDate) between '" + fromDate + "' and '" + toDate + "' "
                 + " and a.strClientCode=b.strClientCode ");

         sbSqlLive.append("select d.strPosName,date(a.dteBillDate),a.strBillNo,b.dblDiscPer,b.dblDiscAmt,b.dblDiscOnAmt,b.strDiscOnType,b.strDiscOnValue "
                 + " ,c.strReasonName,b.strDiscRemarks,a.dblSubTotal,a.dblGrandTotal,b.strUserEdited "
                 + " from \n"
                 + " tblbillhd a\n"
                 + " left outer join tblbilldiscdtl b on b.strBillNo=a.strBillNo\n"
                 + " left outer join tblreasonmaster c on c.strReasonCode=b.strDiscReasonCode\n"
                 + " left outer join tblposmaster d on d.strPOSCode=a.strPOSCode\n"
                 + " where  (b.dblDiscAmt> 0.00 or b.dblDiscPer >0.0) \n"
                 + " and date(a.dteBillDate) between '" + fromDate + "' and '" + toDate + "' "
                 + " and a.strClientCode=b.strClientCode ");

       
         sbSqlFilters.append(" and date( a.dteBillDate ) BETWEEN '" + fromDate + "' AND '" + toDate + "' ");
         if (!strPOSCode.equalsIgnoreCase("All"))
         {
             sbSqlFilters.append(" AND a.strPOSCode = '" + strPOSCode + "' ");
         }

//         if (clsGlobalVarClass.gEnableShiftYN)
//         {
//             if (clsGlobalVarClass.gEnableShiftYN && (!strShiftNo.equalsIgnoreCase("All")))
//             {
                 sbSqlFilters.append(" and a.intShiftCode = '" + strShiftNo + "' ");
//             }
//         }

        // sbSqlFilters.append(" Group BY   a.strPoscode ");

         sbSqlLive.append(sbSqlFilters);
         sbSqlQFile.append(sbSqlFilters);
       
 	    
 	    Query querySqlLive = webPOSSessionFactory.getCurrentSession().createSQLQuery(sbSqlLive.toString());
 	    List listSqlLive = querySqlLive.list();
 	    if(listSqlLive.size()>0)
 	    {
 	    	for(int i=0 ;i<listSqlLive.size();i++ )
 	    	{
 	    		
 	    		Object[] obj = (Object[]) listSqlLive.get(i);
 	    		JSONObject jObj =new JSONObject();
 	    		
 	    		jObj.put("strPosName",obj[0].toString());
 	    		jObj.put("dteBillDate",obj[1].toString());
 	    		jObj.put("strBillNo",obj[2].toString());
 	    		jObj.put("dblDiscPer",obj[3].toString());
 	    		jObj.put("dblDiscAmt",obj[4].toString());
 	    		jObj.put("dblDiscOnAmt",obj[5].toString());
 	    		jObj.put("strDiscOnType",obj[6].toString());
 	    		jObj.put("strDiscOnValue",obj[7].toString());
 	    		jObj.put("strReasonName",obj[8].toString());
 	    		jObj.put("strDiscRemarks",obj[9].toString());
 	    		jObj.put("dblSubTotal",obj[10].toString());
 	    		jObj.put("dblGrandTotal",obj[11].toString());
 	    	    jObj.put("strUserEdited",obj[12].toString());
 	    		jArr.put(jObj);
 	    	}
 	   // 	jOBjRet.put("jArr", jArr);
 	    }
 	  //  listRet.add(listSqlLive);
 	    
 	    Query queryQFile = webPOSSessionFactory.getCurrentSession().createSQLQuery(sbSqlQFile.toString());
	    List listSqlQFile = queryQFile.list();
	    if(listSqlQFile.size()>0)
 	    {
	    	
 	    	for(int i=0 ;i<listSqlQFile.size();i++ )
 	    	{
 	    		Object[] obj = (Object[]) listSqlQFile.get(i);
 	    		JSONObject jObj =new JSONObject();
 	    		jObj.put("strPosName",obj[0].toString());
 	    		jObj.put("dteBillDate",obj[1].toString());
 	    		jObj.put("strBillNo",obj[2].toString());
 	    		jObj.put("dblDiscPer",obj[3].toString());
 	    		jObj.put("dblDiscAmt",obj[4].toString());
 	    		jObj.put("dblDiscOnAmt",obj[5].toString());
 	    		jObj.put("strDiscOnType",obj[6].toString());
 	    		jObj.put("strDiscOnValue",obj[7].toString());
 	    		jObj.put("strReasonName",obj[8].toString());
 	    		jObj.put("strDiscRemarks",obj[9].toString());
 	    		jObj.put("dblSubTotal",obj[10].toString());
 	    		jObj.put("dblGrandTotal",obj[11].toString());
 	    	    jObj.put("strUserEdited",obj[12].toString());
 	    		jArr.put(jObj);
 	    	}
 	  
 	    }
	    
	    jOBjRet.put("jArr", jArr);
         }
         catch(Exception ex)
         {
        	 ex.printStackTrace();
         }
         
         }
         else
         {
        	 try
             {
        		 sbSqlLive.append("select a.strBillNo,DATE_FORMAT(a.dteBillDate,'%d-%m-%Y') as dteBillDate,c.strPosName,a.dblSubTotal,a.dblGrandTotal "
                         + ",b.strItemCode,b.strItemName,b.dblQuantity,sum(b.dblAmount),sum(b.dblDiscountAmt),b.dblDiscountPer,a.dblDiscountPer as dblBillDiscPer  "
                         + "from tblbillhd a "
                         + "inner join  tblbilldtl b on a.strBillNo=b.strBillNo "
                         + "inner join tblposmaster c on a.strPOSCode=c.strPOSCode "
                         + "where date(a.dteBillDate) between '" + fromDate + "' and '" + toDate + "'  "
                         + "and b.dblDiscountPer>0 ");
        		 
        		 String sqlModLive="select a.strBillNo,DATE_FORMAT(a.dteBillDate,'%d-%m-%Y') as dteBillDate,c.strPosName,a.dblSubTotal,a.dblGrandTotal "
                         + ",b.strItemCode,b.strModifierName,b.dblQuantity,sum(b.dblAmount),sum(b.dblDiscAmt),b.dblDiscPer,a.dblDiscountPer  "
                         + "from tblbillhd a "
                         + "inner join  tblbillmodifierdtl b on a.strBillNo=b.strBillNo "
                         + "inner join tblposmaster c on a.strPOSCode=c.strPOSCode "
                         + "where date(a.dteBillDate) between '" + fromDate + "' and '" + toDate + "'  "
                         + "and b.dblDiscPer>0 ";
        		 
        		 
                 sbSqlQFile.append("select a.strBillNo,DATE_FORMAT(a.dteBillDate,'%d-%m-%Y') as dteBillDate,c.strPosName,a.dblSubTotal,a.dblGrandTotal "
                         + ",b.strItemCode,b.strItemName,b.dblQuantity,sum(b.dblAmount),sum(b.dblDiscountAmt),b.dblDiscountPer,a.dblDiscountPer as dblBillDiscPer "
                         + "from tblqbillhd a "
                         + "inner join  tblqbilldtl b on a.strBillNo=b.strBillNo "
                         + "inner join tblposmaster c on a.strPOSCode=c.strPOSCode "
                         + "where date(a.dteBillDate) between '" + fromDate + "' and '" + toDate + "'  "
                         + "and b.dblDiscountPer>0 ");
	
	            
                 String  sqlModQFile="select a.strBillNo,DATE_FORMAT(a.dteBillDate,'%d-%m-%Y') as dteBillDate,c.strPosName,a.dblSubTotal,a.dblGrandTotal "
	                     + ",b.strItemCode,b.strModifierName,b.dblQuantity,sum(b.dblAmount),sum(b.dblDiscAmt),b.dblDiscPer,a.dblDiscountPer  "
	                     + "from tblqbillhd a "
	                     + "inner join  tblqbillmodifierdtl b on a.strBillNo=b.strBillNo "
	                     + "inner join tblposmaster c on a.strPOSCode=c.strPOSCode "
	                     + "where date(a.dteBillDate) between '" + fromDate + "' and '" + toDate + "'  "
	                     + "and b.dblDiscPer>0 ";
                 
                 
             sbSqlFilters.append(" and date( a.dteBillDate ) BETWEEN '" + fromDate + "' AND '" + toDate + "' ");
             if (!strPOSCode.equalsIgnoreCase("All"))
             {
                 sbSqlFilters.append(" AND a.strPOSCode = '" + strPOSCode + "' ");
             }

//             if (clsGlobalVarClass.gEnableShiftYN)
//             {
//                 if (clsGlobalVarClass.gEnableShiftYN && (!strShiftNo.equalsIgnoreCase("All")))
//                 {
                  //   sbSqlFilters.append(" and a.intShiftCode = '" + strShiftNo + "' ");
//                 }
//             }

             sbSqlFilters.append("group by a.strBillNo,b.strItemCode,b.strItemName "
                     + "order by a.strBillNo,b.strItemCode,b.strItemName");

             String sbModSqlFilters="group by a.strBillNo,b.strItemCode,b.strModifierName "
                     + "order by a.strBillNo,b.strItemCode,b.strModifierName";
             sbSqlLive.append(sbSqlFilters);
             sbSqlQFile.append(sbSqlFilters);
             sqlModLive += " " + sbModSqlFilters;
             sqlModQFile += " " + sbModSqlFilters;
             
           
     	    
     	    Query querySqlLive = webPOSSessionFactory.getCurrentSession().createSQLQuery(sbSqlLive.toString());
     	    List listSqlLive = querySqlLive.list();
     	    if(listSqlLive.size()>0)
     	    {
     	    	for(int i=0 ;i<listSqlLive.size();i++ )
     	    	{
     	    		
     	    		Object[] obj = (Object[]) listSqlLive.get(i);
     	    		JSONObject jObj =new JSONObject();
     	    		
     	    		jObj.put("strBillNo",obj[0].toString());       
                    jObj.put("dteBillDate",obj[1].toString());
                    jObj.put("strPosName",obj[2].toString());
                    jObj.put("dblSubTotal",obj[3].toString());
             	    jObj.put("dblGrandTotal",obj[4].toString());
                    jObj.put("strItemCode",obj[5].toString());
             	    jObj.put("strItemName",obj[6].toString());
             	    jObj.put("dblQuantity",obj[7].toString());
             	    jObj.put("dblAmount",obj[8].toString());
             	    jObj.put("dblDiscountAmt",obj[9].toString());
             	    jObj.put("dblDiscountPer",obj[10].toString());
     	    		jObj.put("dblBillDiscPer",obj[11].toString());
     	    		
     	    		
     	    		
     	    	    
     	    		jArr.put(jObj);
     	    	}
     	   // 	jOBjRet.put("jArr", jArr);
     	    }
     	  //  listRet.add(listSqlLive);
     	    
     	    Query queryQFile = webPOSSessionFactory.getCurrentSession().createSQLQuery(sbSqlQFile.toString());
    	    List listSqlQFile = queryQFile.list();
    	    if(listSqlQFile.size()>0)
     	    {
    	    	
     	    	for(int i=0 ;i<listSqlQFile.size();i++ )
     	    	{
     	    		Object[] obj = (Object[]) listSqlQFile.get(i);
     	    		JSONObject jObj =new JSONObject();
     	    		
     	    		jObj.put("strBillNo",obj[0].toString());       
                    jObj.put("dteBillDate",obj[1].toString());
                    jObj.put("strPosName",obj[2].toString());
                    jObj.put("dblSubTotal",obj[3].toString());
             	    jObj.put("dblGrandTotal",obj[4].toString());
                    jObj.put("strItemCode",obj[5].toString());
             	    jObj.put("strItemName",obj[6].toString());
             	    jObj.put("dblQuantity",obj[7].toString());
             	    jObj.put("dblAmount",obj[8].toString());
             	    jObj.put("dblDiscountAmt",obj[9].toString());
             	    jObj.put("dblDiscountPer",obj[10].toString());
     	    		jObj.put("dblBillDiscPer",obj[11].toString());
     	    		
     	    		
     	    		jArr.put(jObj);
     	    	}
     	  
     	    }
    	    
    	    Query queryModLive = webPOSSessionFactory.getCurrentSession().createSQLQuery(sqlModLive.toString());
    	   queryModLive.list();
    	    List listSqlModLive = queryModLive.list();
    	    if(listSqlModLive.size()>0)
     	    {
    	 
     	    	for(int i=0 ;i<listSqlModLive.size();i++ )
     	    	{
     	    		Object[] obj = (Object[]) listSqlModLive.get(i);
     	    		JSONObject jObj =new JSONObject();
     	    		
     	    		jObj.put("strBillNo",obj[0].toString());       
                    jObj.put("dteBillDate",obj[1].toString());
                    jObj.put("strPosName",obj[2].toString());
                    jObj.put("dblSubTotal",obj[3].toString());
             	    jObj.put("dblGrandTotal",obj[4].toString());
                    jObj.put("strItemCode",obj[5].toString());
             	    jObj.put("strItemName",obj[6].toString());
             	    jObj.put("dblQuantity",obj[7].toString());
             	    jObj.put("dblAmount",obj[8].toString());
             	    jObj.put("dblDiscountAmt",obj[9].toString());
             	    jObj.put("dblDiscountPer",obj[10].toString());
     	    		jObj.put("dblBillDiscPer",obj[11].toString());
     	    		jArr.put(jObj);
     	    	}
     	  
     	    }
    	    
    	    Query queryModQFile = webPOSSessionFactory.getCurrentSession().createSQLQuery(sqlModQFile.toString());
    	    List listSqlModQFile = queryModQFile.list();
    	    if(listSqlModQFile.size()>0)
     	    {
    	    	
     	    	for(int i=0 ;i<listSqlModQFile.size();i++ )
     	    	{
     	    		Object[] obj = (Object[]) listSqlModQFile.get(i);
     	    		JSONObject jObj =new JSONObject();
     	    		
     	    		jObj.put("strBillNo",obj[0].toString());       
                    jObj.put("dteBillDate",obj[1].toString());
                    jObj.put("strPosName",obj[2].toString());
                    jObj.put("dblSubTotal",obj[3].toString());
             	    jObj.put("dblGrandTotal",obj[4].toString());
                    jObj.put("strItemCode",obj[5].toString());
             	    jObj.put("strItemName",obj[6].toString());
             	    jObj.put("dblQuantity",obj[7].toString());
             	    jObj.put("dblAmount",obj[8].toString());
             	    jObj.put("dblDiscountAmt",obj[9].toString());
             	    jObj.put("dblDiscountPer",obj[10].toString());
     	    		jObj.put("dblBillDiscPer",obj[11].toString());
     	    		jArr.put(jObj);
     	    	}
     	  
     	    }
    	    
    	    jOBjRet.put("jArr", jArr);
             }
             catch(Exception ex)
             {
            	 ex.printStackTrace();
             }
        	 
         }
	    
	    return 	jOBjRet;
		
	}
	
	
	
	public JSONObject funGetPOSWiseSalesReportDtl(String fromDate,String toDate,String strViewType)
	{
		
		 StringBuilder sbSql = new StringBuilder();


         JSONObject jOBjRet=new JSONObject();
         List listRet =new ArrayList();
		 StringBuilder sbSqlLive = new StringBuilder();
         StringBuilder sbSqlQFile = new StringBuilder();
         StringBuilder sbSqlFilters = new StringBuilder();
         JSONArray jArr =new JSONArray();
        
         double total=0.0,grandTotal=0.0;

         sbSqlLive.setLength(0);
         sbSqlQFile.setLength(0);
         sbSqlFilters.setLength(0);
  
         int colCount=4;
         try
         {
        	 if(strViewType.equalsIgnoreCase("ITEM WISE"))
             {
      	        
      	        sbSqlLive.append("  select a.strItemCode,a.strItemName,c.strPOSName,sum(a.dblQuantity),sum(a.dblTaxAmount) "
                         + "  ,sum(a.dblAmount)-sum(a.dblDiscountAmt),'SANGUINE' ,sum(a.dblAmount), "
                         + " sum(a.dblDiscountAmt),DATE_FORMAT(date(b.dteBillDate),'%d-%m-%Y'),b.strPOSCode "
                         + " from tblbilldtl a,tblbillhd b,tblposmaster c "
                         + " where a.strBillNo=b.strBillNo and b.strPOSCode=c.strPosCode "
                         + " and date( b.dteBillDate ) BETWEEN '" + fromDate + "' AND '" + toDate + "'   "
                         + " group by a.strItemCode,c.strPOSName  order by b.dteBillDate   ");
      	        
      	        sbSqlQFile.append("select a.strItemCode,a.strItemName,c.strPOSName,sum(a.dblQuantity),sum(a.dblTaxAmount) "
                             + " ,sum(a.dblAmount)-sum(a.dblDiscountAmt),'SANGUINE' ,sum(a.dblAmount), "
                             + " sum(a.dblDiscountAmt),DATE_FORMAT(date(b.dteBillDate),'%d-%m-%Y'),b.strPOSCode "
                             + " from tblqbilldtl a,tblqbillhd b,tblposmaster c "
                             + " where a.strBillNo=b.strBillNo and b.strPOSCode=c.strPosCode "
                             + " and date( b.dteBillDate ) BETWEEN '" + fromDate + "' AND '" + toDate + "'   "
                             + " group by a.strItemCode,c.strPOSName  order by b.dteBillDate ");

      	        String sqlModLive = " select a.strItemCode,a.strModifierName,c.strPOSName,sum(a.dblQuantity),'0.0', "
                             + " sum(a.dblAmount)-sum(a.dblDiscAmt),'SANGUINE' ,sum(a.dblAmount), "
                             + " sum(a.dblDiscAmt),DATE_FORMAT(date(b.dteBillDate),'%d-%m-%Y'),b.strPOSCode  "
                             + " from tblbillmodifierdtl a,tblbillhd b,tblposmaster c  "
                             + " where a.strBillNo=b.strBillNo and b.strPOSCode=c.strPosCode  "
                             + " and a.dblamount>0  "
                             + " and date( b.dteBillDate ) BETWEEN '" + fromDate + "' AND '" + toDate + "'   "
                             + " group by a.strItemCode,c.strPOSName  order by b.dteBillDate ";

      	        String sqlModQFile = "select a.strItemCode,a.strModifierName,c.strPOSName,sum(a.dblQuantity),'0', "
                             + " sum(a.dblAmount)-sum(a.dblDiscAmt),'SANGUINE' ,sum(a.dblAmount), "
                             + " sum(a.dblDiscAmt),DATE_FORMAT(date(b.dteBillDate),'%d-%m-%Y'),b.strPOSCode "
                             + " from tblqbillmodifierdtl a,tblqbillhd b,tblposmaster c,tblitemmaster d "
                             + " where a.strBillNo=b.strBillNo and b.strPOSCode=c.strPosCode "
                             + " and a.strItemCode=d.strItemCode and a.dblamount>0 "
                             + " and date( b.dteBillDate ) BETWEEN '" + fromDate + "' AND '" + toDate + "'   "
                             + " group by a.strItemCode,c.strPOSName  order by b.dteBillDate ";

      	       
      	        
      	         
      	       
      		    
      		    Query querySqlLive = webPOSSessionFactory.getCurrentSession().createSQLQuery(sbSqlLive.toString());
      		    List listSqlLive = querySqlLive.list();
      		    if(listSqlLive.size()>0)
      		    {
      		    	
      		    	for(int i=0 ;i<listSqlLive.size();i++ )
      		    	{
      		    		Object[] obj = (Object[]) listSqlLive.get(i);
      		    		JSONObject jObj =new JSONObject();
      		    		jObj.put("strItemCode",obj[0].toString());
      		    		jObj.put("strItemName",obj[1].toString());
      		    		jObj.put("strPOSName",obj[2].toString());
      		    		jObj.put("dblTaxAmount",obj[4].toString());
      		    		jObj.put("dblAmount",obj[7].toString());
      		    		jObj.put("dblDiscountAmt",obj[8].toString());
      		    		jObj.put("strPOSCode",obj[10].toString());
      		    
      		    		 total+=Double.parseDouble(obj[7].toString());
      		    		jArr.put(jObj);
      		    	}
      		   // 	jOBjRet.put("jArr", jArr);
      		    }
      		  //  listRet.add(listSqlLive);
      		    
      		    Query queryQFile = webPOSSessionFactory.getCurrentSession().createSQLQuery(sbSqlQFile.toString());
      		    List listSqlQFile = queryQFile.list();
      		    if(listSqlQFile.size()>0)
      		    {
      		    	
      		    	for(int i=0 ;i<listSqlQFile.size();i++ )
      		    	{
      		    		Object[] obj = (Object[]) listSqlQFile.get(i);
      		    		JSONObject jObj =new JSONObject();
      		    		jObj.put("strItemCode",obj[0].toString());
      		    		jObj.put("strItemName",obj[1].toString());
      		    		jObj.put("strPOSName",obj[2].toString());
      		    		jObj.put("dblTaxAmount",obj[4].toString());
      		    		jObj.put("dblAmount",obj[7].toString());
      		    		jObj.put("dblDiscountAmt",obj[8].toString());
      		    		jObj.put("strPOSCode",obj[10].toString());
      		    		
      		    		 total+=Double.parseDouble(obj[7].toString());
      		    		jArr.put(jObj);
      		    		
      		    	}
      		   // 	jOBjRet.put("jArr", jArr);
      		    }
      		   // listRet.add(listSqlQFile);
      		    
      		    Query querySqlModLive = webPOSSessionFactory.getCurrentSession().createSQLQuery(sqlModLive.toString());
      		    List listSqlModLive = querySqlModLive.list();
      		   if(listSqlModLive.size()>0)
      		    {
      			 
      		    	for(int i=0 ;i<listSqlModLive.size();i++ )
      		    	{
      		    		
      		    		Object[] obj = (Object[]) listSqlModLive.get(i);
      		    		JSONObject jObj =new JSONObject();
      		    		jObj.put("strItemCode",obj[0].toString());
      		    		jObj.put("strItemName",obj[1].toString());
      		    		jObj.put("strPOSName",obj[2].toString());
      		    		jObj.put("dblTaxAmount",obj[4].toString());
      		    		jObj.put("dblAmount",obj[7].toString());
      		    		jObj.put("dblDiscountAmt",obj[8].toString());
      		    		jObj.put("strPOSCode",obj[10].toString());
      		    	
      		    		 total+=Double.parseDouble(obj[7].toString());
      		    		jArr.put(jObj);
      		    	}
      		    //	jOBjRet.put("jArr", jArr);
      		    }
      		   // listRet.add(listSqlModLive);
      		    
      		    Query querySqlModQFile = webPOSSessionFactory.getCurrentSession().createSQLQuery(sqlModQFile.toString());
      		    List listSqlModQFile = querySqlModQFile.list();
      		    if(listSqlModQFile.size()>0)
      		    {
      		    	
      		    	for(int i=0 ;i<listSqlModQFile.size();i++ )
      		    	{
      		    		Object[] obj = (Object[]) listSqlModQFile.get(i);
      		    		JSONObject jObj =new JSONObject();
      		    		jObj.put("strItemCode",obj[0].toString());
      		    		jObj.put("strItemName",obj[1].toString());
      		    		jObj.put("strPOSName",obj[2].toString());
      		    		jObj.put("dblTaxAmount",obj[4].toString());
      		    		jObj.put("dblAmount",obj[7].toString());
      		    		jObj.put("dblDiscountAmt",obj[8].toString());
      		    		jObj.put("strPOSCode",obj[10].toString());
      		    	
      		    		 total+=Double.parseDouble(obj[7].toString());
      		    		jArr.put(jObj);
      		    	}
      		    }
      		    
             }	 
        if(strViewType.equalsIgnoreCase("Group Wise"))
        {
 	        
 	        sbSqlLive.append("  SELECT c.strGroupCode,c.strGroupName,sum( b.dblQuantity),"
                        + " sum( b.dblAmount)-sum(b.dblDiscountAmt) ,f.strPosName, 'SANGUINE',b.dblRate ,sum(b.dblAmount),sum(b.dblDiscountAmt),a.strPOSCode "
                        + " FROM tblbillhd a,tblbilldtl b,tblgrouphd c,tblsubgrouphd d,tblitemmaster e,tblposmaster f "
                        + " where a.strBillNo=b.strBillNo and a.strPOSCode=f.strPOSCode and b.strItemCode=e.strItemCode and c.strGroupCode=d.strGroupCode "
                        + " and d.strSubGroupCode=e.strSubGroupCode "
                        + " and date( a.dteBillDate ) BETWEEN '" + fromDate + "' AND '" + toDate + "' "
                        + " GROUP BY c.strGroupCode, c.strGroupName, a.strPoscode    ");
 	        
 	        sbSqlQFile.append("SELECT c.strGroupCode,c.strGroupName,sum( b.dblQuantity),"
                        + " sum( b.dblAmount)-sum(b.dblDiscountAmt) ,f.strPosName, 'SANGUINE',b.dblRate ,sum(b.dblAmount),sum(b.dblDiscountAmt),a.strPOSCode  "
                        + " FROM tblqbillhd a,tblqbilldtl b,tblgrouphd c,tblsubgrouphd d,tblitemmaster e,tblposmaster f "
                        + " where a.strBillNo=b.strBillNo and a.strPOSCode=f.strPOSCode and b.strItemCode=e.strItemCode and c.strGroupCode=d.strGroupCode "
                        + " and d.strSubGroupCode=e.strSubGroupCode  "
                        + " and date( a.dteBillDate ) BETWEEN '" + fromDate + "' AND '" + toDate + "' "
                        + " GROUP BY c.strGroupCode, c.strGroupName, a.strPoscode  ");

 	        String sqlModLive = " select c.strGroupCode,c.strGroupName,sum(b.dblQuantity),sum(b.dblAmount)-sum(b.dblDiscAmt),f.strPOSName,'SANGUINE','0' ,"
                        + " sum(b.dblAmount),sum(b.dblDiscAmt),a.strPOSCode  "
                        + " from tblbillmodifierdtl b,tblbillhd a,tblposmaster f,tblitemmaster d,tblsubgrouphd e,tblgrouphd c  "
                        + " where a.strBillNo=b.strBillNo and a.strPOSCode=f.strPosCode  "
                        + " and LEFT(b.strItemCode,7)=d.strItemCode  and d.strSubGroupCode=e.strSubGroupCode "
                        + " and e.strGroupCode=c.strGroupCode  and b.dblamount>0  "
                        + " and date( a.dteBillDate ) BETWEEN '" + fromDate + "' AND '" + toDate + "' "
                        + " GROUP BY c.strGroupCode, c.strGroupName, a.strPoscode  ";

 	        String sqlModQFile = "select c.strGroupCode,c.strGroupName,sum(b.dblQuantity),sum(b.dblAmount)-sum(b.dblDiscAmt),f.strPOSName,'SANGUINE','0' , "
                        + " sum(b.dblAmount),sum(b.dblDiscAmt),a.strPOSCode  "
                        + " from tblqbillmodifierdtl b,tblqbillhd a,tblposmaster f,tblitemmaster d,tblsubgrouphd e,tblgrouphd c  "
                        + " where a.strBillNo=b.strBillNo and a.strPOSCode=f.strPosCode  and LEFT(b.strItemCode,7)=d.strItemCode  "
                        + " and d.strSubGroupCode=e.strSubGroupCode and e.strGroupCode=c.strGroupCode  and b.dblamount>0  "
                        + " and date( a.dteBillDate ) BETWEEN '" + fromDate + "' AND '" + toDate + "'   "
                        + " GROUP BY c.strGroupCode, c.strGroupName, a.strPoscode ";

 	       
 	        
 	         
 	       
 		    
 		    Query querySqlLive = webPOSSessionFactory.getCurrentSession().createSQLQuery(sbSqlLive.toString());
 		    List listSqlLive = querySqlLive.list();
 		    if(listSqlLive.size()>0)
 		    {
 		    	
 		    	for(int i=0 ;i<listSqlLive.size();i++ )
 		    	{
 		    		Object[] obj = (Object[]) listSqlLive.get(i);
 		    		JSONObject jObj =new JSONObject();
 		    		jObj.put("strGroupCode",obj[0].toString());
 		    		jObj.put("strGroupName",obj[1].toString());
 		    		jObj.put("dblQuantity",obj[2].toString());
 		    		jObj.put("strPosName",obj[4].toString());
 		    		jObj.put("dblAmount",obj[7].toString());
 		    
 		    
 		    		 total+=Double.parseDouble(obj[7].toString());
 		    		jArr.put(jObj);
 		    	}
 		   // 	jOBjRet.put("jArr", jArr);
 		    }
 		  //  listRet.add(listSqlLive);
 		    
 		    Query queryQFile = webPOSSessionFactory.getCurrentSession().createSQLQuery(sbSqlQFile.toString());
 		    List listSqlQFile = queryQFile.list();
 		    if(listSqlQFile.size()>0)
 		    {
 		    	
 		    	for(int i=0 ;i<listSqlQFile.size();i++ )
 		    	{
 		    		Object[] obj = (Object[]) listSqlQFile.get(i);
 		    		JSONObject jObj =new JSONObject();
 		    		jObj.put("strGroupCode",obj[0].toString());
 		    		jObj.put("strGroupName",obj[1].toString());
 		    		jObj.put("dblQuantity",obj[2].toString());
 		    		jObj.put("strPosName",obj[4].toString());
 		    		jObj.put("dblAmount",obj[7].toString());
 		    		 total+=Double.parseDouble(obj[7].toString());
 		    		jArr.put(jObj);
 		    		
 		    	}
 		   // 	jOBjRet.put("jArr", jArr);
 		    }
 		   // listRet.add(listSqlQFile);
 		    
 		    Query querySqlModLive = webPOSSessionFactory.getCurrentSession().createSQLQuery(sqlModLive.toString());
 		    List listSqlModLive = querySqlModLive.list();
 		   if(listSqlModLive.size()>0)
 		    {
 			 
 		    	for(int i=0 ;i<listSqlModLive.size();i++ )
 		    	{
 		    		
 		    		Object[] obj = (Object[]) listSqlModLive.get(i);
 		    		JSONObject jObj =new JSONObject();
 		    		jObj.put("strGroupCode",obj[0].toString());
 		    		jObj.put("strGroupName",obj[1].toString());
 		    		jObj.put("dblQuantity",obj[2].toString());
 		    		jObj.put("strPosName",obj[4].toString());
 		    		jObj.put("dblAmount",obj[7].toString());
 		    	
 		    		 total+=Double.parseDouble(obj[7].toString());
 		    		jArr.put(jObj);
 		    	}
 		    //	jOBjRet.put("jArr", jArr);
 		    }
 		   // listRet.add(listSqlModLive);
 		    
 		    Query querySqlModQFile = webPOSSessionFactory.getCurrentSession().createSQLQuery(sqlModQFile.toString());
 		    List listSqlModQFile = querySqlModQFile.list();
 		    if(listSqlModQFile.size()>0)
 		    {
 		    	
 		    	for(int i=0 ;i<listSqlModQFile.size();i++ )
 		    	{
 		    		Object[] obj = (Object[]) listSqlModQFile.get(i);
 		    		JSONObject jObj =new JSONObject();
 		    		jObj.put("strGroupCode",obj[0].toString());
 		    		jObj.put("strGroupName",obj[1].toString());
 		    		jObj.put("dblQuantity",obj[2].toString());
 		    		jObj.put("strPosName",obj[4].toString());
 		    		jObj.put("dblAmount",obj[7].toString());
 		    	
 		    		 total+=Double.parseDouble(obj[7].toString());
 		    		jArr.put(jObj);
 		    	}
 		    }
 		    
        }
        if(strViewType.equalsIgnoreCase("Sub Group WISE"))
        {
 	        
 	        sbSqlLive.append("  SELECT c.strSubGroupCode, c.strSubGroupName, sum( b.dblQuantity )  , sum( b.dblAmount )-sum(b.dblDiscountAmt), f.strPosName,'SANGUINE',b.dblRate , "
                        + " sum(b.dblAmount),sum(b.dblDiscountAmt),a.strPOSCode "
                        + " from tblbillhd a,tblbilldtl b,tblsubgrouphd c,tblitemmaster d  ,tblposmaster f  "
                        + " where a.strBillNo=b.strBillNo and a.strPOSCode=f.strPOSCode  "
                        + " and b.strItemCode=d.strItemCode  and c.strSubGroupCode=d.strSubGroupCode  "
                        + " and date( a.dteBillDate ) BETWEEN '" + fromDate + "' AND '" + toDate + "' "
                        + " group by c.strSubGroupCode, c.strSubGroupName, a.strPoscode    ");
 	        
 	        sbSqlQFile.append("SELECT c.strSubGroupCode, c.strSubGroupName, sum( b.dblQuantity )  , "
                        + " sum( b.dblAmount )-sum(b.dblDiscountAmt), f.strPosName,'SANGUINE',b.dblRate ,sum(b.dblAmount),sum(b.dblDiscountAmt),a.strPOSCode "
                        + " from tblqbillhd a,tblqbilldtl b,tblsubgrouphd c,tblitemmaster d  ,tblposmaster f  "
                        + " where a.strBillNo=b.strBillNo and a.strPOSCode=f.strPOSCode  "
                        + " and b.strItemCode=d.strItemCode  and c.strSubGroupCode=d.strSubGroupCode "
                        + " and date( a.dteBillDate ) BETWEEN '" + fromDate + "' AND '" + toDate + "' "
                        + " group by c.strSubGroupCode, c.strSubGroupName, a.strPoscode   ");

 	        String sqlModLive = " select c.strSubGroupCode,c.strSubGroupName,sum(b.dblQuantity),"
                        + " sum(b.dblAmount)-sum(b.dblDiscAmt),f.strPOSName,'SANGUINE','0' ,sum(b.dblAmount),sum(b.dblDiscAmt),a.strPOSCode  "
                        + " from tblbillmodifierdtl b,tblbillhd a,tblposmaster f,tblitemmaster d,tblsubgrouphd c "
                        + " where a.strBillNo=b.strBillNo and a.strPOSCode=f.strPosCode  and LEFT(b.strItemCode,7)=d.strItemCode  "
                        + " and d.strSubGroupCode=c.strSubGroupCode  and b.dblamount>0  "
                        + " and date( a.dteBillDate ) BETWEEN '" + fromDate + "' AND '" + toDate + "'   "
                        + " group by c.strSubGroupCode, c.strSubGroupName, a.strPoscode  ";

 	        String sqlModQFile = "select c.strSubGroupCode,c.strSubGroupName,sum(b.dblQuantity),sum(b.dblAmount)-sum(b.dblDiscAmt),"
                        + " f.strPOSName,'SANGUINE','0' ,sum(b.dblAmount),sum(b.dblDiscAmt),a.strPOSCode  "
                        + " from tblqbillmodifierdtl b,tblqbillhd a,tblposmaster f,tblitemmaster d,tblsubgrouphd c "
                        + " where a.strBillNo=b.strBillNo and a.strPOSCode=f.strPosCode  and LEFT(b.strItemCode,7)=d.strItemCode  "
                        + " and d.strSubGroupCode=c.strSubGroupCode  and b.dblamount>0  "
                        + " and date( a.dteBillDate ) BETWEEN '" + fromDate + "' AND '" + toDate + "'  "
                        + " group by c.strSubGroupCode, c.strSubGroupName, a.strPoscode ";

 	       
 	        
 	         
 	       
 		    
 		    Query querySqlLive = webPOSSessionFactory.getCurrentSession().createSQLQuery(sbSqlLive.toString());
 		    List listSqlLive = querySqlLive.list();
 		    if(listSqlLive.size()>0)
 		    {
 		    	
 		    	for(int i=0 ;i<listSqlLive.size();i++ )
 		    	{
 		    		Object[] obj = (Object[]) listSqlLive.get(i);
 		    		JSONObject jObj =new JSONObject();
 		    		jObj.put("strSubGroupCode",obj[0].toString());
 		    		jObj.put("strSubGroupName",obj[1].toString());
 		    		jObj.put("dblQuantity",obj[2].toString());
 		    		jObj.put("strPOSName",obj[4].toString());
 		    		jObj.put("dblAmount",obj[7].toString());
 		    		
 		    
 		    		 total+=Double.parseDouble(obj[7].toString());
 		    		jArr.put(jObj);
 		    	}
 		   // 	jOBjRet.put("jArr", jArr);
 		    }
 		  //  listRet.add(listSqlLive);
 		    
 		    Query queryQFile = webPOSSessionFactory.getCurrentSession().createSQLQuery(sbSqlQFile.toString());
 		    List listSqlQFile = queryQFile.list();
 		    if(listSqlQFile.size()>0)
 		    {
 		    	
 		    	for(int i=0 ;i<listSqlQFile.size();i++ )
 		    	{
 		    		Object[] obj = (Object[]) listSqlQFile.get(i);
 		    		JSONObject jObj =new JSONObject();
 		    		jObj.put("strSubGroupCode",obj[0].toString());
 		    		jObj.put("strSubGroupName",obj[1].toString());
 		    		jObj.put("dblQuantity",obj[2].toString());
 		    		jObj.put("strPOSName",obj[4].toString());
 		    		jObj.put("dblAmount",obj[7].toString());
 		    		
 		    		 total+=Double.parseDouble(obj[7].toString());
 		    		jArr.put(jObj);
 		    		
 		    	}
 		   // 	jOBjRet.put("jArr", jArr);
 		    }
 		   // listRet.add(listSqlQFile);
 		    
 		    Query querySqlModLive = webPOSSessionFactory.getCurrentSession().createSQLQuery(sqlModLive.toString());
 		    List listSqlModLive = querySqlModLive.list();
 		   if(listSqlModLive.size()>0)
 		    {
 			 
 		    	for(int i=0 ;i<listSqlModLive.size();i++ )
 		    	{
 		    		
 		    		Object[] obj = (Object[]) listSqlModLive.get(i);
 		    		JSONObject jObj =new JSONObject();
 		    		jObj.put("strSubGroupCode",obj[0].toString());
 		    		jObj.put("strSubGroupName",obj[1].toString());
 		    		jObj.put("dblQuantity",obj[2].toString());
 		    		jObj.put("strPOSName",obj[4].toString());
 		    		jObj.put("dblAmount",obj[7].toString());
 		    	
 		    		 total+=Double.parseDouble(obj[7].toString());
 		    		jArr.put(jObj);
 		    	}
 		    //	jOBjRet.put("jArr", jArr);
 		    }
 		   // listRet.add(listSqlModLive);
 		    
 		    Query querySqlModQFile = webPOSSessionFactory.getCurrentSession().createSQLQuery(sqlModQFile.toString());
 		    List listSqlModQFile = querySqlModQFile.list();
 		    if(listSqlModQFile.size()>0)
 		    {
 		    	
 		    	for(int i=0 ;i<listSqlModQFile.size();i++ )
 		    	{
 		    		Object[] obj = (Object[]) listSqlModQFile.get(i);
 		    		JSONObject jObj =new JSONObject();
 		    		jObj.put("strSubGroupCode",obj[0].toString());
 		    		jObj.put("strSubGroupName",obj[1].toString());
 		    		jObj.put("dblQuantity",obj[2].toString());
 		    		jObj.put("strPOSName",obj[4].toString());
 		    		jObj.put("dblAmount",obj[7].toString());
 		    		 total+=Double.parseDouble(obj[7].toString());
 		    		jArr.put(jObj);
 		    	}
 		    }
 		    
        }
        
        if(strViewType.equalsIgnoreCase("Menu Head WISE"))
        {
        	Map<String, Double> map =new HashMap<String, Double>();
 	        sbSqlLive.append(" SELECT ifnull(d.strMenuCode,'ND'),ifnull(e.strMenuName,'ND'), sum(a.dblQuantity), "
                        + " sum(a.dblAmount)-sum(a.dblDiscountAmt),f.strPosName,'SANGUINE',a.dblRate  ,sum(a.dblAmount),sum(a.dblDiscountAmt),b.strPOSCode   "
                        + " FROM tblbilldtl a "
                        + " left outer join tblbillhd b on a.strBillNo=b.strBillNo "
                        + " left outer join tblposmaster f on b.strposcode=f.strposcode  "
                        + " left outer join tblmenuitempricingdtl d on a.strItemCode = d.strItemCode  "
                        + " and b.strposcode =d.strposcode and b.strAreaCode= d.strAreaCode "
                        + " left outer join tblmenuhd e on d.strMenuCode= e.strMenuCode "
                        + " where date( b.dteBillDate ) BETWEEN '" + fromDate + "' AND '" + toDate + "'  "
                        + " Group by b.strPoscode, d.strMenuCode,e.strMenuName "
                        + " order by b.strPoscode, d.strMenuCode,e.strMenuName   ");
 	        
 	        sbSqlQFile.append("SELECT  ifnull(d.strMenuCode,'ND'),ifnull(e.strMenuName,'ND'), sum(a.dblQuantity), "
                        + " sum(a.dblAmount)-sum(a.dblDiscountAmt),f.strPosName,'SANGUINE',a.dblRate ,sum(a.dblAmount),sum(a.dblDiscountAmt),b.strPOSCode  "
                        + " FROM tblqbilldtl a "
                        + " left outer join tblqbillhd b on a.strBillNo=b.strBillNo "
                        + " left outer join tblposmaster f on b.strposcode=f.strposcode "
                        + " left outer join tblmenuitempricingdtl d on a.strItemCode = d.strItemCode  "
                        + " and b.strposcode =d.strposcode and b.strAreaCode= d.strAreaCode "
                        + " left outer join tblmenuhd e on d.strMenuCode= e.strMenuCode "
                        + " where date( b.dteBillDate ) BETWEEN '" + fromDate + "' AND '" + toDate + "'  "
                        + " Group by b.strPoscode, d.strMenuCode,e.strMenuName "
                        + " order by b.strPoscode, d.strMenuCode,e.strMenuName   ");

 	        String sqlModLive = " SELECT  ifnull(d.strMenuCode,'ND'),ifnull(e.strMenuName,'ND'), sum(a.dblQuantity), "
                        + " sum(a.dblAmount)-sum(a.dblDiscAmt),f.strPosName,'SANGUINE',a.dblRate ,sum(a.dblAmount),sum(a.dblDiscAmt),b.strPOSCode "
                        + " FROM tblbillmodifierdtl a "
                        + " left outer join tblbillhd b on a.strBillNo=b.strBillNo "
                        + " left outer join tblposmaster f on b.strposcode=f.strposcode "
                        + " left outer join tblmenuitempricingdtl d on LEFT(a.strItemCode,7)= d.strItemCode  "
                        + " and b.strposcode =d.strposcode and b.strAreaCode= d.strAreaCode "
                        + " left outer join tblmenuhd e on d.strMenuCode= e.strMenuCode "
                        + " where date( b.dteBillDate ) BETWEEN '" + fromDate + "' AND '" + toDate + "' "
                        + " and a.dblAmount>0   "
                        + " Group by b.strPoscode, d.strMenuCode,e.strMenuName "
                        + " order by b.strPoscode, d.strMenuCode,e.strMenuName  ";

 	        String sqlModQFile = "SELECT  ifnull(d.strMenuCode,'ND'),ifnull(e.strMenuName,'ND'), sum(a.dblQuantity), "
                        + " sum(a.dblAmount)-sum(a.dblDiscAmt),f.strPosName,'SANGUINE',a.dblRate ,sum(a.dblAmount),sum(a.dblDiscAmt),b.strPOSCode  "
                        + " FROM tblqbillmodifierdtl a "
                        + " left outer join tblqbillhd b on a.strBillNo=b.strBillNo "
                        + " left outer join tblposmaster f on b.strposcode=f.strposcode "
                        + " left outer join tblmenuitempricingdtl d on LEFT(a.strItemCode,7)= d.strItemCode "
                        + " and b.strposcode =d.strposcode and b.strAreaCode= d.strAreaCode "
                        + " left outer join tblmenuhd e on d.strMenuCode= e.strMenuCode"
                        + " where date( b.dteBillDate ) BETWEEN '" + fromDate + "' AND '" + toDate + "' "
                        + " and a.dblAmount>0    "
                        + " Group by b.strPoscode, d.strMenuCode,e.strMenuName "
                        + " order by b.strPoscode, d.strMenuCode,e.strMenuName ";

 	       
 	        
 	         
 	       
 		    
 		    Query querySqlLive = webPOSSessionFactory.getCurrentSession().createSQLQuery(sbSqlLive.toString());
 		    List listSqlLive = querySqlLive.list();
 		    if(listSqlLive.size()>0)
 		    {
 		    	
 		    	for(int i=0 ;i<listSqlLive.size();i++ )
 		    	{
 		    		Object[] obj = (Object[]) listSqlLive.get(i);
 		    		JSONObject jObj =new JSONObject();
 			    
 		    		jObj.put("strMenuCode",obj[0].toString());
 		    		jObj.put("strMenuName",obj[1].toString());
 		    		jObj.put("dblQuantity",obj[2].toString());
 		    		jObj.put("strPOSName",obj[4].toString());
 		    		jObj.put("dblAmount",obj[7].toString());
 		    		
 		    		
 		    		 total+=Double.parseDouble(obj[7].toString());
 		    		jArr.put(jObj);
 		    	}
 		   // 	jOBjRet.put("jArr", jArr);
 		    }
 		  //  listRet.add(listSqlLive);
 		    
 		    Query queryQFile = webPOSSessionFactory.getCurrentSession().createSQLQuery(sbSqlQFile.toString());
 		    List listSqlQFile = queryQFile.list();
 		    if(listSqlQFile.size()>0)
 		    {
 		    	
 		    	for(int i=0 ;i<listSqlQFile.size();i++ )
 		    	{
 		    		Object[] obj = (Object[]) listSqlQFile.get(i);
 		    		JSONObject jObj =new JSONObject();
 		    		jObj.put("strMenuCode",obj[0].toString());
 		    		jObj.put("strMenuName",obj[1].toString());
 		    		jObj.put("dblQuantity",obj[2].toString());
 		    		jObj.put("strPOSName",obj[4].toString());
 		    		jObj.put("dblAmount",obj[7].toString());
 		    		
 		    		
 		    		 total+=Double.parseDouble(obj[7].toString());
 		    		jArr.put(jObj);
 		    		
 		    	}
 		   // 	jOBjRet.put("jArr", jArr);
 		    }
 		   // listRet.add(listSqlQFile);
 		    
 		    Query querySqlModLive = webPOSSessionFactory.getCurrentSession().createSQLQuery(sqlModLive.toString());
 		    List listSqlModLive = querySqlModLive.list();
 		   if(listSqlModLive.size()>0)
 		    {
 			 
 		    	for(int i=0 ;i<listSqlModLive.size();i++ )
 		    	{
 		    		
 		    		Object[] obj = (Object[]) listSqlModLive.get(i);
 		    		JSONObject jObj =new JSONObject();
 		    		jObj.put("strMenuCode",obj[0].toString());
 		    		jObj.put("strMenuName",obj[1].toString());
 		    		jObj.put("dblQuantity",obj[2].toString());
 		    		jObj.put("strPOSName",obj[4].toString());
 		    		jObj.put("dblAmount",obj[7].toString());
 		    		
 		    	
 		    		 total+=Double.parseDouble(obj[7].toString());
 		    		jArr.put(jObj);
 		    	}
 		    //	jOBjRet.put("jArr", jArr);
 		    }
 		   // listRet.add(listSqlModLive);
 		    
 		    Query querySqlModQFile = webPOSSessionFactory.getCurrentSession().createSQLQuery(sqlModQFile.toString());
 		    List listSqlModQFile = querySqlModQFile.list();
 		    if(listSqlModQFile.size()>0)
 		    {
 		    	
 		    	for(int i=0 ;i<listSqlModQFile.size();i++ )
 		    	{
 		    		Object[] obj = (Object[]) listSqlModQFile.get(i);
 		    		JSONObject jObj =new JSONObject();
 		    		jObj.put("strMenuCode",obj[0].toString());
 		    		jObj.put("strMenuName",obj[1].toString());
 		    		jObj.put("dblQuantity",obj[2].toString());
 		    		jObj.put("strPOSName",obj[4].toString());
 		    		jObj.put("dblAmount",obj[7].toString());
 		    		
 		    		 total+=Double.parseDouble(obj[7].toString());
 		    		jArr.put(jObj);
 		    	}
 		    }
 		    
        }
        JSONObject jObjTotal =new JSONObject();
 		    
        jObjTotal.put("total", total);
        jOBjRet.put("jArr", jArr);
        jOBjRet.put("jObjTotal", jObjTotal);
 	        }
  	        
         catch(Exception ex)
         {
        	 ex.printStackTrace();
         }
         	    
	    return 	jOBjRet;
		
	}
								

	public JSONObject funVoidAdvanceOrderReportDtl(String fromDate,String toDate,String strPOSCode,String strShiftNo,String strOrderType)
	{
		List listRet =new ArrayList();
		 StringBuilder sbSqlLive = new StringBuilder();
        StringBuilder sbSqlQFile = new StringBuilder();
        StringBuilder sbSqlFilters = new StringBuilder();
        JSONArray jArr =new JSONArray();
        JSONObject jOBjRet=new JSONObject();
        

        sbSqlLive.setLength(0);
        sbSqlQFile.setLength(0);
        sbSqlFilters.setLength(0);

        try
        {
        	
        sbSqlLive.append("select a.strAdvBookingNo,DATE_FORMAT(a.dteAdvBookingDate,'%d-%m-%Y') as dteAdvBookingDate,DATE_FORMAT(a.dteOrderFor,'%d-%m-%Y') as  dteOrderFor,ifnull(f.strCustomerName,'NA') as strCustomerName ,f.longMobileNo "
            + ",b.strItemCode,b.strItemName,d.strCharCode,ifnull(d.strCharName,'') as strCharName,ifnull(c.strCharValues,'') as strCharValues, "
            + "sum(b.dblQuantity) as dblQuantity ,sum(b.dblAmount)/sum(b.dblQuantity) as dblRate,sum(b.dblAmount) as dblAmount,sum(b.dblWeight) as dblWeight, "
            + "e.dblAdvDeposite,g.strReasonName,a.strRemark,DATE_FORMAT(a.dteDateCreated,'%d-%m-%Y') as dteVoidedDate "
            + "from tblvoidadvbookbillhd a "
            + "left outer join tblvoidadvbookbilldtl b on a.strAdvBookingNo=b.strAdvBookingNo and a.strClientCode=b.strClientCode "
            + "left outer join tblvoidadvbookbillchardtl c on a.strAdvBookingNo=c.strAdvBookingNo and b.strItemCode=c.strItemCode and a.strClientCode=c.strClientCode "
            + "left outer join tblcharactersticsmaster d on c.strCharCode=d.strCharCode and c.strClientCode=d.strClientCode "
            + "left outer join tblvoidadvancereceipthd e on a.strAdvBookingNo=e.strAdvBookingNo and a.strClientCode=e.strClientCode "
            + "left outer join tblcustomermaster f on a.strCustomerCode=f.strCustomerCode and a.strClientCode=f.strClientCode "
            + "left outer join tblreasonmaster g on a.strReasonCode=g.strReasonCode and a.strClientCode=g.strClientCode "
            + "where date(a.dteOrderFor) between '" + fromDate + "' and '" + toDate + "'");
        	  
        	  
      
      
        if (!strPOSCode.equalsIgnoreCase("All"))
        {
            sbSqlFilters.append(" AND a.strPOSCode = '" + strPOSCode + "' ");
        }

         if (!strOrderType.equalsIgnoreCase("All") && strOrderType.equalsIgnoreCase("Advance Order"))
        {
        	 sbSqlFilters.append(" and a.strUrgentOrder='N'  ");
        }
        else if (!strOrderType.equalsIgnoreCase("All") && strOrderType.equalsIgnoreCase("Urgent Order"))
        {
        	sbSqlFilters.append(" and a.strUrgentOrder='Y'  ");
        }
         
         sbSqlFilters.append("group by a.strAdvBookingNo,b.strItemCode,c.strCharCode,c.strCharValues "
                    + "order by a.strAdvBookingNo,b.strItemCode,c.strCharCode,c.strCharValues ");
         
         
         
         
        sbSqlLive.append(sbSqlFilters);
   //     sbSqlQFile.append(sbSqlFilters);
       
        
       
	    
	    Query querySqlLive = webPOSSessionFactory.getCurrentSession().createSQLQuery(sbSqlLive.toString());
	    List listSqlLive = querySqlLive.list();
	    if(listSqlLive.size()>0)
	    {
	    				    	
	    	for(int i=0 ;i<listSqlLive.size();i++ )
	    	{
	    		Object[] obj = (Object[]) listSqlLive.get(i);
	    		JSONObject jObj =new JSONObject();
	    		jObj.put("strAdvBookingNo",obj[0].toString());
	    		jObj.put("dteAdvBookingDate",obj[1].toString());
	    		jObj.put("strCustomerName",obj[2].toString());
	    		jObj.put("longMobileNo",obj[3].toString());
	    		jObj.put("dblQuantity",obj[4].toString());
	    		jObj.put("dblRate",obj[5].toString());
	    		jObj.put("dblAmount",obj[6].toString());
	    		jObj.put("dblWeight",obj[7].toString());
	    		jObj.put("dblAdvDeposite",obj[8].toString());
	    		jObj.put("strReasonName",obj[9].toString());
	    		jObj.put("strRemark",obj[10].toString());
	    		jObj.put("dteVoidedDate",obj[11].toString());
	    		
	    		
	    		jArr.put(jObj);
	    	}
	  
	    }
	    jOBjRet.put("jArr", jArr);
        }
        catch(Exception ex)
        {
       	 ex.printStackTrace();
        }
	    
	    return 	jOBjRet;
		
		
	}
	
	public JSONObject funWaiterWiseItemWiseIncentivesReportDtl(String fromDate,String toDate,String strPOSCode,String strShiftNo)
	{
		List listRet =new ArrayList();
		 StringBuilder sbSqlLive = new StringBuilder();
        StringBuilder sbSqlQFile = new StringBuilder();
        StringBuilder sbSqlFilters = new StringBuilder();
        JSONArray jArr =new JSONArray();
        JSONObject jOBjRet=new JSONObject();
        

        sbSqlLive.setLength(0);
        sbSqlQFile.setLength(0);
        sbSqlFilters.setLength(0);

        try
        {
        	
        sbSqlLive.append("SELECT d.strWShortName,b.strItemName,sum(b.dblAmount),c.dblIncentiveValue "
            + " ,IF(c.strIncentiveType='Amt', (c.dblIncentiveValue)*sum(b.dblQuantity), (c.dblIncentiveValue/100)*sum(b.dblAmount)) as amount, "
            + " e.strPosName,e.strPosCode,b.strItemCode,d.strWaiterNo,c.strIncentiveType,sum(b.dblQuantity)  "
            + " FROM tblbillhd a,tblbilldtl b,tblposwiseitemwiseincentives c,tblwaitermaster d,tblposmaster e "
            + " where a.strBillNo=b.strBillNo and b.strItemCode=c.strItemCode and b.strWaiterNo=d.strWaiterNo "
            + " and a.strPOSCode=e.strPosCode and a.strPOSCode=c.strPOSCode "
            + " and c.dblIncentiveValue>0 and date(a.dteBillDate) between '" + fromDate + "' and '" + toDate + "' ");
        	  
        	  
        sbSqlQFile.append("SELECT d.strWShortName,b.strItemName,sum(b.dblAmount),c.dblIncentiveValue "
            + " ,IF(c.strIncentiveType='Amt', (c.dblIncentiveValue)*sum(b.dblQuantity), (c.dblIncentiveValue/100)*sum(b.dblAmount)) as amount, "
            + " e.strPosName,e.strPosCode,b.strItemCode,d.strWaiterNo,c.strIncentiveType,sum(b.dblQuantity) "
            + " FROM tblqbillhd a,tblqbilldtl b,tblposwiseitemwiseincentives c,tblwaitermaster d,tblposmaster e "
            + " where a.strBillNo=b.strBillNo and b.strItemCode=c.strItemCode and b.strWaiterNo=d.strWaiterNo "
            + " and a.strPOSCode=e.strPosCode and a.strPOSCode=c.strPOSCode "
            + " and c.dblIncentiveValue>0 and date(a.dteBillDate) between '" + fromDate + "' and '" + toDate + "' ");

      

       
        
        if (!strPOSCode.equalsIgnoreCase("All"))
        {
            sbSqlFilters.append(" AND a.strPOSCode = '" + strPOSCode + "' ");
        }

//        if (clsGlobalVarClass.gEnableShiftYN)
//        {
//            if (clsGlobalVarClass.gEnableShiftYN && (!strShiftNo.equalsIgnoreCase("All")))
//            {
                sbSqlFilters.append(" and a.intShiftCode = '" + strShiftNo + "' ");
//            }
//        }
                sbSqlFilters.append("and a.strBillNo not in (select u.strBillNo "
                        + " from tblbillhd v,tblbillsettlementdtl u,tblsettelmenthd w "
                        + " where v.strBillNo=u.strBillNo and u.strSettlementCode=w.strSettelmentCode "
                        + " and w.strSettelmentType='Complementary' and date(v.dteBillDate) between '"+fromDate+"' and '"+toDate+"')");

                sbSqlFilters.append(" group by b.strWaiterNo,c.strPOSCode,b.strItemCode ");
                sbSqlFilters.append(" order by e.strPosName,b.strWaiterNo,b.strItemName ");
                
                
                
                
                
        sbSqlLive.append(sbSqlFilters);
        sbSqlQFile.append(sbSqlFilters);
       
        
       
	    
	    Query querySqlLive = webPOSSessionFactory.getCurrentSession().createSQLQuery(sbSqlLive.toString());
	    List listSqlLive = querySqlLive.list();
	    if(listSqlLive.size()>0)
	    {
	    	
	    	for(int i=0 ;i<listSqlLive.size();i++ )
	    	{
	    		Object[] obj = (Object[]) listSqlLive.get(i);
	    		JSONObject jObj =new JSONObject();
	    		jObj.put("strWShortName",obj[0].toString());
	    		jObj.put("strItemName",obj[1].toString());
	    		jObj.put("dblAmount",obj[2].toString());
	    		jObj.put("dblIncentiveValue",obj[3].toString());
	    		jObj.put("amount",obj[4].toString());
	    		jObj.put("strPosName",obj[5].toString());
	    		jObj.put("strPosCode",obj[6].toString());
	    		jObj.put("strItemCode",obj[7].toString());
	    		jObj.put("strWaiterNo",obj[8].toString());
	    		jObj.put("strIncentiveType",obj[9].toString());
	    		jObj.put("dblQuantity",obj[10].toString());
	    		jArr.put(jObj);
	    	}
	   // 	jOBjRet.put("jArr", jArr);
	    }
	  //  listRet.add(listSqlLive);
	    
	    Query queryQFile = webPOSSessionFactory.getCurrentSession().createSQLQuery(sbSqlQFile.toString());
	    List listSqlQFile = queryQFile.list();
	    if(listSqlQFile.size()>0)
	    {
	    	
	    	for(int i=0 ;i<listSqlQFile.size();i++ )
	    	{
	    		Object[] obj = (Object[]) listSqlQFile.get(i);
	    		JSONObject jObj =new JSONObject();
	    		jObj.put("strWShortName",obj[0].toString());
	    		jObj.put("strItemName",obj[1].toString());
	    		jObj.put("dblAmount",obj[2].toString());
	    		jObj.put("dblIncentiveValue",obj[3].toString());
	    		jObj.put("amount",obj[4].toString());
	    		jObj.put("strPosName",obj[5].toString());
	    		jObj.put("strPosCode",obj[6].toString());
	    		jObj.put("strItemCode",obj[7].toString());
	    		jObj.put("strWaiterNo",obj[8].toString());
	    		jObj.put("strIncentiveType",obj[9].toString());
	    		jObj.put("dblQuantity",obj[10].toString());
	    		jArr.put(jObj);
	    	}
	   // 	jOBjRet.put("jArr", jArr);
	    }
	  
	    jOBjRet.put("jArr", jArr);
        }
        catch(Exception ex)
        {
       	 ex.printStackTrace();
        }
	    
	    return 	jOBjRet;
		
		
	}
	
	public JSONObject funItemMasterListingReportDtl(String fromDate,String toDate,String strPOSCode,String strShiftNo)
	{
		List listRet =new ArrayList();
		 StringBuilder sbSqlLive = new StringBuilder();
        StringBuilder sbSqlQFile = new StringBuilder();
        StringBuilder sbSqlFilters = new StringBuilder();
        JSONArray jArr =new JSONArray();
        JSONObject jOBjRet=new JSONObject();
        

        sbSqlLive.setLength(0);
        sbSqlQFile.setLength(0);
        sbSqlFilters.setLength(0);

        try
        {
        	
        sbSqlLive.append("select a.strItemCode,a.strItemName,b.strSubGroupName,c.strGroupName,ifNULL(a.strTaxIndicator,'')  "
            +"from tblitemmaster a,tblsubgrouphd b,tblgrouphd c "
            +"where a.strSubGroupCode=b.strSubGroupCode "
            +"and b.strGroupCode=c.strGroupCode "            
            +"group by c.strGroupCode,b.strSubGroupCode,a.strItemCode,a.strItemName "
            +"order by c.strGroupCode,b.strSubGroupCode,a.strItemCode,a.strItemName");
        	  
     /*   if (!strPOSCode.equalsIgnoreCase("All"))
        {
            sbSqlFilters.append(" AND a.strPOSCode = '" + strPOSCode + "' ");
        }

//        if (clsGlobalVarClass.gEnableShiftYN)
//        {
//            if (clsGlobalVarClass.gEnableShiftYN && (!strShiftNo.equalsIgnoreCase("All")))
//            {
                sbSqlFilters.append(" and a.intShiftCode = '" + strShiftNo + "' ");
//            }
//        }
*/		        
       /* sbSqlLive.append(sbSqlFilters);
        sbSqlQFile.append(sbSqlFilters);*/
       
       Query querySqlLive = webPOSSessionFactory.getCurrentSession().createSQLQuery(sbSqlLive.toString());
	    List listSqlLive = querySqlLive.list();
	    if(listSqlLive.size()>0)
	    {
	    	
	    	for(int i=0 ;i<listSqlLive.size();i++ )
	    	{
	    		
	    		Object[] obj = (Object[]) listSqlLive.get(i);
	    		JSONObject jObj =new JSONObject();
	    		jObj.put("strItemCode",obj[0].toString());
	    		jObj.put("strItemName",obj[1].toString());
	    		jObj.put("strSubGroupName",obj[2].toString());
	    		jObj.put("strGroupName",obj[3].toString());
	    		jObj.put("strTaxIndicator",obj[4].toString());
	    		jArr.put(jObj);
	    	}
	   // 	jOBjRet.put("jArr", jArr);
	    }
	  //  listRet.add(listSqlLive);
	    
	   
	  
	    jOBjRet.put("jArr", jArr);
        }
        catch(Exception ex)
        {
       	 ex.printStackTrace();
        }
	    
	    return 	jOBjRet;
		
		
	}

	
	
	
	
	public JSONObject funVoidKOTReport(String fromDate,String toDate,String strPOSCode,String strShiftNo,String strUserCode)
	{
		List listRet =new ArrayList();
        JSONArray jArr =new JSONArray();
        JSONObject jOBjRet=new JSONObject();
        
       
        try{
        	
            StringBuilder sqlBuilder = new StringBuilder();
            //live
            sqlBuilder.setLength(0);
            
            sqlBuilder.append("select a.strItemCode,a.strItemName,ifnull(d.strTableName,''),"
                    + " (a.dblAmount/a.dblItemQuantity) as dblRate,sum(a.dblItemQuantity)as dblItemQuantity,sum(a.dblAmount) as dblAmount "
                    + " ,a.strRemark,a.strKOTNo,a.strPosCode,b.strPosName,a.strUserCreated ,a.dteVoidedDate,c.strReasonName  "
                    + " from tblvoidkot a "
                    + " left outer join tblposmaster b on a.strPOSCode=b.strPosCode "
                    + " left outer join tblreasonmaster c on a.strReasonCode=c.strReasonCode "
                    + " left outer join tbltablemaster d on a.strTableNo=d.strTableNo "
                    + " where date(a.dteVoidedDate) Between '" + fromDate + "' and '" + toDate + "' ");
            if (!strPOSCode.equalsIgnoreCase("All"))
            {
                sqlBuilder.append("and a.strPosCode='" + strPOSCode + "' ");
            }
            sqlBuilder.append(" group by a.strposcode,a.strusercreated,a.strkotno,a.strItemCode "
                    + " order by a.strposcode,a.strusercreated,a.strkotno,a.strItemCode ");

            Query querySqlLive = webPOSSessionFactory.getCurrentSession().createSQLQuery(sqlBuilder.toString());
     	    List listSqlLive = querySqlLive.list();
     	    if(listSqlLive.size()>0)
     	    {
     	    	
     	    	for(int i=0 ;i<listSqlLive.size();i++ )
     	    	{
     	    		Object[] obj = (Object[]) listSqlLive.get(i);
     	    		JSONObject jObj =new JSONObject();
     	    		jObj.put("strItemCode",obj[0].toString());
     	    		jObj.put("strItemName",obj[1].toString());
     	    		jObj.put("strTableNo",obj[2].toString());
     	    		jObj.put("dblPaidAmt",obj[3].toString());
     	    		jObj.put("intQuantity",obj[4].toString());
     	    		jObj.put("dblAmount",obj[5].toString());
     	    		jObj.put("strRemarks",obj[6].toString());
     	    		jObj.put("strKOTNo",obj[7].toString());
     	    		jObj.put("strClientCode",obj[8].toString());
     	    		jObj.put("strPosCode",obj[9].toString());
     	    		jObj.put("strUserCreated",obj[10].toString());
     	    		jObj.put("dteBillDate",obj[11].toString());
     	    		jObj.put("strReasonName",obj[12].toString());
     	    		
     	    		jArr.put(jObj);
     	    	}
     	 
     	    }

     	   jOBjRet.put("jArr", jArr);
        }
        
       
        
        catch(Exception ex)
        {
       	 ex.printStackTrace();
        }
	    
	    return 	jOBjRet;
		
	}

		
	
	
	
public JSONObject funPOSUnusedCardBalanceReport(String fromDate,String toDate,String strPOSCode,String strShiftNo,String strUserCode)
{
	List listRet =new ArrayList();
    JSONArray jArr =new JSONArray();
    JSONObject jOBjRet=new JSONObject();
    
   
    try{
    	
    	
    	 StringBuilder sqlBuilder = new StringBuilder();
        
         //Q Data
         sqlBuilder.setLength(0);
         sqlBuilder.append("select DATE_FORMAT(date(a.dtePOSDate),'%d-%m-%Y'),ifnull(sum(a.dblCardAmt),0.00) as dblUnUsedBalance "
                 + "from tbldebitcardrevenue a "
                 + "where date(a.dtePOSDate) between '" + fromDate + "' and '" + toDate + "' "
                 + "group by a.dtePOSDate "
                 + "order by a.dtePOSDate ");
         if (!strPOSCode.equalsIgnoreCase("All"))
         {
             sqlBuilder.append("and a.strPOSCode='" + strPOSCode + "' ");
         }
//             if (clsGlobalVarClass.gEnableShiftYN && (!cmbShiftNo.getSelectedItem().toString().equalsIgnoreCase("All")))
//             {
//                 sqlBuilder.append("and c.intShiftCode='" + shiftNo + "' ");
//             }                

         
            Query querySql = webPOSSessionFactory.getCurrentSession().createSQLQuery(sqlBuilder.toString());
     	    List listSql = querySql.list();
     	    if(listSql.size()>0)
     	    {
     	    	
     	    	for(int i=0 ;i<listSql.size();i++ )
     	    	{
     	    		Object[] obj = (Object[]) listSql.get(i);
     	    		JSONObject jObj =new JSONObject();
     	    		jObj.put("dtePOSDate",obj[0].toString());
     	    		jObj.put("dblUnUsedBalance",obj[1].toString());
     	    		
     	    		jArr.put(jObj);
     	    	}
     	 
     	    }
         
     	   jOBjRet.put("jArr", jArr);
        }
        
       
        
        catch(Exception ex)
        {
       	 ex.printStackTrace();
        }
	    
	    return 	jOBjRet;
		
	}
	
      	



	public JSONObject funPOSItemWiseConsumptionReport(String fromDate,
			String toDate, String strPOSCode, String strShiftNo,
			String strUserCode, String strClientCode, String loginPosCode) {

		JSONArray jArr = new JSONArray();
		JSONObject jOBjRet = new JSONObject();

		try {

			int sqlNo = 0;
			StringBuilder sbSql = new StringBuilder();
			StringBuilder sbSqlMod = new StringBuilder();
			StringBuilder sbFilters = new StringBuilder();

			Map<String, clsItemWiseConsumptionBean> hmItemWiseConsumption = new HashMap<String, clsItemWiseConsumptionBean>();

			// Code for Sales Qty for bill detail and bill modifier live & q
			// data
			// for Sales Qty for bill detail live data
			sbSql.setLength(0);
			/*
			 * sbSql.append(
			 * "select b.stritemcode,b.stritemname,sum(b.dblQuantity),sum(b.dblamount),b.dblRate"
			 * +
			 * " ,e.strposname,b.dblDiscountAmt,g.strSubGroupName,h.strGroupName,a.strBillNo,b.dblTaxAmount  "
			 * +
			 * " from tblbillhd a,tblbilldtl b, tblbillsettlementdtl c,tblsettelmenthd d,tblposmaster e"
			 * + " ,tblitemmaster f,tblsubgrouphd g,tblgrouphd h " +
			 * " where a.strBillNo=b.strBillNo and a.strBillNo=c.strBillNo and c.strSettlementCode=d.strSettelmentCode "
			 * +
			 * " and a.strPOSCode=e.strPosCode and b.strItemCode=f.strItemCode and f.strSubGroupCode=g.strSubGroupCode "
			 * +
			 * " and g.strGroupCode=h.strGroupCode and d.strSettelmentType!='Complementary' "
			 * + " and date(a.dteBillDate) BETWEEN '" + fromDate + "' AND '" +
			 * toDate + "' ");
			 */
			sbSql.append("select b.stritemcode,b.stritemname,sum(b.dblQuantity),sum(b.dblamount),b.dblRate , "
					+ " e.strposname,b.dblDiscountAmt,g.strSubGroupName,h.strGroupName,a.strBillNo "
					+ " from tblbillhd a,tblbilldtl b, tblposmaster e ,tblitemmaster f,tblsubgrouphd g,tblgrouphd h "
					+ " where a.strBillNo=b.strBillNo and a.strPOSCode=e.strPosCode and b.strItemCode=f.strItemCode "
					+ " and f.strSubGroupCode=g.strSubGroupCode  and g.strGroupCode=h.strGroupCode    "
					+ " and a.strBillNo NOT IN (select f.strBillNo from tblbillcomplementrydtl f ) "
					+ " and date(a.dteBillDate) BETWEEN '"
					+ fromDate
					+ "' AND '" + toDate + "' ");

			if (!strPOSCode.equalsIgnoreCase("All")) {
				sbSql.append(" and a.strPOSCode = '" + strPOSCode + "' ");
			}

			String columnName = "gEnableShiftYN";
			JSONObject jobj = objSetupService.funGetParameterValuePOSWise(
					strClientCode, loginPosCode, columnName);
			String gEnableShiftYN = jobj.get("gEnableShiftYN").toString();
			if (gEnableShiftYN.equalsIgnoreCase("Y")) {
				if (gEnableShiftYN.equalsIgnoreCase("Y")
						&& (!strShiftNo.equalsIgnoreCase("All"))) {
					sbSql.append(" and a.intShiftCode = '" + strShiftNo + "' ");
				}
			}

			sbSql.append(" group by b.strItemCode order by a.strPOSCode,b.strItemName");
			// System.out.println(sbSql);

			Query querySqlSales = webPOSSessionFactory.getCurrentSession()
					.createSQLQuery(sbSql.toString());

			List listSqlSales = querySqlSales.list();

			if (listSqlSales.size() > 0) {

				for (int i = 0; i < listSqlSales.size(); i++) {

					Object[] obj = (Object[]) listSqlSales.get(i);

					clsItemWiseConsumptionBean objItemWiseConsumption = null;
					if (null != hmItemWiseConsumption.get(obj[0].toString())) {
						objItemWiseConsumption = hmItemWiseConsumption
								.get(obj[0].toString());
						objItemWiseConsumption
								.setSaleQty(objItemWiseConsumption.getSaleQty()
										+ Double.parseDouble(obj[2].toString()));
						objItemWiseConsumption
								.setSaleAmt(objItemWiseConsumption.getSaleAmt()
										+ (Double.parseDouble(obj[3].toString()) - Double
												.parseDouble(obj[6].toString())));
						objItemWiseConsumption
								.setSubTotal(objItemWiseConsumption
										.getSubTotal()
										+ Double.parseDouble(obj[3].toString()));
						// objItemWiseConsumption.setTotalQty(objItemWiseConsumption.getTotalQty()
						// + rsSales.getDouble(3));
					} else {
						sqlNo++;
						objItemWiseConsumption = new clsItemWiseConsumptionBean();
						objItemWiseConsumption.setItemCode(obj[0].toString());
						objItemWiseConsumption.setItemName(obj[1].toString());
						objItemWiseConsumption.setSubGroupName(obj[7]
								.toString());
						objItemWiseConsumption.setGroupName(obj[8].toString());
						objItemWiseConsumption.setSaleQty(Double
								.parseDouble(obj[2].toString()));
						objItemWiseConsumption.setComplimentaryQty(0);
						objItemWiseConsumption.setNcQty(0);
						objItemWiseConsumption.setSubTotal(Double
								.parseDouble(obj[3].toString()));
						objItemWiseConsumption.setDiscAmt(Double
								.parseDouble(obj[6].toString()));
						objItemWiseConsumption.setSaleAmt(Double
								.parseDouble(obj[3].toString())
								- Double.parseDouble(obj[6].toString()));
						objItemWiseConsumption.setPOSName(obj[5].toString());
						objItemWiseConsumption.setPromoQty(0);
						objItemWiseConsumption.setSeqNo(sqlNo);
						double totalRowQty = Double.parseDouble(obj[2]
								.toString()) + 0 + 0 + 0;
						// objItemWiseConsumption.setTotalQty(totalRowQty);
						objItemWiseConsumption.setTotalQty(0);

					}
					if (null != objItemWiseConsumption) {
						hmItemWiseConsumption.put(obj[0].toString(),
								objItemWiseConsumption);
					}

					// for Sales Qty for bill modifier live data
					sbSqlMod.setLength(0);
					sbSqlMod.append("select b.strItemCode,b.strModifierName,sum(b.dblQuantity),sum(b.dblamount),b.dblRate"
							+ " ,e.strposname,b.dblDiscAmt,g.strSubGroupName,h.strGroupName,a.strBillNo "
							+ " from tblbillhd a,tblbillmodifierdtl b, tblbillsettlementdtl c,tblsettelmenthd d,tblposmaster e"
							+ " ,tblitemmaster f,tblsubgrouphd g,tblgrouphd h "
							+ " where a.strBillNo=b.strBillNo and a.strBillNo=c.strBillNo and c.strSettlementCode=d.strSettelmentCode "
							+ " and a.strPOSCode=e.strPosCode and left(b.strItemCode,7)=f.strItemCode and f.strSubGroupCode=g.strSubGroupCode "
							+ " and g.strGroupCode=h.strGroupCode and d.strSettelmentType!='Complementary' "
							+ " and left(b.strItemCode,7)='"
							+ obj[0].toString()
							+ "' and a.strBillNo='"
							+ obj[9].toString()
							+ "' "
							+ " and date(a.dteBillDate) BETWEEN '"
							+ fromDate
							+ "' AND '"
							+ toDate
							+ "' "
							+ " group by a.strBillNo ");

					// System.out.println(sbSqlMod);

					Query querySqlSalesMod = webPOSSessionFactory
							.getCurrentSession().createSQLQuery(
									sbSql.toString());

					List listSqlSalesMod = querySqlSalesMod.list();

					if (listSqlSalesMod.size() > 0) {

						for (int j = 0; j < listSqlSalesMod.size(); j++) {

							Object[] objMod = (Object[]) listSqlSalesMod.get(j);

							// clsItemWiseConsumption
							// objItemWiseConsumption=null;
							if (null != hmItemWiseConsumption.get(objMod[0]
									.toString())) {

								objItemWiseConsumption = hmItemWiseConsumption
										.get(objMod[0].toString());
								objItemWiseConsumption
										.setSaleQty(objItemWiseConsumption
												.getSaleQty()
												+ Double.parseDouble(objMod[2]
														.toString()));
								objItemWiseConsumption
										.setSaleAmt(objItemWiseConsumption
												.getSaleAmt()
												+ ((Double
														.parseDouble(objMod[3]
																.toString())) - Double
														.parseDouble(obj[6]
																.toString())));
								objItemWiseConsumption
										.setSubTotal(objItemWiseConsumption
												.getSubTotal()
												+ Double.parseDouble(objMod[3]
														.toString()));

							} else {

								sqlNo++;
								objItemWiseConsumption = new clsItemWiseConsumptionBean();
								objItemWiseConsumption.setItemCode(objMod[0]
										.toString());
								objItemWiseConsumption.setItemName(objMod[1]
										.toString());
								objItemWiseConsumption
										.setSubGroupName(objMod[7].toString());
								objItemWiseConsumption.setGroupName(objMod[8]
										.toString());
								objItemWiseConsumption.setSaleQty(Double
										.parseDouble(objMod[2].toString()));
								objItemWiseConsumption.setComplimentaryQty(0);
								objItemWiseConsumption.setNcQty(0);
								objItemWiseConsumption.setSubTotal(Double
										.parseDouble(objMod[3].toString()));
								objItemWiseConsumption.setDiscAmt(Double
										.parseDouble(objMod[6].toString()));
								objItemWiseConsumption.setSaleAmt(Double
										.parseDouble(objMod[3].toString())
										- Double.parseDouble(objMod[6]
												.toString()));
								objItemWiseConsumption.setPOSName(objMod[5]
										.toString());
								objItemWiseConsumption.setPromoQty(0);
								objItemWiseConsumption.setSeqNo(sqlNo);
								double totalRowQty = Double
										.parseDouble(objMod[2].toString()) + 0 + 0 + 0;
								// objItemWiseConsumption.setTotalQty(totalRowQty);
								objItemWiseConsumption.setTotalQty(0);

							}
							if (null != objItemWiseConsumption) {
								hmItemWiseConsumption.put(objMod[0].toString(),
										objItemWiseConsumption);
							}

						}// forEnd
					}// if End
				}
			}

			// for Sales Qty for bill detail q data
			sbSql.setLength(0);
			/*
			 * sbSql.append(
			 * "select b.stritemcode,b.stritemname,sum(b.dblQuantity),sum(b.dblamount),b.dblRate"
			 * +
			 * " ,e.strposname,b.dblDiscountAmt,g.strSubGroupName,h.strGroupName,a.strBillNo,b.dblTaxAmount  "
			 * +
			 * " from tblqbillhd a,tblqbilldtl b, tblqbillsettlementdtl c,tblsettelmenthd d,tblposmaster e "
			 * + " ,tblitemmaster f,tblsubgrouphd g,tblgrouphd h " +
			 * " where a.strBillNo=b.strBillNo and a.strBillNo=c.strBillNo and c.strSettlementCode=d.strSettelmentCode "
			 * +
			 * " and a.strPOSCode=e.strPosCode and b.strItemCode=f.strItemCode and f.strSubGroupCode=g.strSubGroupCode "
			 * +
			 * " and g.strGroupCode=h.strGroupCode and d.strSettelmentType!='Complementary' "
			 * + " and date(a.dteBillDate) BETWEEN '" + fromDate + "' AND '" +
			 * toDate + "' ");
			 */
			sbSql.append("select b.stritemcode,b.stritemname,sum(b.dblQuantity),sum(b.dblamount),b.dblRate , "
					+ " e.strposname,b.dblDiscountAmt,g.strSubGroupName,h.strGroupName,a.strBillNo "
					+ " from tblqbillhd a,tblqbilldtl b, tblposmaster e ,tblitemmaster f,tblsubgrouphd g,tblgrouphd h "
					+ " where a.strBillNo=b.strBillNo and a.strPOSCode=e.strPosCode and b.strItemCode=f.strItemCode "
					+ " and f.strSubGroupCode=g.strSubGroupCode  and g.strGroupCode=h.strGroupCode    "
					+ " and date(a.dteBillDate) BETWEEN '"
					+ fromDate
					+ "' AND '"
					+ toDate
					+ "' "
					+ " and a.strBillNo NOT IN (select f.strBillNo from tblqbillcomplementrydtl f ) ");
			if (!strPOSCode.equalsIgnoreCase("All")) {
				sbSql.append(" and a.strPOSCode = '" + strPOSCode + "' ");
			}

			if (gEnableShiftYN.equalsIgnoreCase("Y")) {
				if (gEnableShiftYN.equalsIgnoreCase("Y")
						&& (!strShiftNo.equalsIgnoreCase("All"))) {
					sbSql.append(" and a.intShiftCode = '" + strShiftNo + "' ");
				}
			}

			sbSql.append(" group by b.strItemCode order by a.strPOSCode,b.strItemName");
			// System.out.println(sbSql);

			Query querySqlSalesQ = webPOSSessionFactory.getCurrentSession()
					.createSQLQuery(sbSql.toString());
			List listSqlSalesQ = querySqlSalesQ.list();
			if (listSqlSalesQ.size() > 0) {
				for (int i = 0; i < listSqlSalesQ.size(); i++) {

					Object[] obj = (Object[]) listSqlSalesQ.get(i);
					clsItemWiseConsumptionBean objItemWiseConsumption = null;
					if (null != hmItemWiseConsumption.get(obj[0].toString())) {
						objItemWiseConsumption = hmItemWiseConsumption
								.get(obj[0].toString());
						objItemWiseConsumption
								.setSaleQty(objItemWiseConsumption.getSaleQty()
										+ Double.parseDouble(obj[2].toString()));
						objItemWiseConsumption
								.setSaleAmt(objItemWiseConsumption.getSaleAmt()
										+ (Double.parseDouble(obj[3].toString()) - Double
												.parseDouble(obj[6].toString())));
						objItemWiseConsumption
								.setSubTotal(objItemWiseConsumption
										.getSubTotal()
										+ Double.parseDouble(obj[3].toString()));
					} else {
						sqlNo++;

						objItemWiseConsumption = new clsItemWiseConsumptionBean();
						objItemWiseConsumption.setItemCode(obj[0].toString());
						objItemWiseConsumption.setItemName(obj[1].toString());
						objItemWiseConsumption.setSubGroupName(obj[7]
								.toString());
						objItemWiseConsumption.setGroupName(obj[8].toString());
						objItemWiseConsumption.setSaleQty(Double
								.parseDouble(obj[2].toString()));
						objItemWiseConsumption.setComplimentaryQty(0);
						objItemWiseConsumption.setNcQty(0);
						objItemWiseConsumption.setSubTotal(Double
								.parseDouble(obj[3].toString()));
						objItemWiseConsumption.setDiscAmt(Double
								.parseDouble(obj[6].toString()));
						objItemWiseConsumption.setSaleAmt(Double
								.parseDouble(obj[3].toString())
								- Double.parseDouble(obj[6].toString()));
						objItemWiseConsumption.setPOSName(obj[5].toString());
						objItemWiseConsumption.setPromoQty(0);
						objItemWiseConsumption.setSeqNo(sqlNo);
						double totalRowQty = Double.parseDouble(obj[2]
								.toString()) + 0 + 0 + 0;
						// objItemWiseConsumption.setTotalQty(totalRowQty);
						objItemWiseConsumption.setTotalQty(0);

					}
					if (null != objItemWiseConsumption) {
						hmItemWiseConsumption.put(obj[0].toString(),
								objItemWiseConsumption);
					}

					// Code for Sales Qty for modifier live & q data
					sbSqlMod.setLength(0);
					sbSqlMod.append("select b.strItemCode,b.strModifierName,sum(b.dblQuantity),sum(b.dblamount),b.dblRate"
							+ " ,e.strposname,b.dblDiscAmt,g.strSubGroupName,h.strGroupName,a.strBillNo"
							+ " from tblqbillhd a,tblqbillmodifierdtl b, tblqbillsettlementdtl c,tblsettelmenthd d,tblposmaster e "
							+ " ,tblitemmaster f,tblsubgrouphd g,tblgrouphd h "
							+ " where a.strBillNo=b.strBillNo and a.strBillNo=c.strBillNo and c.strSettlementCode=d.strSettelmentCode "
							+ " and a.strPOSCode=e.strPosCode and left(b.strItemCode,7)=f.strItemCode and f.strSubGroupCode=g.strSubGroupCode "
							+ " and g.strGroupCode=h.strGroupCode and d.strSettelmentType!='Complementary' "
							+ " and left(b.strItemCode,7)='"
							+ obj[0].toString()
							+ "' and a.strBillNo='"
							+ obj[9].toString()
							+ "' "
							+ " and date(a.dteBillDate) BETWEEN '"
							+ fromDate
							+ "' AND '"
							+ toDate
							+ "' "
							+ " group by a.strBillNo ");
					sbSqlMod.append(sbFilters);
					// System.out.println(sbSqlMod);

					Query querySqlSalesMod = webPOSSessionFactory
							.getCurrentSession().createSQLQuery(
									sbSql.toString());
					List listSqlSalesMod = querySqlSalesMod.list();
					if (listSqlSalesMod.size() > 0) {
						for (int j = 0; j < listSqlSalesMod.size(); j++) {

							Object[] objMod = (Object[]) listSqlSalesMod.get(j);

							if (null != hmItemWiseConsumption.get(objMod[0]
									.toString())) {

								objItemWiseConsumption = hmItemWiseConsumption
										.get(objMod[0].toString());
								objItemWiseConsumption
										.setSaleQty(objItemWiseConsumption
												.getSaleQty()
												+ Double.parseDouble(objMod[2]
														.toString()));
								objItemWiseConsumption
										.setSaleAmt(objItemWiseConsumption
												.getSaleAmt()
												+ (Double.parseDouble(objMod[3]
														.toString()) - Double
														.parseDouble(obj[6]
																.toString())));
								objItemWiseConsumption
										.setSubTotal(objItemWiseConsumption
												.getSubTotal()
												+ Double.parseDouble(objMod[3]
														.toString()));

							} else {
								sqlNo++;
								objItemWiseConsumption = new clsItemWiseConsumptionBean();
								objItemWiseConsumption.setItemCode(objMod[0]
										.toString());
								objItemWiseConsumption.setItemName(objMod[1]
										.toString());
								objItemWiseConsumption
										.setSubGroupName(objMod[7].toString());
								objItemWiseConsumption.setGroupName(objMod[8]
										.toString());
								objItemWiseConsumption.setSaleQty(Double
										.parseDouble(objMod[2].toString()));
								objItemWiseConsumption.setComplimentaryQty(0);
								objItemWiseConsumption.setNcQty(0);
								objItemWiseConsumption.setSubTotal(Double
										.parseDouble(objMod[3].toString()));
								objItemWiseConsumption.setDiscAmt(Double
										.parseDouble(objMod[6].toString()));
								objItemWiseConsumption.setSaleAmt(Double
										.parseDouble(objMod[3].toString())
										- Double.parseDouble(objMod[6]
												.toString()));
								objItemWiseConsumption.setPOSName(objMod[5]
										.toString());
								objItemWiseConsumption.setPromoQty(0);
								objItemWiseConsumption.setSeqNo(sqlNo);
								double totalRowQty = Double
										.parseDouble(objMod[2].toString()) + 0 + 0 + 0;
								// objItemWiseConsumption.setTotalQty(totalRowQty);
								objItemWiseConsumption.setTotalQty(0);

							}
							if (null != objItemWiseConsumption) {
								hmItemWiseConsumption.put(objMod[0].toString(),
										objItemWiseConsumption);
							}
						}
					}

				}
			}

			// Code for Complimentary Qty for live & q bill detail and bill
			// modifier data
			// for Complimentary Qty for live bill detail
			sbSql.setLength(0);
			sbSql.append("select b.stritemcode,b.stritemname,sum(b.dblQuantity),sum(b.dblamount),b.dblRate"
					+ " ,e.strposname,b.dblDiscountAmt,g.strSubGroupName,h.strGroupName,a.strBillNo "
					+ " from tblbillhd a,tblbilldtl b, tblbillsettlementdtl c,tblsettelmenthd d,tblposmaster e "
					+ " ,tblitemmaster f,tblsubgrouphd g,tblgrouphd h "
					+ " where a.strBillNo=b.strBillNo and a.strBillNo=c.strBillNo and c.strSettlementCode=d.strSettelmentCode "
					+ " and a.strPOSCode=e.strPosCode and b.strItemCode=f.strItemCode and f.strSubGroupCode=g.strSubGroupCode "
					+ " and g.strGroupCode=h.strGroupCode and d.strSettelmentType='Complementary' "
					+ " and date(a.dteBillDate) BETWEEN '"
					+ fromDate
					+ "' AND '" + toDate + "' ");
			if (!strPOSCode.equalsIgnoreCase("All")) {
				sbSql.append(" and a.strPOSCode = '" + strPOSCode + "' ");
			}

			if (gEnableShiftYN.equalsIgnoreCase("Y")) {
				if (gEnableShiftYN.equalsIgnoreCase("Y")
						&& (!strShiftNo.equalsIgnoreCase("All"))) {
					sbSql.append(" and a.intShiftCode = '" + strShiftNo + "' ");
				}
			}

			sbSql.append(" group by b.strItemCode order by a.strPOSCode,b.strItemName");
			// System.out.println(sbSql);

			Query querySqlbillLive = webPOSSessionFactory.getCurrentSession()
					.createSQLQuery(sbSql.toString());

			List listSqlBillLive = querySqlbillLive.list();
			if (listSqlBillLive.size() > 0) {
				for (int i = 0; i < listSqlBillLive.size(); i++) {
					Object[] obj = (Object[]) listSqlBillLive.get(i);

					clsItemWiseConsumptionBean objItemWiseConsumption = null;
					if (null != hmItemWiseConsumption.get(obj[0].toString())) {
						objItemWiseConsumption = hmItemWiseConsumption
								.get(obj[0].toString());
						objItemWiseConsumption
								.setComplimentaryQty(objItemWiseConsumption
										.getComplimentaryQty()
										+ Double.parseDouble(obj[2].toString()));
						objItemWiseConsumption
								.setSaleAmt(objItemWiseConsumption.getSaleAmt()
										+ (Double.parseDouble(obj[3].toString()) - Double
												.parseDouble(obj[6].toString())));
						objItemWiseConsumption
								.setSubTotal(objItemWiseConsumption
										.getSubTotal()
										+ Double.parseDouble(obj[3].toString()));
					} else {
						sqlNo++;

						objItemWiseConsumption = new clsItemWiseConsumptionBean();
						objItemWiseConsumption.setItemCode(obj[0].toString());
						objItemWiseConsumption.setItemName(obj[1].toString());
						objItemWiseConsumption.setSubGroupName(obj[7]
								.toString());
						objItemWiseConsumption.setGroupName(obj[8].toString());
						objItemWiseConsumption.setSaleQty(0);
						objItemWiseConsumption.setComplimentaryQty(Double
								.parseDouble(obj[2].toString()));
						objItemWiseConsumption.setNcQty(0);
						objItemWiseConsumption.setSubTotal(Double
								.parseDouble(obj[3].toString()));
						objItemWiseConsumption.setDiscAmt(Double
								.parseDouble(obj[6].toString()));
						objItemWiseConsumption.setSaleAmt(Double
								.parseDouble(obj[3].toString())
								- Double.parseDouble(obj[6].toString()));
						objItemWiseConsumption.setPOSName(obj[5].toString());
						objItemWiseConsumption.setPromoQty(0);
						objItemWiseConsumption.setSeqNo(sqlNo);
						double totalRowQty = Double.parseDouble(obj[2]
								.toString()) + 0 + 0 + 0;
						// objItemWiseConsumption.setTotalQty(totalRowQty);
						objItemWiseConsumption.setTotalQty(0);

					}
					if (null != objItemWiseConsumption) {
						hmItemWiseConsumption.put(obj[0].toString(),
								objItemWiseConsumption);
					}

					// for Complimentary Qty for live bill modifier
					sbSqlMod.setLength(0);
					sbSqlMod.append("select b.strItemCode,b.strModifierName,sum(b.dblQuantity),sum(b.dblamount),b.dblRate"
							+ " ,e.strposname,b.dblDiscAmt,g.strSubGroupName,h.strGroupName,a.strBillNo "
							+ " from tblbillhd a,tblbillmodifierdtl b, tblbillsettlementdtl c,tblsettelmenthd d,tblposmaster e "
							+ " ,tblitemmaster f,tblsubgrouphd g,tblgrouphd h "
							+ " where a.strBillNo=b.strBillNo and a.strBillNo=c.strBillNo and c.strSettlementCode=d.strSettelmentCode "
							+ " and a.strPOSCode=e.strPosCode and left(b.strItemCode,7)=f.strItemCode and f.strSubGroupCode=g.strSubGroupCode "
							+ " and g.strGroupCode=h.strGroupCode and d.strSettelmentType='Complementary' "
							+ " and left(b.strItemCode,7)='"
							+ obj[0].toString()
							+ "' and a.strBillNo='"
							+ obj[9].toString()
							+ "' "
							+ " and date(a.dteBillDate) BETWEEN '"
							+ fromDate
							+ "' AND '"
							+ toDate
							+ "' "
							+ " group by a.strBillNo ");
					sbSqlMod.append(sbFilters);
					// System.out.println(sbSqlMod);

					Query querySqlBillMod = webPOSSessionFactory
							.getCurrentSession().createSQLQuery(
									sbSql.toString());
					List listSqlBillMod = querySqlBillMod.list();
					if (listSqlBillMod.size() > 0) {
						for (int j = 0; j < listSqlBillMod.size(); j++) {
							Object[] objMod = (Object[]) listSqlBillMod.get(j);
							if (null != hmItemWiseConsumption.get(objMod[0]
									.toString())) {
								objItemWiseConsumption = hmItemWiseConsumption
										.get(objMod[0].toString());
								objItemWiseConsumption
										.setComplimentaryQty(objItemWiseConsumption
												.getComplimentaryQty()
												+ Double.parseDouble(objMod[2]
														.toString()));
								objItemWiseConsumption
										.setSaleAmt(objItemWiseConsumption
												.getSaleAmt()
												+ (Double.parseDouble(objMod[3]
														.toString()) - Double
														.parseDouble(objMod[6]
																.toString())));
								objItemWiseConsumption
										.setSubTotal(objItemWiseConsumption
												.getSubTotal()
												+ Double.parseDouble(objMod[3]
														.toString()));
							} else {
								sqlNo++;

								objItemWiseConsumption = new clsItemWiseConsumptionBean();
								objItemWiseConsumption.setItemCode(objMod[0]
										.toString());
								objItemWiseConsumption.setItemName(objMod[1]
										.toString());
								objItemWiseConsumption
										.setSubGroupName(objMod[7].toString());
								objItemWiseConsumption.setGroupName(objMod[8]
										.toString());
								objItemWiseConsumption.setSaleQty(0);
								objItemWiseConsumption
										.setComplimentaryQty(Double
												.parseDouble(objMod[2]
														.toString()));
								objItemWiseConsumption.setNcQty(0);
								objItemWiseConsumption.setSubTotal(Double
										.parseDouble(objMod[3].toString()));
								objItemWiseConsumption.setDiscAmt(Double
										.parseDouble(objMod[6].toString()));
								objItemWiseConsumption.setSaleAmt(Double
										.parseDouble(objMod[3].toString())
										- Double.parseDouble(objMod[6]
												.toString()));
								objItemWiseConsumption.setPOSName(objMod[5]
										.toString());
								objItemWiseConsumption.setPromoQty(0);
								objItemWiseConsumption.setSeqNo(sqlNo);
								double totalRowQty = Double
										.parseDouble(objMod[2].toString()) + 0 + 0 + 0;
								// objItemWiseConsumption.setTotalQty(totalRowQty);
								objItemWiseConsumption.setTotalQty(0);

							}
							if (null != objItemWiseConsumption) {
								hmItemWiseConsumption.put(objMod[0].toString(),
										objItemWiseConsumption);
							}

						}
					}

				}
			}

			// for Complimentary Qty for q bill details
			sbSql.setLength(0);
			sbSql.append("select b.stritemcode,b.stritemname,sum(b.dblQuantity),sum(b.dblamount),b.dblRate"
					+ " ,e.strposname,b.dblDiscountAmt,g.strSubGroupName,h.strGroupName,a.strBillNo  "
					+ " from tblqbillhd a,tblqbilldtl b, tblqbillsettlementdtl c,tblsettelmenthd d,tblposmaster e "
					+ " ,tblitemmaster f,tblsubgrouphd g,tblgrouphd h "
					+ " where a.strBillNo=b.strBillNo and a.strBillNo=c.strBillNo and c.strSettlementCode=d.strSettelmentCode "
					+ " and a.strPOSCode=e.strPosCode and b.strItemCode=f.strItemCode and f.strSubGroupCode=g.strSubGroupCode "
					+ " and g.strGroupCode=h.strGroupCode and d.strSettelmentType='Complementary' "
					+ " and date(a.dteBillDate) BETWEEN '"
					+ fromDate
					+ "' AND '" + toDate + "' ");
			if (!strPOSCode.equals("All")) {
				sbSql.append(" and a.strPOSCode = '" + strPOSCode + "' ");
			}

			if (gEnableShiftYN.equalsIgnoreCase("Y")) {
				if (gEnableShiftYN.equalsIgnoreCase("Y")
						&& (!strShiftNo.equalsIgnoreCase("All"))) {
					sbSql.append(" and a.intShiftCode = '" + strShiftNo + "' ");
				}
			}

			sbSql.append(" group by b.strItemCode order by a.strPOSCode,b.strItemName");
			// System.out.println(sbSql);

			Query querySqlbillQ = webPOSSessionFactory.getCurrentSession()
					.createSQLQuery(sbSql.toString());

			List listSqlBillQ = querySqlbillQ.list();
			if (listSqlBillQ.size() > 0) {
				for (int i = 0; i < listSqlBillQ.size(); i++) {
					Object[] obj = (Object[]) listSqlBillQ.get(i);

					clsItemWiseConsumptionBean objItemWiseConsumption = null;
					if (null != hmItemWiseConsumption.get(obj[0].toString())) {
						objItemWiseConsumption = hmItemWiseConsumption
								.get(obj[0].toString());
						objItemWiseConsumption
								.setComplimentaryQty(objItemWiseConsumption
										.getComplimentaryQty()
										+ Double.parseDouble(obj[2].toString()));
						objItemWiseConsumption
								.setSaleAmt(objItemWiseConsumption.getSaleAmt()
										+ (Double.parseDouble(obj[3].toString()) - Double
												.parseDouble(obj[6].toString())));
						objItemWiseConsumption
								.setSubTotal(objItemWiseConsumption
										.getSubTotal()
										+ Double.parseDouble(obj[3].toString()));
					}

					else {
						sqlNo++;

						objItemWiseConsumption = new clsItemWiseConsumptionBean();
						objItemWiseConsumption.setItemCode(obj[0].toString());
						objItemWiseConsumption.setItemName(obj[1].toString());
						objItemWiseConsumption.setSubGroupName(obj[7]
								.toString());
						objItemWiseConsumption.setGroupName(obj[8].toString());
						objItemWiseConsumption.setSaleQty(0);
						objItemWiseConsumption.setComplimentaryQty(Double
								.parseDouble(obj[2].toString()));
						objItemWiseConsumption.setNcQty(0);
						objItemWiseConsumption.setSubTotal(Double
								.parseDouble(obj[3].toString()));
						objItemWiseConsumption.setDiscAmt(Double
								.parseDouble(obj[6].toString()));
						objItemWiseConsumption.setSaleAmt(Double
								.parseDouble(obj[3].toString())
								- Double.parseDouble(obj[6].toString()));
						objItemWiseConsumption.setPOSName(obj[5].toString());
						objItemWiseConsumption.setPromoQty(0);
						objItemWiseConsumption.setSeqNo(sqlNo);
						double totalRowQty = Double.parseDouble(obj[2]
								.toString()) + 0 + 0 + 0;
						// objItemWiseConsumption.setTotalQty(totalRowQty);
						objItemWiseConsumption.setTotalQty(0);

					}
					if (null != objItemWiseConsumption) {
						hmItemWiseConsumption.put(obj[0].toString(),
								objItemWiseConsumption);
					}

					// for Complimentary Qty for q bill modifier
					sbSqlMod.setLength(0);
					sbSqlMod.append("select b.strItemCode,b.strModifierName,sum(b.dblQuantity),sum(b.dblamount),b.dblRate"
							+ " ,e.strposname,b.dblDiscAmt,g.strSubGroupName,h.strGroupName,a.strBillNo"
							+ " from tblqbillhd a,tblqbillmodifierdtl b, tblqbillsettlementdtl c,tblsettelmenthd d,tblposmaster e "
							+ " ,tblitemmaster f,tblsubgrouphd g,tblgrouphd h "
							+ " where a.strBillNo=b.strBillNo and a.strBillNo=c.strBillNo and c.strSettlementCode=d.strSettelmentCode "
							+ " and a.strPOSCode=e.strPosCode and left(b.strItemCode,7)=f.strItemCode and f.strSubGroupCode=g.strSubGroupCode "
							+ " and g.strGroupCode=h.strGroupCode and d.strSettelmentType='Complementary' "
							+ " and left(b.strItemCode,7)='"
							+ obj[0].toString()
							+ "' and a.strBillNo='"
							+ obj[9].toString()
							+ "' "
							+ " and date(a.dteBillDate) BETWEEN '"
							+ fromDate
							+ "' AND '"
							+ toDate
							+ "' "
							+ " group by a.strBillNo ");
					sbSqlMod.append(sbFilters);
					// System.out.println(sbSqlMod);

					//

					Query querySqlBillMod = webPOSSessionFactory
							.getCurrentSession().createSQLQuery(
									sbSql.toString());
					List listSqlBillMod = querySqlBillMod.list();
					if (listSqlBillMod.size() > 0) {
						for (int j = 0; j < listSqlBillMod.size(); j++) {
							Object[] objMod = (Object[]) listSqlBillMod.get(j);
							if (null != hmItemWiseConsumption.get(objMod[0]
									.toString())) {
								objItemWiseConsumption = hmItemWiseConsumption
										.get(objMod[0].toString());
								objItemWiseConsumption
										.setComplimentaryQty(objItemWiseConsumption
												.getComplimentaryQty()
												+ Double.parseDouble(objMod[2]
														.toString()));
								objItemWiseConsumption
										.setSaleAmt(objItemWiseConsumption
												.getSaleAmt()
												+ (Double.parseDouble(objMod[3]
														.toString()) - Double
														.parseDouble(objMod[6]
																.toString())));
								objItemWiseConsumption
										.setSubTotal(objItemWiseConsumption
												.getSubTotal()
												+ Double.parseDouble(objMod[3]
														.toString()));
							}

							else {
								sqlNo++;
								objItemWiseConsumption = new clsItemWiseConsumptionBean();
								objItemWiseConsumption.setItemCode(objMod[0]
										.toString());
								objItemWiseConsumption.setItemName(objMod[1]
										.toString());
								objItemWiseConsumption
										.setSubGroupName(objMod[7].toString());
								objItemWiseConsumption.setGroupName(objMod[8]
										.toString());
								objItemWiseConsumption.setSaleQty(0);
								objItemWiseConsumption
										.setComplimentaryQty(Double
												.parseDouble(objMod[2]
														.toString()));
								objItemWiseConsumption.setNcQty(0);
								objItemWiseConsumption.setSubTotal(Double
										.parseDouble(objMod[3].toString()));
								objItemWiseConsumption.setDiscAmt(Double
										.parseDouble(objMod[6].toString()));
								objItemWiseConsumption.setSaleAmt(Double
										.parseDouble(objMod[3].toString())
										- Double.parseDouble(objMod[6]
												.toString()));
								objItemWiseConsumption.setPOSName(objMod[5]
										.toString());
								objItemWiseConsumption.setPromoQty(0);
								objItemWiseConsumption.setSeqNo(sqlNo);
								double totalRowQty = Double
										.parseDouble(objMod[2].toString()) + 0 + 0 + 0;
								// objItemWiseConsumption.setTotalQty(totalRowQty);
								objItemWiseConsumption.setTotalQty(0);

							}
							if (null != objItemWiseConsumption) {
								hmItemWiseConsumption.put(objMod[0].toString(),
										objItemWiseConsumption);
							}
						}
					}

				}
			}

			// Code for NC Qty
			sbSql.setLength(0);
			sbSql.append("select a.stritemcode,b.stritemname,sum(a.dblQuantity),sum(a.dblQuantity*a.dblRate)"
					+ ",a.dblRate, c.strposname,0 as DiscAmt,d.strSubGroupName,e.strGroupName "
					+ " from tblnonchargablekot a, tblitemmaster b, tblposmaster c,tblsubgrouphd d,tblgrouphd e "
					+ " where left(a.strItemCode,7)=b.strItemCode and a.strPOSCode=c.strPosCode and b.strSubGroupCode=d.strSubGroupCode "
					+ " and d.strGroupCode=e.strGroupCode "
					+ " and date(a.dteNCKOTDate) BETWEEN '"
					+ fromDate
					+ "' AND '" + toDate + "' ");
			if (!strPOSCode.equalsIgnoreCase("All")) {
				sbSql.append(" AND a.strPOSCode = '" + strPOSCode + "' ");
			}

			sbSql.append(" group by a.strItemCode order by a.strPOSCode,b.strItemName");
			// System.out.println(sbSql);

			Query querySqlNC = webPOSSessionFactory.getCurrentSession()
					.createSQLQuery(sbSql.toString());

			List listSqlNC = querySqlNC.list();
			if (listSqlNC.size() > 0) {
				for (int i = 0; i < listSqlNC.size(); i++) {
					Object[] obj = (Object[]) listSqlNC.get(i);
					clsItemWiseConsumptionBean objItemWiseConsumption = null;

					if (null != hmItemWiseConsumption.get(obj[0].toString())) {
						objItemWiseConsumption = hmItemWiseConsumption
								.get(obj[0].toString());
						objItemWiseConsumption.setNcQty(objItemWiseConsumption
								.getNcQty()
								+ Double.parseDouble(obj[2].toString()));
						objItemWiseConsumption
								.setSaleAmt(objItemWiseConsumption.getSaleAmt());
						objItemWiseConsumption
								.setSubTotal(objItemWiseConsumption
										.getSubTotal());
						// objItemWiseConsumption.setTotalQty(objItemWiseConsumption.getTotalQty()
						// + rsNCKOT.getDouble(3));
					} else {
						sqlNo++;
						objItemWiseConsumption = new clsItemWiseConsumptionBean();
						objItemWiseConsumption.setItemCode(obj[0].toString());
						objItemWiseConsumption.setItemName(obj[1].toString());
						objItemWiseConsumption.setSubGroupName(obj[7]
								.toString());
						objItemWiseConsumption.setGroupName(obj[8].toString());
						objItemWiseConsumption.setSaleQty(0);
						objItemWiseConsumption.setComplimentaryQty(0);
						objItemWiseConsumption.setNcQty(Double
								.parseDouble(obj[2].toString()));
						objItemWiseConsumption.setSubTotal(0);
						objItemWiseConsumption.setDiscAmt(Double
								.parseDouble(obj[6].toString()));
						objItemWiseConsumption.setSaleAmt(0);
						objItemWiseConsumption.setPOSName(obj[5].toString());
						objItemWiseConsumption.setPromoQty(0);
						objItemWiseConsumption.setSeqNo(sqlNo);
						double totalRowQty = Double.parseDouble(obj[2]
								.toString()) + 0 + 0 + 0;
						// objItemWiseConsumption.setTotalQty(totalRowQty);
						objItemWiseConsumption.setTotalQty(0);

					}
					if (null != objItemWiseConsumption) {
						hmItemWiseConsumption.put(obj[0].toString(),
								objItemWiseConsumption);
					}
				}
			}

			// Code for promotion Qty for Q
			sbSql.setLength(0);
			sbSql.append("select b.strItemCode,c.strItemName,sum(b.dblQuantity),sum(b.dblAmount),b.dblRate"
					+ " ,f.strPosName,0,d.strSubGroupName,e.strGroupName "
					+ " from tblqbillhd a,tblqbillpromotiondtl b,tblitemmaster c,tblsubgrouphd d,tblgrouphd e,tblposmaster f "
					+ " where a.strBillNo=b.strBillNo and b.strItemCode=c.strItemCode "
					+ " and c.strSubGroupCode=d.strSubGroupCode "
					+ " and d.strGroupCode=e.strGroupCode "
					+ " and a.strPOSCode=f.strPosCode  "
					+ " and DATE(a.dteBillDate) BETWEEN '"
					+ fromDate
					+ "' AND '" + toDate + "' ");
			if (!strPOSCode.equalsIgnoreCase("All")) {
				sbSql.append(" AND a.strPOSCode = '" + strPOSCode + "' ");
			}

			if (gEnableShiftYN.equalsIgnoreCase("Y")) {
				if (gEnableShiftYN.equalsIgnoreCase("Y")
						&& (!strShiftNo.equalsIgnoreCase("All"))) {
					sbSql.append(" and a.intShiftCode = '" + strShiftNo + "' ");
				}
			}

			sbSql.append(" group by b.strItemCode order by a.strPOSCode,c.strItemName");
			// System.out.println(sbSql);

			Query querySqlPromQ = webPOSSessionFactory.getCurrentSession()
					.createSQLQuery(sbSql.toString());

			List listSqlPromQ = querySqlPromQ.list();
			if (listSqlPromQ.size() > 0) {
				for (int i = 0; i < listSqlPromQ.size(); i++) {
					Object[] obj = (Object[]) listSqlPromQ.get(i);
					clsItemWiseConsumptionBean objItemWiseConsumption = null;
					if (null != hmItemWiseConsumption.get(obj[0].toString())) {
						objItemWiseConsumption = hmItemWiseConsumption
								.get(obj[0].toString());
						double saleQty = objItemWiseConsumption.getSaleQty();
						if (saleQty > 0) {
							objItemWiseConsumption
									.setSaleQty(objItemWiseConsumption
											.getSaleQty()
											- Double.parseDouble(obj[2]
													.toString()));
							objItemWiseConsumption
									.setTotalQty(objItemWiseConsumption
											.getTotalQty()
											- Double.parseDouble(obj[2]
													.toString()));
						}

						objItemWiseConsumption
								.setPromoQty(objItemWiseConsumption
										.getPromoQty()
										+ Double.parseDouble(obj[2].toString()));
						double qty = objItemWiseConsumption.getTotalQty();
						// objItemWiseConsumption.setTotalQty(qty +
						// objItemWiseConsumption.getPromoQty());
					} else {

						sqlNo++;
						objItemWiseConsumption = new clsItemWiseConsumptionBean();
						objItemWiseConsumption.setItemCode(obj[0].toString());
						objItemWiseConsumption.setItemName(obj[1].toString());
						objItemWiseConsumption.setSubGroupName(obj[7]
								.toString());
						objItemWiseConsumption.setGroupName(obj[8].toString());
						objItemWiseConsumption.setSaleQty(0);
						objItemWiseConsumption.setComplimentaryQty(0);
						objItemWiseConsumption.setNcQty(0);
						objItemWiseConsumption.setSubTotal(Double
								.parseDouble(obj[3].toString()));
						objItemWiseConsumption.setDiscAmt(Double
								.parseDouble(obj[6].toString()));
						objItemWiseConsumption.setSaleAmt(Double
								.parseDouble(obj[3].toString())
								- Double.parseDouble(obj[6].toString()));
						objItemWiseConsumption.setPOSName(obj[5].toString());
						objItemWiseConsumption.setPromoQty(Double
								.parseDouble(obj[2].toString()));
						objItemWiseConsumption.setSeqNo(sqlNo);
						double totalRowQty = Double.parseDouble(obj[2]
								.toString()) + 0 + 0 + 0;
						// objItemWiseConsumption.setTotalQty(totalRowQty);
						objItemWiseConsumption.setTotalQty(0);

					}
					if (null != objItemWiseConsumption) {
						hmItemWiseConsumption.put(obj[0].toString(),
								objItemWiseConsumption);
					}
				}
			}

			// Code for promotion Qty for live
			sbSql.setLength(0);
			sbSql.append("select b.strItemCode,c.strItemName,sum(b.dblQuantity),sum(b.dblAmount),b.dblRate"
					+ " ,f.strPosName,0,d.strSubGroupName,e.strGroupName "
					+ " from tblbillhd a,tblbillpromotiondtl b,tblitemmaster c,tblsubgrouphd d,tblgrouphd e,tblposmaster f "
					+ " where a.strBillNo=b.strBillNo and b.strItemCode=c.strItemCode "
					+ " and c.strSubGroupCode=d.strSubGroupCode "
					+ " and d.strGroupCode=e.strGroupCode "
					+ " and a.strPOSCode=f.strPosCode  "
					+ " and DATE(a.dteBillDate) BETWEEN '"
					+ fromDate
					+ "' AND '" + toDate + "' ");
			if (!strPOSCode.equalsIgnoreCase("All")) {
				sbSql.append(" AND a.strPOSCode = '" + strPOSCode + "' ");
			}

			if (gEnableShiftYN.equalsIgnoreCase("Y")) {
				if (gEnableShiftYN.equalsIgnoreCase("Y")
						&& (!strShiftNo.equalsIgnoreCase("All"))) {
					sbSql.append(" and a.intShiftCode = '" + strShiftNo + "' ");
				}
			}

			sbSql.append(" group by b.strItemCode order by a.strPOSCode,c.strItemName");
			// System.out.println(sbSql);

			Query querySqlPromLive = webPOSSessionFactory.getCurrentSession()
					.createSQLQuery(sbSql.toString());

			List listSqlPromLive = querySqlPromLive.list();
			if (listSqlPromLive.size() > 0) {
				for (int i = 0; i < listSqlPromLive.size(); i++) {
					Object[] obj = (Object[]) listSqlPromQ.get(i);
					clsItemWiseConsumptionBean objItemWiseConsumption = null;
					if (null != hmItemWiseConsumption.get(obj[0].toString()))

					{
						objItemWiseConsumption = hmItemWiseConsumption
								.get(obj[0].toString());
						double saleQty = objItemWiseConsumption.getSaleQty();
						if (saleQty > 0) {
							objItemWiseConsumption
									.setSaleQty(objItemWiseConsumption
											.getSaleQty()
											- Double.parseDouble(obj[2]
													.toString()));
							objItemWiseConsumption
									.setTotalQty(objItemWiseConsumption
											.getTotalQty()
											- Double.parseDouble(obj[2]
													.toString()));
						}

						objItemWiseConsumption
								.setPromoQty(objItemWiseConsumption
										.getPromoQty()
										+ Double.parseDouble(obj[2].toString()));
						double qty = objItemWiseConsumption.getTotalQty();
						// objItemWiseConsumption.setTotalQty(qty +
						// objItemWiseConsumption.getPromoQty());
					} else {
						sqlNo++;
						objItemWiseConsumption = new clsItemWiseConsumptionBean();
						objItemWiseConsumption.setItemCode(obj[0].toString());
						objItemWiseConsumption.setItemName(obj[1].toString());
						objItemWiseConsumption.setSubGroupName(obj[7]
								.toString());
						objItemWiseConsumption.setGroupName(obj[8].toString());
						objItemWiseConsumption.setSaleQty(0);
						objItemWiseConsumption.setComplimentaryQty(0);
						objItemWiseConsumption.setNcQty(0);
						objItemWiseConsumption.setSubTotal(Double
								.parseDouble(obj[3].toString()));
						objItemWiseConsumption.setDiscAmt(Double
								.parseDouble(obj[6].toString()));
						objItemWiseConsumption.setSaleAmt(Double
								.parseDouble(obj[3].toString())
								- Double.parseDouble(obj[6].toString()));
						objItemWiseConsumption.setPOSName(obj[5].toString());
						objItemWiseConsumption.setPromoQty(Double
								.parseDouble(obj[2].toString()));
						objItemWiseConsumption.setSeqNo(sqlNo);
						double totalRowQty = Double.parseDouble(obj[2]
								.toString()) + 0 + 0 + 0;
						// objItemWiseConsumption.setTotalQty(totalRowQty);
						objItemWiseConsumption.setTotalQty(0);

					}
					if (null != objItemWiseConsumption) {
						hmItemWiseConsumption.put(obj[0].toString(),
								objItemWiseConsumption);
					}
				}
			}
			List<clsItemWiseConsumptionBean> list = new ArrayList<clsItemWiseConsumptionBean>();
			for (Map.Entry<String, clsItemWiseConsumptionBean> entry : hmItemWiseConsumption
					.entrySet()) {
				clsItemWiseConsumptionBean objItemComp = entry.getValue();
				double totalRowQty = objItemComp.getSaleQty()
						+ objItemComp.getComplimentaryQty()
						+ objItemComp.getNcQty() + objItemComp.getPromoQty();
				objItemComp.setTotalQty(totalRowQty);
				list.add(objItemComp);
			}

			// sort list
			Collections
					.sort(list,
							clsItemWiseConsumptionBean.comparatorItemConsumptionColumnDtl);

			clsItemWiseConsumptionBean objItemComp = null;
			for (int cnt = 0; cnt < list.size(); cnt++) {
				objItemComp = new clsItemWiseConsumptionBean();
				objItemComp = list.get(cnt);
				JSONObject jObj = new JSONObject();
				jObj.put("strItemCode", objItemComp.getItemCode());
				jObj.put("strItemName", objItemComp.getItemName());
				jObj.put("strSubGroupName", objItemComp.getSubGroupName());
				jObj.put("strGroupName", objItemComp.getGroupName());
				jObj.put("dblSaleQty", objItemComp.getSaleQty());
				jObj.put("dblComplementaryQty",
						objItemComp.getComplimentaryQty());
				jObj.put("dblNcQty", objItemComp.getNcQty());
				jObj.put("dblSubTotal", objItemComp.getSubTotal());
				jObj.put("dblDiscAmt", objItemComp.getDiscAmt());
				jObj.put("dblSaleAmt", objItemComp.getSaleAmt());
				jObj.put("strPosName", objItemComp.getPOSName());
				jObj.put("dblPromQty", objItemComp.getPromoQty());
				jObj.put("dblSeqNo", objItemComp.getSeqNo());
				jObj.put("dblTotalQty", objItemComp.getTotalQty());

				jArr.put(jObj);

			}

			jOBjRet.put("jArr", jArr);
		}

		catch (Exception ex) {
			ex.printStackTrace();
		}
		return jOBjRet;
	}


public JSONObject funPostingReport(String fromDate,String toDate,String strPOSCode,String strShiftNo,String strUserCode)
{
	List listRet =new ArrayList();
    JSONArray jArrSttleData =new JSONArray();
    JSONArray jArrGroupSale =new JSONArray();
    JSONArray jArrTaxWise =new JSONArray();
    JSONArray jArrGroupWiseDineIn =new JSONArray();
    JSONArray jArrGroupWiseTakeAway =new JSONArray();
    JSONArray jArrGroupWiseHomeDel =new JSONArray();
    
    JSONObject jOBjRet=new JSONObject();

   
    try{
    	
    	int count = 0;
        ////For Settlement details of Live and Q data
        StringBuilder sqlQData = new StringBuilder();
        StringBuilder sqlModQData = new StringBuilder();

        sqlQData.append(" select c.strSettelmentDesc,c.strSettelmentType,sum(b.dblSettlementAmt)+sum(a.dblTipAmount) "
                + " from tblqbillhd a,tblqbillsettlementdtl b,tblsettelmenthd c "
                + " where a.strBillNo=b.strBillNo and b.strSettlementCode=c.strSettelmentCode  and c.strSettelmentType!='Complementary' and c.strSettelmentType!='Credit' "
                + " and date(a.dteBillDate) between '" + fromDate + "' and '" + toDate + "' ");
        if (!strPOSCode.equalsIgnoreCase("ALL"))
        {
            sqlQData.append(" and a.strPOSCode='" + strPOSCode + "' ");
        }
        sqlQData.append(" group by c.strSettelmentCode ");

        Map<String, List<clsPOSSettelementOptionsBean>> hmSalesSettleData = new HashMap<String, List<clsPOSSettelementOptionsBean>>();
        List<clsPOSSettelementOptionsBean> arrListSettleData = null;

        Query querySql = webPOSSessionFactory.getCurrentSession().createSQLQuery(sqlQData.toString());
 	    List listSql = querySql.list();
 	    if(listSql.size()>0)
 	    {
 	    	
 	    	for(int i=0 ;i<listSql.size();i++ )
 	    	{
 	    		Object[] obj = (Object[]) listSql.get(i);
 	    		
 	    		clsPOSSettelementOptionsBean objSettle = new clsPOSSettelementOptionsBean();
            if (hmSalesSettleData.containsKey(obj[1].toString()))
            {
                arrListSettleData = hmSalesSettleData.get(obj[1].toString());
                for (int j = 0; j < arrListSettleData.size(); j++)
                {
                    objSettle = arrListSettleData.get(j);
                    if (objSettle.getStrSettelmentDesc().equals(obj[0].toString()))
                    {
                        arrListSettleData.remove(objSettle);
                        double settleAmt = objSettle.getDblSettlementAmt();
                        objSettle.setDblSettlementAmt(settleAmt + Double.parseDouble(obj[2].toString()));
                    }
                    else
                    {
                        objSettle = new clsPOSSettelementOptionsBean();
                        objSettle.setDblSettlementAmt(Double.parseDouble(obj[2].toString()));
                        objSettle.setStrSettelmentDesc(obj[0].toString());
                        objSettle.setStrSettelmentType(obj[1].toString());
                    }
                }
            }
            else
            {
                arrListSettleData = new ArrayList<clsPOSSettelementOptionsBean>();
                objSettle.setStrSettelmentDesc(obj[0].toString());
                objSettle.setStrSettelmentType(obj[1].toString());
                objSettle.setDblSettlementAmt(Double.parseDouble(obj[2].toString()));
            }
            arrListSettleData.add(objSettle);
            hmSalesSettleData.put(obj[1].toString(), arrListSettleData);
        }
 	    }

        List<clsPOSSettelementOptionsBean> arrListCreditSettleData = null;
        sqlQData.setLength(0);
        sqlQData.append(" select ifnull(d.strCustomerName,'NA'),c.strSettelmentType,sum(b.dblSettlementAmt)+sum(a.dblTipAmount) "
                + " from tblqbillhd a inner join tblqbillsettlementdtl b on a.strBillNo=b.strBillNo "
                + " left outer join tblcustomermaster d on b.strCustomerCode=d.strCustomerCode "
                + " inner join tblsettelmenthd c on b.strSettlementCode=c.strSettelmentCode "
                + " where c.strSettelmentType='Credit' "
                + " and date(a.dteBillDate) between '" + fromDate + "' and '" + toDate + "' ");
        if (!strPOSCode.equalsIgnoreCase("ALL"))
        {
            sqlQData.append(" and a.strPOSCode='" + strPOSCode + "' ");
        }
        sqlQData.append(" group by d.strCustomerCode order by d.strCustomerName ");
        String key = "Credit";
        
        Query querySqlLive = webPOSSessionFactory.getCurrentSession().createSQLQuery(sqlQData.toString());
 	    List listSqlLive = querySqlLive.list();
 	    if(listSqlLive.size()>0)
 	    {
 	    	
 	    	for(int i=0 ;i<listSqlLive.size();i++ )
 	    	{
 	    		Object[] obj = (Object[]) listSqlLive.get(i);
 	    		clsPOSSettelementOptionsBean objSettle = new clsPOSSettelementOptionsBean();
            if (hmSalesSettleData.containsKey(key))
            {
                arrListCreditSettleData = hmSalesSettleData.get(key);
                for (int j = 0; j < arrListCreditSettleData.size(); j++)
                {
                    objSettle = arrListCreditSettleData.get(j);
                    if (objSettle.getStrSettelmentDesc().equals(obj[0].toString()))
                    {
                        arrListCreditSettleData.remove(objSettle);
                        double settleAmt = objSettle.getDblSettlementAmt();
                        objSettle.setDblSettlementAmt(settleAmt + Double.parseDouble(obj[2].toString()));
                    }
                    else
                    {
                        objSettle = new clsPOSSettelementOptionsBean();
                        objSettle.setDblSettlementAmt(Double.parseDouble(obj[2].toString()));
                        objSettle.setStrSettelmentDesc(obj[0].toString());
                        objSettle.setStrSettelmentType(obj[1].toString());
                    }
                }
            }
            else
            {
                arrListCreditSettleData = new ArrayList<clsPOSSettelementOptionsBean>();
                objSettle.setStrSettelmentDesc(obj[0].toString());
                objSettle.setStrSettelmentType(obj[1].toString());
                objSettle.setDblSettlementAmt(Double.parseDouble(obj[2].toString()));
            }
            arrListCreditSettleData.add(objSettle);
            hmSalesSettleData.put(key, arrListCreditSettleData);
        }
 	    }
        //For Discount details of Live and Q data
        sqlQData.setLength(0);
        sqlQData.append(" select sum(b.dblDiscAmt),a.strBillNo  from tblqbillhd a,tblqbilldiscdtl b "
                + " where a.strBillNo=b.strBillNo "
                + " and date(a.dteBillDate) between '" + fromDate + "' and '" + toDate + "' ");
        if (!strPOSCode.equalsIgnoreCase("ALL"))
        {

            sqlQData.append(" and a.strPOSCode='" +strPOSCode + "' ");
        }
        sqlQData.append(" group by a.strBillNo");

        double finalDisAmt = 0;
        Query querySqlDisc = webPOSSessionFactory.getCurrentSession().createSQLQuery(sqlQData.toString());
 	    List listSqlDisc = querySqlDisc.list();
	    if(listSqlDisc.size()>0)
 	    {
 	    	
 	    	for(int i=0 ;i<listSqlLive.size();i++ )
 	    	{
 	    		Object[]obj=(Object[]) listSqlDisc.get(i);
 	    	
            finalDisAmt = finalDisAmt + Double.parseDouble(obj[0].toString());
        }
 	    }

        //For groupwise sala data
        sqlQData.setLength(0);
        sqlModQData.setLength(0);

        sqlQData.append(" select e.strGroupName,SUM(b.dblAmount)-sum(b.dblDiscountAmt),e.strGroupCode,a.strOperationType "
                + " from tblqbillhd a,tblqbilldtl b,tblitemmaster c,tblsubgrouphd d,tblgrouphd e "
                + " where a.strBillNo=b.strBillNo and b.strItemCode=c.strItemCode "
                + " and c.strSubGroupCode=d.strSubGroupCode and d.strGroupCode=e.strGroupCode "
                + " and a.strClientCode=b.strClientCode  "
                + " and date(a.dteBillDate) between '" + fromDate + "' and '" + toDate + "' ");

        sqlModQData.append(" select e.strGroupName,SUM(b.dblAmount)-sum(b.dblDiscAmt),e.strGroupCode,a.strOperationType "
                + " from tblqbillhd a,tblqbillmodifierdtl b,tblitemmaster c,tblsubgrouphd d,tblgrouphd e "
                + " where a.strBillNo=b.strBillNo and left(b.strItemCode,7)=c.strItemCode "
                + " and c.strSubGroupCode=d.strSubGroupCode and d.strGroupCode=e.strGroupCode "
                + "and a.strClientCode=b.strClientCode "
                + " and date(a.dteBillDate) between '" + fromDate + "' and '" + toDate + "' ");

        if (!strPOSCode.equalsIgnoreCase("ALL"))
        {
            sqlQData.append(" and a.strPOSCode='" + strPOSCode + "' ");
            sqlModQData.append(" and a.strPOSCode='" + strPOSCode + "' ");
        }
        sqlQData.append(" group by a.strOperationType,e.strGroupCode");
        sqlModQData.append(" group by a.strOperationType,e.strGroupCode");

        Map<String, List<clsPOSSettelementOptionsBean>> hmSalesGroupWiseSaleData = new HashMap<String, List<clsPOSSettelementOptionsBean>>();
        List<clsPOSSettelementOptionsBean> arrListGroupwiseSaleData = null;

        Map<String, Double> mapDineIn = new HashMap<>();
        Map<String, Double> mapTakeAway = new HashMap<>();
        Map<String, Double> mapHomeDel = new HashMap<>();
        Query queryQSql = webPOSSessionFactory.getCurrentSession().createSQLQuery(sqlQData.toString());
 	    List listSqQ = queryQSql.list();
	    if(listSqQ.size()>0)
 	    {
 	    	
 	    	for(int i=0 ;i<listSqQ.size();i++ )
 	    	{
 	    		Object[]obj=(Object[]) listSqQ.get(i);

 	        clsPOSSettelementOptionsBean objDineIn = new clsPOSSettelementOptionsBean();
            objDineIn.setDblSettlementAmt(Double.parseDouble(obj[1].toString()));
            objDineIn.setStrSettelmentDesc(obj[0].toString());
            objDineIn.setStrSettelmentType(obj[2].toString());
            objDineIn.setStrRemark(obj[3].toString());

            if (obj[3].toString().equalsIgnoreCase("Dine In") || obj[3].toString().equalsIgnoreCase("Direct Biller"))
            {
                if (mapDineIn.containsKey(obj[0].toString()))
                {
                    mapDineIn.put(obj[0].toString(),mapDineIn.get(obj[0].toString()) +Double.parseDouble( obj[1].toString()));
                }
                else
                {
                    mapDineIn.put(obj[0].toString(), Double.parseDouble(obj[1].toString()));
                }
            }
            else if (obj[3].toString().equalsIgnoreCase("Take Away"))
            {
                if (mapTakeAway.containsKey(obj[0].toString()))
                {
                    mapTakeAway.put(obj[0].toString(), mapTakeAway.get(obj[0].toString()) + Double.parseDouble(obj[1].toString()));
                }
                else
                {
                    mapTakeAway.put(obj[0].toString(), Double.parseDouble(obj[1].toString()));
                }
            }
            else if (obj[3].toString().equalsIgnoreCase("Home Delivery"))
            {
                if (mapHomeDel.containsKey(obj[0].toString()))
                {
                    mapHomeDel.put(obj[0].toString(), mapHomeDel.get(obj[0].toString()) + Double.parseDouble(obj[1].toString()));
                }
                else
                {
                    mapHomeDel.put(obj[0].toString(), Double.parseDouble(obj[1].toString()));
                }
            }

            clsPOSSettelementOptionsBean objSettle = new clsPOSSettelementOptionsBean();
            if (hmSalesGroupWiseSaleData.containsKey(obj[2].toString()))
            {
                arrListGroupwiseSaleData = hmSalesGroupWiseSaleData.get(obj[2].toString());
                for (int j = 0; j < arrListGroupwiseSaleData.size(); j++)
                {
                    objSettle = arrListGroupwiseSaleData.get(j);
                    if (objSettle.getStrSettelmentDesc().equals(obj[0].toString()))
                    {
                        arrListGroupwiseSaleData.remove(objSettle);
                        double settleAmt = objSettle.getDblSettlementAmt();
                        objSettle.setDblSettlementAmt(settleAmt + Double.parseDouble(obj[1].toString()));
                    }
                    else
                    {
                        objSettle = new clsPOSSettelementOptionsBean();
                        objSettle.setDblSettlementAmt(Double.parseDouble(obj[1].toString()));
                        objSettle.setStrSettelmentDesc(obj[0].toString());
                        objSettle.setStrSettelmentType(obj[2].toString());
                        objSettle.setStrRemark(obj[3].toString());
                    }
                }
            }
            else
            {
                arrListGroupwiseSaleData = new ArrayList<clsPOSSettelementOptionsBean>();
                objSettle.setStrSettelmentDesc(obj[0].toString());
                objSettle.setStrSettelmentType(obj[2].toString());
                objSettle.setDblSettlementAmt(Double.parseDouble(obj[1].toString()));
                objSettle.setStrRemark(obj[3].toString());

            }
            arrListGroupwiseSaleData.add(objSettle);
            hmSalesGroupWiseSaleData.put(obj[2].toString(), arrListGroupwiseSaleData);
        }
 	    }
      
        Query querySqlMod = webPOSSessionFactory.getCurrentSession().createSQLQuery(sqlModQData.toString());
 	    List listSqlMod = querySqlMod.list();
	    if(listSqlMod.size()>0)
 	    {
 	    	
 	    	for(int i=0 ;i<listSqlMod.size();i++ )
 	    	{
 	    		Object[]obj=(Object[]) listSqlMod.get(i);

            if (obj[3].toString().equalsIgnoreCase("Dine In") || obj[3].toString().equalsIgnoreCase("Direct Biller"))
            {
                if (mapDineIn.containsKey(obj[0].toString()))
                {
                    mapDineIn.put(obj[0].toString(), mapDineIn.get(obj[0].toString()) + Double.parseDouble(obj[1].toString()));
                }
                else
                {
                    mapDineIn.put(obj[0].toString(), Double.parseDouble(obj[1].toString()));
                }
            }
            else if (obj[3].toString().equalsIgnoreCase("Take Away"))
            {
                if (mapTakeAway.containsKey(obj[0].toString()))
                {
                    mapTakeAway.put(obj[0].toString(), mapTakeAway.get(obj[0].toString()) + Double.parseDouble(obj[1].toString()));
                }
                else
                {
                    mapTakeAway.put(obj[0].toString(), Double.parseDouble(obj[1].toString()));
                }
            }
            else if (obj[3].toString().equalsIgnoreCase("Home Delivery"))
            {
                if (mapHomeDel.containsKey(obj[0].toString()))
                {
                    mapHomeDel.put(obj[0].toString(), mapHomeDel.get(obj[0].toString()) + Double.parseDouble(obj[1].toString()));
                }
                else
                {
                    mapHomeDel.put(obj[0].toString(),Double.parseDouble(obj[1].toString()));
                }
            }

            clsPOSSettelementOptionsBean objSettle = new clsPOSSettelementOptionsBean();
            if (hmSalesGroupWiseSaleData.containsKey(obj[2].toString()))
            {
                arrListGroupwiseSaleData = hmSalesGroupWiseSaleData.get(obj[2].toString());
                for (int j = 0; j < arrListGroupwiseSaleData.size(); j++)
                {
                    objSettle = arrListGroupwiseSaleData.get(j);
                    if (objSettle.getStrSettelmentDesc().equals(obj[2].toString()))
                    {
                        arrListGroupwiseSaleData.remove(objSettle);
                        double settleAmt = objSettle.getDblSettlementAmt();
                        objSettle.setDblSettlementAmt(settleAmt + Double.parseDouble(obj[1].toString()));
                    }
                    else
                    {
                        objSettle = new clsPOSSettelementOptionsBean();
                        objSettle.setDblSettlementAmt(Double.parseDouble(obj[1].toString()));
                        objSettle.setStrSettelmentDesc(obj[0].toString());
                        objSettle.setStrSettelmentType(obj[2].toString());
                        objSettle.setStrRemark(obj[3].toString());
                    }
                }
            }
            else
            {
                arrListGroupwiseSaleData = new ArrayList<clsPOSSettelementOptionsBean>();
                objSettle.setStrSettelmentDesc(obj[0].toString());
                objSettle.setStrSettelmentType(obj[2].toString());
                objSettle.setDblSettlementAmt(Double.parseDouble(obj[1].toString()));
                objSettle.setStrRemark(obj[3].toString());

            }
            arrListGroupwiseSaleData.add(objSettle);
            hmSalesGroupWiseSaleData.put(obj[2].toString(), arrListGroupwiseSaleData);
        }
 	    }

        //For taxwise data details;
        sqlQData.setLength(0);

        sqlQData.append(" select c.strTaxCode,c.strTaxDesc,sum(b.dblTaxAmount),sum(b.dblTaxableAmount) "
                + " from tblqbillhd a,tblqbilltaxdtl b,tbltaxhd c "
                + " where a.strBillNo=b.strBillNo and b.strTaxCode=c.strTaxCode "
                + " and a.strClientCode=b.strClientCode "
                + " and date(a.dteBillDate) between '" + fromDate + "' and '" + toDate + "' ");
        if (!strPOSCode.equalsIgnoreCase("ALL"))
        {
            sqlQData.append(" and a.strPOSCode='" + strPOSCode + "' ");
        }
        sqlQData.append(" group by b.strTaxCode order by c.strTaxOnTax");

        Map<String, List<clsPOSSettelementOptionsBean>> hmSalesTaxWiseSaleData = new HashMap<String, List<clsPOSSettelementOptionsBean>>();
        List<clsPOSSettelementOptionsBean> arrListTaxwiseSaleData = null;

        Query queryQTaxwiseData = webPOSSessionFactory.getCurrentSession().createSQLQuery(sqlQData.toString());
 	    List listSqlQTax = queryQTaxwiseData.list();
	    if(listSqlQTax.size()>0)
 	    {
 	    	
 	    	for(int i=0 ;i<listSqlQTax.size();i++ )
 	    	{
 	    		Object[]obj=(Object[]) listSqlQTax.get(i);
 	    		clsPOSSettelementOptionsBean objSettle = new clsPOSSettelementOptionsBean();
            if (hmSalesTaxWiseSaleData.containsKey(obj[0].toString()))
            {
                arrListTaxwiseSaleData = hmSalesTaxWiseSaleData.get(obj[0].toString());
                for (int j = 0; j < arrListTaxwiseSaleData.size(); j++)
                {
                    objSettle = arrListTaxwiseSaleData.get(j);
                    if (objSettle.getStrSettelmentDesc().equals(obj[1].toString()))
                    {
                        arrListTaxwiseSaleData.remove(objSettle);
                        double settleAmt = objSettle.getDblSettlementAmt();
                        objSettle.setDblSettlementAmt(settleAmt + Double.parseDouble(obj[2].toString()));
                    }
                    else
                    {
                        objSettle = new clsPOSSettelementOptionsBean();
                        objSettle.setDblSettlementAmt(Double.parseDouble(obj[2].toString()));
                        objSettle.setStrSettelmentDesc(obj[1].toString());
                        objSettle.setStrSettelmentType(obj[0].toString());
                    }
                }
            }
            else
            {
                arrListTaxwiseSaleData = new ArrayList<clsPOSSettelementOptionsBean>();
                objSettle.setStrSettelmentDesc(obj[1].toString());
                objSettle.setStrSettelmentType(obj[0].toString());
                objSettle.setDblSettlementAmt(Double.parseDouble(obj[2].toString()));

            }
            arrListTaxwiseSaleData.add(objSettle);
            hmSalesTaxWiseSaleData.put(obj[0].toString(), arrListTaxwiseSaleData);
        }
 	    }

        sqlQData.setLength(0);

        sqlQData.append(" select sum(a.dblTipAmount) from tblqbillhd a "
                + " where date(a.dteBillDate) between '" + fromDate + "' and '" + toDate + "' ");
        if (!strPOSCode.equalsIgnoreCase("ALL"))
        {
            sqlQData.append(" and a.strPOSCode='" + strPOSCode + "' ");
        }
        sqlQData.append(" group by a.strBillNo");

        double finalTipAmt = 0;

        Query queryQTip = webPOSSessionFactory.getCurrentSession().createSQLQuery(sqlQData.toString());
 	    List listSqlQtip = queryQTip.list();
	    if(listSqlQtip.size()>0)
 	    {
 	    	
 	    	for(int i=0 ;i<listSqlQtip.size();i++ )
 	    	{
 	    		Object obj=(Object) listSqlQtip.get(i);
            finalTipAmt = finalTipAmt + Double.parseDouble( obj.toString());
        }
 	    }

        double totalDebitAmt = 0, totalCreditAmt = 0;
        for (Map.Entry<String, List<clsPOSSettelementOptionsBean>> entry : hmSalesSettleData.entrySet())
        {
            double totalSaleAmt = 0;
            List<clsPOSSettelementOptionsBean> listOfSettleDataDtl = entry.getValue();
            for (int j = 0; j < listOfSettleDataDtl.size(); j++)
            {
            	clsPOSSettelementOptionsBean objSettle = listOfSettleDataDtl.get(j);
                totalSaleAmt += objSettle.getDblSettlementAmt();
            }
            totalDebitAmt += totalSaleAmt;
        }

        //   totalDebitAmt += finalDisAmt;
        for (Map.Entry<String, List<clsPOSSettelementOptionsBean>> entry : hmSalesGroupWiseSaleData.entrySet())
        {
            double totalSaleAmt = 0;
            List<clsPOSSettelementOptionsBean> listOfGroupwiseSaleDataDtl = entry.getValue();
            for (int j = 0; j < listOfGroupwiseSaleDataDtl.size(); j++)
            {
            	clsPOSSettelementOptionsBean objSettle = listOfGroupwiseSaleDataDtl.get(j);
                totalSaleAmt += objSettle.getDblSettlementAmt();
            }
            totalCreditAmt += totalSaleAmt;
        }
        for (Map.Entry<String, List<clsPOSSettelementOptionsBean>> entry : hmSalesTaxWiseSaleData.entrySet())
        {
            double totalSaleAmt = 0;
            List<clsPOSSettelementOptionsBean> listOfTaxwiseSaleDataDtl = entry.getValue();
            for (int j = 0; j < listOfTaxwiseSaleDataDtl.size(); j++)
            {
            	clsPOSSettelementOptionsBean objSettle = listOfTaxwiseSaleDataDtl.get(j);
                totalSaleAmt += objSettle.getDblSettlementAmt();
            }
            totalCreditAmt += totalSaleAmt;
        }
        totalCreditAmt += finalTipAmt;

        double roundOff = totalDebitAmt - totalCreditAmt;
        double finalDebitAmount = 0, finalCreditAmount = 0;

        //For Settlement Detail
        double finalSettleAmt = 0;

        List<clsPOSSettelementOptionsBean> listOfSettlement = new ArrayList<>();
        for (Map.Entry<String, List<clsPOSSettelementOptionsBean>> entry : hmSalesSettleData.entrySet())
        {
            count++;
            double totalSaleAmt = 0;
            List<clsPOSSettelementOptionsBean> listOfSettleDataDtl = entry.getValue();

            for (int j = 0; j < listOfSettleDataDtl.size(); j++)
            {
            	clsPOSSettelementOptionsBean objSettle = listOfSettleDataDtl.get(j);
                if (objSettle.getStrSettelmentType().equalsIgnoreCase("Credit"))
                {
                	 JSONObject jobj = new JSONObject();
                    objSettle = new clsPOSSettelementOptionsBean();
                    objSettle.setStrSettelmentDesc("Credit");
                	jobj.put("strSettelmentDesc", objSettle.getStrSettelmentDesc());
    				jobj.put("strSettelmentType", objSettle.getStrSettelmentType());
    				jobj.put("dblSettelmentAmt", objSettle.getDblSettlementAmt());
    				jobj.put("strRemark", objSettle.getStrRemark());
    				jArrSttleData.put(jobj);
    				listOfSettlement.add(objSettle);
                }
                
    
                objSettle = listOfSettleDataDtl.get(j);
                JSONObject jobj = new JSONObject();
				jobj.put("strSettelmentDesc", objSettle.getStrSettelmentDesc());
				jobj.put("strSettelmentType", objSettle.getStrSettelmentType());
				jobj.put("dblSettelmentAmt", objSettle.getDblSettlementAmt());
				jobj.put("strRemark", objSettle.getStrRemark());
				jArrSttleData.put(jobj);
                listOfSettlement.add(objSettle);
                totalSaleAmt += objSettle.getDblSettlementAmt();
            }
            finalSettleAmt += totalSaleAmt;
        }

        finalDebitAmount = finalDebitAmount + finalSettleAmt;
        //For Discount
        if (roundOff < 0)
        {
            finalDebitAmount += roundOff;
        }

        //For Groupwise sale data
        double finalGroupSaleAmt = 0;

        List<clsPOSSettelementOptionsBean> listOfGroupWiseSales = new ArrayList<>();

        for (Map.Entry<String, List<clsPOSSettelementOptionsBean>> entry : hmSalesGroupWiseSaleData.entrySet())
        {
            double totalSaleAmt = 0;
            List<clsPOSSettelementOptionsBean> listOfGroupwiseSaleDataDtl = entry.getValue();
            for (int j = 0; j < listOfGroupwiseSaleDataDtl.size(); j++)
            {
            	clsPOSSettelementOptionsBean objSettle = listOfGroupwiseSaleDataDtl.get(j);
                listOfGroupWiseSales.add(objSettle);
                JSONObject jobj = new JSONObject();
				jobj.put("strSettelmentDesc", objSettle.getStrSettelmentDesc());
				jobj.put("strSettelmentType", objSettle.getStrSettelmentType());
				jobj.put("dblSettelmentAmt", objSettle.getDblSettlementAmt());
				jobj.put("strRemark", objSettle.getStrRemark());
				jArrGroupSale.put(jobj);
            }
            finalGroupSaleAmt += totalSaleAmt;
        }

        finalCreditAmount = finalCreditAmount + finalGroupSaleAmt;
        //For Taxwise detial data

        double finalTaxAmt = 0;
        List<clsPOSSettelementOptionsBean> listOfTaxWiseSales = new ArrayList<>();
        for (Map.Entry<String, List<clsPOSSettelementOptionsBean>> entry : hmSalesTaxWiseSaleData.entrySet())
        {
            double totalSaleAmt = 0;
            List<clsPOSSettelementOptionsBean> listOfTaxwiseSaleDataDtl = entry.getValue();
            for (int j = 0; j < listOfTaxwiseSaleDataDtl.size(); j++)
            {
            	clsPOSSettelementOptionsBean objSettle = listOfTaxwiseSaleDataDtl.get(j);
                totalSaleAmt += objSettle.getDblSettlementAmt();
                listOfTaxWiseSales.add(objSettle);
                JSONObject jobj = new JSONObject();
				jobj.put("strSettelmentDesc", objSettle.getStrSettelmentDesc());
				jobj.put("strSettelmentType", objSettle.getStrSettelmentType());
				jobj.put("dblSettelmentAmt", objSettle.getDblSettlementAmt());
				jobj.put("strRemark", objSettle.getStrRemark());
				jArrTaxWise.put(jobj);
            }
                
            finalTaxAmt += totalSaleAmt;
        }

        finalCreditAmount = finalCreditAmount + finalTaxAmt;

        finalCreditAmount = finalCreditAmount + finalTipAmt;

        double finalRoundOff = 0;

        finalCreditAmount = finalCreditAmount + finalRoundOff;

        if (roundOff > 0)
        {

            finalCreditAmount += roundOff;
        }

        List<clsPOSSettelementOptionsBean> listOfGroupWiseSalesForDineIn = new ArrayList<>();
        List<clsPOSSettelementOptionsBean> listOfGroupWiseSalesForTakeAway = new ArrayList<>();
        List<clsPOSSettelementOptionsBean> listOfGroupWiseSalesForHomeDel = new ArrayList<>();

        Iterator<Map.Entry<String, Double>> itDineIn = mapDineIn.entrySet().iterator();
        while (itDineIn.hasNext())
        {
            Map.Entry<String, Double> entry = itDineIn.next();
            String group = entry.getKey();
            double amount = entry.getValue();
            clsPOSSettelementOptionsBean objSett = new clsPOSSettelementOptionsBean();
            objSett.setStrSettelmentDesc(group);
            objSett.setDblSettlementAmt(amount);
            JSONObject jobj = new JSONObject();
			jobj.put("strSettelmentDesc", objSett.getStrSettelmentDesc());
			jobj.put("strSettelmentType", objSett.getStrSettelmentType());
			jobj.put("dblSettelmentAmt", objSett.getDblSettlementAmt());
			jobj.put("strRemark", objSett.getStrRemark());
			jArrGroupWiseDineIn.put(jobj);
            listOfGroupWiseSalesForDineIn.add(objSett);
        }

        Iterator<Map.Entry<String, Double>> itTakeAway = mapTakeAway.entrySet().iterator();
        while (itTakeAway.hasNext())
        {
            Map.Entry<String, Double> entry = itTakeAway.next();
            String group = entry.getKey();
            double amount = entry.getValue();
            clsPOSSettelementOptionsBean objSett = new clsPOSSettelementOptionsBean();
            objSett.setStrSettelmentDesc(group);
            objSett.setDblSettlementAmt(amount);
            JSONObject jobj = new JSONObject();
			jobj.put("strSettelmentDesc", objSett.getStrSettelmentDesc());
			jobj.put("strSettelmentType", objSett.getStrSettelmentType());
			jobj.put("dblSettelmentAmt", objSett.getDblSettlementAmt());
			jobj.put("strRemark", objSett.getStrRemark());
			jArrGroupWiseTakeAway.put(jobj);
            listOfGroupWiseSalesForTakeAway.add(objSett);
        }

        Iterator<Map.Entry<String, Double>> itHomeDel = mapHomeDel.entrySet().iterator();
        while (itHomeDel.hasNext())
        {
            Map.Entry<String, Double> entry = itHomeDel.next();
            String group = entry.getKey();
            double amount = entry.getValue();
            clsPOSSettelementOptionsBean objSett = new clsPOSSettelementOptionsBean();
            objSett.setStrSettelmentDesc(group);
            objSett.setDblSettlementAmt(amount);
            JSONObject jobj = new JSONObject();
			jobj.put("strSettelmentDesc", objSett.getStrSettelmentDesc());
			jobj.put("strSettelmentType", objSett.getStrSettelmentType());
			jobj.put("dblSettelmentAmt", objSett.getDblSettlementAmt());
			jobj.put("strRemark", objSett.getStrRemark());
			jArrGroupWiseHomeDel.put(jobj);
            listOfGroupWiseSalesForHomeDel.add(objSett);
        }

			
//
//        jOBjRet.put("listOfSettlement", listOfSettlement);
//        jOBjRet.put("listOfGroupWiseSales", listOfGroupWiseSales);
//        jOBjRet.put("listOfTaxWiseSales", listOfTaxWiseSales);
        jOBjRet.put("finalDisAmt", finalDisAmt);
        jOBjRet.put("finalTipAmt", finalTipAmt);
//        jOBjRet.put("listOfGroupWiseSalesForDineIn", listOfGroupWiseSalesForDineIn);
//        jOBjRet.put("listOfGroupWiseSalesForTakeAway", listOfGroupWiseSalesForTakeAway);
//        jOBjRet.put("listOfGroupWiseSalesForHomeDel", listOfGroupWiseSalesForHomeDel);

        double debitRoundOff = 0.00, creaditRoundOff = 0.00;
        if (roundOff < 0)
        {
            debitRoundOff = (-1) * roundOff;
            totalDebitAmt = totalDebitAmt + debitRoundOff;
        }
        else
        {
            creaditRoundOff = roundOff;
            totalCreditAmt = totalCreditAmt + creaditRoundOff;
        }
        jOBjRet.put("finalRoundOff", creaditRoundOff);
        jOBjRet.put("totalDebitAmt", totalDebitAmt);
        jOBjRet.put("totalCreditAmt", totalCreditAmt);
        jOBjRet.put("debitRoundOff", debitRoundOff);
        jOBjRet.put("jArrGroupWiseHomeDel",jArrGroupWiseHomeDel);
        jOBjRet.put("jArrGroupSale",jArrGroupSale);
        jOBjRet.put("jArrGroupWiseDineIn",jArrGroupWiseDineIn);
        jOBjRet.put("jArrGroupWiseTakeAway",jArrGroupWiseTakeAway);
        jOBjRet.put("jArrSttleData",jArrSttleData);
        jOBjRet.put("jArrTaxWise",jArrTaxWise);
 
    }
 
    catch(Exception ex)
    {
   	 ex.printStackTrace();
    }
    return 	jOBjRet; 
    }

public JSONObject funReprintDocsReport(String fromDate,String toDate,String strPOSCode,String strUser,String strDocNO,String strType)
{
	List listRet =new ArrayList();
    JSONArray jArr =new JSONArray();
   
    
    JSONObject jOBjRet=new JSONObject();

   
    try{
    	if(strType.equalsIgnoreCase("Detail")){
    		
    	
    	  ////For Settlement details of Live and Q data
        StringBuilder sqlQData = new StringBuilder();
      
       
       List<clsReprintDocsBean> listOfReprintTextData=new ArrayList<>(); 
        sqlQData.setLength(0);
        sqlQData.append("select a.strBillNo,DATE_FORMAT(b.dtePOSDate,'%m-%d-%Y'),b.strUserCreated,ifnull(c.strReasonName,''),\n" 
        + " b.strRemarks,a.dblGrandTotal,\n" 
        +"time(b.dtePOSDate)  from tblbillhd a,tblaudit b left outer join tblreasonmaster c  \n" 
        +"on b.strReasonCode=c.strReasonCode  "
        + " where a.strBillNo=b.strDocNo  "
        + " and date(b.dtePOSDate) between '"+fromDate+"' and '"+toDate+"' ");
        
        if(!strUser.equalsIgnoreCase("All"))
        {
            sqlQData.append(" and b.strUserCreated='" +strUser+"'");
        }
         if(! strDocNO.equalsIgnoreCase("All"))
            {
                sqlQData.append(" and b.strDocNo='" +strDocNO+"'");
            }
//        ResultSet rsSettlementWiseQData = clsGlobalVarClass.dbMysql.executeResultSet(sqlQData.toString());
        
     
        Query queryQData = webPOSSessionFactory.getCurrentSession().createSQLQuery(sqlQData.toString());
 	    List listSqlQData = queryQData.list();
	    if(listSqlQData.size()>0)
 	    {
 	    	
 	    	for(int i=0 ;i<listSqlQData.size();i++ )
 	    	{
 	    	
 	    		Object[] obj=(Object[]) listSqlQData.get(i);
 	    		JSONObject jObj=new JSONObject();
         
            jObj.put("strBillNo", obj[0].toString());
            jObj.put("dteDate", obj[1].toString());
            jObj.put("strUser", obj[2].toString());
            jObj.put("strReason", obj[3].toString());
            jObj.put("strRemark", obj[4].toString());
            jObj.put("dblTotal", obj[5].toString());
            jObj.put("strTime", obj[6].toString());
            jArr.put(jObj);

//            listOfReprintTextData.add(objReprint);   
        }
 	    }
        sqlQData.setLength(0);
       sqlQData.append("select a.strBillNo,DATE_FORMAT(b.dtePOSDate,'%m-%d-%Y'),b.strUserCreated,ifnull(c.strReasonName,''),\n" 
        + " b.strRemarks,a.dblGrandTotal,\n" 
        +"time(b.dtePOSDate)  from tblqbillhd a,tblaudit b left outer join tblreasonmaster c  \n" 
        +"on b.strReasonCode=c.strReasonCode  "
        + " where a.strBillNo=b.strDocNo  "
        + " and date(b.dtePOSDate) between '"+fromDate+"' and '"+toDate+"' ");
        
        if(!strUser.equalsIgnoreCase("All"))
        {
            sqlQData.append(" and b.strUserCreated='" +strUser+"'");
        }
        if(! strDocNO.equalsIgnoreCase("All"))
            {
                sqlQData.append(" and b.strDocNo='" +strDocNO+"'");
            }
        
        Query queryData = webPOSSessionFactory.getCurrentSession().createSQLQuery(sqlQData.toString());
 	    List listSqlData = queryData.list();
	    if(listSqlData.size()>0)
 	    {
 	    	
 	    	for(int i=0 ;i<listSqlData.size();i++ )
 	    	{
 	    	
	    		Object[] obj=(Object[]) listSqlData.get(i);
	    		JSONObject jObj=new JSONObject();
         
            jObj.put("strBillNo", obj[0].toString());
            jObj.put("dteDate", obj[1].toString());
            jObj.put("strUser", obj[2].toString());
            jObj.put("strReason", obj[3].toString());
            jObj.put("strRemark", obj[4].toString());
            jObj.put("dblTotal", obj[5].toString());
            jObj.put("strTime", obj[6].toString());
            jArr.put(jObj);
//            listOfReprintTextData.add(objReprint);
      }
 	 }
    
    	jOBjRet.put("jArr", jArr);
    	}else{
    		
    		StringBuilder sqlQData = new StringBuilder();
            
            
            List<clsReprintDocsBean> listOfReprintTextData=new ArrayList<>(); 
             sqlQData.setLength(0);
              sqlQData.append("select  a.strBillNo,DATE_FORMAT(b.dtePOSDate,'%m-%d-%Y'),b.strUserCreated,a.dblGrandTotal,count(*)as count \n"
                     + "from tblbillhd a,tblaudit b left outer join tblreasonmaster c on b.strReasonCode=c.strReasonCode  where a.strBillNo=b.strDocNo  "
                     + " and date(b.dtePOSDate) between '" + fromDate + "' and '" + toDate + "'");
             if (!strUser.equalsIgnoreCase("All")) {
                 sqlQData.append(" and b.strUserCreated='" + strUser + "'");
             }

             if(! strUser.equalsIgnoreCase("All"))
                 {
                     sqlQData.append(" and b.strDocNo='" +strUser+"'");
                 }
             sqlQData.append(" group by a.strBillNo,b.strUserCreated ");
             
             Query queryData = webPOSSessionFactory.getCurrentSession().createSQLQuery(sqlQData.toString());
	     	    List listSqlData = queryData.list();
	    	    if(listSqlData.size()>0)
	     	    {
	     	    	
	     	    	for(int i=0 ;i<listSqlData.size();i++ )
	     	    	{
	     	    	
  	    		Object[] obj=(Object[]) listSqlData.get(i);
  	    		JSONObject jObj=new JSONObject();
  	    	     
                jObj.put("strBillNo", obj[0].toString());
                jObj.put("dteDate", obj[1].toString());
                jObj.put("strUser", obj[2].toString());
                jObj.put("dblTotal", obj[3].toString());
                jObj.put("strCount", obj[4].toString());
                jArr.put(jObj);
                
	     	    	}  
             }
             sqlQData.setLength(0);
             sqlQData.append("select  a.strBillNo,DATE_FORMAT(b.dtePOSDate,'%m-%d-%Y'),b.strUserCreated,a.dblGrandTotal,count(*)as count \n"
                     + "from tblqbillhd a,tblaudit b left outer join tblreasonmaster c on b.strReasonCode=c.strReasonCode where a.strBillNo=b.strDocNo  "
                     + " and date(b.dtePOSDate) between '" + fromDate + "' and '" + toDate + "'");
             if (!strUser.equalsIgnoreCase("All")) {
                 sqlQData.append(" and b.strUserCreated='" + strUser + "'");
             }

             if(! strDocNO.equalsIgnoreCase("All"))
                 {
                     sqlQData.append(" and b.strDocNo='" +strUser+"'");
                 }
             sqlQData.append(" group by a.strBillNo,b.strUserCreated ");
             
             
             Query queryQData = webPOSSessionFactory.getCurrentSession().createSQLQuery(sqlQData.toString());
	     	     List listSqlQData = queryData.list();
	    	     if(listSqlQData.size()>0)
	     	     {
	     	    	
	     	      for(int i=0 ;i<listSqlQData.size();i++ )
	     	      {
  	    		Object[] obj=(Object[]) listSqlQData.get(i);
  	    		JSONObject jObj=new JSONObject();
  	    		 jObj.put("strBillNo", obj[0].toString());
                 jObj.put("dteDate", obj[1].toString());
                 jObj.put("strUser", obj[2].toString());
                 jObj.put("dblTotal", obj[3].toString());
                 jObj.put("strCount", obj[4].toString());
                 jArr.put(jObj);
           }
	     	   }
    	}
    }
     
    catch(Exception ex)
    {
   	 ex.printStackTrace();
    }
    return 	jOBjRet; 
    }

public JSONObject funTableWisePaxReport(String fromDate,String toDate,String posCode,String strShiftNo,String strUserCode,String strClientCode,String strPOSCode)
{
	 JSONObject jOBjRet=new JSONObject();
	 JSONArray jArr =new JSONArray();
	 try{
		 StringBuilder sb=new StringBuilder();
		 
		 Map<String, List<String>> mapTablePaxList = new HashMap<String, List<String>>();
         List<String> arrListTablePax = null;
         List<clsBillDtlBean> arrListPaxData = null;
        
         String gEnableShiftYN="";
         int totalPax = 0;

         int position = 0;

         String sqlFilters = "";

         String sqlLive = "select b.strTableNo,b.strTableName,sum(a.intPaxNo) "
                 + " from tblbillhd a,tbltablemaster b "
                 + " where a.strTableNo=b.strTableNo "
                 + " and date( a.dteBillDate ) BETWEEN '" + fromDate + "' AND '" + toDate + "' "
                 + " and a.strClientCode=b.strClientCode ";

         String sqlQFile = "select b.strTableNo,b.strTableName,sum(a.intPaxNo) "
                 + " from tblqbillhd a,tbltablemaster b "
                 + " where a.strTableNo=b.strTableNo "
                 + " and date( a.dteBillDate ) BETWEEN '" + fromDate + "' AND '" + toDate + "' "
                 + " and a.strClientCode=b.strClientCode ";

         if (!strPOSCode.equalsIgnoreCase("All"))
         {
             sqlFilters += " and a.strPOSCode = '" + strPOSCode + "' ";
         }

         sqlFilters += " group by b.strTableNo,a.strPOSCode   ";


         String columnName="gEnableShiftYN";
         JSONObject jobj=objSetupService.funGetParameterValuePOSWise(strClientCode, strPOSCode,columnName);
         
          gEnableShiftYN =jobj.get("gEnableShiftYN").toString();
         if (gEnableShiftYN.equalsIgnoreCase("Y"))
         {
             if (gEnableShiftYN.equalsIgnoreCase("Y") && (!strShiftNo.equalsIgnoreCase("All")))
             {
            	 sqlFilters += " and a.intShiftCode = '" + strShiftNo + "' ";
             }
         } 
    
         

         sqlLive = sqlLive + " " + sqlFilters;
         sqlQFile = sqlQFile + " " + sqlFilters;

         Query querySqlLive = webPOSSessionFactory.getCurrentSession().createSQLQuery( sqlLive.toString());
	  	 List listSqlLive= querySqlLive.list();
	  	  if(listSqlLive.size()>0)
	  	      {
	    		for(int j=0 ;j<listSqlLive.size();j++ )
	  	    	{
	    			int totalPaxNo = 0;
	    			 Object[] obj = (Object[]) listSqlLive.get(j);
             if (null != mapTablePaxList.get(obj[0].toString()))
             {
                 String existPax = "";
                 
                 arrListTablePax = mapTablePaxList.get(obj[0].toString());
                 for (int i = 0; i < arrListTablePax.size(); i++)
                 {
                     String[] param = arrListTablePax.get(i).split("#");
                     existPax = param[2];
                     int pax = Integer.parseInt(obj[2].toString());
                     totalPaxNo += Integer.parseInt(existPax) + pax;
                 }
                 arrListTablePax.remove(obj[0].toString() + "#" + obj[1].toString() + "#" + existPax);
                 arrListTablePax.add(obj[0].toString() + "#" + obj[1].toString() + "#" + totalPaxNo);
                 mapTablePaxList.remove(obj[0].toString());
             }
             else
             {
                 arrListTablePax = new ArrayList<String>();
                 arrListTablePax.add(obj[0].toString() + "#" +obj[1].toString() + "#" + obj[2].toString());

             }

             if (null != arrListTablePax)
             {
                 mapTablePaxList.put(obj[0].toString(), arrListTablePax);
             }
         }
	  	     }
	  	  Query querySqlQ = webPOSSessionFactory.getCurrentSession().createSQLQuery( sqlQFile.toString());
    	  	 List listSqlQ= querySqlQ.list();
    	  	  if(listSqlQ.size()>0)
  	  	      {
  	    		for(int j=0 ;j<listSqlQ.size();j++ )
  	  	    	{
  	    			int totalPaxNo = 0;
  	    			 Object[] obj = (Object[]) listSqlQ.get(j);
             
             if (null != mapTablePaxList.get(obj[0].toString()))
             {
                 String existPax = "";
                 arrListTablePax = mapTablePaxList.get(obj[0].toString());
                 for (int i = 0; i < arrListTablePax.size(); i++)
                 {
                     String[] param = arrListTablePax.get(i).split("#");
                     existPax = param[2];
                     int pax = Integer.parseInt(obj[2].toString());
                     totalPaxNo += Integer.parseInt(existPax) + pax;
                 }
                 arrListTablePax.remove(obj[0].toString() + "#" + obj[1].toString() + "#" + existPax);
                 arrListTablePax.add(obj[0].toString() + "#" + obj[1].toString()+ "#" + totalPaxNo);
                 mapTablePaxList.remove(obj[0].toString());
             }
             else
             {
                 arrListTablePax = new ArrayList<String>();
                 arrListTablePax.add(obj[0].toString() + "#" + obj[1].toString() + "#" +obj[2].toString());

             }

             if (null != arrListTablePax)
             {
                 mapTablePaxList.put(obj[0].toString(), arrListTablePax);
             }
         }
  	  	 }

         if (mapTablePaxList.size() > 0)
         {
             arrListPaxData = new ArrayList<clsBillDtlBean>();

             for (Map.Entry<String, List<String>> entry : mapTablePaxList.entrySet())
             {
                 List<String> listOfTablePax = entry.getValue();
                 for (int i = 0; i < listOfTablePax.size(); i++)
                 {

                     String[] tablePaxData = listOfTablePax.get(i).split("#");
                     JSONObject jObj =new JSONObject();
                     jObj.put("BillNo", entry.getKey());
                     jObj.put("TableName",tablePaxData[1]);
                     jObj.put("dblQuantity", Double.valueOf(tablePaxData[2]));

                     jArr.put(jObj);
                 }

             }
         }
		 jOBjRet.put("jArr", jArr);
	 }
	 catch (Exception ex) {
			ex.printStackTrace();
		}

	
		return jOBjRet; 
  }




public JSONObject funSalesSummaryFlash(String fromDate,String toDate,String pos,String payCode,String strUserCode,String reportType)
{
	 JSONObject jOBjRet=new JSONObject();
	 JSONArray jArr =new JSONArray();
	 try{
		 StringBuilder sb=new StringBuilder();
		 
	     
		 if(reportType.equalsIgnoreCase("Daily"))
		 {
		 if(payCode.equals("ALL"))
          {
              sb.setLength(0);
              sb.append("select a.strPOSCode,c.strPosName,date(a.dteBillDate)"
              + ",sum(a.dblSettlementAmt),sum(a.dblGrandTotal) "
              + " from vqbillhdsettlementdtl a,tblsettelmenthd b,tblposmaster c "
              + " where a.strSettlementCode=b.strSettelmentCode "
              + " and a.strPOSCode=c.strPosCode"
              + " and date(dteBillDate) between '"+fromDate+"' and '"+toDate+"' ");
              if(!pos.equals("ALL"))
              {
                sb.append(" and a.strPOSCode='"+pos+"' ");
              }
              sb.append(" group by a.strPOSCode,date(a.dteBillDate) order by date(a.dteBillDate);");
         }
          else
          {
             // String payCode=cmbPaymentMode.getSelectedItem().toString().split("!")[1];
        	  sb.setLength(0);
              sb.append("select a.strPOSCode,c.strPosName,date(a.dteBillDate)"
                  + ",sum(a.dblSettlementAmt),sum(a.dblGrandTotal) "
                  + " from vqbillhdsettlementdtl a,tblsettelmenthd b,tblposmaster c "
                  + " where a.strSettlementCode=b.strSettelmentCode "
                  + " and a.strPOSCode=c.strPosCode"
                  + " and date(dteBillDate) between '"+fromDate+"' and '"+toDate+"' and b.strSettelmentCode='"+payCode+"' ");
              if(!pos.equals("ALL"))
              {
                sb.append(" and a.strPOSCode='"+pos+"' ");
              }
              sb.append(" group by a.strPOSCode,date(a.dteBillDate) order by date(a.dteBillDate);");
          }
	      Query querySql = webPOSSessionFactory.getCurrentSession().createSQLQuery( sb.toString());
	  	    List listSql= querySql.list();
	  	    int rowCount=0;
	  
	  	    if(listSql.size()>0)
	  	    {
	  	    	
	  	    	for(int i=0 ;i<listSql.size();i++ )
	  	    	{
	  	    		Object[] obj = (Object[]) listSql.get(i);
	  	    		JSONObject jObj =new JSONObject();
        	  		jObj.put("strPOSCode",obj[0].toString());
	  	    		jObj.put("strPosName",obj[1].toString());
	  	    		jObj.put("dteBillDate",obj[2].toString());
//	  	    		JSONObject jObj =new JSONObject();
//	  	    		jObj.put("strPOSCode",obj[0].toString());
//	  	    		jObj.put("strPosName",obj[1].toString());
//	  	    		jObj.put("dteBillDate",obj[2].toString());
	  	    		jObj.put("dblTotalSettlementAmt",obj[3].toString());
	  	    		jObj.put("dblGrandTotal",obj[4].toString());
	  	   
	  	    		
						
//					}
//
//				}
	        /*for(int cnt=0;cnt<rowCount;cnt++)
            {*/
               /* String billDate=tblDailyMonthlyWiseSales.getValueAt(cnt,2).toString();
                String posCode=tblDailyMonthlyWiseSales.getValueAt(cnt,0).toString();*/
                sb.setLength(0);
                sb.append("select a.strPOSCode,date(a.dteBillDate)"
                    + ",b.strSettelmentDesc,sum(a.dblSettlementAmt),sum(a.dblSettlementAmt) "
                    + " from vqbillhdsettlementdtl a,tblsettelmenthd b "
                    + " where a.strSettlementCode=b.strSettelmentCode "
                    + " and date(dteBillDate) = '"+obj[2].toString()+"' and a.strPOSCode='"+obj[0].toString()+"' "
                    + " group by a.strPOSCode,date(a.dteBillDate),b.strSettelmentDesc "
                    + " order by a.strPOSCode,date(a.dteBillDate),b.strSettelmentDesc;");
	  	    	
                Query querySql1 = webPOSSessionFactory.getCurrentSession().createSQLQuery( sb.toString());
    	  	    List listSql1= querySql1.list();
    	  	  if(listSql1.size()>0)
  	  	      {
    	  		
  	    		Map hmSettelmentDesc=new HashMap();
  	  	    	List listSettlementAmt=new ArrayList();
  	  	    		
  	    		for(int j=0 ;j<listSql1.size();j++ )
  	  	    	{
  	  	    	 Object[] obj1 = (Object[]) listSql1.get(j);
  	  	    	hmSettelmentDesc.put(obj1[2].toString(),obj1[3].toString());
  	  	        }
  	    		jObj.put("hmSettelmentDesc",hmSettelmentDesc);
	  	    		
    	  		jArr.put(jObj);
	  	    }
	  	   
           }
	  	    }
	  	    
		 }else{
			 
			 if(payCode.equals("ALL"))
	            {
	                sb.setLength(0);
	                sb.append("select a.strPOSCode,c.strPOSName,monthname(date(a.dteBillDate)),year(date(a.dteBillDate)) "
	                + " from vqbillhdsettlementdtl a,tblsettelmenthd b,tblposmaster c "
	                + " where a.strSettlementCode=b.strSettelmentCode "
	                + " and a.strPOSCode=c.strPOSCode "
	                + " and month(date(dteBillDate)) between '"+fromDate+"' and '"+toDate+"' ");
	                if(!pos.equals("ALL"))
	                {
	                    sb.append(" and a.strPOSCode='"+pos+"' ");
	                }
	                sb.append("  group by a.strPOSCode,month(date(dteBillDate))"
	                + " order by a.strPOSCode,month(date(dteBillDate)) ");
	                
	                
	            }
	            else
	            {
	                //String payCode=cmbPaymentMode.getSelectedItem().toString().split("!")[1];
	                sb.setLength(0);
	                sb.append("select a.strPOSCode,c.strPOSName,monthname(date(a.dteBillDate)),year(date(a.dteBillDate)) "
	                    + " from vqbillhdsettlementdtl a,tblsettelmenthd b,tblposmaster c "
	                    + " where a.strSettlementCode=b.strSettelmentCode "
	                    + " and a.strPOSCode=c.strPOSCode "
	                    + " and month(date(dteBillDate)) between '"+fromDate+"' and '"+toDate+"' and b.strSettelmentCode='"+payCode+"' ");
	                if(!pos.equals("ALL"))
	                {
	                    sb.append(" and a.strPOSCode='"+pos+"' ");
	                }
	                sb.append("  group by a.strPOSCode,month(date(dteBillDate))"
	                    + " order by a.strPOSCode,month(date(dteBillDate)) ");
	            }
			 
			 
			 Query querySql = webPOSSessionFactory.getCurrentSession().createSQLQuery( sb.toString());
    	  	    List listSql= querySql.list();
    	  	    int rowCount=0;
    	  
    	  	    if(listSql.size()>0)
    	  	    {
    	  	    	
    	  	    	for(int i=0 ;i<listSql.size();i++ )
    	  	    	{
    	  	    		Object[] obj = (Object[]) listSql.get(i);
    	  	    		JSONObject jObj =new JSONObject();
            	  		jObj.put("strPOSCode",obj[0].toString());
    	  	    		jObj.put("strPosName",obj[1].toString());
    	  	    		jObj.put("monthname",obj[2].toString());
//    	  	    		JSONObject jObj =new JSONObject();
//    	  	    		jObj.put("strPOSCode",obj[0].toString());
//    	  	    		jObj.put("strPosName",obj[1].toString());
//    	  	    		jObj.put("dteBillDate",obj[2].toString());
    	  	    		jObj.put("year",obj[3].toString());
    	  	    		//jObj.put("dblGrandTotal",obj[4].toString());
  
		 
    	  	    		 sb.setLength(0);
    	                 sb.append("select a.strPOSCode,date(a.dteBillDate)"
    	                     + ",b.strSettelmentDesc,sum(a.dblSettlementAmt),sum(a.dblGrandTotal) "
    	                     + " from vqbillhdsettlementdtl a,tblsettelmenthd b "
    	                     + " where a.strSettlementCode=b.strSettelmentCode "
    	                     + " and monthname(date(dteBillDate)) ='"+obj[2].toString()+"' and a.strPOSCode='"+obj[0].toString()+"' "
    	                     + " group by a.strPOSCode,month(date(dteBillDate)),b.strSettelmentDesc  "
    	                     + " order by a.strPOSCode,month(date(dteBillDate)),b.strSettelmentDesc ;");
    	  	    	
    	  	
    	  	    	
    	                 Query querySql1 = webPOSSessionFactory.getCurrentSession().createSQLQuery( sb.toString());
		        	  	    List listSql1= querySql1.list();
		        	  	  if(listSql1.size()>0)
		      	  	      {
		        	  		
			  	    		Map hmSettelmentDesc=new HashMap();
		      	  	    	List listSettlementAmt=new ArrayList();
		      	  	    		
			  	    		for(int j=0 ;j<listSql1.size();j++ )
		      	  	    	{
		      	  	    	 Object[] obj1 = (Object[]) listSql1.get(j);
		      	  	    	hmSettelmentDesc.put(obj1[2].toString(),obj1[3].toString());
		      	  	        }
			  	    		jObj.put("hmSettelmentDesc",hmSettelmentDesc);
		  	  	    		
		        	  		jArr.put(jObj);
		    	  	    }
		    	  	   
		               }
		    	  	    }    	
    	  	    	
    	 }  
	  	    
	  	    
	  	  jOBjRet.put("jArr", jArr);
	 }
	 catch (Exception ex) {
			ex.printStackTrace();
		}

	
		return jOBjRet; 
  }
	    
	public JSONObject funGetPOSDashboardSalesReportDtl(String fromDate,String toDate,String strReportType,String POSCode)
	{
		Map<String, Map<String, clsBillItemDtl>> mapPOSSaleDetails= new LinkedHashMap<>();
		 HashMap<String, String> hmPOS = new HashMap<String, String>();
		 StringBuilder sbSql = new StringBuilder();
	     JSONObject jOBjRet=new JSONObject();
	     List listRet =new ArrayList();
	     StringBuilder sbSqlLive = new StringBuilder();
	     StringBuilder sbSqlQFile = new StringBuilder();
	     StringBuilder sbSqlModLive = new StringBuilder();
	     StringBuilder sbSqlModQFile = new StringBuilder();
	     StringBuilder sbSqlFilters = new StringBuilder();
	     JSONArray jArr =new JSONArray();
	    
	     double total=0.0,grandTotal=0.0;
	
	     sbSqlLive.setLength(0);
	     sbSqlQFile.setLength(0);
	     sbSqlFilters.setLength(0);
	
	     int colCount=4;
	     try
	     {
	    	if(strReportType.equalsIgnoreCase("Item Wise"))
	        {
	    		mapPOSSaleDetails = new LinkedHashMap<>();
	    		Map<String, Double> map =new HashMap<String, Double>();
	        	sbSqlLive.append("   select a.strItemCode,a.strItemName,c.strPOSName,sum(a.dblQuantity), "
						+ " sum(a.dblTaxAmount)   ,sum(a.dblAmount)-sum(a.dblDiscountAmt),'SANGUINE' ,sum(a.dblAmount),  "
						+ " sum(a.dblDiscountAmt),DATE_FORMAT(date(b.dteBillDate),'%d-%m-%Y'),b.strPOSCode "
						+ " from tblbilldtl a,tblbillhd b,tblposmaster c  "
						+ " where a.strBillNo=b.strBillNo and b.strPOSCode=c.strPosCode  "
						+ " and date( b.dteBillDate ) BETWEEN '"+fromDate+"' and '"+toDate+"'  ");
						if(!POSCode.equals("ALL"))
						{
							sbSqlLive.append("and b.strPOSCode='" + POSCode + "' ");
						}
						sbSqlLive.append(" group by a.strItemCode,c.strPOSName  order by b.dteBillDate ");
				
				
				sbSqlQFile.append(" select a.strItemCode,a.strItemName,c.strPOSName,sum(a.dblQuantity), "
						+ " sum(a.dblTaxAmount)  ,sum(a.dblAmount)-sum(a.dblDiscountAmt),'SANGUINE' ,sum(a.dblAmount),  "
						+ " sum(a.dblDiscountAmt),DATE_FORMAT(date(b.dteBillDate),'%d-%m-%Y'),b.strPOSCode  "
						+ " from tblqbilldtl a,tblqbillhd b,tblposmaster c  "
						+ " where a.strBillNo=b.strBillNo and b.strPOSCode=c.strPosCode  "
						+ " and date( b.dteBillDate ) BETWEEN '"+fromDate+"' and '"+toDate+"' ");
					if(!POSCode.equals("ALL"))
					 {
						sbSqlQFile.append("and b.strPOSCode='" + POSCode + "' ");
					 }
					sbSqlQFile.append(" group by a.strItemCode,c.strPOSName  order by b.dteBillDate ");
						
				
				sbSqlModLive.append("  select a.strItemCode,a.strModifierName,c.strPOSName,sum(a.dblQuantity),'0.0',  "
						+ " sum(a.dblAmount)-sum(a.dblDiscAmt),'SANGUINE' ,sum(a.dblAmount),  sum(a.dblDiscAmt),"
						+ " DATE_FORMAT(date(b.dteBillDate),'%d-%m-%Y'),b.strPOSCode   "
						+ " from tblbillmodifierdtl a,tblbillhd b,tblposmaster c   "
						+ " where a.strBillNo=b.strBillNo and b.strPOSCode=c.strPosCode   and a.dblamount>0   "
						+ " and date( b.dteBillDate ) BETWEEN '"+fromDate+"' and '"+toDate+"'  ");
				if(!POSCode.equals("ALL"))
				{
						sbSqlModLive.append("and b.strPOSCode='" + POSCode + "' ");
				}
				sbSqlModLive.append(" group by a.strItemCode,c.strPOSName  order by b.dteBillDate ");
				
				
				sbSqlModQFile.append("  select a.strItemCode,a.strModifierName,c.strPOSName,sum(a.dblQuantity),'0',  "
						+ " sum(a.dblAmount)-sum(a.dblDiscAmt),'SANGUINE' ,sum(a.dblAmount),  sum(a.dblDiscAmt),"
						+ " DATE_FORMAT(date(b.dteBillDate),'%d-%m-%Y'),b.strPOSCode  "
						+ " from tblqbillmodifierdtl a,tblqbillhd b,tblposmaster c,tblitemmaster d  "
						+ " where a.strBillNo=b.strBillNo and b.strPOSCode=c.strPosCode  "
						+ " and a.strItemCode=d.strItemCode and a.dblamount>0  "
						+ " and date( b.dteBillDate ) BETWEEN '"+fromDate+"' and '"+toDate+"' ");
				if(!POSCode.equals("ALL"))
				{
					sbSqlModQFile.append("and b.strPOSCode='" + POSCode + "' ");
				}
				sbSqlModQFile.append(" group by a.strItemCode,c.strPOSName  order by b.dteBillDate ");
	
				String sqlPOS = "select strPOSCode,strPOSName from tblposmaster "
	                    + "order by strPOSName";
				
				Query querPOS = webPOSSessionFactory.getCurrentSession().createSQLQuery(sqlPOS);
	 		    List listPOS = querPOS.list();
	 		    if(listPOS.size()>0)
	 		    {
	 		    	for(int i=0 ;i<listPOS.size();i++ )
	 		    	{
	 		    	  Object[] obj = (Object[]) listPOS.get(i);
	 		    	  hmPOS.put(obj[0].toString(), obj[1].toString());
	 		    	}
	 		  
	 		    }
	 		    Query querySqlLive = webPOSSessionFactory.getCurrentSession().createSQLQuery(sbSqlLive.toString());
	            funGenerateItemWiseSales(querySqlLive,mapPOSSaleDetails,strReportType);
	            Query queryQFile = webPOSSessionFactory.getCurrentSession().createSQLQuery(sbSqlQFile.toString());
	            funGenerateItemWiseSales(queryQFile,mapPOSSaleDetails,strReportType);
	            Query querySqlModLive = webPOSSessionFactory.getCurrentSession().createSQLQuery(sbSqlModLive.toString());
	            funGenerateItemWiseSales(querySqlModLive,mapPOSSaleDetails,strReportType);
	            Query querySqlModQFile = webPOSSessionFactory.getCurrentSession().createSQLQuery(sbSqlModQFile.toString());
	            funGenerateItemWiseSales(querySqlModQFile,mapPOSSaleDetails,strReportType);
	 	       
	 	      
	 		    
	 		  if(mapPOSSaleDetails.size()>0)
				{
				   Iterator<Map.Entry<String, Map<String, clsBillItemDtl>>> posIterator = mapPOSSaleDetails.entrySet().iterator();
	                while (posIterator.hasNext() )
	                {
	                	Map.Entry<String,Map<String,clsBillItemDtl>> posEntry=posIterator.next();
	                    Map<String, clsBillItemDtl> mapItemDtl = posEntry.getValue();
	                    Iterator<Map.Entry<String, clsBillItemDtl>> itemIterator = mapItemDtl.entrySet().iterator();
	                    while (itemIterator.hasNext())
	                    {
	                    	Map.Entry<String,clsBillItemDtl> itemEntry=itemIterator.next();
	                        clsBillItemDtl objBillItemDtl = itemEntry.getValue();
	
	                        JSONObject objPOS= new JSONObject();
	                        JSONArray arrPOSDtls = new JSONArray();
			                objPOS.put("ItemCode", objBillItemDtl.getItemCode());
			                objPOS.put("ItemName", objBillItemDtl.getItemName());
			                if(hmPOS.size()>0)
			                {
			                	int count=1;
			                    for(Map.Entry<String,String> entry:hmPOS.entrySet())
			                    {  
			                    	if(entry.getKey().equals(posEntry.getKey()))
			                        {
			                    	   JSONObject jObjPos=new JSONObject();
						               jObjPos.put("POS",objBillItemDtl.getPosName());
						               jObjPos.put("TotalAmt",objBillItemDtl.getAmount());
						               total+=(long)objBillItemDtl.getAmount();
						               arrPOSDtls.put(jObjPos);
			                        }
			                       else
			                       {
			                    	   JSONObject jObjPos=new JSONObject();
						               jObjPos.put("POS",entry.getValue());
						               jObjPos.put("TotalAmt","0.0");
						               total+=0;
						               arrPOSDtls.put(jObjPos);
			                       }
			                       count++;
			                    }
			                    objPOS.put("POSDtls", arrPOSDtls);
			                }
			                jArr.put(objPOS);
			            }
	                }
				}
	        }	
	    	
	    	
	    	else if(strReportType.equalsIgnoreCase("Menu Wise"))
			{
	    		mapPOSSaleDetails = new LinkedHashMap<>();
	    		Map<String, Double> map =new HashMap<String, Double>();
	        	sbSqlLive.append("  SELECT ifnull(d.strMenuCode,'ND'),ifnull(e.strMenuName,'ND'), "
						+ " sum(a.dblQuantity),  sum(a.dblAmount)-sum(a.dblDiscountAmt),f.strPosName,"
						+ " 'SANGUINE',a.dblRate  ,sum(a.dblAmount),sum(a.dblDiscountAmt),b.strPOSCode    "
						+ " FROM tblbilldtl a  left outer join tblbillhd b on a.strBillNo=b.strBillNo  "
						+ " left outer join tblposmaster f on b.strposcode=f.strposcode   "
						+ " left outer join tblmenuitempricingdtl d on a.strItemCode = d.strItemCode   "
						+ " and b.strposcode =d.strposcode and b.strAreaCode= d.strAreaCode  "
						+ " left outer join tblmenuhd e on d.strMenuCode= e.strMenuCode  "
						+ " where date( b.dteBillDate ) BETWEEN '"+fromDate+"' and '"+toDate+" ' ");
	        	
	        	
	        	if(!POSCode.equals("ALL"))
				{
	        		sbSqlLive.append("and b.strPoscode='" + POSCode + "' ");
				}
	        	sbSqlLive.append(" Group by b.strPoscode, d.strMenuCode,e.strMenuName ");
		
				
				
				sbSqlQFile.append(" SELECT  ifnull(d.strMenuCode,'ND'),ifnull(e.strMenuName,'ND'), "
						+ " sum(a.dblQuantity),  sum(a.dblAmount)-sum(a.dblDiscountAmt),f.strPosName,"
						+ " 'SANGUINE',a.dblRate ,sum(a.dblAmount),sum(a.dblDiscountAmt),b.strPOSCode   "
						+ " FROM tblqbilldtl a  left outer join tblqbillhd b on a.strBillNo=b.strBillNo  "
						+ " left outer join tblposmaster f on b.strposcode=f.strposcode  "
						+ " left outer join tblmenuitempricingdtl d on a.strItemCode = d.strItemCode   "
						+ " and b.strposcode =d.strposcode and b.strAreaCode= d.strAreaCode  "
						+ " left outer join tblmenuhd e on d.strMenuCode= e.strMenuCode  "
						+ " where date( b.dteBillDate ) BETWEEN '"+fromDate+"' and '"+toDate+"' ");
				
				
				
				if(!POSCode.equals("ALL"))
				{
					sbSqlQFile.append("and b.strposcode='" + POSCode + "' ");
				}
				sbSqlQFile.append(" Group by b.strposcode, d.strMenuCode,e.strMenuName ");
				
				sbSqlModLive.append(" SELECT  ifnull(d.strMenuCode,'ND'),ifnull(e.strMenuName,'ND'), "
						+ " sum(a.dblQuantity),  sum(a.dblAmount)-sum(a.dblDiscAmt),f.strPosName,"
						+ " 'SANGUINE',a.dblRate ,sum(a.dblAmount),sum(a.dblDiscAmt),b.strPOSCode  "
						+ " FROM tblbillmodifierdtl a  left outer join tblbillhd b on a.strBillNo=b.strBillNo  "
						+ " left outer join tblposmaster f on b.strposcode=f.strposcode  "
						+ " left outer join tblmenuitempricingdtl d on LEFT(a.strItemCode,7)= d.strItemCode   "
						+ " and b.strposcode =d.strposcode and b.strAreaCode= d.strAreaCode  "
						+ " left outer join tblmenuhd e on d.strMenuCode= e.strMenuCode  "
						+ " where date( b.dteBillDate ) BETWEEN '"+fromDate+"' and '"+toDate+"'   and a.dblAmount>0  ");
				
				if(!POSCode.equals("ALL"))
				{
					sbSqlModLive.append("and b.strPoscode='" + POSCode + "' ");
				}
				sbSqlModLive.append(" Group by b.strPoscode, d.strMenuCode,e.strMenuName ");
				
				
				sbSqlModQFile.append("  SELECT  ifnull(d.strMenuCode,'ND'),ifnull(e.strMenuName,'ND'), "
						+ " sum(a.dblQuantity),  sum(a.dblAmount)-sum(a.dblDiscAmt),f.strPosName,"
						+ " 'SANGUINE',a.dblRate ,sum(a.dblAmount),sum(a.dblDiscAmt),b.strPOSCode   "
						+ " FROM tblqbillmodifierdtl a  left outer join tblqbillhd b on a.strBillNo=b.strBillNo "
						+ " left outer join tblposmaster f on b.strposcode=f.strposcode  "
						+ " left outer join tblmenuitempricingdtl d on LEFT(a.strItemCode,7)= d.strItemCode "
						+ " and b.strposcode =d.strposcode and b.strAreaCode= d.strAreaCode  "
						+ " left outer join tblmenuhd e on d.strMenuCode= e.strMenuCode "
						+ " where date( b.dteBillDate ) BETWEEN '"+fromDate+"' and '"+toDate+"'   and a.dblAmount>0  ");
				
				
				if(!POSCode.equals("ALL"))
				{
					sbSqlModQFile.append("and b.strPoscode='" + POSCode + "' ");
				}
				sbSqlModQFile.append(" Group by b.strPoscode, d.strMenuCode,e.strMenuName  ");
				
	
				String sqlPOS = "select strPOSCode,strPOSName from tblposmaster "
	                    + "order by strPOSName";
				
				Query querPOS = webPOSSessionFactory.getCurrentSession().createSQLQuery(sqlPOS);
	 		    List listPOS = querPOS.list();
	 		    if(listPOS.size()>0)
	 		    {
	 		    	for(int i=0 ;i<listPOS.size();i++ )
	 		    	{
	 		    	  Object[] obj = (Object[]) listPOS.get(i);
	 		    	  hmPOS.put(obj[0].toString(), obj[1].toString());
	 		    	}
	 		  
	 		    }
	 		    Query querySqlLive = webPOSSessionFactory.getCurrentSession().createSQLQuery(sbSqlLive.toString());
	            funGenerateItemWiseSales(querySqlLive,mapPOSSaleDetails,strReportType);
	            Query queryQFile = webPOSSessionFactory.getCurrentSession().createSQLQuery(sbSqlQFile.toString());
	            funGenerateItemWiseSales(queryQFile,mapPOSSaleDetails,strReportType);
	            Query querySqlModLive = webPOSSessionFactory.getCurrentSession().createSQLQuery(sbSqlModLive.toString());
	            funGenerateItemWiseSales(querySqlModLive,mapPOSSaleDetails,strReportType);
	            Query querySqlModQFile = webPOSSessionFactory.getCurrentSession().createSQLQuery(sbSqlModQFile.toString());
	            funGenerateItemWiseSales(querySqlModQFile,mapPOSSaleDetails,strReportType);
	 	       
	 	      
	 		    
	 		  if(mapPOSSaleDetails.size()>0)
				{
				   Iterator<Map.Entry<String, Map<String, clsBillItemDtl>>> posIterator = mapPOSSaleDetails.entrySet().iterator();
	                while (posIterator.hasNext() )
	                {
	                	Map.Entry<String,Map<String,clsBillItemDtl>> posEntry=posIterator.next();
	                    Map<String, clsBillItemDtl> mapItemDtl = posEntry.getValue();
	                    Iterator<Map.Entry<String, clsBillItemDtl>> itemIterator = mapItemDtl.entrySet().iterator();
	                    while (itemIterator.hasNext())
	                    {
	                    	Map.Entry<String,clsBillItemDtl> itemEntry=itemIterator.next();
	                        clsBillItemDtl objBillItemDtl = itemEntry.getValue();
	
	                        JSONObject objPOS= new JSONObject();
	                        JSONArray arrPOSDtls = new JSONArray();
			                objPOS.put("MenuCode", objBillItemDtl.getItemCode());
			                objPOS.put("MenuName", objBillItemDtl.getItemName());
			                if(hmPOS.size()>0)
			                {
			                	int count=1;
			                    for(Map.Entry<String,String> entry:hmPOS.entrySet())
			                    {  
			                    	if(entry.getKey().equals(posEntry.getKey()))
			                        {
			                    	   JSONObject jObjPos=new JSONObject();
						               jObjPos.put("POS",objBillItemDtl.getPosName());
						               jObjPos.put("TotalAmt",objBillItemDtl.getAmount());
						               total+=(long)objBillItemDtl.getAmount();
						               arrPOSDtls.put(jObjPos);
			                        }
			                       else
			                       {
			                    	   JSONObject jObjPos=new JSONObject();
						               jObjPos.put("POS",entry.getValue());
						               jObjPos.put("TotalAmt","0.0");
						               total+=0;
						               arrPOSDtls.put(jObjPos);
			                       }
			                       count++;
			                    }
			                    objPOS.put("POSDtls", arrPOSDtls);
			                }
			                jArr.put(objPOS);
			            }
	                }
				}
			    
			}
	    	
	    	
	    	else if(strReportType.equalsIgnoreCase("Group Wise"))
			{
	    		mapPOSSaleDetails = new LinkedHashMap<>();
	    		Map<String, Double> map =new HashMap<String, Double>();
	 	        sbSqlLive.append("   SELECT c.strGroupCode,c.strGroupName,sum( b.dblQuantity), sum( b.dblAmount)-sum(b.dblDiscountAmt) ,"
						+ " f.strPosName, 'SANGUINE',b.dblRate ,sum(b.dblAmount),sum(b.dblDiscountAmt),a.strPOSCode  "
						+ " FROM tblbillhd a,tblbilldtl b,tblgrouphd c,tblsubgrouphd d,tblitemmaster e,tblposmaster f  "
						+ " where a.strBillNo=b.strBillNo and a.strPOSCode=f.strPOSCode and b.strItemCode=e.strItemCode "
						+ " and c.strGroupCode=d.strGroupCode  and d.strSubGroupCode=e.strSubGroupCode  "
						+ " and date( a.dteBillDate ) BETWEEN '"+fromDate+"' and '"+toDate+"' ");
	 	        
	 	        
	 	       if(!POSCode.equals("ALL"))
				{
	 	    	  sbSqlLive.append("and a.strPoscode='" + POSCode + "' ");
				}
	 	      sbSqlLive.append(" GROUP BY c.strGroupCode, c.strGroupName, a.strPoscode  ");
				
				
				
				sbSqlQFile.append(" SELECT c.strGroupCode,c.strGroupName,sum( b.dblQuantity), sum( b.dblAmount)-sum(b.dblDiscountAmt) ,"
						+ " f.strPosName, 'SANGUINE',b.dblRate ,sum(b.dblAmount),sum(b.dblDiscountAmt),a.strPOSCode   "
						+ " FROM tblqbillhd a,tblqbilldtl b,tblgrouphd c,tblsubgrouphd d,tblitemmaster e,tblposmaster f  "
						+ " where a.strBillNo=b.strBillNo and a.strPOSCode=f.strPOSCode and b.strItemCode=e.strItemCode "
						+ " and c.strGroupCode=d.strGroupCode  and d.strSubGroupCode=e.strSubGroupCode   "
						+ " and date( a.dteBillDate ) BETWEEN '"+fromDate+"' and '"+toDate+"' ");
				
				
				if(!POSCode.equals("ALL"))
				{
					sbSqlQFile.append("and  a.strPoscode='" + POSCode + "' ");
				}
				sbSqlQFile.append(" GROUP BY c.strGroupCode, c.strGroupName, a.strPoscode  ");
				
				
				sbSqlModLive.append("  select c.strGroupCode,c.strGroupName,sum(b.dblQuantity),sum(b.dblAmount)-sum(b.dblDiscAmt),"
						+ " f.strPOSName,'SANGUINE','0' , sum(b.dblAmount),sum(b.dblDiscAmt),a.strPOSCode   "
						+ " from tblbillmodifierdtl b,tblbillhd a,tblposmaster f,tblitemmaster d,tblsubgrouphd e,tblgrouphd c   "
						+ " where a.strBillNo=b.strBillNo and a.strPOSCode=f.strPosCode   and LEFT(b.strItemCode,7)=d.strItemCode  "
						+ " and d.strSubGroupCode=e.strSubGroupCode  and e.strGroupCode=c.strGroupCode  and b.dblamount>0   "
						+ " and date( a.dteBillDate ) BETWEEN '"+fromDate+"' and '"+toDate+"'  ");
				
				if(!POSCode.equals("ALL"))
				{
					sbSqlModLive.append("and a.strPoscode='" + POSCode + "' ");
				}
				sbSqlModLive.append(" GROUP BY c.strGroupCode, c.strGroupName, a.strPoscode  ");
				
				
				
				sbSqlModQFile.append("   select c.strGroupCode,c.strGroupName,sum(b.dblQuantity),sum(b.dblAmount)-sum(b.dblDiscAmt),"
						+ " f.strPOSName,'SANGUINE','0' ,  sum(b.dblAmount),sum(b.dblDiscAmt),a.strPOSCode  "
						+ " from tblqbillmodifierdtl b,tblqbillhd a,tblposmaster f,tblitemmaster d,tblsubgrouphd e,tblgrouphd c   "
						+ " where a.strBillNo=b.strBillNo and a.strPOSCode=f.strPosCode  and LEFT(b.strItemCode,7)=d.strItemCode   "
						+ " and d.strSubGroupCode=e.strSubGroupCode and e.strGroupCode=c.strGroupCode  and b.dblamount>0   "
						+ " and date( a.dteBillDate ) BETWEEN '"+fromDate+"' and '"+toDate+"' ");
				
				if(!POSCode.equals("ALL"))
				{
					sbSqlModQFile.append("and a.strPoscode='" + POSCode + "' ");
				}
				sbSqlModQFile.append(" GROUP BY c.strGroupCode, c.strGroupName, a.strPoscode  ");
				
	
				String sqlPOS = "select strPOSCode,strPOSName from tblposmaster "
	                    + "order by strPOSName";
				
				Query querPOS = webPOSSessionFactory.getCurrentSession().createSQLQuery(sqlPOS);
	 		    List listPOS = querPOS.list();
	 		    if(listPOS.size()>0)
	 		    {
	 		    	for(int i=0 ;i<listPOS.size();i++ )
	 		    	{
	 		    	  Object[] obj = (Object[]) listPOS.get(i);
	 		    	  hmPOS.put(obj[0].toString(), obj[1].toString());
	 		    	}
	 		  
	 		    }
	 		    Query querySqlLive = webPOSSessionFactory.getCurrentSession().createSQLQuery(sbSqlLive.toString());
	            funGenerateItemWiseSales(querySqlLive,mapPOSSaleDetails,strReportType);
	            Query queryQFile = webPOSSessionFactory.getCurrentSession().createSQLQuery(sbSqlQFile.toString());
	            funGenerateItemWiseSales(queryQFile,mapPOSSaleDetails,strReportType);
	            Query querySqlModLive = webPOSSessionFactory.getCurrentSession().createSQLQuery(sbSqlModLive.toString());
	            funGenerateItemWiseSales(querySqlModLive,mapPOSSaleDetails,strReportType);
	            Query querySqlModQFile = webPOSSessionFactory.getCurrentSession().createSQLQuery(sbSqlModQFile.toString());
	            funGenerateItemWiseSales(querySqlModQFile,mapPOSSaleDetails,strReportType);
	 	       
	 	      
	 		    
	 		  if(mapPOSSaleDetails.size()>0)
				{
				   Iterator<Map.Entry<String, Map<String, clsBillItemDtl>>> posIterator = mapPOSSaleDetails.entrySet().iterator();
	                while (posIterator.hasNext() )
	                {
	                	Map.Entry<String,Map<String,clsBillItemDtl>> posEntry=posIterator.next();
	                    Map<String, clsBillItemDtl> mapItemDtl = posEntry.getValue();
	                    Iterator<Map.Entry<String, clsBillItemDtl>> itemIterator = mapItemDtl.entrySet().iterator();
	                    while (itemIterator.hasNext())
	                    {
	                    	Map.Entry<String,clsBillItemDtl> itemEntry=itemIterator.next();
	                        clsBillItemDtl objBillItemDtl = itemEntry.getValue();
	
	                        JSONObject objPOS= new JSONObject();
	                        JSONArray arrPOSDtls = new JSONArray();
			                objPOS.put("GroupCode", objBillItemDtl.getItemCode());
			                objPOS.put("GroupName", objBillItemDtl.getItemName());
			                if(hmPOS.size()>0)
			                {
			                	int count=1;
			                    for(Map.Entry<String,String> entry:hmPOS.entrySet())
			                    {  
			                    	if(entry.getKey().equals(posEntry.getKey()))
			                        {
			                    	   JSONObject jObjPos=new JSONObject();
						               jObjPos.put("POS",objBillItemDtl.getPosName());
						               jObjPos.put("TotalAmt",objBillItemDtl.getAmount());
						               total+=(long)objBillItemDtl.getAmount();
						               arrPOSDtls.put(jObjPos);
			                        }
			                       else
			                       {
			                    	   JSONObject jObjPos=new JSONObject();
						               jObjPos.put("POS",entry.getValue());
						               jObjPos.put("TotalAmt","0.0");
						               total+=0;
						               arrPOSDtls.put(jObjPos);
			                       }
			                       count++;
			                    }
			                    objPOS.put("POSDtls", arrPOSDtls);
			                }
			                jArr.put(objPOS);
			            }
	                }
				}
			    
			}
	    	else if(strReportType.equalsIgnoreCase("Subgroup Wise"))
			{
	    		mapPOSSaleDetails = new LinkedHashMap<>();
	    		Map<String, Double> map =new HashMap<String, Double>();
	    	    sbSqlLive.append("   SELECT c.strSubGroupCode, c.strSubGroupName, sum( b.dblQuantity )  , sum( b.dblAmount )-sum(b.dblDiscountAmt), "
						+ " f.strPosName,'SANGUINE',b.dblRate ,  sum(b.dblAmount),sum(b.dblDiscountAmt),a.strPOSCode  "
						+ " from tblbillhd a,tblbilldtl b,tblsubgrouphd c,tblitemmaster d  ,tblposmaster f   "
						+ " where a.strBillNo=b.strBillNo and a.strPOSCode=f.strPOSCode   and b.strItemCode=d.strItemCode  "
						+ " and c.strSubGroupCode=d.strSubGroupCode   "
						+ " and date( a.dteBillDate ) BETWEEN '"+fromDate+"' and '"+toDate+"' ");
	    	    
	    	    
	    	    if(!POSCode.equals("ALL"))
				{
	    	    	sbSqlLive.append("and a.strPoscode='" + POSCode + "' ");
				}
	    	    sbSqlLive.append(" group by  c.strSubGroupCode, c.strSubGroupName, a.strPoscode  ");
				
				
				sbSqlQFile.append("  SELECT c.strSubGroupCode, c.strSubGroupName, sum( b.dblQuantity )  ,  sum( b.dblAmount )-sum(b.dblDiscountAmt),"
						+ " f.strPosName,'SANGUINE',b.dblRate ,sum(b.dblAmount),sum(b.dblDiscountAmt),a.strPOSCode  "
						+ " from tblqbillhd a,tblqbilldtl b,tblsubgrouphd c,tblitemmaster d  ,tblposmaster f   "
						+ " where a.strBillNo=b.strBillNo and a.strPOSCode=f.strPOSCode   and b.strItemCode=d.strItemCode "
						+ " and c.strSubGroupCode=d.strSubGroupCode  "
						+ " and date( a.dteBillDate ) BETWEEN '"+fromDate+"' and '"+toDate+"' ");
				
				
				if(!POSCode.equals("ALL"))
				{
					sbSqlQFile.append("and a.strPoscode='" + POSCode + "' ");
				}
				sbSqlQFile.append(" group by  c.strSubGroupCode, c.strSubGroupName, a.strPoscode ");
				
				
				sbSqlModLive.append("  select c.strSubGroupCode,c.strSubGroupName,sum(b.dblQuantity), sum(b.dblAmount)-sum(b.dblDiscAmt),"
						+ " f.strPOSName,'SANGUINE','0' ,sum(b.dblAmount),sum(b.dblDiscAmt),a.strPOSCode   "
						+ " from tblbillmodifierdtl b,tblbillhd a,tblposmaster f,tblitemmaster d,tblsubgrouphd c  "
						+ " where a.strBillNo=b.strBillNo and a.strPOSCode=f.strPosCode  and LEFT(b.strItemCode,7)=d.strItemCode "
						+ "  and d.strSubGroupCode=c.strSubGroupCode  and b.dblamount>0   "
						+ " and date( a.dteBillDate ) BETWEEN '"+fromDate+"' and '"+toDate+"' ");
				
				
				if(!POSCode.equals("ALL"))
				{
					sbSqlModLive.append("and a.strPoscode='" + POSCode + "' ");
				}
				sbSqlModLive.append(" group by  c.strSubGroupCode, c.strSubGroupName, a.strPoscode ");
				
				
				sbSqlModQFile.append("   select c.strSubGroupCode,c.strSubGroupName,sum(b.dblQuantity),sum(b.dblAmount)-sum(b.dblDiscAmt), "
						+ " f.strPOSName,'SANGUINE','0' ,sum(b.dblAmount),sum(b.dblDiscAmt),a.strPOSCode  "
						+ " from tblqbillmodifierdtl b,tblqbillhd a,tblposmaster f,tblitemmaster d,tblsubgrouphd c "
						+ " where a.strBillNo=b.strBillNo and a.strPOSCode=f.strPosCode  and LEFT(b.strItemCode,7)=d.strItemCode  "
						+ " and d.strSubGroupCode=c.strSubGroupCode  and b.dblamount>0  "
						+ " and date( a.dteBillDate ) BETWEEN '"+fromDate+"' and '"+toDate+"'  ");
				
				if(!POSCode.equals("ALL"))
				{
					sbSqlModQFile.append("and a.strPoscode='" + POSCode + "' ");
				}
				sbSqlModQFile.append(" group by  c.strSubGroupCode, c.strSubGroupName, a.strPoscode ");
	
				String sqlPOS = "select strPOSCode,strPOSName from tblposmaster "
	                    + "order by strPOSName";
				
				Query querPOS = webPOSSessionFactory.getCurrentSession().createSQLQuery(sqlPOS);
	 		    List listPOS = querPOS.list();
	 		    if(listPOS.size()>0)
	 		    {
	 		    	for(int i=0 ;i<listPOS.size();i++ )
	 		    	{
	 		    	  Object[] obj = (Object[]) listPOS.get(i);
	 		    	  hmPOS.put(obj[0].toString(), obj[1].toString());
	 		    	}
	 		  
	 		    }
	 		    Query querySqlLive = webPOSSessionFactory.getCurrentSession().createSQLQuery(sbSqlLive.toString());
	            funGenerateItemWiseSales(querySqlLive,mapPOSSaleDetails,strReportType);
	            Query queryQFile = webPOSSessionFactory.getCurrentSession().createSQLQuery(sbSqlQFile.toString());
	            funGenerateItemWiseSales(queryQFile,mapPOSSaleDetails,strReportType);
	            Query querySqlModLive = webPOSSessionFactory.getCurrentSession().createSQLQuery(sbSqlModLive.toString());
	            funGenerateItemWiseSales(querySqlModLive,mapPOSSaleDetails,strReportType);
	            Query querySqlModQFile = webPOSSessionFactory.getCurrentSession().createSQLQuery(sbSqlModQFile.toString());
	            funGenerateItemWiseSales(querySqlModQFile,mapPOSSaleDetails,strReportType);
	 	       
	 	      
	 		    
	 		  if(mapPOSSaleDetails.size()>0)
				{
				   Iterator<Map.Entry<String, Map<String, clsBillItemDtl>>> posIterator = mapPOSSaleDetails.entrySet().iterator();
	                while (posIterator.hasNext() )
	                {
	                	Map.Entry<String,Map<String,clsBillItemDtl>> posEntry=posIterator.next();
	                    Map<String, clsBillItemDtl> mapItemDtl = posEntry.getValue();
	                    Iterator<Map.Entry<String, clsBillItemDtl>> itemIterator = mapItemDtl.entrySet().iterator();
	                    while (itemIterator.hasNext())
	                    {
	                    	Map.Entry<String,clsBillItemDtl> itemEntry=itemIterator.next();
	                        clsBillItemDtl objBillItemDtl = itemEntry.getValue();
	
	                        JSONObject objPOS= new JSONObject();
	                        JSONArray arrPOSDtls = new JSONArray();
			                objPOS.put("SubGroupCode", objBillItemDtl.getItemCode());
			                objPOS.put("SubGroupName", objBillItemDtl.getItemName());
			                if(hmPOS.size()>0)
			                {
			                	int count=1;
			                    for(Map.Entry<String,String> entry:hmPOS.entrySet())
			                    {  
			                    	if(entry.getKey().equals(posEntry.getKey()))
			                        {
			                    	   JSONObject jObjPos=new JSONObject();
						               jObjPos.put("POS",objBillItemDtl.getPosName());
						               jObjPos.put("TotalAmt",objBillItemDtl.getAmount());
						               total+=(long)objBillItemDtl.getAmount();
						               arrPOSDtls.put(jObjPos);
			                        }
			                       else
			                       {
			                    	   JSONObject jObjPos=new JSONObject();
						               jObjPos.put("POS",entry.getValue());
						               jObjPos.put("TotalAmt","0.0");
						               total+=0;
						               arrPOSDtls.put(jObjPos);
			                       }
			                       count++;
			                    }
			                    objPOS.put("POSDtls", arrPOSDtls);
			                }
			                jArr.put(objPOS);
			            }
	                }
				}
			    
			}
			
			
	    
	    	else if(strReportType.equalsIgnoreCase("POS Wise"))
	        {
	        	HashMap<String,clsPOSWiseReportBean> mapPOSWiseSales=new HashMap<String,clsPOSWiseReportBean>();
	        	Map<String, Double> map =new HashMap<String, Double>();
	 	        sbSqlLive.append(" select a.strPOSCode,c.strPosName,year(a.dteBillDate),sum(b.dblSettlementAmt),sum(a.dblGrandTotal) "
							+ " from tblbillhd a, tblbillsettlementdtl b,tblposmaster c  "
							+ " where a.strBillNo=b.strBillNo  and a.strPOSCode=c.strPosCode "
							+ " and date(a.dteBillDate) between '"+fromDate+"' and '"+toDate+"' ");
	 	        
	 	        
	 	       if(!POSCode.equals("ALL"))
				{
	 	    	  sbSqlLive.append("and a.strPOSCode='" + POSCode + "' ");
				}
	 	       sbSqlLive.append(" group by a.strPOSCode,date(a.dteBillDate) order by date(a.dteBillDate)  ");
	 	       
	 	        
	 	        sbSqlQFile.append(" select a.strPOSCode,c.strPosName,year(a.dteBillDate),sum(b.dblSettlementAmt),sum(a.dblGrandTotal)  "
							+ "from tblqbillhd a, tblqbillsettlementdtl b,tblposmaster c  "
							+ "where a.strBillNo=b.strBillNo  and a.strPOSCode=c.strPosCode "
							+ "and date(a.dteBillDate) between '"+fromDate+"' and '"+toDate+"'  ");
	 	        
	 	       if(!POSCode.equals("ALL"))
				{
	 	    	  sbSqlQFile.append("and a.strPOSCode='" + POSCode + "' ");
				}
	 	      sbSqlQFile.append(" group by a.strPOSCode,date(a.dteBillDate)  order by date(a.dteBillDate)  ");
	
	 	       
	 	        
	 		    Query querySqlLive = webPOSSessionFactory.getCurrentSession().createSQLQuery(sbSqlLive.toString());
	 		    List listSqlLive = querySqlLive.list();
	 		    if(listSqlLive.size()>0)
	 		    {
	 		    	for(int i=0 ;i<listSqlLive.size();i++ )
	 		    	{
	 		    	  Object[] obj = (Object[]) listSqlLive.get(i);
	 		    	 clsPOSWiseReportBean objBean=new clsPOSWiseReportBean();
	 		    	 objBean.setStritemCode(obj[0].toString());
	 		    	 objBean.setStritemName(obj[1].toString());
	 		    	 objBean.setDblamount(Double.parseDouble(obj[3].toString()));
	 		    	 mapPOSWiseSales.put(obj[0].toString(), objBean);
		    		 // total+=Double.parseDouble(obj[3].toString());
	 		    	}
	 		  
	 		    }
	 		  
	 		    Query queryQFile = webPOSSessionFactory.getCurrentSession().createSQLQuery(sbSqlQFile.toString());
	 		    List listSqlQFile = queryQFile.list();
	 		    if(listSqlQFile.size()>0)
	 		    {
	 		    	
	 		    	for(int i=0 ;i<listSqlQFile.size();i++ )
	 		    	{
	 		    		Object[] obj = (Object[]) listSqlQFile.get(i);
	 		    		if(mapPOSWiseSales.size()>0)
						 {
							 if(mapPOSWiseSales.containsKey(obj[0].toString()))
							 {
								 clsPOSWiseReportBean objBean=mapPOSWiseSales.get(obj[0].toString());
								 double settleAmt=objBean.getDblamount()+Double.valueOf(obj[3].toString());
								 objBean.setDblamount(settleAmt);
								 mapPOSWiseSales.put(obj[0].toString(), objBean);
							 }
							 else
							 {
								 clsPOSWiseReportBean objBean=new clsPOSWiseReportBean();
				 		    	 objBean.setStritemCode(obj[0].toString());
				 		    	 objBean.setStritemName(obj[1].toString());
				 		    	 objBean.setDblamount(Double.parseDouble(obj[3].toString()));
				 		    	 mapPOSWiseSales.put(obj[0].toString(), objBean);
							 }
						 }
						 else
						 {
							 clsPOSWiseReportBean objBean=new clsPOSWiseReportBean();
			 		    	 objBean.setStritemCode(obj[0].toString());
			 		    	 objBean.setStritemName(obj[1].toString());
			 		    	 objBean.setDblamount(Double.parseDouble(obj[3].toString()));
			 		    	 mapPOSWiseSales.put(obj[0].toString(), objBean);
						 }
	 		    		
	 		    	}
	 		    }
	 		    
	 		    
	 		   if(mapPOSWiseSales.size()>0)
			   {
				   for (Map.Entry<String, clsPOSWiseReportBean> entry : mapPOSWiseSales.entrySet())
		            {
					  clsPOSWiseReportBean objBean = entry.getValue();
		              JSONObject objPOS= new JSONObject();
		                objPOS.put("POSCode", entry.getKey());
		                objPOS.put("POSName", objBean.getStritemName());
		                objPOS.put("SettleAmt",(long)objBean.getDblamount());
		                objPOS.put("GrandAmt", objBean.getDblamount());
		                total+=(long)objBean.getDblamount();
		                jArr.put(objPOS);
		            }
			   }
	 		    
	       }
	    	
	    	
	    	
	    	else if(strReportType.equalsIgnoreCase("Month Wise"))
	        {
	    		mapPOSSaleDetails = new LinkedHashMap<>();
	    		HashMap<String,clsBillItemDtl> mapMonthWiseSales=new LinkedHashMap<>();
	        	Map<String, Double> map =new HashMap<String, Double>();
	 	        sbSqlLive.append(" select a.strPOSCode,c.strPosName,CASE { fn MONTH(a.dteBillDate) } "
	 	        		+ " when 1 then 'JAN' "
	 	        		+ " when 2 then 'FEB' "
	 	        		+ " when 3 then 'MAR' "
	 	        		+ " when 4 then 'APR' "
	 	        		+ " when 5 then 'MAY' "
	 	        		+ " when 6 then 'JUN' "
	 	        		+ " when 7 then 'JUL' "
	 	        		+ " when 8 then 'AUG' "
	 	        		+ " when 9 then 'SEP' "
	 	        		+ " when 10 then 'OCT' "
	 	        		+ " when 11 then 'NOV' "
	 	        		+ " when 12 then 'DEC' END "
	 	        		+ " AS MonthName,sum(b.dblSettlementAmt),sum(a.dblGrandTotal),year(a.dteBillDate) "
	 	        		+ " from tblbillhd a, tblbillsettlementdtl b,tblposmaster c   "
	 	        		+ " where a.strBillNo=b.strBillNo  and a.strPOSCode=c.strPosCode"
	 	        		+ " and date(a.dteBillDate) between '"+fromDate+"' and '"+toDate+"'  ");
	 	        
	 	        
	 	       if(!POSCode.equals("ALL"))
				{
	 	    	  sbSqlLive.append("and a.strPOSCode='" + POSCode + "' ");
				}
	 	       sbSqlLive.append(" group by a.strPOSCode,month(a.dteBillDate)  order by month(a.dteBillDate) DESC  ");
	 	        
	 	        
	 	       sbSqlQFile.append(" select a.strPOSCode,c.strPosName,CASE { fn MONTH(a.dteBillDate) } "
	 	        		+ " when 1 then 'JAN' "
	 	        		+ " when 2 then 'FEB' "
	 	        		+ " when 3 then 'MAR' "
	 	        		+ " when 4 then 'APR' "
	 	        		+ " when 5 then 'MAY' "
	 	        		+ " when 6 then 'JUN' "
	 	        		+ " when 7 then 'JUL' "
	 	        		+ " when 8 then 'AUG' "
	 	        		+ " when 9 then 'SEP' "
	 	        		+ " when 10 then 'OCT' "
	 	        		+ " when 11 then 'NOV' "
	 	        		+ " when 12 then 'DEC' END "
	 	        		+ " AS MonthName,sum(b.dblSettlementAmt),sum(a.dblGrandTotal),year(a.dteBillDate) "
	 	        		+ " from tblqbillhd a, tblqbillsettlementdtl b,tblposmaster c   "
	 	        		+ " where a.strBillNo=b.strBillNo  and a.strPOSCode=c.strPosCode"
	 	        		+ " and date(a.dteBillDate) between '"+fromDate+"' and '"+toDate+"'   ");
	 	       
	 	      if(!POSCode.equals("ALL"))
				{
	 	    	  sbSqlQFile.append("and a.strPOSCode='" + POSCode + "' ");
				}
	 	      sbSqlQFile.append(" group by a.strPOSCode,month(a.dteBillDate)  order by month(a.dteBillDate) DESC   ");
	 	      
	 	        
	 	      String sqlPOS = "select strPOSCode,strPOSName from tblposmaster "
	                  + "order by strPOSName";
				
				Query querPOS = webPOSSessionFactory.getCurrentSession().createSQLQuery(sqlPOS);
	 		    List listPOS = querPOS.list();
	 		    if(listPOS.size()>0)
	 		    {
	 		    	for(int i=0 ;i<listPOS.size();i++ )
	 		    	{
	 		    	  Object[] obj = (Object[]) listPOS.get(i);
	 		    	  hmPOS.put(obj[0].toString(), obj[1].toString());
	 		    	}
	 		  
	 		    }
	 	       
	 	        
	 		   
	 		  
	 		    Query queryQFile = webPOSSessionFactory.getCurrentSession().createSQLQuery(sbSqlQFile.toString());
	 		    List listSqlQFile = queryQFile.list();
	 		    if(listSqlQFile.size()>0)
	 		    {
	 		    	
	 		    	for(int i=0 ;i<listSqlQFile.size();i++ )
	 		    	{
	 		    		Object[] obj = (Object[]) listSqlQFile.get(i);
	 		    		if (mapMonthWiseSales.containsKey(obj[2].toString()+"("+obj[5].toString()+")"))
		                {
		 		    		 clsBillItemDtl objItemDtl = mapMonthWiseSales.get((obj[2].toString()+"("+obj[5].toString()+")"));
		                     objItemDtl.setAmount(objItemDtl.getAmount() + Double.parseDouble(obj[3].toString()));
		                     mapMonthWiseSales.put(obj[2].toString()+"("+obj[5].toString()+")", objItemDtl);
		                }
		                else
		                {
		                	clsBillItemDtl objItemDtl = new clsBillItemDtl("", obj[0].toString(), obj[1].toString(), 0, Double.parseDouble(obj[3].toString()), 0, obj[2].toString()+"("+obj[5].toString()+")", 0);
		                    mapMonthWiseSales.put(obj[2].toString()+"("+obj[5].toString()+")", objItemDtl);
	                    }
	 		    		
	 		    	}
	 		    }
	 		    
	 		    
	 		   Query querySqlLive = webPOSSessionFactory.getCurrentSession().createSQLQuery(sbSqlLive.toString());
	 		    List listSqlLive = querySqlLive.list();
	 		    if(listSqlLive.size()>0)
	 		    {
	 		    	for(int i=0 ;i<listSqlLive.size();i++ )
	 		    	{
	 		    	    Object[] obj = (Object[]) listSqlLive.get(i);
		 		    	if (mapMonthWiseSales.containsKey(obj[2].toString()+"("+obj[5].toString()+")"))
		                {
		 		    		 clsBillItemDtl objItemDtl = mapMonthWiseSales.get((obj[2].toString()+"("+obj[5].toString()+")"));
		                     objItemDtl.setAmount(objItemDtl.getAmount() + Double.parseDouble(obj[3].toString()));
		                     mapMonthWiseSales.put(obj[2].toString()+"("+obj[5].toString()+")", objItemDtl);
		                }
		                else
		                {
		                	clsBillItemDtl objItemDtl = new clsBillItemDtl("", obj[0].toString(), obj[1].toString(), 0, Double.parseDouble(obj[3].toString()), 0, obj[2].toString()+"("+obj[5].toString()+")", 0);
		                    mapMonthWiseSales.put(obj[2].toString()+"("+obj[5].toString()+")", objItemDtl);
	                    }
	 		       }
	 		  
	 		    }
	 		    
	 		    
	 		   
	 		  if(mapMonthWiseSales.size()>0)
				{
				   Iterator<Map.Entry<String, clsBillItemDtl>> itemIterator = mapMonthWiseSales.entrySet().iterator();
				   while (itemIterator.hasNext())
	               {
	               	   Map.Entry<String,clsBillItemDtl> itemEntry=itemIterator.next();
	                   clsBillItemDtl objBillItemDtl = itemEntry.getValue();
	
	                   JSONObject objPOS= new JSONObject();
	                   JSONArray arrPOSDtls = new JSONArray();
		               objPOS.put("MonthName", objBillItemDtl.getPosName());
		               objPOS.put("TotalAmt",objBillItemDtl.getAmount());
		               jArr.put(objPOS);
		            }
				}
	 		    
	       }
	    	
	    	
	    	else if(strReportType.equalsIgnoreCase("Operation Wise"))
	        {
	    		Map<String, Double> mapDineIn = new HashMap<>();
	            Map<String, Double> mapTakeAway = new HashMap<>();
	            Map<String, Double> mapHomeDel = new HashMap<>();
	        	HashMap<String,clsPOSWiseReportBean> mapPOSWiseSales=new HashMap<String,clsPOSWiseReportBean>();
	        	Map<String, Double> map =new HashMap<String, Double>();
	 	         
	 	       sbSqlQFile.append(" select e.strGroupName,SUM(b.dblAmount)-sum(b.dblDiscountAmt),e.strGroupCode,a.strOperationType "
	                    + " from tblqbillhd a,tblqbilldtl b,tblitemmaster c,tblsubgrouphd d,tblgrouphd e "
	                    + " where a.strBillNo=b.strBillNo and b.strItemCode=c.strItemCode "
	                    + " and c.strSubGroupCode=d.strSubGroupCode and d.strGroupCode=e.strGroupCode "
	                    + " and a.strClientCode=b.strClientCode  "
	                    + " and date(a.dteBillDate) between '" + fromDate + "' and '" + toDate + "' ");
	 	       
	 	      if(!POSCode.equals("ALL"))
				{
	 	    	  sbSqlQFile.append(" and a.strPOSCode='" + POSCode + "' ");
				}  
	
	 	       sbSqlModQFile.append(" select e.strGroupName,SUM(b.dblAmount)-sum(b.dblDiscAmt),e.strGroupCode,a.strOperationType "
	                    + " from tblqbillhd a,tblqbillmodifierdtl b,tblitemmaster c,tblsubgrouphd d,tblgrouphd e "
	                    + " where a.strBillNo=b.strBillNo and left(b.strItemCode,7)=c.strItemCode "
	                    + " and c.strSubGroupCode=d.strSubGroupCode and d.strGroupCode=e.strGroupCode "
	                    + "and a.strClientCode=b.strClientCode "
	                    + " and date(a.dteBillDate) between '" + fromDate + "' and '" + toDate + "' ");
	 	       
	 	      if(!POSCode.equals("ALL"))
				{
	 	    	 sbSqlModQFile.append(" and a.strPOSCode='" + POSCode + "' ");
				}
	
	 	       
	 	      sbSqlQFile.append(" group by a.strOperationType,e.strGroupCode");
	 	      sbSqlModQFile.append(" group by a.strOperationType,e.strGroupCode");
	 	        
	 		  
	 		    Query queryQFile = webPOSSessionFactory.getCurrentSession().createSQLQuery(sbSqlQFile.toString());
	 		    List listSqlQFile = queryQFile.list();
	 		    if(listSqlQFile.size()>0)
	 		    {
	 		    	
	 		    	for(int i=0 ;i<listSqlQFile.size();i++ )
	 		    	{
	 		    		Object[] obj = (Object[]) listSqlQFile.get(i);
	 		    		
	 		    		clsBillSettlementDtl objSettle = new clsBillSettlementDtl();
	 		    		objSettle.setDblSettlementAmt(Double.parseDouble(obj[1].toString()));
	 		    		objSettle.setStrSettlementName(obj[0].toString());
	 		    		objSettle.setStrSettlementType(obj[2].toString());
	 		    		objSettle.setStrRemark(obj[3].toString());
	
	 	                if (obj[3].toString().equalsIgnoreCase("Dine In") || obj[3].toString().equalsIgnoreCase("Direct Biller"))
	 	                {
	 	                    if (mapDineIn.containsKey(obj[0].toString()))
	 	                    {
	 	                        mapDineIn.put(obj[0].toString(), mapDineIn.get(obj[0].toString()) + Double.parseDouble(obj[1].toString()));
	 	                    }
	 	                    else
	 	                    {
	 	                        mapDineIn.put(obj[0].toString(), Double.parseDouble(obj[1].toString()));
	 	                    }
	 	                }
	 	                else if (obj[3].toString().equalsIgnoreCase("Take Away"))
	 	                {
	 	                    if (mapTakeAway.containsKey(obj[0].toString()))
	 	                    {
	 	                        mapTakeAway.put(obj[0].toString(), mapTakeAway.get(obj[0].toString()) + Double.parseDouble(obj[1].toString()));
	 	                    }
	 	                    else
	 	                    {
	 	                        mapTakeAway.put(obj[0].toString(),  Double.parseDouble(obj[1].toString()));
	 	                    }
	 	                }
	 	                else if (obj[3].toString().equalsIgnoreCase("Home Delivery"))
	 	                {
	 	                    if (mapHomeDel.containsKey(obj[0].toString()))
	 	                    {
	 	                        mapHomeDel.put(obj[0].toString(), mapHomeDel.get(obj[0].toString()) +  Double.parseDouble(obj[1].toString()));
	 	                    }
	 	                    else
	 	                    {
	 	                        mapHomeDel.put(obj[0].toString(),  Double.parseDouble(obj[1].toString()));
	 	                    }
	 	                }
	 		    	}
	 		    }
	 		    
	 		    Query queryQModFile = webPOSSessionFactory.getCurrentSession().createSQLQuery(sbSqlModQFile.toString());
	 		    List listSqlQModFile = queryQModFile.list();
	 		    if(listSqlQModFile.size()>0)
	 		    {
	 		    	
	 		    	for(int i=0 ;i<listSqlQModFile.size();i++ )
	 		    	{
	 		    		Object[] obj = (Object[]) listSqlQModFile.get(i);
	 		    		
	 		    		clsBillSettlementDtl objSettle = new clsBillSettlementDtl();
	 		    		objSettle.setDblSettlementAmt(Double.parseDouble(obj[1].toString()));
	 		    		objSettle.setStrSettlementName(obj[0].toString());
	 		    		objSettle.setStrSettlementType(obj[2].toString());
	 		    		objSettle.setStrRemark(obj[3].toString());
	
	 	                if (obj[3].toString().equalsIgnoreCase("Dine In") || obj[3].toString().equalsIgnoreCase("Direct Biller"))
	 	                {
	 	                    if (mapDineIn.containsKey(obj[0].toString()))
	 	                    {
	 	                        mapDineIn.put(obj[0].toString(), mapDineIn.get(obj[0].toString()) + Double.parseDouble(obj[1].toString()));
	 	                    }
	 	                    else
	 	                    {
	 	                        mapDineIn.put(obj[0].toString(), Double.parseDouble(obj[1].toString()));
	 	                    }
	 	                }
	 	                else if (obj[3].toString().equalsIgnoreCase("Take Away"))
	 	                {
	 	                    if (mapTakeAway.containsKey(obj[0].toString()))
	 	                    {
	 	                        mapTakeAway.put(obj[0].toString(), mapTakeAway.get(obj[0].toString()) + Double.parseDouble(obj[1].toString()));
	 	                    }
	 	                    else
	 	                    {
	 	                        mapTakeAway.put(obj[0].toString(),  Double.parseDouble(obj[1].toString()));
	 	                    }
	 	                }
	 	                else if (obj[3].toString().equalsIgnoreCase("Home Delivery"))
	 	                {
	 	                    if (mapHomeDel.containsKey(obj[0].toString()))
	 	                    {
	 	                        mapHomeDel.put(obj[0].toString(), mapHomeDel.get(obj[0].toString()) +  Double.parseDouble(obj[1].toString()));
	 	                    }
	 	                    else
	 	                    {
	 	                        mapHomeDel.put(obj[0].toString(),  Double.parseDouble(obj[1].toString()));
	 	                    }
	 	                }
	 		    	}
	 		    }
	 		    
	 		    
	 		   if(mapDineIn.size()>0)
			   {
	 			   double totalDineAmount=0;
				   Iterator<Map.Entry<String, Double>> itDineIn = mapDineIn.entrySet().iterator();
		            while (itDineIn.hasNext())
		            {
		                Map.Entry<String, Double> entry = itDineIn.next();
		                String group = entry.getKey();
		                double amount = entry.getValue();
		                totalDineAmount+=entry.getValue();
		            }
		            JSONObject objOperation= new JSONObject();
		            objOperation.put("Operation Type", "Dine In");
		            objOperation.put("SettleAmt",(long)totalDineAmount);
	                jArr.put(objOperation);
			   }
	 		   
	 		  if(mapTakeAway.size()>0)
			   {
	 			   double totalTakeAwayAmount=0;
				   Iterator<Map.Entry<String, Double>> itTakeAway = mapTakeAway.entrySet().iterator();
		            while (itTakeAway.hasNext())
		            {
		                Map.Entry<String, Double> entry = itTakeAway.next();
		                String group = entry.getKey();
		                double amount = entry.getValue();
		                totalTakeAwayAmount+=entry.getValue();
		            }
		            JSONObject objOperation= new JSONObject();
		            objOperation.put("Operation Type", "Take Away");
		            objOperation.put("SettleAmt",(long)totalTakeAwayAmount);
	                jArr.put(objOperation);
			   }
	 		  
	 		 if(mapHomeDel.size()>0)
			   {
	 			   double totalHomeDeliveryAmount=0;
				   Iterator<Map.Entry<String, Double>> itHomeDel = mapHomeDel.entrySet().iterator();
		            while (itHomeDel.hasNext())
		            {
		                Map.Entry<String, Double> entry = itHomeDel.next();
		                String group = entry.getKey();
		                double amount = entry.getValue();
		                totalHomeDeliveryAmount+=entry.getValue();
		            }
		            JSONObject objOperation= new JSONObject();
		            objOperation.put("Operation Type", "Home Delivery");
		            objOperation.put("SettleAmt",(long)totalHomeDeliveryAmount);
	                jArr.put(objOperation);
			   }
	 		    
	       }
	    
	
	    
	    JSONObject jObjTotal =new JSONObject();
			    
	    jOBjRet.put("jArr", jArr);
		        }
		        
	     catch(Exception ex)
	     {
	    	 ex.printStackTrace();
	     }
	     	    
	    return 	jOBjRet;
		
	}








	
	private void funGenerateItemWiseSales(Query queryDetails,Map<String, Map<String, clsBillItemDtl>> mapPOSSaleDetails,String reportType)
	{
		
	    try
	    {
	    	List listSql = queryDetails.list();
	    	switch(reportType)
				{
					case "Item Wise":
						if(listSql.size()>0)
			 		    {
			 		    	for(int i=0 ;i<listSql.size();i++ )
			 		    	{
			 		    	    Object[] obj = (Object[]) listSql.get(i);
				 		    	
	    		                String itemCode = obj[0].toString();//itemCode
	    		                String itemName = obj[1].toString();//itemName
	    		                String posName = obj[2].toString();//posName
	    		                double qty = Double.parseDouble(obj[3].toString());;//qty
	    		                double salesAmt = Double.parseDouble(obj[7].toString());//sale Amount
	    		                double subTotal = Double.parseDouble(obj[5].toString());//sub total
	    		                double discAmt = Double.parseDouble(obj[8].toString());//discount
	    		                String date = obj[9].toString();//date
	    		                String posCode = obj[10].toString();//posCode
	    		                
	    		            
	
	    		                if (mapPOSSaleDetails.containsKey(posCode))
	    		                {
	    		                    Map<String, clsBillItemDtl> mapItemDtl = mapPOSSaleDetails.get(posCode);
	    		                    if (mapItemDtl.containsKey(itemCode))
	    		                    {
	    		                        clsBillItemDtl objItemDtl = mapItemDtl.get(itemCode);
	    		                        objItemDtl.setQuantity(objItemDtl.getQuantity() + qty);
	    		                        objItemDtl.setAmount(objItemDtl.getAmount() + salesAmt);
	    		                        objItemDtl.setSubTotal(objItemDtl.getSubTotal() + subTotal);
	    		                        objItemDtl.setDiscountAmount(objItemDtl.getDiscountAmount() + discAmt);
	    		                    }
	    		                    else
	    		                    {
	    		                        clsBillItemDtl objItemDtl = new clsBillItemDtl(date, itemCode, itemName, qty, salesAmt, discAmt, posName, subTotal);
	    		                        mapItemDtl.put(itemCode, objItemDtl);
	    		                    }
	    		                }
	    		                else
	    		                {
	    		                    Map<String, clsBillItemDtl> mapItemDtl = new LinkedHashMap<>();
	    		                    clsBillItemDtl objItemDtl = new clsBillItemDtl(date, itemCode, itemName, qty, salesAmt, discAmt, posName, subTotal);
	    		                    mapItemDtl.put(itemCode, objItemDtl);
	    		                    mapPOSSaleDetails.put(posCode, mapItemDtl);
	    		                }
				 		   }
			 		  
			 		    }
					break;
					
					case "Menu Wise":
						if(listSql.size()>0)
			 		    {
			 		    	for(int i=0 ;i<listSql.size();i++ )
			 		    	{
			 		    	    Object[] obj = (Object[]) listSql.get(i);
				 		        String posCode = obj[9].toString();//posCode
	    		                String posName = obj[4].toString();//posName
	    		                String menuCode = obj[0].toString();//menuCode
	    		                String menuName = obj[1].toString();//menuName                
	    		                double qty = Double.parseDouble(obj[2].toString());//qty
	    		                double salesAmt = Double.parseDouble(obj[7].toString());//salesAmt
	    		                double subTotal = Double.parseDouble(obj[3].toString());//subTotal
	    		                double discAmt = Double.parseDouble(obj[8].toString());//disc       
	
	    		                if (mapPOSSaleDetails.containsKey(posCode))
	    		                {
	    		                    Map<String, clsBillItemDtl> mapItemDtl = mapPOSSaleDetails.get(posCode);
	    		                    if (mapItemDtl.containsKey(menuCode))
	    		                    {
	    		                        clsBillItemDtl objItemDtl = mapItemDtl.get(menuCode);
	    		                        objItemDtl.setQuantity(objItemDtl.getQuantity() + qty);
	    		                        objItemDtl.setAmount(objItemDtl.getAmount() + salesAmt);
	    		                        objItemDtl.setSubTotal(objItemDtl.getSubTotal() + subTotal);
	    		                        objItemDtl.setDiscountAmount(objItemDtl.getDiscountAmount() + discAmt);
	    		                    }
	    		                    else
	    		                    {
	    		                        clsBillItemDtl objItemDtl = new clsBillItemDtl("", menuCode, menuName, qty, salesAmt, discAmt, posName, subTotal);
	    		                        mapItemDtl.put(menuCode, objItemDtl);
	    		                    }
	    		                }
	    		                else
	    		                {
	    		                    Map<String, clsBillItemDtl> mapItemDtl = new LinkedHashMap<>();
	    		                    clsBillItemDtl objItemDtl = new clsBillItemDtl("", menuCode, menuName, qty, salesAmt, discAmt, posName, subTotal);
	    		                    mapItemDtl.put(menuCode, objItemDtl);
	    		                    mapPOSSaleDetails.put(posCode, mapItemDtl);
	    		                }
				 		   }
			 		  
			 		    }
					break;
					
					
					case "Group Wise":
						if(listSql.size()>0)
			 		    {
			 		    	for(int i=0 ;i<listSql.size();i++ )
			 		    	{
			 		    	    Object[] obj = (Object[]) listSql.get(i);
				 		    	String groupCode = obj[0].toString();
	    		                String groupName = obj[1].toString();
	    		                String posName = obj[4].toString();
	    		                double salesAmt = Double.parseDouble(obj[7].toString());
	    		                String posCode = obj[9].toString();              
	
	    		                if (mapPOSSaleDetails.containsKey(posCode))
	    		                {
	    		                    Map<String, clsBillItemDtl> mapItemDtl = mapPOSSaleDetails.get(posCode);
	    		                    if (mapItemDtl.containsKey(groupCode))
	    		                    {
	    		                        clsBillItemDtl objItemDtl = mapItemDtl.get(groupCode);
	    		                        objItemDtl.setAmount(objItemDtl.getAmount() + salesAmt);
	    		                    }
	    		                    else
	    		                    {
	    		                        clsBillItemDtl objItemDtl = new clsBillItemDtl("", groupCode, groupName, 0, salesAmt, 0, posName, 0);
	    		                        mapItemDtl.put(groupCode, objItemDtl);
	    		                    }
	    		                }
	    		                else
	    		                {
	    		                    Map<String, clsBillItemDtl> mapItemDtl = new LinkedHashMap<>();
	    		                    clsBillItemDtl objItemDtl = new clsBillItemDtl("", groupCode, groupName, 0, salesAmt, 0, posName, 0);
	    		                    mapItemDtl.put(groupCode, objItemDtl);
	    		                    mapPOSSaleDetails.put(posCode, mapItemDtl);
	    		                }
				 		   }
			 		  
			 		    }
					break;
					
					
					case "Subgroup Wise":
						if(listSql.size()>0)
			 		    {
			 		    	for(int i=0 ;i<listSql.size();i++ )
			 		    	{
			 		    	    Object[] obj = (Object[]) listSql.get(i);
				 		    	String subGroupCode = obj[0].toString();
	    		                String subGroupName = obj[1].toString();
	    		                String posName = obj[4].toString();;
	    		                double salesAmt =  Double.parseDouble(obj[7].toString());
	    		                String posCode = obj[9].toString(); 
	
	    		                if (mapPOSSaleDetails.containsKey(posCode))
	    		                {
	    		                    Map<String, clsBillItemDtl> mapItemDtl = mapPOSSaleDetails.get(posCode);
	    		                    if (mapItemDtl.containsKey(subGroupCode))
	    		                    {
	    		                        clsBillItemDtl objItemDtl = mapItemDtl.get(subGroupCode);
	    		                        objItemDtl.setAmount(objItemDtl.getAmount() + salesAmt);
	    		                    }
	    		                    else
	    		                    {
	    		                        clsBillItemDtl objItemDtl = new clsBillItemDtl("", subGroupCode, subGroupName, 0, salesAmt, 0, posName, 0);
	    		                        mapItemDtl.put(subGroupCode, objItemDtl);
	    		                    }
	    		                }
	    		                else
	    		                {
	    		                    Map<String, clsBillItemDtl> mapItemDtl = new LinkedHashMap<>();
	    		                    clsBillItemDtl objItemDtl = new clsBillItemDtl("", subGroupCode, subGroupName, 0, salesAmt, 0, posName, 0);
	    		                    mapItemDtl.put(subGroupCode, objItemDtl);
	    		                    mapPOSSaleDetails.put(posCode, mapItemDtl);
	    		                }
				 		   }
			 		  
			 		    }
					break;
				}
	        
	        
	        
	        
	        
	    }
	    catch (Exception e)
	    {
	        e.printStackTrace();
	    }
	}
	





public JSONObject funGetSalePurchaseComparisonDtl(String fromDate,String toDate)
{
	
	 StringBuilder sbSql = new StringBuilder();


     JSONObject jOBjRet=new JSONObject();
     List listRet =new ArrayList();
	 StringBuilder sbSqlLive = new StringBuilder();
     StringBuilder sbSqlQFile = new StringBuilder();
     StringBuilder sbSqlFilters = new StringBuilder();
     JSONArray jArr =new JSONArray();
    
     double total=0.0,grandTotal=0.0;

     sbSqlLive.setLength(0);
     sbSqlQFile.setLength(0);
     sbSqlFilters.setLength(0);

     int colCount=4;
     try
     {
    	
    	 	HashMap<String,clsBillItemDtl> mapMonthWiseSales=new LinkedHashMap<>();
        	Map<String, Double> map =new HashMap<String, Double>();
 	        sbSqlLive.append(" select sum(b.dblSettlementAmt),MONTHNAME(a.dteBillDate) AS monthName,YEAR(a.dteBillDate) AS posyear "
 	        		+ "  ,mms.mmsTotal , mms.monthName , mms.mmsyear "
 	        		+ " from jpos.tblqbillhd a, jpos.tblqbillsettlementdtl b,jpos.tblposmaster c  , "
 	        		+ " (select sum(dblTotal) as mmsTotal,  MONTHNAME(dtGRNDate) AS monthName,   YEAR(dtGRNDate) as mmsyear  "
 	        		+ " from dbwebmms.tblgrnhd  where year(dtGRNDate) between '"+fromDate+"' and '"+toDate+"'   "
 	        		+ " group by MONTH(dtGRNDate) ,year(dtGRNDate)"
 	        		+ " order by YEAR(dtGRNDate) ASC,MONTH(dtGRNDate) ASC)  mms "
 	        		+ " where a.strBillNo=b.strBillNo  and a.strPOSCode=c.strPosCode "
 	        		+ " and date(a.dteBillDate) between '"+fromDate+"' and '"+toDate+"' and MONTHNAME(a.dteBillDate) = mms.monthName and "
 	        		+ " YEAR(a.dteBillDate) = mms.mmsyear "
 	        		+ " group by month(a.dteBillDate)  order by YEAR(a.dteBillDate) ASC,month(a.dteBillDate) ASC ");
 	        
 	        
 	      
 		    Query queryFile = webPOSSessionFactory.getCurrentSession().createSQLQuery(sbSqlLive.toString());
 		    List listSqlFile = queryFile.list();
 		    if(listSqlFile.size()>0)
 		    {
 		    	
 		    	for(int i=0 ;i<listSqlFile.size();i++ )
 		    	{
 		    		Object[] obj = (Object[]) listSqlFile.get(i);
 		    		String monthName=obj[1].toString();
 		    		if(monthName.equals("January"))
 					{
 		    			 monthName="JAN";
 					}
 					else if(monthName.equals("February"))
 					{
 						monthName="FEB";
 					}
 					else if(monthName.equals("March"))
 					{
 						monthName="MAR";
 					}
 					else if(monthName.equals("April"))
 					{
 						monthName="APR";
 					}
 					else if(monthName.equals("May"))
 					{
 						monthName="MAY";
 					}
 					else if(monthName.equals("June"))
 					{
 						monthName="JUN";
 					}
 					else if(monthName.equals("July"))
 					{
 						monthName="JUL";
 					}
 					else if(monthName.equals("August"))
 					{
 						monthName="AUG";
 					}
 					else if(monthName.equals("September"))
 					{
 						monthName="SEP";
 					}
 					else if(monthName.equals("October"))
 					{
 						monthName="OCT";
 					}
 					else if(monthName.equals("November"))
 					{
 						monthName="NOV";
 					}
 					else if(monthName.equals("December"))
 					{
 						monthName="DEC";
 					}
 		    		
 		    		
 		    		
 		    		clsBillItemDtl objItemDtl = new clsBillItemDtl(monthName+"("+obj[2].toString()+")", "","", 0, Double.parseDouble(obj[3].toString()), 0, monthName+"("+obj[2].toString()+")", Double.parseDouble(obj[0].toString()));
                    mapMonthWiseSales.put(monthName+"("+obj[2].toString()+")", objItemDtl);
 		    	}
 		    }
 		    
 		    
 		
 		  
 		  if(mapMonthWiseSales.size()>0)
		  {
			   Iterator<Map.Entry<String, clsBillItemDtl>> itemIterator = mapMonthWiseSales.entrySet().iterator();
			   while (itemIterator.hasNext())
                {
                	Map.Entry<String,clsBillItemDtl> itemEntry=itemIterator.next();
                    clsBillItemDtl objBillItemDtl = itemEntry.getValue();

                    JSONObject objPOS= new JSONObject();
                    JSONArray arrPOSDtls = new JSONArray();
		               objPOS.put("MonthName", objBillItemDtl.getPosName());
		               objPOS.put("TotalPurchaseAmt",objBillItemDtl.getAmount());
		               objPOS.put("TotalSaleAmt",objBillItemDtl.getSubTotal());
		               jArr.put(objPOS);
		        }
				
 		  }
   

    
        JSONObject jObjTotal =new JSONObject();
 		    
        jObjTotal.put("total", total);
        jOBjRet.put("jArr", jArr);
        jOBjRet.put("jObjTotal", jObjTotal);
	        }
	        
     catch(Exception ex)
     {
    	 ex.printStackTrace();
     }
     	    
    return 	jOBjRet;
	
}





public JSONObject funGetPOSComparisonwiseSaleDtl(String fromDate,String toDate,String reportType)
{
	 Map<String, Map<String, clsBillItemDtl>> mapPOSMonthWiseSales= new LinkedHashMap<>();
	 HashMap<String, String> hmPOS = new HashMap<String, String>();
	 StringBuilder sbSql = new StringBuilder();
     JSONObject jOBjRet=new JSONObject();
     List listRet =new ArrayList();
	 StringBuilder sbSqlLive = new StringBuilder();
     StringBuilder sbSqlQFile = new StringBuilder();
     StringBuilder sbSqlModLive = new StringBuilder();
     StringBuilder sbSqlModQFile = new StringBuilder();
     StringBuilder sbSqlFilters = new StringBuilder();
     JSONArray jArr =new JSONArray();
    
     double total=0.0,grandTotal=0.0;

     sbSqlLive.setLength(0);
     sbSqlQFile.setLength(0);
     sbSqlFilters.setLength(0);

     int colCount=4;
     try
     {
    	 
    	if(reportType.equals("POSMonthwise"))
    	 {
    		 HashMap<String,clsBillItemDtl> mapMonthWiseSales=new LinkedHashMap<>();
     	 	String sqlPOS = "select strPOSCode,strPOSName from tblposmaster "
                      + "order by strPOSName";
 				
 				Query querPOS = webPOSSessionFactory.getCurrentSession().createSQLQuery(sqlPOS);
 	 		    List listPOS = querPOS.list();
 	 		    if(listPOS.size()>0)
 	 		    {
 	 		    	for(int i=0 ;i<listPOS.size();i++ )
 	 		    	{
 	 		    	  Object[] obj = (Object[]) listPOS.get(i);
 	 		    	  hmPOS.put(obj[0].toString(), obj[1].toString());
 	 		    	}
 	 		  
 	 		    }
 	 		    
 	 		  sbSqlQFile.append(" select a.strPOSCode,c.strPosName,MONTHNAME(a.dteBillDate) AS monthName,YEAR(a.dteBillDate),sum(b.dblSettlementAmt),sum(a.dblGrandTotal) "
  	        	+ " from tblqbillhd a, tblqbillsettlementdtl b,tblposmaster c   where a.strBillNo=b.strBillNo  and a.strPOSCode=c.strPosCode"
  	        	+ " and date(dteBillDate) between '"+fromDate+"' and '"+toDate+"' "
  	        	+ " group by a.strPOSCode, month(a.dteBillDate)  order by YEAR(a.dteBillDate) ASC,month(a.dteBillDate) ASC  ");
  	        
  	        
 	    
  	      sbSqlLive.append(" select a.strPOSCode,c.strPosName,MONTHNAME(a.dteBillDate) AS monthName,YEAR(a.dteBillDate),sum(b.dblSettlementAmt),sum(a.dblGrandTotal) "
  	        	+ " from tblbillhd a, tblbillsettlementdtl b,tblposmaster c   where a.strBillNo=b.strBillNo  and a.strPOSCode=c.strPosCode"
  	        	+ " and date(dteBillDate) between '"+fromDate+"' and '"+toDate+"' "
  	        	+ " group by a.strPOSCode, month(a.dteBillDate)  order by YEAR(a.dteBillDate) ASC,month(a.dteBillDate) ASC  ");
  	        
  	        
  	        
  	       
  	       
  	       
  	       
  	      
  		    Query queryQFile = webPOSSessionFactory.getCurrentSession().createSQLQuery(sbSqlQFile.toString());
  		    List listSqlQFile = queryQFile.list();
  		    if(listSqlQFile.size()>0)
  		    {
  		    	
  		    	for(int i=0 ;i<listSqlQFile.size();i++ )
  		    	{
  		    		Object[] obj = (Object[]) listSqlQFile.get(i);
  		    		String monthName=obj[2].toString();
  		    		if(monthName.equals("January"))
  					{
  		    			 monthName="JAN";
  					}
  					else if(monthName.equals("February"))
  					{
  						monthName="FEB";
  					}
  					else if(monthName.equals("March"))
  					{
  						monthName="MAR";
  					}
  					else if(monthName.equals("April"))
  					{
  						monthName="APR";
  					}
  					else if(monthName.equals("May"))
  					{
  						monthName="MAY";
  					}
  					else if(monthName.equals("June"))
  					{
  						monthName="JUN";
  					}
  					else if(monthName.equals("July"))
  					{
  						monthName="JUL";
  					}
  					else if(monthName.equals("August"))
  					{
  						monthName="AUG";
  					}
  					else if(monthName.equals("September"))
  					{
  						monthName="SEP";
  					}
  					else if(monthName.equals("October"))
  					{
  						monthName="OCT";
  					}
  					else if(monthName.equals("November"))
  					{
  						monthName="NOV";
  					}
  					else if(monthName.equals("December"))
  					{
  						monthName="DEC";
  					}
  		    		
  		    		if (mapPOSMonthWiseSales.containsKey(obj[0].toString()))
 		              {
 		                    Map<String, clsBillItemDtl> mapItemDtl = mapPOSMonthWiseSales.get(obj[0].toString());
 		                    if (mapItemDtl.containsKey(monthName+"("+obj[3].toString()+")"))
 		                    {
 		                        clsBillItemDtl objItemDtl = mapItemDtl.get(monthName+"("+obj[3].toString()+")");
 		                        objItemDtl.setAmount(objItemDtl.getAmount() + Double.parseDouble(obj[4].toString()));
 		                        objItemDtl.setSubTotal(objItemDtl.getSubTotal() + Double.parseDouble(obj[5].toString()));
 		                    }
 		                    else
 		                    {
 		                    	clsBillItemDtl objItemDtl = new clsBillItemDtl(monthName+"("+obj[3].toString()+")", obj[0].toString(),obj[1].toString(), 0, Double.parseDouble(obj[4].toString()), 0, monthName+"("+obj[3].toString()+")", Double.parseDouble(obj[5].toString()));
 			                    mapItemDtl.put(monthName+"("+obj[3].toString()+")", objItemDtl);
 		                    }
 		              }
 		              else
 		              {
 		                    Map<String, clsBillItemDtl> mapItemDtl = new LinkedHashMap<>();
 		                    clsBillItemDtl objItemDtl = new clsBillItemDtl(monthName+"("+obj[3].toString()+")", obj[0].toString(),obj[1].toString(), 0, Double.parseDouble(obj[4].toString()), 0, monthName+"("+obj[3].toString()+")", Double.parseDouble(obj[5].toString()));
 		                    mapItemDtl.put(monthName+"("+obj[3].toString()+")", objItemDtl);
 		                    mapPOSMonthWiseSales.put(obj[0].toString(), mapItemDtl);
 		              }
  		    	}
  		    }
  		    
  		   Query queryFile = webPOSSessionFactory.getCurrentSession().createSQLQuery(sbSqlLive.toString());
  		    List listSqlFile = queryFile.list();
  		    if(listSqlFile.size()>0)
  		    {
  		    	
  		    	for(int i=0 ;i<listSqlFile.size();i++ )
  		    	{
  		    		Object[] obj = (Object[]) listSqlFile.get(i);
  		    		String monthName=obj[2].toString();
  		    		if(monthName.equals("January"))
  					{
  		    			 monthName="JAN";
  					}
  					else if(monthName.equals("February"))
  					{
  						monthName="FEB";
  					}
  					else if(monthName.equals("March"))
  					{
  						monthName="MAR";
  					}
  					else if(monthName.equals("April"))
  					{
  						monthName="APR";
  					}
  					else if(monthName.equals("May"))
  					{
  						monthName="MAY";
  					}
  					else if(monthName.equals("June"))
  					{
  						monthName="JUN";
  					}
  					else if(monthName.equals("July"))
  					{
  						monthName="JUL";
  					}
  					else if(monthName.equals("August"))
  					{
  						monthName="AUG";
  					}
  					else if(monthName.equals("September"))
  					{
  						monthName="SEP";
  					}
  					else if(monthName.equals("October"))
  					{
  						monthName="OCT";
  					}
  					else if(monthName.equals("November"))
  					{
  						monthName="NOV";
  					}
  					else if(monthName.equals("December"))
  					{
  						monthName="DEC";
  					}
  		    		
  		    		if (mapPOSMonthWiseSales.containsKey(obj[0].toString()))
 		              {
 		                    Map<String, clsBillItemDtl> mapItemDtl = mapPOSMonthWiseSales.get(obj[0].toString());
 		                    if (mapItemDtl.containsKey(monthName+"("+obj[3].toString()+")"))
 		                    {
 		                        clsBillItemDtl objItemDtl = mapItemDtl.get(monthName+"("+obj[3].toString()+")");
 		                        objItemDtl.setAmount(objItemDtl.getAmount() + Double.parseDouble(obj[4].toString()));
 		                        objItemDtl.setSubTotal(objItemDtl.getSubTotal() + Double.parseDouble(obj[5].toString()));
 		                    }
 		                    else
 		                    {
 		                    	clsBillItemDtl objItemDtl = new clsBillItemDtl(monthName+"("+obj[3].toString()+")", obj[0].toString(),obj[1].toString(), 0, Double.parseDouble(obj[4].toString()), 0, monthName+"("+obj[3].toString()+")", Double.parseDouble(obj[5].toString()));
 			                    mapItemDtl.put(monthName+"("+obj[3].toString()+")", objItemDtl);
 		                    }
 		              }
 		              else
 		              {
 		                    Map<String, clsBillItemDtl> mapItemDtl = new LinkedHashMap<>();
 		                    clsBillItemDtl objItemDtl = new clsBillItemDtl(monthName+"("+obj[3].toString()+")", obj[0].toString(),obj[1].toString(), 0, Double.parseDouble(obj[4].toString()), 0, monthName+"("+obj[3].toString()+")", Double.parseDouble(obj[5].toString()));
 		                    mapItemDtl.put(monthName+"("+obj[3].toString()+")", objItemDtl);
 		                    mapPOSMonthWiseSales.put(obj[0].toString(), mapItemDtl);
 		              }
  		    	}
  		    }
  		    
  		    
  		
  		  
  		 if(mapPOSMonthWiseSales.size()>0)
 			{
  			   
 			   Iterator<Map.Entry<String, Map<String, clsBillItemDtl>>> posIterator = mapPOSMonthWiseSales.entrySet().iterator();
                 while (posIterator.hasNext() )
                 {
                 	Map.Entry<String,Map<String,clsBillItemDtl>> posEntry=posIterator.next();
                     Map<String, clsBillItemDtl> mapItemDtl = posEntry.getValue();
                     JSONObject objPOS= new JSONObject();
                     JSONArray arrPOSDtls = new JSONArray();
                     
                     if(hmPOS.size()>0)
 	                {
 	                	for(Map.Entry<String,String> entry:hmPOS.entrySet())
 	                    {  
 	                    	if(entry.getKey().equals(posEntry.getKey()))
 	                        {
 	                    		  objPOS.put("POSName",entry.getValue());
 	                        }
 	                    }
 	                }
                     
                     Iterator<Map.Entry<String, clsBillItemDtl>> itemIterator = mapItemDtl.entrySet().iterator();
                     while (itemIterator.hasNext())
                     {
                     	Map.Entry<String,clsBillItemDtl> itemEntry=itemIterator.next();
 	                    clsBillItemDtl objBillItemDtl = itemEntry.getValue();
 	                    JSONObject jObjPos=new JSONObject();
 	                    jObjPos.put("MonthName", objBillItemDtl.getPosName());
 	                    jObjPos.put("TotalSaleAmt",objBillItemDtl.getSubTotal());
 			            arrPOSDtls.put(jObjPos);
 		            }
                     
                     objPOS.put("MonthDtls", arrPOSDtls);
                     jArr.put(objPOS);
                 }
 			}
  		 
  		
         JSONObject jObjTotal =new JSONObject();
  		    
         jObjTotal.put("total", total);
         jOBjRet.put("jArr", jArr);
         jOBjRet.put("jObjTotal", jObjTotal);
         
      }
     else if(reportType.equals("POSGroupMonthwise"))
   	 {
    		
    	 Map<String, Map<String, Map<String, clsBillItemDtl>>> mapPOSGroupMonthWiseSales= new LinkedHashMap<>(); 
    	 Map<String, Map<String, clsBillItemDtl>> mapMonth;
    	 Map<String, clsBillItemDtl> mapGroup;
    	 
    	 sbSqlLive.append("  SELECT c.strGroupCode,c.strGroupName,f.strPosName,a.strPOSCode,(sum(b.dblAmount)+sum(b.dblTaxAmount)),  "
    	 		+ " MONTHNAME(a.dteBillDate) AS monthName,YEAR(a.dteBillDate)   "
    	 		+ " FROM tblbillhd a,tblbilldtl b,tblgrouphd c,tblsubgrouphd d,tblitemmaster e,tblposmaster f  "
    	 		+ " where a.strBillNo=b.strBillNo and a.strPOSCode=f.strPOSCode and b.strItemCode=e.strItemCode  "
    	 		+ " and c.strGroupCode=d.strGroupCode  and d.strSubGroupCode=e.strSubGroupCode   "
    	 		+ " and date( a.dteBillDate ) BETWEEN '"+fromDate+"' and '"+toDate+"'  "
    	 		+ " GROUP BY c.strGroupCode, c.strGroupName, a.strPoscode ,month(a.dteBillDate)"
    	 		+ " order by c.strGroupCode,YEAR(a.dteBillDate) ASC,month(a.dteBillDate) ASC    ");
   	        
   	        
  	    
   	     sbSqlQFile.append(" SELECT c.strGroupCode,c.strGroupName,f.strPosName,a.strPOSCode,(sum(b.dblAmount)+sum(b.dblTaxAmount)),   "
   	     		+ " MONTHNAME(a.dteBillDate) AS monthName,YEAR(a.dteBillDate)   "
   	     		+ " FROM tblqbillhd a,tblqbilldtl b,tblgrouphd c,tblsubgrouphd d,tblitemmaster e,tblposmaster f   "
   	     		+ " where a.strBillNo=b.strBillNo and a.strPOSCode=f.strPOSCode and b.strItemCode=e.strItemCode  "
   	     		+ " and c.strGroupCode=d.strGroupCode  and d.strSubGroupCode=e.strSubGroupCode   "
   	     		+ " and date( a.dteBillDate ) BETWEEN '"+fromDate+"' and '"+toDate+"'  "
   	     		+ " GROUP BY c.strGroupCode, c.strGroupName, a.strPoscode ,month(a.dteBillDate) "
   	     		+ " order by c.strGroupCode,YEAR(a.dteBillDate) ASC,month(a.dteBillDate) ASC    ");
   	      
   	      
   	    sbSqlModLive.append(" select c.strGroupCode,c.strGroupName,f.strPOSName,a.strPOSCode,sum(b.dblAmount),   "
   	    		+ " MONTHNAME(a.dteBillDate) AS monthName,YEAR(a.dteBillDate)   "
   	    		+ " from tblbillmodifierdtl b,tblbillhd a,tblposmaster f,tblitemmaster d,tblsubgrouphd e,tblgrouphd c    "
   	    		+ " where a.strBillNo=b.strBillNo and a.strPOSCode=f.strPosCode   and LEFT(b.strItemCode,7)=d.strItemCode   "
   	    		+ " and d.strSubGroupCode=e.strSubGroupCode  and e.strGroupCode=c.strGroupCode  and b.dblamount>0    "
   	    		+ " and date( a.dteBillDate ) BETWEEN '"+fromDate+"' and '"+toDate+"'   "
   	    		+ " GROUP BY c.strGroupCode, c.strGroupName, a.strPoscode,month(a.dteBillDate)"
   	    		+ " order by c.strGroupCode,YEAR(a.dteBillDate) ASC,month(a.dteBillDate) ASC    ");
  	        
  	        
 	    
   	   sbSqlModQFile.append(" select c.strGroupCode,c.strGroupName,f.strPOSName,a.strPOSCode,sum(b.dblAmount),   "
   	   		+ " MONTHNAME(a.dteBillDate) AS monthName,YEAR(a.dteBillDate)   "
   	   		+ " from tblqbillmodifierdtl b,tblqbillhd a,tblposmaster f,tblitemmaster d,tblsubgrouphd e,tblgrouphd c    "
   	   		+ " where a.strBillNo=b.strBillNo and a.strPOSCode=f.strPosCode   and LEFT(b.strItemCode,7)=d.strItemCode   "
   	   		+ " and d.strSubGroupCode=e.strSubGroupCode  and e.strGroupCode=c.strGroupCode  and b.dblamount>0    "
   	   		+ " and date( a.dteBillDate ) BETWEEN '"+fromDate+"' and '"+toDate+"'   "
   	   		+ " GROUP BY c.strGroupCode, c.strGroupName, a.strPoscode,month(a.dteBillDate)"
   	   		+ " order by c.strGroupCode,YEAR(a.dteBillDate) ASC,month(a.dteBillDate) ASC    ");
  	        
   	        
   	   
   	   
	    
	       Query queryQFile = webPOSSessionFactory.getCurrentSession().createSQLQuery(sbSqlQFile.toString());
		   List listSqlQFile = queryQFile.list();
		    if(listSqlQFile.size()>0)
		    {
		    	
		    	for(int i=0 ;i<listSqlQFile.size();i++ )
		    	{
		    		Object[] obj = (Object[]) listSqlQFile.get(i);
		    		String monthName=obj[5].toString();
		    		if(monthName.equals("January"))
					{
		    			 monthName="JAN";
					}
					else if(monthName.equals("February"))
					{
						monthName="FEB";
					}
					else if(monthName.equals("March"))
					{
						monthName="MAR";
					}
					else if(monthName.equals("April"))
					{
						monthName="APR";
					}
					else if(monthName.equals("May"))
					{
						monthName="MAY";
					}
					else if(monthName.equals("June"))
					{
						monthName="JUN";
					}
					else if(monthName.equals("July"))
					{
						monthName="JUL";
					}
					else if(monthName.equals("August"))
					{
						monthName="AUG";
					}
					else if(monthName.equals("September"))
					{
						monthName="SEP";
					}
					else if(monthName.equals("October"))
					{
						monthName="OCT";
					}
					else if(monthName.equals("November"))
					{
						monthName="NOV";
					}
					else if(monthName.equals("December"))
					{
						monthName="DEC";
					}
		    		
		    		if (mapPOSGroupMonthWiseSales.containsKey(obj[2].toString()))
		              {
		    			    mapMonth = mapPOSGroupMonthWiseSales.get(obj[2].toString());
		    			    if(mapMonth.containsKey(monthName+"("+obj[6].toString()+")"))
		    			    {
		    			    	mapGroup = mapMonth.get(monthName+"("+obj[6].toString()+")");
		    			    	clsBillItemDtl objItemDtl;
		    			    	if(mapGroup.containsKey(obj[0].toString()))
				    			{
		    			    		objItemDtl = mapGroup.get(obj[0].toString());
		    			    		objItemDtl.setAmount(objItemDtl.getAmount()+Double.parseDouble(obj[4].toString()));
		    			    		objItemDtl.setSubTotal(objItemDtl.getSubTotal()+Double.parseDouble(obj[4].toString()));
			 	                    mapGroup.put(obj[0].toString(), objItemDtl);
			 	                    mapMonth.put(monthName+"("+obj[6].toString()+")", mapGroup);
			 	                    mapPOSGroupMonthWiseSales.put(obj[2].toString(), mapMonth);
				    			}
		    			    	else
		    			    	{
		    			    		objItemDtl = new clsBillItemDtl(monthName+"("+obj[6].toString()+")", obj[0].toString(),obj[1].toString(), 0, Double.parseDouble(obj[4].toString()), 0,obj[3].toString()+"#"+obj[2].toString(), Double.parseDouble(obj[4].toString()));
			 	                    mapGroup.put(obj[0].toString(), objItemDtl);
			 	                    mapMonth.put(monthName+"("+obj[6].toString()+")", mapGroup);
			 	                    mapPOSGroupMonthWiseSales.put(obj[2].toString(), mapMonth);
		    			    	}
		    			    	
		    			    }
		    			    else
		    			    {
		    			    	mapGroup = new LinkedHashMap<>();
		 	                    clsBillItemDtl objItemDtl = new clsBillItemDtl(monthName+"("+obj[6].toString()+")", obj[0].toString(),obj[1].toString(), 0, Double.parseDouble(obj[4].toString()), 0,obj[3].toString()+"#"+obj[2].toString(), Double.parseDouble(obj[4].toString()));
		 	                    mapGroup.put(obj[0].toString(), objItemDtl);
		 	                    mapMonth.put(monthName+"("+obj[6].toString()+")", mapGroup);
		 	                    mapPOSGroupMonthWiseSales.put(obj[2].toString(), mapMonth);
		    			    	
		    			    }
		              }
		              else
		              {
		            	  
		                    mapMonth = new LinkedHashMap<>();
		                    mapGroup = new LinkedHashMap<>();
		                    clsBillItemDtl objItemDtl = new clsBillItemDtl(monthName+"("+obj[6].toString()+")", obj[0].toString(),obj[1].toString(), 0, Double.parseDouble(obj[4].toString()), 0,obj[3].toString()+"#"+obj[2].toString(), Double.parseDouble(obj[4].toString()));
		                    mapGroup.put(obj[0].toString(), objItemDtl);
		                    mapMonth.put(monthName+"("+obj[6].toString()+")", mapGroup);
		                    mapPOSGroupMonthWiseSales.put(obj[2].toString(), mapMonth);
		              }
		    	}
		    }
		    
		   
		    
			 
			 
			 Query queryModQFile = webPOSSessionFactory.getCurrentSession().createSQLQuery(sbSqlModQFile.toString());
			 List listSqlModQFile = queryModQFile.list();
			 if(listSqlModQFile.size()>0)
			    {
			    	
			    	for(int i=0 ;i<listSqlModQFile.size();i++ )
			    	{
			    		Object[] obj = (Object[]) listSqlModQFile.get(i);
			    		String monthName=obj[5].toString();
			    		if(monthName.equals("January"))
						{
			    			 monthName="JAN";
						}
						else if(monthName.equals("February"))
						{
							monthName="FEB";
						}
						else if(monthName.equals("March"))
						{
							monthName="MAR";
						}
						else if(monthName.equals("April"))
						{
							monthName="APR";
						}
						else if(monthName.equals("May"))
						{
							monthName="MAY";
						}
						else if(monthName.equals("June"))
						{
							monthName="JUN";
						}
						else if(monthName.equals("July"))
						{
							monthName="JUL";
						}
						else if(monthName.equals("August"))
						{
							monthName="AUG";
						}
						else if(monthName.equals("September"))
						{
							monthName="SEP";
						}
						else if(monthName.equals("October"))
						{
							monthName="OCT";
						}
						else if(monthName.equals("November"))
						{
							monthName="NOV";
						}
						else if(monthName.equals("December"))
						{
							monthName="DEC";
						}
			    		
			    		if (mapPOSGroupMonthWiseSales.containsKey(obj[2].toString()))
			              {
			    			    mapMonth = mapPOSGroupMonthWiseSales.get(obj[2].toString());
			    			    if(mapMonth.containsKey(monthName+"("+obj[6].toString()+")"))
			    			    {
			    			    	mapGroup = mapMonth.get(monthName+"("+obj[6].toString()+")");
			    			    	clsBillItemDtl objItemDtl;
			    			    	if(mapGroup.containsKey(obj[0].toString()))
					    			{
			    			    		objItemDtl = mapGroup.get(obj[0].toString());
			    			    		objItemDtl.setAmount(objItemDtl.getAmount()+Double.parseDouble(obj[4].toString()));
			    			    		objItemDtl.setSubTotal(objItemDtl.getSubTotal()+Double.parseDouble(obj[4].toString()));
				 	                    mapGroup.put(obj[0].toString(), objItemDtl);
				 	                    mapMonth.put(monthName+"("+obj[6].toString()+")", mapGroup);
				 	                    mapPOSGroupMonthWiseSales.put(obj[2].toString(), mapMonth);
					    			}
			    			    	else
			    			    	{
			    			    		objItemDtl = new clsBillItemDtl(monthName+"("+obj[6].toString()+")", obj[0].toString(),obj[1].toString(), 0, Double.parseDouble(obj[4].toString()), 0,obj[3].toString()+"#"+obj[2].toString(), Double.parseDouble(obj[4].toString()));
				 	                    mapGroup.put(obj[0].toString(), objItemDtl);
				 	                    mapMonth.put(monthName+"("+obj[6].toString()+")", mapGroup);
				 	                    mapPOSGroupMonthWiseSales.put(obj[2].toString(), mapMonth);
			    			    	}
			    			    }
			    			    else
			    			    {
			    			    	mapGroup = new LinkedHashMap<>();
			 	                    clsBillItemDtl objItemDtl = new clsBillItemDtl(monthName+"("+obj[6].toString()+")", obj[0].toString(),obj[1].toString(), 0, Double.parseDouble(obj[4].toString()), 0,obj[3].toString()+"#"+obj[2].toString(), Double.parseDouble(obj[4].toString()));
			 	                    mapGroup.put(obj[0].toString(), objItemDtl);
			 	                    mapMonth.put(monthName+"("+obj[6].toString()+")", mapGroup);
			 	                    mapPOSGroupMonthWiseSales.put(obj[2].toString(), mapMonth);
			    			    }
			              }
			              else
			              {
			            	  
			                    mapMonth = new LinkedHashMap<>();
			                    mapGroup = new LinkedHashMap<>();
			                    clsBillItemDtl objItemDtl = new clsBillItemDtl(monthName+"("+obj[6].toString()+")", obj[0].toString(),obj[1].toString(), 0, Double.parseDouble(obj[4].toString()), 0,obj[3].toString()+"#"+obj[2].toString(), Double.parseDouble(obj[4].toString()));
			                    mapGroup.put(obj[0].toString(), objItemDtl);
			                    mapMonth.put(monthName+"("+obj[6].toString()+")", mapGroup);
			                    mapPOSGroupMonthWiseSales.put(obj[2].toString(), mapMonth);
			              }
			    	}
			    }
			 
			 
			 
			  Query queryLiveFile = webPOSSessionFactory.getCurrentSession().createSQLQuery(sbSqlLive.toString());
			   List listSqlLiveFile = queryLiveFile.list();
			    if(listSqlLiveFile.size()>0)
			    {
			    	
			    	for(int i=0 ;i<listSqlLiveFile.size();i++ )
			    	{
			    		Object[] obj = (Object[]) listSqlLiveFile.get(i);
			    		String monthName=obj[5].toString();
			    		if(monthName.equals("January"))
						{
			    			 monthName="JAN";
						}
						else if(monthName.equals("February"))
						{
							monthName="FEB";
						}
						else if(monthName.equals("March"))
						{
							monthName="MAR";
						}
						else if(monthName.equals("April"))
						{
							monthName="APR";
						}
						else if(monthName.equals("May"))
						{
							monthName="MAY";
						}
						else if(monthName.equals("June"))
						{
							monthName="JUN";
						}
						else if(monthName.equals("July"))
						{
							monthName="JUL";
						}
						else if(monthName.equals("August"))
						{
							monthName="AUG";
						}
						else if(monthName.equals("September"))
						{
							monthName="SEP";
						}
						else if(monthName.equals("October"))
						{
							monthName="OCT";
						}
						else if(monthName.equals("November"))
						{
							monthName="NOV";
						}
						else if(monthName.equals("December"))
						{
							monthName="DEC";
						}
			    		
			    		
			    		
		                
			    		if (mapPOSGroupMonthWiseSales.containsKey(obj[2].toString()))
			              {
			    			    mapMonth = mapPOSGroupMonthWiseSales.get(obj[2].toString());
			    			    if(mapMonth.containsKey(monthName+"("+obj[6].toString()+")"))
			    			    {
			    			    	mapGroup = mapMonth.get(monthName+"("+obj[6].toString()+")");
			    			    	clsBillItemDtl objItemDtl;
			    			    	if(mapGroup.containsKey(obj[0].toString()))
					    			{
			    			    		objItemDtl = mapGroup.get(obj[0].toString());
			    			    		objItemDtl.setAmount(objItemDtl.getAmount()+Double.parseDouble(obj[4].toString()));
			    			    		objItemDtl.setSubTotal(objItemDtl.getSubTotal()+Double.parseDouble(obj[4].toString()));
				 	                    mapGroup.put(obj[0].toString(), objItemDtl);
				 	                    mapMonth.put(monthName+"("+obj[6].toString()+")", mapGroup);
				 	                    mapPOSGroupMonthWiseSales.put(obj[2].toString(), mapMonth);
					    			}
			    			    	else
			    			    	{
			    			    		objItemDtl = new clsBillItemDtl(monthName+"("+obj[6].toString()+")", obj[0].toString(),obj[1].toString(), 0, Double.parseDouble(obj[4].toString()), 0,obj[3].toString()+"#"+obj[2].toString(), Double.parseDouble(obj[4].toString()));
				 	                    mapGroup.put(obj[0].toString(), objItemDtl);
				 	                    mapMonth.put(monthName+"("+obj[6].toString()+")", mapGroup);
				 	                    mapPOSGroupMonthWiseSales.put(obj[2].toString(), mapMonth);
			    			    	}
			    			    }
			    			    else
			    			    {
			    			    	mapGroup = new LinkedHashMap<>();
			 	                    clsBillItemDtl objItemDtl = new clsBillItemDtl(monthName+"("+obj[6].toString()+")", obj[0].toString(),obj[1].toString(), 0, Double.parseDouble(obj[4].toString()), 0,obj[3].toString()+"#"+obj[2].toString(), Double.parseDouble(obj[4].toString()));
			 	                    mapGroup.put(obj[0].toString(), objItemDtl);
			 	                    mapMonth.put(monthName+"("+obj[6].toString()+")", mapGroup);
			 	                    mapPOSGroupMonthWiseSales.put(obj[2].toString(), mapMonth);
			    			    	
			    			    }
			              }
			              else
			              {
			            	  
			                    mapMonth = new LinkedHashMap<>();
			                    mapGroup = new LinkedHashMap<>();
			                    clsBillItemDtl objItemDtl = new clsBillItemDtl(monthName+"("+obj[6].toString()+")", obj[0].toString(),obj[1].toString(), 0, Double.parseDouble(obj[4].toString()), 0,obj[3].toString()+"#"+obj[2].toString(), Double.parseDouble(obj[4].toString()));
			                    mapGroup.put(obj[0].toString(), objItemDtl);
			                    mapMonth.put(monthName+"("+obj[6].toString()+")", mapGroup);
			                    mapPOSGroupMonthWiseSales.put(obj[2].toString(), mapMonth);
			              }
			    	}
			    }
			    
			    
			    
			    Query queryModLiveFile = webPOSSessionFactory.getCurrentSession().createSQLQuery(sbSqlModLive.toString());
				 List listSqlModLiveFile = queryModLiveFile.list();
				 if(listSqlModLiveFile.size()>0)
				    {
				    	
				    	for(int i=0 ;i<listSqlModLiveFile.size();i++ )
				    	{
				    		Object[] obj = (Object[]) listSqlModLiveFile.get(i);
				    		String monthName=obj[5].toString();
				    		if(monthName.equals("January"))
							{
				    			 monthName="JAN";
							}
							else if(monthName.equals("February"))
							{
								monthName="FEB";
							}
							else if(monthName.equals("March"))
							{
								monthName="MAR";
							}
							else if(monthName.equals("April"))
							{
								monthName="APR";
							}
							else if(monthName.equals("May"))
							{
								monthName="MAY";
							}
							else if(monthName.equals("June"))
							{
								monthName="JUN";
							}
							else if(monthName.equals("July"))
							{
								monthName="JUL";
							}
							else if(monthName.equals("August"))
							{
								monthName="AUG";
							}
							else if(monthName.equals("September"))
							{
								monthName="SEP";
							}
							else if(monthName.equals("October"))
							{
								monthName="OCT";
							}
							else if(monthName.equals("November"))
							{
								monthName="NOV";
							}
							else if(monthName.equals("December"))
							{
								monthName="DEC";
							}
				    		
				    		if (mapPOSGroupMonthWiseSales.containsKey(obj[2].toString()))
				              {
				    			    mapMonth = mapPOSGroupMonthWiseSales.get(obj[2].toString());
				    			    if(mapMonth.containsKey(monthName+"("+obj[6].toString()+")"))
				    			    {
				    			    	mapGroup = mapMonth.get(monthName+"("+obj[6].toString()+")");
				    			    	clsBillItemDtl objItemDtl;
				    			    	if(mapGroup.containsKey(obj[0].toString()))
						    			{
				    			    		objItemDtl = mapGroup.get(obj[0].toString());
				    			    		objItemDtl.setAmount(objItemDtl.getAmount()+Double.parseDouble(obj[4].toString()));
				    			    		objItemDtl.setSubTotal(objItemDtl.getSubTotal()+Double.parseDouble(obj[4].toString()));
					 	                    mapGroup.put(obj[0].toString(), objItemDtl);
					 	                    mapMonth.put(monthName+"("+obj[6].toString()+")", mapGroup);
					 	                    mapPOSGroupMonthWiseSales.put(obj[2].toString(), mapMonth);
						    			}
				    			    	else
				    			    	{
				    			    		objItemDtl = new clsBillItemDtl(monthName+"("+obj[6].toString()+")", obj[0].toString(),obj[1].toString(), 0, Double.parseDouble(obj[4].toString()), 0,obj[3].toString()+"#"+obj[2].toString(), Double.parseDouble(obj[4].toString()));
					 	                    mapGroup.put(obj[0].toString(), objItemDtl);
					 	                    mapMonth.put(monthName+"("+obj[6].toString()+")", mapGroup);
					 	                    mapPOSGroupMonthWiseSales.put(obj[2].toString(), mapMonth);
				    			    	}
				    			    }
				    			    else
				    			    {
				    			    	mapGroup = new LinkedHashMap<>();
				 	                    clsBillItemDtl objItemDtl = new clsBillItemDtl(monthName+"("+obj[6].toString()+")", obj[0].toString(),obj[1].toString(), 0, Double.parseDouble(obj[4].toString()), 0,obj[3].toString()+"#"+obj[2].toString(), Double.parseDouble(obj[4].toString()));
				 	                    mapGroup.put(obj[0].toString(), objItemDtl);
				 	                    mapMonth.put(monthName+"("+obj[6].toString()+")", mapGroup);
				 	                    mapPOSGroupMonthWiseSales.put(obj[2].toString(), mapMonth);
				    			    	
				    			    }
				              }
				              else
				              {
				            	  
				                    mapMonth = new LinkedHashMap<>();
				                    mapGroup = new LinkedHashMap<>();
				                    clsBillItemDtl objItemDtl = new clsBillItemDtl(monthName+"("+obj[6].toString()+")", obj[0].toString(),obj[1].toString(), 0, Double.parseDouble(obj[4].toString()), 0,obj[3].toString()+"#"+obj[2].toString(), Double.parseDouble(obj[4].toString()));
				                    mapGroup.put(obj[0].toString(), objItemDtl);
				                    mapMonth.put(monthName+"("+obj[6].toString()+")", mapGroup);
				                    mapPOSGroupMonthWiseSales.put(obj[2].toString(), mapMonth);
				              }
				    	}
				    }
   	   
   	       
    	 System.out.println("mapPOSGroupMonthWiseSales:"+mapPOSGroupMonthWiseSales);
    	 
    	 
    	 
    	 
    	 if(mapPOSGroupMonthWiseSales.size()>0)
			{
    		 
    		 Iterator<Map.Entry<String, Map<String, Map<String, clsBillItemDtl>>>> posIterator = mapPOSGroupMonthWiseSales.entrySet().iterator();
             while (posIterator.hasNext() )
             {
            	 Map.Entry<String, Map<String, Map<String, clsBillItemDtl>>> posEntry=posIterator.next();
            	 JSONObject objPOS= new JSONObject();
                 objPOS.put("POSCode",posEntry.getKey());
                 Map<String, Map<String, clsBillItemDtl>> mapMonthDtl = posEntry.getValue();
            	 
            	  Iterator<Map.Entry<String, Map<String, clsBillItemDtl>>> monthIterator = mapMonthDtl.entrySet().iterator();
            	  JSONArray arrMonthDtls = new JSONArray();
            	  while (monthIterator.hasNext())
                  {
                  	Map.Entry<String, Map<String, clsBillItemDtl>> monthEntry=monthIterator.next();
                  	   JSONObject objMonth= new JSONObject();
                  	   JSONArray arrGroupDtls = new JSONArray();
                  	   objMonth.put("MonthName",monthEntry.getKey());
                  	    Map<String, clsBillItemDtl> mapGroupDtl = monthEntry.getValue();
                  	    Iterator<Map.Entry<String, clsBillItemDtl>> groupIterator = mapGroupDtl.entrySet().iterator();
	                  	 while (groupIterator.hasNext())
	                     {
	                  		Map.Entry<String,clsBillItemDtl> groupEntry=groupIterator.next();
		                    clsBillItemDtl objBillItemDtl = groupEntry.getValue();
		                    JSONObject jObjGroup=new JSONObject();
		                    jObjGroup.put("GroupCode", objBillItemDtl.getItemCode());
		                    jObjGroup.put("GroupName", objBillItemDtl.getItemName());
		                    jObjGroup.put("POSName", objBillItemDtl.getPosName());
		                    jObjGroup.put("TotalSaleAmt",objBillItemDtl.getAmount());
		                    arrGroupDtls.put(jObjGroup);
	                     }
	                  	objMonth.put("GroupDtls", arrGroupDtls);
	                  	arrMonthDtls.put(objMonth);
	                  	
		            }
            	   objPOS.put("MonthDtls",arrMonthDtls);
                  jArr.put(objPOS);
             }
		}
		 
		
      JSONObject jObjTotal =new JSONObject();
		    
      jObjTotal.put("total", total);
      jOBjRet.put("jArr", jArr);
      jOBjRet.put("jObjTotal", jObjTotal);
    	 
   	 }
    
     else if(reportType.equals("POSOperationWiseMonthwise"))
   	 {
    	
    	 Map<String, Map<String, Map<String, Double>>> mapPOSGroupMonthWiseSales= new LinkedHashMap<>(); 
    	 Map<String, Map<String, Double>> mapMonth;
    	 Map<String, Double> mapOperation;
    	 
    	     
  	   
   	     sbSqlQFile.append("select e.strGroupName,SUM(b.dblAmount)-sum(b.dblDiscountAmt),e.strGroupCode,a.strOperationType,"
   	     		+ " f.strPosCode,f.strPosName,MONTHNAME(a.dteBillDate) AS monthName,YEAR(a.dteBillDate)  "
   	     		+ " from tblqbillhd a,tblqbilldtl b,tblitemmaster c,tblsubgrouphd d,tblgrouphd e,tblposmaster f  "
   	     		+ " where a.strBillNo=b.strBillNo and b.strItemCode=c.strItemCode  "
   	     		+ " and c.strSubGroupCode=d.strSubGroupCode and d.strGroupCode=e.strGroupCode "
   	     		+ " and a.strClientCode=b.strClientCode  and a.strPOSCode=f.strPosCode"
   	     		+ " and date(a.dteBillDate) between '"+fromDate+"' and '"+toDate+"'  "
   	     		+ " group by a.strOperationType,e.strGroupCode,a.strPOSCode,month(a.dteBillDate)"
   	     		+ " order by a.strOperationType,YEAR(a.dteBillDate) ASC,month(a.dteBillDate) ASC     ");
   	      
   	      
   	    
   	   sbSqlModQFile.append(" select e.strGroupName,SUM(b.dblAmount)-sum(b.dblDiscAmt),e.strGroupCode,a.strOperationType,"
   	   		+ " f.strPosCode,f.strPosName,MONTHNAME(a.dteBillDate) AS monthName,YEAR(a.dteBillDate)  "
   	   		+ " from tblqbillhd a,tblqbillmodifierdtl b,tblitemmaster c,tblsubgrouphd d,tblgrouphd e,tblposmaster f   "
   	   		+ " where a.strBillNo=b.strBillNo and left(b.strItemCode,7)=c.strItemCode  "
   	   		+ " and c.strSubGroupCode=d.strSubGroupCode and d.strGroupCode=e.strGroupCode "
   	   		+ " and a.strClientCode=b.strClientCode  and a.strPOSCode=f.strPosCode"
   	   		+ " and date(a.dteBillDate) between '"+fromDate+"' and '"+toDate+"'  "
   	   		+ " group by a.strOperationType,e.strGroupCode, a.strPOSCode,month(a.dteBillDate)"
   	   		+ " order by a.strOperationType,YEAR(a.dteBillDate) ASC,month(a.dteBillDate) ASC     ");
  	        
   	        
   	   
   	   
   	   Query queryQFile = webPOSSessionFactory.getCurrentSession().createSQLQuery(sbSqlQFile.toString());
	   List listSqlQFile = queryQFile.list();
	    if(listSqlQFile.size()>0)
	    {
	    	
	    	for(int i=0 ;i<listSqlQFile.size();i++ )
	    	{
	    		Object[] obj = (Object[]) listSqlQFile.get(i);
	    		String monthName=obj[6].toString();
	    		if(monthName.equals("January"))
				{
	    			 monthName="JAN";
				}
				else if(monthName.equals("February"))
				{
					monthName="FEB";
				}
				else if(monthName.equals("March"))
				{
					monthName="MAR";
				}
				else if(monthName.equals("April"))
				{
					monthName="APR";
				}
				else if(monthName.equals("May"))
				{
					monthName="MAY";
				}
				else if(monthName.equals("June"))
				{
					monthName="JUN";
				}
				else if(monthName.equals("July"))
				{
					monthName="JUL";
				}
				else if(monthName.equals("August"))
				{
					monthName="AUG";
				}
				else if(monthName.equals("September"))
				{
					monthName="SEP";
				}
				else if(monthName.equals("October"))
				{
					monthName="OCT";
				}
				else if(monthName.equals("November"))
				{
					monthName="NOV";
				}
				else if(monthName.equals("December"))
				{
					monthName="DEC";
				}
	    		
	    		
	    	
                
	    		if (mapPOSGroupMonthWiseSales.containsKey(obj[5].toString()))
	              {
	    			    mapMonth = mapPOSGroupMonthWiseSales.get(obj[5].toString());
	    			    if(mapMonth.containsKey(monthName+"("+obj[7].toString()+")"))
	    			    {
	    			    	mapOperation = mapMonth.get(monthName+"("+obj[7].toString()+")");
	    			    	if(mapOperation.containsKey(obj[3].toString()))
	    			    	{
	    			    		mapOperation.put(obj[3].toString(), mapOperation.get(obj[3].toString()) + Double.parseDouble(obj[1].toString()));
		    			    	mapMonth.put(monthName+"("+obj[7].toString()+")", mapOperation);
		 	                    mapPOSGroupMonthWiseSales.put(obj[5].toString(), mapMonth);
	    			    	}
	    			    	else
	    			    	{
	    			    		mapOperation = new LinkedHashMap<>();
		    			    	mapOperation.put(obj[3].toString(), Double.parseDouble(obj[1].toString()));
			                    mapMonth.put(monthName+"("+obj[7].toString()+")", mapOperation);
			                    mapPOSGroupMonthWiseSales.put(obj[5].toString(), mapMonth);
	    			    		
	    			    	}
	    			    	
	    			    }
	    			    else
	    			    {
	    			    	mapOperation = new LinkedHashMap<>();
	    			    	mapOperation.put(obj[3].toString(), Double.parseDouble(obj[1].toString()));
		                    mapMonth.put(monthName+"("+obj[7].toString()+")", mapOperation);
		                    mapPOSGroupMonthWiseSales.put(obj[5].toString(), mapMonth);
	    			    	
	    			    }
	              }
	              else
	              {
	            	    mapMonth = new LinkedHashMap<>();
	                    mapOperation = new LinkedHashMap<>();
	                    mapOperation.put(obj[3].toString(), Double.parseDouble(obj[1].toString()));
	                    mapMonth.put(monthName+"("+obj[7].toString()+")", mapOperation);
	                    mapPOSGroupMonthWiseSales.put(obj[5].toString(), mapMonth);
	              }
	    	}
	    }
	    
	    
	       Query queryModQFile = webPOSSessionFactory.getCurrentSession().createSQLQuery(sbSqlModQFile.toString());
		   List listSqlModQFile = queryModQFile.list();
		    if(listSqlModQFile.size()>0)
		    {
		    	
		    	for(int i=0 ;i<listSqlModQFile.size();i++ )
		    	{
		    		Object[] obj = (Object[]) listSqlModQFile.get(i);
		    		String monthName=obj[6].toString();
		    		if(monthName.equals("January"))
					{
		    			 monthName="JAN";
					}
					else if(monthName.equals("February"))
					{
						monthName="FEB";
					}
					else if(monthName.equals("March"))
					{
						monthName="MAR";
					}
					else if(monthName.equals("April"))
					{
						monthName="APR";
					}
					else if(monthName.equals("May"))
					{
						monthName="MAY";
					}
					else if(monthName.equals("June"))
					{
						monthName="JUN";
					}
					else if(monthName.equals("July"))
					{
						monthName="JUL";
					}
					else if(monthName.equals("August"))
					{
						monthName="AUG";
					}
					else if(monthName.equals("September"))
					{
						monthName="SEP";
					}
					else if(monthName.equals("October"))
					{
						monthName="OCT";
					}
					else if(monthName.equals("November"))
					{
						monthName="NOV";
					}
					else if(monthName.equals("December"))
					{
						monthName="DEC";
					}
		    		
		    		
		    	
		    		
		    		
	                
		    		if (mapPOSGroupMonthWiseSales.containsKey(obj[5].toString()))
		              {
		    			  mapMonth = mapPOSGroupMonthWiseSales.get(obj[5].toString());
		    			    if(mapMonth.containsKey(monthName+"("+obj[7].toString()+")"))
		    			    {
		    			    	mapOperation = mapMonth.get(monthName+"("+obj[7].toString()+")");
		    			    	if(mapOperation.containsKey(obj[3].toString()))
		    			    	{
		    			    		mapOperation.put(obj[3].toString(), mapOperation.get(obj[3].toString()) + Double.parseDouble(obj[1].toString()));
			    			    	mapMonth.put(monthName+"("+obj[7].toString()+")", mapOperation);
			 	                    mapPOSGroupMonthWiseSales.put(obj[5].toString(), mapMonth);
		    			    	}
		    			    	else
		    			    	{
		    			    		mapOperation = new LinkedHashMap<>();
			    			    	mapOperation.put(obj[3].toString(), Double.parseDouble(obj[1].toString()));
				                    mapMonth.put(monthName+"("+obj[7].toString()+")", mapOperation);
				                    mapPOSGroupMonthWiseSales.put(obj[5].toString(), mapMonth);
		    			    		
		    			    	}
		    			    	
		    			    }
		    			    else
		    			    {
		    			    	mapOperation = new LinkedHashMap<>();
		    			    	mapOperation.put(obj[3].toString(), Double.parseDouble(obj[1].toString()));
			                    mapMonth.put(monthName+"("+obj[7].toString()+")", mapOperation);
			                    mapPOSGroupMonthWiseSales.put(obj[5].toString(), mapMonth);
		    			    	
		    			    }
		              }
		              else
		              {
		            	  
		                    mapMonth = new LinkedHashMap<>();
		                    mapOperation = new LinkedHashMap<>();
		                    mapOperation.put(obj[3].toString(), Double.parseDouble(obj[1].toString()));
		                    mapMonth.put(monthName+"("+obj[7].toString()+")", mapOperation);
		                    mapPOSGroupMonthWiseSales.put(obj[5].toString(), mapMonth);
		              }
		    	}
		    	
		    }
   	   
	    
	    
	     
   	   
   	    System.out.println("mapPOSGroupMonthWiseSales:"+mapPOSGroupMonthWiseSales);
    	 
    	
      JSONObject jObjTotal =new JSONObject();
		    
      jObjTotal.put("total", total);
      jOBjRet.put("jArr", jArr);
      jOBjRet.put("jObjTotal", jObjTotal);
    	 
   	 }	
    	
    	
	 }
	        
     catch(Exception ex)
     {
    	 ex.printStackTrace();
     }
     	    
    return 	jOBjRet;
	
}



	



















































			public JSONObject funStockFlashReportDtl(String fromDate, String toDate,String strPOSCode,String type,String reportType,String groupName,String balStockSign,String showZeroBalStk) 
			{
				List listRet = new ArrayList();
				StringBuilder sbSql = new StringBuilder();
				JSONArray jArr = new JSONArray();
				JSONObject jObjTatol = new JSONObject();
				JSONObject jOBjRet = new JSONObject();
				double sumOpeningStock = 0.00, sumStockIn = 0.00, sumStockOut = 0.00,sumSaleAmt = 0.00,sumBalAmt=0.00,openProductionQty=0.00,sumReorderQty=0.00;
			
				sbSql.setLength(0);
			
				try 
				{
			 
					if(reportType.equals("Stock"))
					{
						sbSql.append(" select strGroupName,strSubgroupName,strItemName,strPOSCode"
			                    + " ,intOpening,intIn,intOut,intSale,intBalance "
			                    + " from tblitemcurrentstk "
			                    + " where strGroupName=if('All'='" + groupName.trim() + "'"
			                    + ",strGroupName,'" + groupName.trim() + "') ");
					
						if (balStockSign.equalsIgnoreCase("Positive"))
				        {
				            if (showZeroBalStk.equals("Yes"))
				            {
				            	sbSql.append(" and intBalance >= 0 ");
				            }
				            else
				            {
				            	sbSql.append(" and intBalance > 0 ");
				            }
				        }
				        else if (balStockSign.equalsIgnoreCase("Negative"))
				        {
				            if (showZeroBalStk.equals("Yes"))
				            {
				            	sbSql.append(" and intBalance <= 0 ");
				            }
				            else
				            {
				            	sbSql.append(" and intBalance < 0 ");
				            }
				        }
						sbSql.append(" order by strItemName");
				        System.out.println(sbSql);
				
				        Query querySql = webPOSSessionFactory.getCurrentSession().createSQLQuery( sbSql.toString());
				  	    List listSql= querySql.list();
						if (listSql.size() > 0) 
						{
							for (int i = 0; i < listSql.size(); i++) 
							{
								Object[] obj = (Object[]) listSql.get(i);
								JSONObject jObj = new JSONObject();
								
								jObj.put("groupName", obj[0].toString());//Group
								jObj.put("subGroupName", obj[1].toString());//Subgroup
								jObj.put("itemName", obj[2].toString());//Item Name
								jObj.put("Opening Stock", obj[4].toString());//Op Stock
								jObj.put("Stock In", obj[5].toString());//Stk In
								jObj.put("Stock Out", obj[6].toString());//Stk Out
								jObj.put("Sale", obj[7].toString());//Sale
								jObj.put("Balance", obj[8].toString());//Balance
								
								sumOpeningStock =sumOpeningStock+ Double.parseDouble(obj[4].toString());
								sumStockIn = sumStockIn+ Double.parseDouble(obj[5].toString()); 
								sumStockOut = sumStockOut+ Double.parseDouble(obj[6].toString());
								sumSaleAmt = sumSaleAmt+ Double.parseDouble(obj[7].toString());
								sumBalAmt=sumBalAmt+ Double.parseDouble(obj[8].toString());
								
				                jArr.put(jObj);
							}
							// jOBjRet.put("jArr", jArr);
							
							
							jObjTatol.put("sumOpeningStock", sumOpeningStock);
							jObjTatol.put("sumStockIn", sumStockIn);
							jObjTatol.put("sumStockOut", sumStockOut);
							jObjTatol.put("sumSaleAmt", sumSaleAmt);
							jObjTatol.put("sumBalAmt", sumBalAmt);
							
					   }
					}
					else
					{
						sbSql.append(" select a.strGroupName,a.strSubgroupName,a.strItemName,a.strPOSCode,a.intOpening"
			                    + " ,a.intIn,a.intOut,a.intSale,a.intBalance,b.dblMinLevel,b.dblMaxLevel"
			                    + " ,b.dblMaxLevel-a.intBalance-ifnull(c.dblOrderQty,0.00) as ReorderQty"
			                    + " ,a.strItemCode,ifnull(c.dblOrderQty,0.00) as OpenProductionQty "
			                    + " from tblitemcurrentstk a "
			                    + " left outer join tblitemmaster b on a.strItemCode=b.strItemCode "
			                    + " left outer join tblproductiondtl c on a.strItemCode=c.strItemCode "
			                    + " left outer join tblproductionhd d on c.strProductionCode=d.strProductionCode and d.strClose='N' "
			                    + " where a.strGroupName=if('All'='" + groupName + "'"
			                    + " ,a.strGroupName,'" + groupName + "') and a.intBalance<=b.dblMinLevel "
			                    + " and b.dblMaxLevel-a.intBalance-ifnull(c.dblOrderQty,0.00) > 0 "
			                    + " and (b.dblMaxLevel > 0 or b.dblMinLevel>0) "
			                    + " group by a.strGroupName,a.strSubgroupName,a.strItemCode "
			                    + " order by strItemName");
					
				        System.out.println(sbSql);
				
				        Query querySql = webPOSSessionFactory.getCurrentSession().createSQLQuery( sbSql.toString());
				  	    List listSql= querySql.list();
						if (listSql.size() > 0) 
						{
							for (int i = 0; i < listSql.size(); i++) 
							{
								Object[] obj = (Object[]) listSql.get(i);
								JSONObject jObj = new JSONObject();
								
								jObj.put("groupName", obj[0].toString());//Group
								jObj.put("subGroupName", obj[1].toString());//Subgroup
								jObj.put("itemName", obj[2].toString());//Item Name
								jObj.put("Opening Stock", obj[4].toString());//Op Stock
								jObj.put("Stock In", obj[5].toString());//Stk In
								jObj.put("Stock Out", obj[6].toString());//Stk Out
								jObj.put("Sale", obj[7].toString());//Sale
								jObj.put("Balance", obj[8].toString());//Balance
								jObj.put("Order Qty", obj[13].toString());//Order Qty
								jObj.put("Min Level", obj[9].toString());//Min Level
								jObj.put("Max Level", obj[10].toString());//Max Level
								jObj.put("Reorder Qty", obj[11].toString());//Reorder Qty
								jObj.put("itemCode", obj[12].toString());//Reorder Qty
								
								
								sumOpeningStock =sumOpeningStock+ Double.parseDouble(obj[4].toString());
								sumStockIn = sumStockIn+ Double.parseDouble(obj[5].toString()); 
								sumStockOut = sumStockOut+ Double.parseDouble(obj[6].toString());
								sumSaleAmt = sumSaleAmt+ Double.parseDouble(obj[7].toString());
								sumBalAmt=sumBalAmt+ Double.parseDouble(obj[8].toString());
								sumReorderQty += Double.parseDouble(obj[11].toString());
			                    openProductionQty += Double.parseDouble(obj[13].toString());
								
				                jArr.put(jObj);
							}
							// jOBjRet.put("jArr", jArr);
							
							
							jObjTatol.put("sumOpeningStock", sumOpeningStock);
							jObjTatol.put("sumStockIn", sumStockIn);
							jObjTatol.put("sumStockOut", sumStockOut);
							jObjTatol.put("sumSaleAmt", sumSaleAmt);
							jObjTatol.put("sumBalAmt", sumBalAmt);
							jObjTatol.put("sumReorderQty", sumReorderQty);
							jObjTatol.put("openProductionQty", openProductionQty);
							
					   }
					}
					
					
					jOBjRet.put("jObjTatol", jObjTatol);
					jOBjRet.put("jArr", jArr);
				} catch (Exception ex) {
					ex.printStackTrace();
				}
			
				return jOBjRet;
			
			}	
				
				
				
			
			public String funGenerateProductionEntry(JSONObject jObj)
			{
				
				StringBuilder sbSql = new StringBuilder();
				String userCode="",clientCode="",posCode="",result="";
				try 
				{
					sbSql.setLength(0);
					posCode=jObj.getString("posCode");	
					userCode=jObj.getString("userCode");
					clientCode=jObj.getString("clientCode");
					JSONArray mJsonArrayItems=jObj.getJSONArray("stockItemList");
					
					long lastNo = funGenerateProductionCode();
			        String productionCode = "PD" + String.format("%07d", lastNo);
			        String remarks = "Production Entry";
			        String currentDateTime="";
			        clsUtilityFunctions obj=new clsUtilityFunctions();
			        currentDateTime=obj.funGetCurrentDate() +" "+obj.funGetCurrentTime();
					
					sbSql.append(" insert into tblproductionhd (strProductionCode,strPOSCode "
			                + " ,dteProductionDate,strClose,strRemarks,strUserCreated,strUserEdited,dteDateCreated,dteDateEdited "
			                + " ,strClientCode,strDataPostFlag) values "
			                + " ('" + productionCode + "','" + posCode + "','" + currentDateTime + "' "
			                + " ,'N','" + remarks + "','" + userCode + "','" + userCode + "','" + currentDateTime + "' "
			                + " ,'" + currentDateTime + "','" +clientCode + "','N') ");
			
					
					
			   		
			   		String sql_ProductionDtl = "insert into tblproductiondtl "
			                + "(strProductionCode,strItemCode,strItemName,dblStock,dblOrderQty"
			                + ",strClientCode,strDataPostFlag) values ";
			        for (int cnt = 0; cnt < mJsonArrayItems.length(); cnt++)
			        {
			        	JSONObject mJsonObject = (JSONObject) mJsonArrayItems.get(cnt);
			        	sql_ProductionDtl += "('" + productionCode + "','"+mJsonObject.getString("ItemCode")+"' "
			                    + ",'" +mJsonObject.getString("ItemName")+"', '" +mJsonObject.getString("Stock")+"',"
			                    + " '" +mJsonObject.getString("OrderQty")+"','" +clientCode+"','N' ),";
			        }
			        
			        String sql="delete from tblproductiondtl where strProductionCode='"+productionCode+"' and strClientCode='"+clientCode+"' ";
			        Query query = webPOSSessionFactory.getCurrentSession().createSQLQuery(sql);
					query.executeUpdate();
			
			        StringBuilder sb = new StringBuilder(sql_ProductionDtl);
			        int index = sb.lastIndexOf(",");
			        sql_ProductionDtl = sb.delete(index, sb.length()).toString();
			        query = webPOSSessionFactory.getCurrentSession().createSQLQuery(sql_ProductionDtl);
					query.executeUpdate(); 
					
					Query  query1 = webPOSSessionFactory.getCurrentSession().createSQLQuery(sbSql.toString());
			   		query1.executeUpdate();
			   		result=productionCode;
			   		
				
				
			    }catch(Exception e)
			    {
			        e.printStackTrace();
			        result="error"; 
			    }
				return result; 
			
			}	
			
			
			
			
			private long funGenerateProductionCode() throws Exception
			{
			    long lastNo = 0;
			    StringBuilder sbSql = new StringBuilder();
			    sbSql.setLength(0);
			    sbSql.append("select dblLastNo from tblinternal where strTransactionType='Production' ");
			    
			    Query querySql = webPOSSessionFactory.getCurrentSession().createSQLQuery( sbSql.toString());
				List listSql= querySql.list();
				if (listSql != null)
				 {
					  lastNo =Integer.valueOf(listSql.get(0).toString());
				      lastNo++;
			     }	
				
				sbSql.setLength(0);
			    sbSql.append(" update tblinternal set dblLastNo=" + lastNo + " where strTransactionType='Production' ");
			    Query  query = webPOSSessionFactory.getCurrentSession().createSQLQuery(sbSql.toString());
				query.executeUpdate();
					
			   return lastNo;
			}
				
				
				
			@SuppressWarnings("finally")
			public JSONObject funGetReasonForStockInOutFlash(String clientCode)
			{
				String itemStock="";
				List list =null;
				JSONObject jObjReasonData=new JSONObject();
				try
				{
					String sql = " select strReasonCode,strReasonName from tblreasonmaster where strStkIn='Y' or strStkOut='Y' and strClientCode='"+clientCode+"' ";
					 Query query = webPOSSessionFactory.getCurrentSession().createSQLQuery(sql);
				    
				    list = query.list();
					JSONArray jArrReasonData=new JSONArray();
					 if (list!=null)
						{
							for(int i=0; i<list.size(); i++)
							{
								Object obj=list.get(i);
							    JSONObject objReason=new JSONObject();
							    objReason.put("ReasonCode",Array.get(obj, 0));
							    objReason.put("ReasonName",Array.get(obj, 1));
							    jArrReasonData.put(objReason);
							}
							jObjReasonData.put("ReasonList", jArrReasonData);
					     }
					 
			           
					}catch(Exception ex)
					{
						ex.printStackTrace();
						
					}
					finally
					{
						return jObjReasonData;
					}
			  }
			
			
			
			public JSONObject funStockInOutFlashReport(String fromDate, String toDate,String strPOSCode,String operationType,String operationTypeCode,String viewType,String searchData,String reasonCode) 
			{
				List listRet = new ArrayList();
				StringBuilder sbSql = new StringBuilder();
				JSONArray jArr = new JSONArray();
				JSONObject jObjTotal = new JSONObject();
				JSONObject jOBjRet = new JSONObject();
				 double dblAmount = 0.00, dblPurchaseRate = 0.00;
			     double sumPurchaseRate = 0.00, sumAmount = 0.00,sumQty=0.00;
				sbSql.setLength(0);
			
				try 
				{
					
					if (operationType.equals("Stock In"))
			        {
						
						if (viewType.equals("Item wise"))
				        {
							sbSql.append(" select c.strItemName,b.dblQuantity,b.dblPurchaseRate,b.dblAmount,a.strStkInCode,date(a.dteStkInDate),d.strPosName "
			                        + " from  tblstkinhd a,tblstkindtl b,tblitemmaster c,tblposmaster d "
			                        + " where a.strStkInCode=b.strStkInCode and c.strItemCode=b.strItemCode and a.strPOSCode=d.strPosCode "
			                        + " and date(a.dteStkInDate) BETWEEN '" + fromDate + "' AND '" + toDate + "' ");
			                if (!strPOSCode.equals("All"))
			                {
			                    sbSql.append("  and a.strPOSCode='" + strPOSCode + "'  ");
			                }
			                if (!operationTypeCode.isEmpty())
			                {
			                    sbSql.append(" and a.strStkInCode='" + operationTypeCode + "'");
			                }
			                if (!searchData.isEmpty())
			                {
			                    sbSql.append(" and b.strItemCode='" + searchData + "'");
			                }
			                if (!reasonCode.equals("All"))
			                {
			                    sbSql.append("  and a.strReasonCode='" + reasonCode + "'  ");
			                }
			                sbSql.append(" order by c.strItemName asc ");
				        }
						else if (viewType.equals("MenuHead wise"))
			            {
			               sbSql.append(" select e.strMenuName,sum(b.dblQuantity),b.dblPurchaseRate,sum(b.dblAmount),a.strStkInCode,date(a.dteStkInDate),f.strPosName,e.strMenuCode "
			                        + " from tblstkinhd a,tblstkindtl b,tblitemmaster c,tblmenuitempricingdtl d ,tblmenuhd e,tblposmaster f "
			                        + " where b.strItemCode=d.strItemCode and d.strMenuCode=e.strMenuCode "
			                        + " and a.strStkInCode=b.strStkInCode and c.strItemCode=b.strItemCode and a.strPOSCode=d.strPosCode "
			                        + " and a.strPOSCode=f.strPosCode "
			                        + " and date(a.dteStkInDate) BETWEEN '" + fromDate + "' AND '" + toDate + "' ");
			                if (!strPOSCode.equals("All"))
			                {
			                    sbSql.append(" and a.strPOSCode='" + strPOSCode + "'  ");
			                }
			                if (!operationTypeCode.isEmpty())
			                {
			                    sbSql.append(" and a.strStkInCode='" + operationTypeCode + "'");
			                }
			                if (!searchData.isEmpty())
			                {
			                    sbSql.append(" and e.strMenuCode='" + searchData + "'");
			                }
			                if (!reasonCode.equals("All"))
			                {
			                    sbSql.append("  and a.strReasonCode='" + reasonCode + "'  ");
			                }
			                sbSql.append(" group by e.strMenuName,date(a.dteStkInDate),a.strPOSCOde "
			                        + " order by e.strMenuName asc ");
			            }
			            else if (viewType.equals("SubGroup wise"))
			            {
			            	sbSql.append(" select d.strSubGroupName,sum(b.dblQuantity),b.dblPurchaseRate,sum(b.dblAmount),a.strStkInCode,date(a.dteStkInDate),e.strPosName,d.strSubGroupCode "
			                        + " from tblstkinhd a,tblstkindtl b,tblitemmaster c,tblsubgrouphd d,tblposmaster e  "
			                        + " where c.strSubGroupCode=d.strSubGroupCode "
			                        + " and a.strStkInCode=b.strStkInCode and c.strItemCode=b.strItemCode and a.strPOSCode=e.strPosCode "
			                        + " and date( a.dteStkInDate ) BETWEEN '" + fromDate + "' AND '" + toDate + "' ");
			                if (!strPOSCode.equals("All"))
			                {
			                    sbSql.append("  and a.strPOSCode='" + strPOSCode + "'  ");
			                }
			                if (!operationTypeCode.isEmpty())
			                {
			                    sbSql.append(" and a.strStkInCode='" +operationTypeCode+ "'");
			                }
			                if (!searchData.isEmpty())
			                {
			                    sbSql.append(" and c.strSubGroupCode='" + searchData + "'");
			                }
			                if (!reasonCode.equals("All"))
			                {
			                    sbSql.append("  and a.strReasonCode='" + reasonCode + "'  ");
			                }
			                sbSql.append(" group by d.strSubGroupName,date(a.dteStkInDate),a.strPOSCOde "
			                        + " order by d.strSubGroupName asc ");
			            }
			            else if (viewType.equals("Group wise"))
			            {
			            	sbSql.append(" select e.strGroupName,sum(b.dblQuantity),b.dblPurchaseRate,sum(b.dblAmount),a.strStkInCode,date(a.dteStkInDate),f.strPosName,e.strGroupCode "
			                        + " from tblstkinhd a,tblstkindtl b,tblitemmaster c,tblsubgrouphd d,tblgrouphd e,tblposmaster f "
			                        + " where c.strSubGroupCode=d.strSubGroupCode and d.strGroupCode=e.strGroupCode "
			                        + " and a.strStkInCode=b.strStkInCode and c.strItemCode=b.strItemCode and a.strPOSCode=f.strPosCode  "
			                        + " and date( a.dteStkInDate ) BETWEEN '" + fromDate + "' AND '" + toDate + "' ");
			                if (!strPOSCode.equals("All"))
			                {
			                    sbSql.append("  and a.strPOSCode='" + strPOSCode + "'  ");
			                }
			                if (!operationTypeCode.isEmpty())
			                {
			                    sbSql.append(" and a.strStkInCode='" + operationTypeCode + "'");
			                }
			                if (!searchData.isEmpty())
			                {
			                    sbSql.append(" and e.strGroupCode='" + searchData + "'");
			                }
			                if (!reasonCode.equals("All"))
			                {
			                    sbSql.append("  and a.strReasonCode='" + reasonCode + "'  ");
			                }
			                sbSql.append(" group by e.strGroupName,date(a.dteStkInDate),a.strPOSCOde "
			                        + " order by e.strGroupName asc ");
			            }
			        }
					else
					{
						if (viewType.equals("Item wise"))
				        {
							sbSql.append(" select c.strItemName,b.dblQuantity,b.dblPurchaseRate,b.dblAmount,a.strStkOutCode,date(a.dteStkOutDate),d.strPosName "
				                    + " from tblstkouthd a,tblstkoutdtl b,tblitemmaster c,tblposmaster d "
				                    + " where a.strStkOutCode=b.strStkOutCode and c.strItemCode=b.strItemCode and a.strPOSCode=d.strPosCode "
				                    + " and date( a.dteStkOutDate ) BETWEEN '" + fromDate + "' AND '" + toDate + "' ");
				            if (!strPOSCode.equals("All"))
				            {
				                sbSql.append("  and a.strPOSCode='" + strPOSCode + "'  ");
				            }
				            if (!operationTypeCode.isEmpty())
				            {
				                sbSql.append(" and a.strStkOutCode='" + operationTypeCode + "'");
				            }
				            if (!searchData.isEmpty())
				            {
				                sbSql.append(" and b.strItemCode='" + searchData + "'");
				            }
				            if (!reasonCode.equals("All"))
				            {
				                sbSql.append("  and a.strReasonCode='" + reasonCode + "'  ");
				            }
				            sbSql.append(" group by b.strItemCode,date( a.dteStkOutDate ),a.strPOSCOde "
				                    + " order by c.strItemName asc ");
				        }
						else if (viewType.equals("MenuHead wise"))
			            {
			                sbSql.append(" select e.strMenuName ,sum(b.dblQuantity),b.dblPurchaseRate,sum(b.dblAmount),a.strStkOutCode,date(a.dteStkOutDate),f.strPosName,e.strMenuCode "
			                        + " from tblstkouthd a,tblstkoutdtl b,tblitemmaster c,tblmenuitempricingdtl d ,tblmenuhd e,tblposmaster f "
			                        + " where b.strItemCode=d.strItemCode and d.strMenuCode=e.strMenuCode "
			                        + " and a.strStkOutCode=b.strStkOutCode and c.strItemCode=b.strItemCode and a.strPOSCode=d.strPosCode "
			                        + " and a.strPOSCode=f.strPosCode "
			                        + " and date( a.dteStkOutDate ) BETWEEN '" + fromDate + "' AND '" + toDate + "' ");
			                if (!strPOSCode.equals("All"))
			                {
			                    sbSql.append("  and a.strPOSCode='" + strPOSCode + "'  ");
			                }
			                if (!operationTypeCode.isEmpty())
			                {
			                    sbSql.append(" and a.strStkOutCode='" + operationTypeCode+ "'");
			                }
			                if (!searchData.isEmpty())
			                {
			                    sbSql.append(" and e.strMenuCode='" + searchData + "'");
			                }
			                if (!reasonCode.equals("All"))
			                {
			                    sbSql.append("  and a.strReasonCode='" + reasonCode + "'  ");
			                }
			                sbSql.append(" group by e.strMenuName,date(a.dteStkOutDate),a.strPOSCOde "
			                        + " order by e.strMenuName asc ");
			            }
			            else if (viewType.equals("SubGroup wise"))
			            {
			                sbSql.append(" select d.strSubGroupName ,sum(b.dblQuantity),b.dblPurchaseRate,sum(b.dblAmount),a.strStkOutCode,date(a.dteStkOutDate),e.strPosName,d.strSubGroupCode "
			                        + " from tblstkouthd a,tblstkoutdtl b,tblitemmaster c,tblsubgrouphd d,tblposmaster e "
			                        + " where c.strSubGroupCode=d.strSubGroupCode "
			                        + " and a.strStkOutCode=b.strStkOutCode and c.strItemCode=b.strItemCode and a.strPOSCode=e.strPosCode"
			                        + " and date( a.dteStkOutDate ) BETWEEN '" + fromDate + "' AND '" + toDate + "' ");
			                if (!strPOSCode.equals("All"))
			                {
			                    sbSql.append("  and a.strPOSCode='" + strPOSCode + "'  ");
			                }
			                if (!operationTypeCode.isEmpty())
			                {
			                    sbSql.append(" and a.strStkOutCode='" + operationTypeCode + "'");
			                }
			                if (!searchData.isEmpty())
			                {
			                    sbSql.append(" and d.strSubGroupCode='" + searchData + "'");
			                }
			                if (!reasonCode.equals("All"))
			                {
			                    sbSql.append("  and a.strReasonCode='" + reasonCode + "'  ");
			                }
			                sbSql.append(" group by d.strSubGroupName,date(a.dteStkOutDate),a.strPOSCOde "
			                        + " order by d.strSubGroupName asc ");
			            }
			            else if (viewType.equals("Group wise"))
			            {
			                sbSql.append(" select e.strGroupName,sum(b.dblQuantity),b.dblPurchaseRate,sum(b.dblAmount),a.strStkOutCode,date(a.dteStkOutDate),f.strPosName,e.strGroupCode "
			                        + " from tblstkouthd a,tblstkoutdtl b,tblitemmaster c,tblsubgrouphd d,tblgrouphd e,tblposmaster f "
			                        + " where c.strSubGroupCode=d.strSubGroupCode and d.strGroupCode=e.strGroupCode "
			                        + " and a.strStkOutCode=b.strStkOutCode and c.strItemCode=b.strItemCode and a.strPOSCode=f.strPosCode"
			                        + " and date( a.dteStkOutDate ) BETWEEN '" + fromDate + "' AND '" + toDate + "' ");
			                if (!strPOSCode.equals("All"))
			                {
			                    sbSql.append("  and a.strPOSCode='" + strPOSCode + "'  ");
			                }
			                if (!operationTypeCode.isEmpty())
			                {
			                    sbSql.append(" and a.strStkOutCode='" + operationTypeCode + "'");
			                }
			                if (!searchData.isEmpty())
			                {
			                    sbSql.append(" and e.strGroupCode='" + searchData + "'");
			                }
			                if (!reasonCode.equals("All"))
			                {
			                    sbSql.append("  and a.strReasonCode='" + reasonCode + "'  ");
			                }
			                sbSql.append(" group by e.strGroupName,date(a.dteStkOutDate),a.strPOSCOde "
			                        + " order by e.strGroupName asc ");
			            }
					}
					
				   System.out.println(sbSql);
				   
				   Query querySql = webPOSSessionFactory.getCurrentSession().createSQLQuery( sbSql.toString());
			 	    List listSql= querySql.list();
					if (listSql.size() > 0) 
					{
						for (int i = 0; i < listSql.size(); i++) 
						{
							Object[] obj = (Object[]) listSql.get(i);
							JSONObject jObj = new JSONObject();
							
							jObj.put("GroupName", obj[0].toString());//Group
							jObj.put("Qty", obj[1].toString());//qty
							jObj.put("Purchase Rate", obj[2].toString());//purchase rate
							jObj.put("Amount", obj[3].toString());//amount
							jObj.put("StockInOut Code", obj[4].toString());//StkInOutCode
							jObj.put("StockInOut Date", obj[5].toString());//StkInOutDate
							jObj.put("POSName", obj[6].toString());//POSName
							
							 dblPurchaseRate = Double.parseDouble(obj[2].toString());
					         dblAmount = Double.parseDouble(obj[3].toString());
					         sumQty = sumQty + Double.parseDouble(obj[1].toString());
					         sumPurchaseRate = sumPurchaseRate + dblPurchaseRate;
					         sumAmount = sumAmount + dblAmount;
							
			               jArr.put(jObj);
						}
						jObjTotal.put("sumPurchaseRate", sumPurchaseRate);
						jObjTotal.put("sumQty", sumQty);
						jObjTotal.put("sumAmount", sumAmount);
					}	
					
					jOBjRet.put("jObjTotal", jObjTotal);
					jOBjRet.put("jArr", jArr);
				
				}catch (Exception ex) 
				{
					ex.printStackTrace();
				}
			
				return jOBjRet;
			
			}

				
			
			public JSONObject funOperatorWiseReportDtl(String fromDate, String toDate,
					String strPOSCode, String strShiftNo, String strUserCode,
					String settlementCode) {
				List listRet = new ArrayList();
				StringBuilder sbSqlLive = new StringBuilder();
				StringBuilder sbSqlQFile = new StringBuilder();
				StringBuilder sbSqlFilters = new StringBuilder();
				StringBuilder sbSqlDisLive = new StringBuilder();
				StringBuilder sbSqlQDisFile = new StringBuilder();
				StringBuilder sbSqlDisFilters = new StringBuilder();
				JSONArray jArr = new JSONArray();
				JSONObject jOBjRet = new JSONObject();

				sbSqlLive.setLength(0);
				sbSqlQFile.setLength(0);
				sbSqlFilters.setLength(0);
				sbSqlDisLive.setLength(0);
				sbSqlQDisFile.setLength(0);
				sbSqlDisFilters.setLength(0);
				try {
					sbSqlLive
							.append(" SELECT a.strUserCode, a.strUserName, c.strPOSName,e.strSettelmentDesc "
				                    + " ,sum(d.dblSettlementAmt),'SANGUINE',c.strPosCode, d.strSettlementCode "
				                    + " FROM tbluserhd a "
				                    + " INNER JOIN tblbillhd b ON a.strUserCode = b.strUserCreated "
				                    + " inner join tblposmaster c on b.strPOSCode=c.strPOSCode "
				                    + " inner join tblbillsettlementdtl d on b.strBillNo=d.strBillNo "
				                    + " inner join tblsettelmenthd e on d.strSettlementCode=e.strSettelmentCode "
				                    + " WHERE date( b.dteBillDate ) BETWEEN '" + fromDate + "' AND '" + toDate + "' ");

					sbSqlQFile
							.append(" SELECT a.strUserCode, a.strUserName, c.strPOSName,e.strSettelmentDesc "
				                    + " ,sum(d.dblSettlementAmt),'SANGUINE',c.strPosCode, d.strSettlementCode "
				                    + " FROM tbluserhd a "
				                    + " INNER JOIN tblqbillhd b ON a.strUserCode = b.strUserCreated "
				                    + " inner join tblposmaster c on b.strPOSCode=c.strPOSCode "
				                    + " inner join tblqbillsettlementdtl d on b.strBillNo=d.strBillNo "
				                    + " inner join tblsettelmenthd e on d.strSettlementCode=e.strSettelmentCode "
				                    + " WHERE date( b.dteBillDate ) BETWEEN '" + fromDate + "' AND '" + toDate + "' ");

					if (!strPOSCode.equalsIgnoreCase("All") ) {
						sbSqlFilters.append(" AND b.strPOSCode = '" + strPOSCode
								+ "'");
					}if (!strUserCode.equalsIgnoreCase("All")) {
						sbSqlFilters.append("  and b.strUserCreated='" + strUserCode
								+ "'");
					}

					sbSqlFilters.append(" and b.intShiftCode = '" + strShiftNo + "' ");
					if (!settlementCode.equalsIgnoreCase("All")) {
						sbSqlFilters.append("  and d.strSettlementCode='"
								+ settlementCode + "'");
					}

					sbSqlFilters
							.append(" GROUP BY a.strUserCode, b.strPosCode, d.strSettlementCode");

					sbSqlLive.append(sbSqlFilters);
					sbSqlQFile.append(sbSqlFilters);

					sbSqlDisLive
							.append("SELECT a.strUserCode, a.strUserName, c.strPOSName"
				                    + " ,sum(b.dblDiscountAmt),'SANGUINE',c.strPosCode "
				                    + " FROM tbluserhd a "
				                    + " INNER JOIN tblbillhd b ON a.strUserCode = b.strUserCreated "
				                    + " inner join tblposmaster c on b.strPOSCode=c.strPOSCode "
				                    + " inner join tblbillsettlementdtl d on b.strBillNo=d.strBillNo "
				                    + " inner join tblsettelmenthd e on d.strSettlementCode=e.strSettelmentCode "
				                    + " WHERE date( b.dteBillDate ) BETWEEN '" + fromDate + "' AND '" + toDate + "' ");

					sbSqlQDisFile
							.append("  SELECT a.strUserCode, a.strUserName, c.strPOSName "
				                    + " ,sum(b.dblDiscountAmt),'SANGUINE',c.strPosCode "
				                    + " FROM tbluserhd a "
				                    + " INNER JOIN tblqbillhd b ON a.strUserCode = b.strUserCreated "
				                    + " inner join tblposmaster c on b.strPOSCode=c.strPOSCode "
				                    + " inner join tblbillsettlementdtl d on b.strBillNo=d.strBillNo "
				                    + " inner join tblsettelmenthd e on d.strSettlementCode=e.strSettelmentCode "
				                    + " WHERE date( b.dteBillDate ) BETWEEN '" + fromDate + "' AND '" + toDate + "' ");

					if (!strPOSCode.equalsIgnoreCase("All")) {
						sbSqlDisFilters.append(" AND b.strPOSCode = '" + strPOSCode + "'");
					} 
					if (!strUserCode.equalsIgnoreCase("All")) {
						sbSqlDisFilters.append("  and b.strUserCreated='" + strUserCode
								+ "'");
					}

					sbSqlDisFilters.append(" and b.intShiftCode = '" + strShiftNo
							+ "' ");

					if (!settlementCode.equalsIgnoreCase("All")) {
						sbSqlDisFilters.append("  and d.strSettlementCode='"
								+ settlementCode + "'");
					}
					sbSqlDisFilters
							.append(" GROUP BY a.strUserCode, b.strPosCode,d.strSettlementCode");

					sbSqlDisLive.append(sbSqlDisFilters);
					sbSqlQDisFile.append(sbSqlDisFilters);

				
					Map<String, Map<String, clsOperatorDtl>> hmOperatorWiseSales = new HashMap<String, Map<String, clsOperatorDtl>>();
					Map<String, clsOperatorDtl> hmSettlementDtl = null;
					clsOperatorDtl objOperatorWiseSales = null;

				
					Query queryOperatorWiseSales = webPOSSessionFactory
							.getCurrentSession().createSQLQuery(
									sbSqlLive.toString());
					List listOperatorWiseSales = queryOperatorWiseSales.list();
					if (listOperatorWiseSales.size() > 0) {
						for (int k = 0; k < listOperatorWiseSales.size(); k++) {

							Object[] obj = (Object[]) listOperatorWiseSales
									.get(k);
							if (hmOperatorWiseSales.containsKey(obj[0]
									.toString())) {
								hmSettlementDtl = hmOperatorWiseSales
										.get(obj[0].toString());
								if (hmSettlementDtl.containsKey(obj[7]
										.toString())) {
									objOperatorWiseSales = hmSettlementDtl
											.get(obj[7].toString());
									objOperatorWiseSales
											.setSettleAmt(objOperatorWiseSales
													.getSettleAmt()
													+ Double.parseDouble(obj[4]
															.toString()));
								} else {
									objOperatorWiseSales = new clsOperatorDtl();
									objOperatorWiseSales.setStrUserCode(obj[0]
											.toString());
									objOperatorWiseSales.setStrUserName(obj[1]
											.toString());
									objOperatorWiseSales.setStrPOSName(obj[2]
											.toString());
									objOperatorWiseSales
											.setStrSettlementDesc(obj[3]
													.toString());
									objOperatorWiseSales.setSettleAmt(Double
											.parseDouble(obj[4].toString()));
									objOperatorWiseSales.setStrPOSCode(obj[6]
											.toString());
									objOperatorWiseSales.setDiscountAmt(0);
								}
								hmSettlementDtl.put(obj[7].toString(),
										objOperatorWiseSales);
							} else {
								objOperatorWiseSales = new clsOperatorDtl();
								objOperatorWiseSales.setStrUserCode(obj[0]
										.toString());
								objOperatorWiseSales.setStrUserName(obj[1]
										.toString());
								objOperatorWiseSales.setStrPOSName(obj[2]
										.toString());
								objOperatorWiseSales
										.setStrSettlementDesc(obj[3].toString());
								objOperatorWiseSales.setSettleAmt(Double
										.parseDouble(obj[4].toString()));
								objOperatorWiseSales.setStrPOSCode(obj[6]
										.toString());
								objOperatorWiseSales.setDiscountAmt(0);

								hmSettlementDtl = new HashMap<String, clsOperatorDtl>();
								hmSettlementDtl.put(obj[7].toString(),
										objOperatorWiseSales);
							}
							hmOperatorWiseSales.put(obj[0].toString(),
									hmSettlementDtl);
						}

					}
					queryOperatorWiseSales = webPOSSessionFactory
							.getCurrentSession().createSQLQuery(
									sbSqlQFile.toString());
					listOperatorWiseSales = queryOperatorWiseSales.list();
					if (listOperatorWiseSales.size() > 0) {
						for (int k = 0; k < listOperatorWiseSales.size(); k++) {

							Object[] obj = (Object[]) listOperatorWiseSales
									.get(k);
							if (hmOperatorWiseSales.containsKey(obj[0]
									.toString())) {
								hmSettlementDtl = hmOperatorWiseSales
										.get(obj[0].toString());
								if (hmSettlementDtl.containsKey(obj[7]
										.toString())) {
									objOperatorWiseSales = hmSettlementDtl
											.get(obj[7].toString());
									objOperatorWiseSales
											.setSettleAmt(objOperatorWiseSales
													.getSettleAmt()
													+ Double.parseDouble(obj[4]
															.toString()));
								} else {
									objOperatorWiseSales = new clsOperatorDtl();
									objOperatorWiseSales.setStrUserCode(obj[0]
											.toString());
									objOperatorWiseSales.setStrUserName(obj[1]
											.toString());
									objOperatorWiseSales.setStrPOSName(obj[2]
											.toString());
									objOperatorWiseSales
											.setStrSettlementDesc(obj[3]
													.toString());
									objOperatorWiseSales.setSettleAmt(Double
											.parseDouble(obj[4].toString()));
									objOperatorWiseSales.setStrPOSCode(obj[6]
											.toString());
									objOperatorWiseSales.setDiscountAmt(0);
								}
								hmSettlementDtl.put(obj[7].toString(),
										objOperatorWiseSales);
							} else {
								objOperatorWiseSales = new clsOperatorDtl();
								objOperatorWiseSales.setStrUserCode(obj[0]
										.toString());
								objOperatorWiseSales.setStrUserName(obj[1]
										.toString());
								objOperatorWiseSales.setStrPOSName(obj[2]
										.toString());
								objOperatorWiseSales
										.setStrSettlementDesc(obj[3].toString());
								objOperatorWiseSales.setSettleAmt(Double
										.parseDouble(obj[4].toString()));
								objOperatorWiseSales.setStrPOSCode(obj[6]
										.toString());
								objOperatorWiseSales.setDiscountAmt(0);

								hmSettlementDtl = new HashMap<String, clsOperatorDtl>();
								hmSettlementDtl.put(obj[7].toString(),
										objOperatorWiseSales);
							}
							hmOperatorWiseSales.put(obj[0].toString(),
									hmSettlementDtl);
						}
					}

					
					
					queryOperatorWiseSales = webPOSSessionFactory
							.getCurrentSession().createSQLQuery(
									sbSqlDisLive.toString());
					listOperatorWiseSales = queryOperatorWiseSales.list();
					if (listOperatorWiseSales.size() > 0) {
						for (int k = 0; k < listOperatorWiseSales.size(); k++) {
							Object[] obj = (Object[]) listOperatorWiseSales
									.get(k);
							if (hmOperatorWiseSales.containsKey(obj[0]
									.toString())) {
								hmSettlementDtl = hmOperatorWiseSales
										.get(obj[0].toString());
								Set<String> setKeys = hmSettlementDtl.keySet();
								for (String keys : setKeys) {
									objOperatorWiseSales = hmSettlementDtl
											.get(keys);
									objOperatorWiseSales
											.setDiscountAmt(objOperatorWiseSales
													.getDiscountAmt()
													+ Double.parseDouble(obj[3]
															.toString()));
									hmSettlementDtl.put(keys,
											objOperatorWiseSales);
									break;
								}
								hmOperatorWiseSales.put(obj[0].toString(),
										hmSettlementDtl);
							}
						}

					}
					queryOperatorWiseSales = webPOSSessionFactory
							.getCurrentSession().createSQLQuery(
									sbSqlQDisFile.toString());
					listOperatorWiseSales = queryOperatorWiseSales.list();
					if (listOperatorWiseSales.size() > 0) {
						for (int k = 0; k < listOperatorWiseSales.size(); k++) {
							Object[] obj = (Object[]) listOperatorWiseSales
									.get(k);

							if (hmOperatorWiseSales.containsKey(obj[0]
									.toString())) {
								hmSettlementDtl = hmOperatorWiseSales
										.get(obj[0].toString());
								Set<String> setKeys = hmSettlementDtl.keySet();
								for (String keys : setKeys) {
									objOperatorWiseSales = hmSettlementDtl
											.get(keys);
									objOperatorWiseSales
											.setDiscountAmt(objOperatorWiseSales
													.getDiscountAmt()
													+ Double.parseDouble(obj[3]
															.toString()));
									hmSettlementDtl.put(keys,
											objOperatorWiseSales);
									break;
								}
								hmOperatorWiseSales.put(obj[0].toString(),
										hmSettlementDtl);
							}
						}
					}

					double discAmt = 0, totalAmt = 0;
					// Object[] arrObjTableRowData=new Object[6];
					for (Map.Entry<String, Map<String, clsOperatorDtl>> entry : hmOperatorWiseSales
							.entrySet()) {
						Map<String, clsOperatorDtl> hmOpSettlementDtl = entry
								.getValue();
						for (Map.Entry<String, clsOperatorDtl> entryOp : hmOpSettlementDtl
								.entrySet()) {
							
							clsOperatorDtl objOperatorDtl = entryOp.getValue();

							JSONObject jObj = new JSONObject();
							jObj.put("strUserCode",objOperatorDtl
									.getStrUserCode());
							jObj.put("strUserName", objOperatorDtl
									.getStrUserName());
							jObj.put("strPOSName", objOperatorDtl
									.getStrPOSName());
							jObj.put("strSettlementDesc", objOperatorDtl
									.getStrSettlementDesc());
							jObj.put("dblAmount",objOperatorDtl
									.getSettleAmt());
							jObj.put("strPOSCode",objOperatorDtl.getStrPOSCode());
							jObj.put("discountAmt",objOperatorDtl.getDiscountAmt());
							jArr.put(jObj);
							

						
						}
					}
					
					
					
					
					
					jOBjRet.put("jArr", jArr);
				} catch (Exception ex) {
					ex.printStackTrace();
				}

				return jOBjRet;

			}








			public JSONObject funCostCenterWiseSalesReport(String fromDate,
					String toDate, String strPOSCode, String strShiftNo,
					String userCode, String clientCode, String reportType,
					String costCenterCode, String logedInPosCode) {
				List listRet = new ArrayList();
				StringBuilder sbSqlLive = new StringBuilder();
				StringBuilder sbSqlQFile = new StringBuilder();
				StringBuilder sbSqlFilters = new StringBuilder();
				StringBuilder sbSqlModLive = new StringBuilder();
				StringBuilder sbSqlQModFile = new StringBuilder();
				JSONArray jArr = new JSONArray();
				JSONObject jOBjRet = new JSONObject();

				sbSqlLive.setLength(0);
				sbSqlQFile.setLength(0);
				sbSqlFilters.setLength(0);
				sbSqlModLive.setLength(0);
				sbSqlQModFile.setLength(0);
				String strAreaWisePricing = "";

				try {
					String sql = "select strAreaWisePricing from tblsetup where strClientCode= '"
							+ clientCode + "' and strPOSCode= '" + logedInPosCode + "'";

					Query query = webPOSSessionFactory.getCurrentSession()
							.createSQLQuery(sql);
					List list = query.list();
					if (list.size() > 0) {
						strAreaWisePricing = (String) list.get(0);
					}
					if (reportType.equalsIgnoreCase("Summary")) {
						sbSqlLive
								.append("SELECT e.strPosCode,e.strPOSName,ifnull(a.strCostCenterCode,'ND')strCostCenterCode,ifnull(a.strCostCenterName,'ND')strCostCenterName "
					                    + ",sum(c.dblAmount)dblSubTotal,sum(c.dblDiscountAmt) dblDiscountAmt,sum( c.dblAmount )-sum(c.dblDiscountAmt)dblSalesAmount "
					                    + " from tblbilldtl c,tblbillhd d,tblposmaster e ,tblmenuitempricingdtl b,tblcostcentermaster a "
					                    + " where date( d.dteBillDate ) BETWEEN '" + fromDate + "' AND '" + toDate + "' "
					                    + " and c.strBillNo = d.strBillNo and d.strPOSCode = e.strPOSCode and b.strItemCode = c.strItemCode "
					                    + " and (b.strposcode =d.strposcode  or b.strPosCode='All') and a.strCostCenterCode = b.strCostCenterCode "
					                    + " and c.strClientCode=d.strClientCode ");
						if (strAreaWisePricing.equalsIgnoreCase("Y")) {
							sbSqlLive.append(" and d.strAreaCode=b.strAreaCode ");

						}

						sbSqlQFile
								.append("SELECT e.strPosCode,e.strPOSName,ifnull(a.strCostCenterCode,'ND')strCostCenterCode,ifnull(a.strCostCenterName,'ND')strCostCenterName "
					                    + ",sum(c.dblAmount)dblSubTotal,sum(c.dblDiscountAmt) dblDiscountAmt,sum( c.dblAmount )-sum(c.dblDiscountAmt)dblSalesAmount "
					                    + " from tblqbilldtl c,tblqbillhd d,tblposmaster e ,tblmenuitempricingdtl b,tblcostcentermaster a "
					                    + " where date( d.dteBillDate ) BETWEEN '" + fromDate + "' AND '" + toDate + "' "
					                    + " and c.strBillNo = d.strBillNo "
					                    + " and d.strPOSCode = e.strPOSCode "
					                    + " and b.strItemCode = c.strItemCode "
					                    + " and (b.strposcode =d.strposcode  or b.strPosCode='All') "
					                    + " and a.strCostCenterCode = b.strCostCenterCode "
					                    + " and c.strClientCode=d.strClientCode ");

						if (strAreaWisePricing.equalsIgnoreCase("Y")) {
							sbSqlQFile.append(" and d.strAreaCode=b.strAreaCode ");

						}

						sbSqlModLive
								.append("SELECT e.strPosCode,e.strPOSName,ifnull(a.strCostCenterCode,'ND')strCostCenterCode,ifnull(a.strCostCenterName,'ND')strCostCenterName "
					                    + ",sum(c.dblAmount)dblSubTotal,sum(c.dblDiscAmt) dblDiscountAmt,sum( c.dblAmount )-sum(c.dblDiscAmt)dblSalesAmount  "
					                    + " from tblbillmodifierdtl c,tblbillhd d,tblposmaster e ,tblmenuitempricingdtl b,tblcostcentermaster a "
					                    + " where date( d.dteBillDate ) BETWEEN '" + fromDate + "' AND '" + toDate + "' "
					                    + " and c.strBillNo = d.strBillNo "
					                    + " and d.strPOSCode = e.strPOSCode "
					                    + " and b.strItemCode = left(c.strItemCode,7) "
					                    + " and (b.strposcode =d.strposcode  or b.strPosCode='All') "
					                    + " and a.strCostCenterCode = b.strCostCenterCode "
					                    + " and c.dblAmount>0 "
					                    + " and c.strClientCode=d.strClientCode ");
						if (strAreaWisePricing.equalsIgnoreCase("Y")) {
							sbSqlModLive.append(" and d.strAreaCode=b.strAreaCode ");

						}

						sbSqlQModFile
								.append( "SELECT e.strPosCode,e.strPOSName,ifnull(a.strCostCenterCode,'ND')strCostCenterCode,ifnull(a.strCostCenterName,'ND')strCostCenterName "
					                    + ",sum(c.dblAmount)dblSubTotal,sum(c.dblDiscAmt) dblDiscountAmt,sum( c.dblAmount )-sum(c.dblDiscAmt)dblSalesAmount  "
					                    + " from tblqbillmodifierdtl c,tblqbillhd d,tblposmaster e ,tblmenuitempricingdtl b,tblcostcentermaster a "
					                    + " where date( d.dteBillDate ) BETWEEN '" + fromDate + "' AND '" + toDate + "' "
					                    + " and c.strBillNo = d.strBillNo "
					                    + " and d.strPOSCode = e.strPOSCode "
					                    + " and b.strItemCode = left(c.strItemCode,7) "
					                    + " and (b.strposcode =d.strposcode  or b.strPosCode='All') "
					                    + " and a.strCostCenterCode = b.strCostCenterCode "
					                    + " and c.dblAmount>0 "
					                    + " and c.strClientCode=d.strClientCode ");

						if (strAreaWisePricing.equalsIgnoreCase("Y")) {
							sbSqlQModFile.append(" and d.strAreaCode=b.strAreaCode ");

						}

						if (!strPOSCode.equalsIgnoreCase("All"))

						{
							sbSqlFilters.append(" AND d.strPOSCode = '" + strPOSCode
									+ "' ");
						}

					/*	sbSqlFilters.append(" and b.intShiftCode ='" + strShiftNo
								+ "' ");
		*/
						if (!costCenterCode.equalsIgnoreCase("All"))

						{
							sbSqlFilters.append(" and a.strCostCenterCode='"
									+ costCenterCode + "' ");
						}

						sbSqlFilters
								.append("GROUP BY e.strPOSName,b.strCostCenterCode,a.strCostCenterName "
					                    + "order BY e.strPOSName,b.strCostCenterCode,a.strCostCenterName ");

						sbSqlLive.append(sbSqlFilters);
						sbSqlQFile.append(sbSqlFilters);
						sbSqlModLive.append(sbSqlFilters);
						sbSqlQModFile.append(sbSqlFilters);

						Query querySqlLive = webPOSSessionFactory.getCurrentSession()
								.createSQLQuery(sbSqlLive.toString());
						List listSqlLive = querySqlLive.list();
						if (listSqlLive.size() > 0) {

							for (int i = 0; i < listSqlLive.size(); i++) {
								Object[] obj = (Object[]) listSqlLive.get(i);
								JSONObject jObj = new JSONObject();
								jObj.put("strPOSCode", obj[0].toString());
								jObj.put("strPOSName", obj[1].toString());
								jObj.put("strCostCenterCode", obj[2].toString());
								jObj.put("strCostCenterName", obj[3].toString());
								jObj.put("dblSubTotal", obj[4].toString());
								jObj.put("dblDiscountAmt", obj[5].toString());
								jObj.put("dblAmount", obj[6].toString());

								jArr.put(jObj);
							}
							// jOBjRet.put("jArr", jArr);
						}
						// listRet.add(listSqlLive);

						Query queryQFile = webPOSSessionFactory.getCurrentSession()
								.createSQLQuery(sbSqlQFile.toString());
						List listSqlQFile = queryQFile.list();
						if (listSqlQFile.size() > 0) {

							for (int i = 0; i < listSqlQFile.size(); i++) {
								Object[] obj = (Object[]) listSqlQFile.get(i);
								JSONObject jObj = new JSONObject();
								jObj.put("strPOSCode", obj[0].toString());
								jObj.put("strPOSName", obj[1].toString());
								jObj.put("strCostCenterCode", obj[2].toString());
								jObj.put("strCostCenterName", obj[3].toString());
								jObj.put("dblSubTotal", obj[4].toString());
								jObj.put("dblDiscountAmt", obj[5].toString());
								jObj.put("dblAmount", obj[6].toString());

								jArr.put(jObj);
							}
							// jOBjRet.put("jArr", jArr);
						}
						// listRet.add(listSqlQFile);

						Query querySqlModLive = webPOSSessionFactory
								.getCurrentSession().createSQLQuery(
										sbSqlModLive.toString());
						List listSqlModLive = querySqlModLive.list();
						if (listSqlModLive.size() > 0) {

							for (int i = 0; i < listSqlModLive.size(); i++) {
								Object[] obj = (Object[]) listSqlModLive.get(i);
								JSONObject jObj = new JSONObject();
								jObj.put("strPOSCode", obj[0].toString());
								jObj.put("strPOSName", obj[1].toString());
								jObj.put("strCostCenterCode", obj[2].toString());
								jObj.put("strCostCenterName", obj[3].toString());
								jObj.put("dblSubTotal", obj[4].toString());
								jObj.put("dblDiscountAmt", obj[5].toString());
								jObj.put("dblAmount", obj[6].toString());

								jArr.put(jObj);
							}
							// jOBjRet.put("jArr", jArr);
						}
						// listRet.add(listSqlModLive);

						Query querySqlModQFile = webPOSSessionFactory
								.getCurrentSession().createSQLQuery(
										sbSqlQModFile.toString());
						List listSqlModQFile = querySqlModQFile.list();
						if (listSqlModQFile.size() > 0) {

							for (int i = 0; i < listSqlModQFile.size(); i++) {
								Object[] obj = (Object[]) listSqlModQFile.get(i);
								JSONObject jObj = new JSONObject();
								jObj.put("strPOSCode", obj[0].toString());
								jObj.put("strPOSName", obj[1].toString());
								jObj.put("strCostCenterCode", obj[2].toString());
								jObj.put("strCostCenterName", obj[3].toString());
								jObj.put("dblSubTotal", obj[4].toString());
								jObj.put("dblDiscountAmt", obj[5].toString());
								jObj.put("dblAmount", obj[6].toString());

								jArr.put(jObj);
							}
							// jOBjRet.put("jArr", jArr);
						}
					}

					else {
						sbSqlQFile.setLength(0);
						sbSqlQFile
								.append("SELECT ifnull(f.strCostCenterName,''),a.strItemName,sum(a.dblQuantity), sum(a.dblAmount)"
					                    + " ,b.strPOSCode,'" +userCode + "',ifnull(d.strPriceMonday,0.00)"
					                    + " ,sum(a.dblAmount)-sum(a.dblDiscountAmt),sum(a.dblDiscountAmt)\n"
					                    + " FROM tblqbilldtl a inner join tblqbillhd b on a.strBillNo=b.strBillNo \n"
					                    + " inner join tblmenuitempricingdtl d on a.strItemCode = d.strItemCode "
					                    + " and (b.strposcode =d.strposcode  or d.strPosCode='All') ");
						if (strAreaWisePricing.equalsIgnoreCase("Y")) {
							sbSqlQFile.append("and b.strAreaCode= d.strAreaCode ");
						}
						sbSqlQFile.append(" inner join tblcostcentermaster f on d.strCostCenterCode=f.strCostCenterCode "
			                    + " where date(b.dteBillDate) between '" + fromDate + "' and '" + toDate + "' ");
			           
						if (!costCenterCode.equalsIgnoreCase("All")) {
							sbSqlQFile.append(" and d.strCostCenterCode='"
									+ costCenterCode + "' ");
						}
						if (!strPOSCode.equalsIgnoreCase("All")) {
							sbSqlQFile
									.append(" and b.strPOSCode='" + strPOSCode + "' ");
						}
					//	sbSqlQFile.append(" and b.intShiftCode ='" + strShiftNo + "' ");

						sbSqlLive.setLength(0);
						sbSqlLive
								.append("SELECT ifnull(f.strCostCenterName,''),a.strItemName,sum(a.dblQuantity), sum(a.dblAmount)"
					                    + " ,b.strPOSCode,'" + userCode + "',ifnull(d.strPriceMonday,0.00)"
					                    + " ,sum(a.dblAmount)-sum(a.dblDiscountAmt),sum(a.dblDiscountAmt)\n"
					                    + " FROM tblbilldtl a inner join tblbillhd b on a.strBillNo=b.strBillNo \n"
					                    + " inner join tblmenuitempricingdtl d on a.strItemCode = d.strItemCode "
					                    + " and (b.strposcode =d.strposcode  or d.strPosCode='All') ");
						if (strAreaWisePricing.equalsIgnoreCase("Y")) {
							sbSqlLive.append("and b.strAreaCode= d.strAreaCode ");
						}
						   sbSqlLive.append(" inner join tblcostcentermaster f on d.strCostCenterCode=f.strCostCenterCode "
				                    + " where date(b.dteBillDate) between '" + fromDate + "' and '" + toDate + "' ");
				          
						if (!costCenterCode.equalsIgnoreCase("All")) {
							sbSqlLive.append(" and d.strCostCenterCode='"
									+ costCenterCode + "' ");
						}
						if (!strPOSCode.equalsIgnoreCase("All")) {
							sbSqlLive.append(" and b.strPOSCode='" + strPOSCode + "' ");

						}
						sbSqlLive.append(" and b.intShiftCode ='" + strShiftNo + "' ");

						sbSqlLive
								.append(" Group by f.strCostCenterCode,b.strPoscode, a.strItemCode,a.strItemName");
						sbSqlQFile
								.append(" Group by f.strCostCenterCode,b.strPoscode, a.strItemCode,a.strItemName");
						
						sbSqlModLive.setLength(0);
						sbSqlModLive
								.append("SELECT ifnull(f.strCostCenterName,''),a.strModifierName,sum(a.dblQuantity)"
					                    + " ,sum(a.dblAmount),b.strPOSCode,'" + userCode + "',ifnull(d.strPriceMonday,0.00)"
					                    + " ,sum(a.dblAmount)-sum(a.dblDiscAmt),sum(a.dblDiscAmt) "
					                    + " FROM tblbillmodifierdtl a inner join tblbillhd b on a.strBillNo=b.strBillNo "
					                    + " inner join tblmenuitempricingdtl d on LEFT(a.strItemCode,7)  = d.strItemCode "
					                    + " and (b.strposcode =d.strposcode  or d.strPosCode='All') ");
						if (strAreaWisePricing.equalsIgnoreCase("Y")) {
							sbSqlModLive.append("and b.strAreaCode= d.strAreaCode ");
						}
						 sbSqlModLive.append(" inner join tblcostcentermaster f on d.strCostCenterCode=f.strCostCenterCode "
				                    + " where date(b.dteBillDate) between '" + fromDate + "' and '" + toDate + "' "
				                    + " and a.dblAmount>0 ");
				           

						if (!costCenterCode.equalsIgnoreCase("All")) {
							sbSqlModLive.append(" and d.strCostCenterCode='"
									+ costCenterCode + "' ");
						}
						sbSqlModLive.append(" and b.intShiftCode ='" + strShiftNo
								+ "' ");
						sbSqlQModFile.setLength(0);
						sbSqlQModFile
								.append("SELECT ifnull(f.strCostCenterName,''),a.strModifierName,sum(a.dblQuantity) "
					                    + " ,sum(a.dblAmount),b.strPOSCode,'" + userCode + "',ifnull(d.strPriceMonday,0.00)"
					                    + " ,sum(a.dblAmount)-sum(a.dblDiscAmt),sum(a.dblDiscAmt) "
					                    + " FROM tblqbillmodifierdtl a inner join tblqbillhd b on a.strBillNo=b.strBillNo "
					                    + " inner join tblmenuitempricingdtl d on LEFT(a.strItemCode,7)  = d.strItemCode "
					                    + " and (b.strposcode =d.strposcode  or d.strPosCode='All') ");
						if (strAreaWisePricing.equalsIgnoreCase("Y")) {
							sbSqlQModFile.append(" and b.strAreaCode= d.strAreaCode ");
						}
						sbSqlQModFile.append(" inner join tblcostcentermaster f on d.strCostCenterCode=f.strCostCenterCode "
				                    + " where date(b.dteBillDate) between '" + fromDate + "' and '" + toDate + "' "
				                    + " and a.dblAmount>0 ");
				           
						if (!costCenterCode.equalsIgnoreCase("All")) {
							sbSqlQModFile.append(" and d.strCostCenterCode='"
									+ costCenterCode + "' ");
						}
						sbSqlQModFile.append(" and b.intShiftCode ='" + strShiftNo
								+ "' ");
						if (!strPOSCode.equalsIgnoreCase("All")) {
							sbSqlQModFile.append(" and b.strPOSCode='" + strPOSCode
									+ "' ");
							sbSqlModLive.append(" and b.strPOSCode='" + strPOSCode
									+ "' ");
						}

						sbSqlQModFile
								.append(" Group by f.strCostCenterCode,b.strPoscode, a.strItemCode, d.strItemName");
						sbSqlModLive
								.append(" Group by f.strCostCenterCode,b.strPoscode, a.strItemCode, d.strItemName");

						// Non chargable kots
						StringBuilder sqlNonChargableKOts = new StringBuilder();

						sqlNonChargableKOts
								.append("select ifnull(c.strCostCenterName,''),b.strItemName,sum(a.dblQuantity),0.00 as dblAmount,a.strPOSCode,'user',a.dblRate,0.00 as dblAmt_dblDisc,0.00 as dblDisc "
					                    + "from tblnonchargablekot a,tblmenuitempricingdtl b,tblcostcentermaster c "
					                    + "where date(a.dteNCKOTDate) between '" + fromDate + "' and '" + toDate + "' "
					                    + "and a.strItemCode=b.strItemCode "
					                    + "and (a.strposcode =b.strposcode  or b.strPosCode='All') "
					                    + "and b.strCostCenterCode=c.strCostCenterCode ");
						if (!costCenterCode.equalsIgnoreCase("All")) {
							sqlNonChargableKOts.append(" and b.strCostCenterCode='"
									+ costCenterCode + "' ");
						}
						if (!strPOSCode.equalsIgnoreCase("All")) {
							sqlNonChargableKOts.append(" and a.strPOSCode='"
									+ strPOSCode + "' ");
						}
						sqlNonChargableKOts
								.append("group by a.strItemCode,b.strItemName,c.strCostCenterCode,c.strCostCenterName ");
						sqlNonChargableKOts
								.append("order by a.strItemCode,b.strItemName,c.strCostCenterCode,c.strCostCenterName ");

						// System.out.println(sqlModQFile);
						Query querySqlModLive = webPOSSessionFactory
								.getCurrentSession().createSQLQuery(
										"truncate table tbltempsalesflash");
						querySqlModLive.executeUpdate();
						String insertTempSalesFlash = "insert into tbltempsalesflash(strcode,strname,dblquantity,dblamount,strposcode,struser,dblRate,dblsubtotal,dbldiscamt) ";
						querySqlModLive = webPOSSessionFactory.getCurrentSession()
								.createSQLQuery(
										insertTempSalesFlash + "(" + sbSqlLive + ")");
						querySqlModLive.executeUpdate();
						querySqlModLive = webPOSSessionFactory.getCurrentSession()
								.createSQLQuery(
										insertTempSalesFlash + "(" + sbSqlQFile + ")");
						querySqlModLive.executeUpdate();
						querySqlModLive = webPOSSessionFactory
								.getCurrentSession()
								.createSQLQuery(
										insertTempSalesFlash + "(" + sbSqlModLive + ")");
						querySqlModLive.executeUpdate();
						querySqlModLive = webPOSSessionFactory.getCurrentSession()
								.createSQLQuery(
										insertTempSalesFlash + "(" + sbSqlQModFile
												+ ")");
						querySqlModLive.executeUpdate();
						// insert non chargable kots sales
						querySqlModLive = webPOSSessionFactory.getCurrentSession()
								.createSQLQuery(
										insertTempSalesFlash + "("
												+ sqlNonChargableKOts + ")");
						querySqlModLive.executeUpdate();

						sql =" SELECT a.strcode, a.strname, b.strPosName, sum(a.dblquantity),sum(a.dblsubtotal)"
			                    + " ,sum(a.dbldiscamt),sum(a.dblamount)  "
			                    + " FROM tbltempsalesflash a,tblposmaster b "
			                    + " where a.strposcode=b.strPosCode group by a.strcode, a.strname, a.strposcode "
								;
					
						query = webPOSSessionFactory.getCurrentSession()
								.createSQLQuery(sql);
						List listSqlLive = query.list();
						if (listSqlLive.size() > 0) {

							for (int i = 0; i < listSqlLive.size(); i++) {
								Object[] obj = (Object[]) listSqlLive.get(i);
								JSONObject jObj = new JSONObject();
								jObj.put("strCode", obj[0].toString());
								jObj.put("strName", obj[1].toString());
								jObj.put("POSName", obj[2].toString());
								jObj.put("dblQuantity", obj[3].toString());
								jObj.put("dblSubTotal", obj[4].toString());
								jObj.put("dblDisAmt", obj[5].toString());
								jObj.put("dblAmount", obj[6].toString());

								jArr.put(jObj);
							}
							// jOBjRet.put("jArr", jArr);
						}
					}

					// listRet.add(listSqlModQFile);
					jOBjRet.put("jArr", jArr);
				} catch (Exception ex) {
					ex.printStackTrace();
				}

				return jOBjRet;

			}

			







			public JSONObject funGetBillWiseSettlementSalesSummary(String fromDate,
					String toDate,String viewBy, String strOperationType,String strSettlementCode, String strPOSCode,String strPOSName) {
				
				StringBuilder sbSql = new StringBuilder();
				JSONObject jColDataArr = new JSONObject();
				JSONArray jGroupArr = new JSONArray();
				JSONArray jTaxArr = new JSONArray();
				JSONArray jSettleArr = new JSONArray();
				JSONArray jBillNoArr = new JSONArray();
				List jColHeaderArr = new ArrayList();
				JSONArray jDateArr = new JSONArray();
				JSONObject jOBjRet = new JSONObject();
				String sqlGroups="";
				Map map = new HashMap();
				jColHeaderArr.add("Bill NO");
				jColHeaderArr.add("DATE");
				jColHeaderArr.add("POS");
				int colCount = 5;
				try {

					// Q Bill No and POS
					sbSql.setLength(0);
					sbSql.append("select a.strBillNo,DATE_FORMAT(a.dteBillDate,'%d-%m-%Y') as date "
		                    + "from "
		                    + "tblqbillhd a,tblqbillsettlementdtl b,tblsettelmenthd c "
		                    + "where  "
		                    + "a.strBillNo=b.strBillNo  and a.strClientCode=b.strClientCode  "
		                    + "and b.strSettlementCode=c.strSettelmentCode "
		                    + "and date(a.dteBillDate) between '" + fromDate + "' and '" + toDate + "' ");
					if (!strOperationType.equalsIgnoreCase("All")) {
						sbSql.append("and a.strOperationType='" + strOperationType
								+ "' ");
					}
					if (!strPOSCode.equalsIgnoreCase("All")) {
						sbSql.append(" and a.strPOSCode='" + strPOSCode + "' ");
					}
					if (!strSettlementCode.equalsIgnoreCase("All")) {
						sbSql.append(" and c.strSettelmentCode='" + strSettlementCode + "' ");
					}
					sbSql.append("group by a.strClientCode,a.strBillNo "
							+ "order by a.strClientCode,a.strPOSCOde,a.strBillNo,a.dteBillDate; ");
					Query querySql = webPOSSessionFactory.getCurrentSession()
							.createSQLQuery(sbSql.toString());
					List listSql = querySql.list();
					if (listSql.size() > 0) {

						for (int i = 0; i < listSql.size(); i++) {
							Object[] obj = (Object[]) listSql.get(i);

							jBillNoArr.put(obj[0].toString());
							jDateArr.put(obj[1].toString());

						}

					}

					// Live Bill No and POS
					sbSql.setLength(0);
					sbSql.append("select a.strBillNo,DATE_FORMAT(a.dteBillDate,'%d-%m-%Y') as date "
		                    + "from "
		                    + "tblbillhd a,tblbillsettlementdtl b,tblsettelmenthd c "
		                    + "where  "
		                    + "a.strBillNo=b.strBillNo and a.strClientCode=b.strClientCode "
		                    + "and b.strSettlementCode=c.strSettelmentCode "
		                    + "and date(a.dteBillDate) between '" + fromDate + "' and '" + toDate + "' ");
					if (!strOperationType.equalsIgnoreCase("All")) {
						sbSql.append("and a.strOperationType='" + strOperationType
								+ "' ");
					}
					if (!strPOSCode.equalsIgnoreCase("All")) {
						sbSql.append(" and a.strPOSCode='" + strPOSCode + "' ");
					}
					if (!strSettlementCode.equalsIgnoreCase("All")) {
						sbSql.append(" and c.strSettelmentCode='" + strSettlementCode + "' ");
					}
					sbSql.append("group by a.strClientCode,a.strBillNo "
							+ "order by a.strClientCode,a.strPOSCOde,a.strBillNo,a.dteBillDate; ");
					querySql = webPOSSessionFactory.getCurrentSession().createSQLQuery(
							sbSql.toString());
					listSql = querySql.list();
					if (listSql.size() > 0) {

						for (int i = 0; i < listSql.size(); i++) {
							Object[] obj = (Object[]) listSql.get(i);

							jBillNoArr.put(obj[0].toString());
							jDateArr.put(obj[1].toString());

						}

					}
					jColDataArr.put("BILL NO", jBillNoArr);

					jColDataArr.put("DATE", jDateArr);

					// Add Group Column

					if(viewBy.equalsIgnoreCase("ITEM'S GROUP WISE"))
					{
					 sqlGroups = "select a.strGroupName from tblgrouphd a ";

					querySql = webPOSSessionFactory.getCurrentSession().createSQLQuery(
							sqlGroups);
					listSql = querySql.list();

					if (listSql.size() > 0) {

						for (int i = 0; i < listSql.size(); i++) {
							Object obj = (Object) listSql.get(i);

							jGroupArr.put(obj.toString());
							jColHeaderArr.add(obj.toString());
							colCount++;
						}
					}
					}
					// fill Live settlement whose amt>0
					sbSql.setLength(0);
					sbSql.append("SELECT c.strSettelmentDesc "
		                    + "FROM tblbillhd a,tblbillsettlementdtl b,tblsettelmenthd c "
		                    + "WHERE a.strBillNo=b.strBillNo  and a.strClientCode=b.strClientCode   "
		                    + "AND b.strSettlementCode=c.strSettelmentCode   "
		                    + "and b.dblSettlementAmt>0 "
		                    + "and date(a.dteBillDate) between '" + fromDate + "' and '" + toDate + "' ");
					if (!strOperationType.equalsIgnoreCase("All")) {
						sbSql.append("and a.strOperationType='" + strOperationType
								+ "' ");
					}
					if (!strPOSCode.equalsIgnoreCase("All")) {
						sbSql.append(" and a.strPOSCode='" + strPOSCode + "' ");
					}
					if (!strSettlementCode.equalsIgnoreCase("All")) {
						sbSql.append(" and c.strSettelmentCode='" + strSettlementCode + "' ");
					}
					sbSql.append("GROUP BY strSettelmentDesc "
							+ "ORDER BY c.strSettelmentDesc; ");
					querySql = webPOSSessionFactory.getCurrentSession().createSQLQuery(
							sbSql.toString());
					listSql = querySql.list();
					if (listSql.size() > 0) {

						for (int i = 0; i < listSql.size(); i++) {
							Object obj = (Object) listSql.get(i);

							jColHeaderArr.add(obj.toString());
							jSettleArr.put(obj.toString());
							colCount++;
						}
					}

					// fill Q settlement whoes amt>0
					sbSql.setLength(0);
					sbSql.append("SELECT c.strSettelmentDesc "
		                    + "FROM tblqbillhd a,tblqbillsettlementdtl b,tblsettelmenthd c "
		                    + "WHERE a.strBillNo=b.strBillNo  and a.strClientCode=b.strClientCode   "
		                    + "AND b.strSettlementCode=c.strSettelmentCode "
		                    + "and b.dblSettlementAmt>0 "
		                    + "and date(a.dteBillDate) between '" + fromDate + "' and '" + toDate + "' ");
					if (!strOperationType.equalsIgnoreCase("All")) {
						sbSql.append("and a.strOperationType='" + strOperationType
								+ "' ");
					}
					if (!strPOSCode.equalsIgnoreCase("All")) {
						sbSql.append(" and a.strPOSCode='" + strPOSCode + "' ");
					}
					if (!strSettlementCode.equalsIgnoreCase("All")) {
						sbSql.append(" and c.strSettelmentCode='" + strSettlementCode + "' ");
					}
					sbSql.append("GROUP BY strSettelmentDesc "
							+ "ORDER BY c.strSettelmentDesc; ");
					querySql = webPOSSessionFactory.getCurrentSession().createSQLQuery(
							sbSql.toString());
					listSql = querySql.list();
					if (listSql.size() > 0) {

						for (int i = 0; i < listSql.size(); i++) {
							Object obj = (Object) listSql.get(i);

							jColHeaderArr.add(obj.toString());
							jSettleArr.put(obj.toString());
							colCount++;
						}
					}
					// Tax Column
					 String taxCalType = "";
					String sqlTax = "select a.strTaxDesc,a.strTaxCalculation "
		                    + " from tbltaxhd a order by a.strTaxCode";;
					querySql = webPOSSessionFactory.getCurrentSession().createSQLQuery(
							sqlTax);
					listSql = querySql.list();

					if (listSql.size() > 0) {

						for (int i = 0; i < listSql.size(); i++) {
							Object[] obj = (Object[]) listSql.get(i);

							jColHeaderArr.add(obj[0].toString());
							jTaxArr.put(obj[0].toString());
							taxCalType=obj[1].toString();
							colCount++;
						}
					}

					jColHeaderArr.add("GRAND Total");
					jColHeaderArr.add("CARD NO");
					String sqlGrandTotal="";
					// Q grand total
					if(viewBy.equalsIgnoreCase("ITEM'S GROUP WISE"))
					{
						sqlGrandTotal = "SELECT a.strBillNo,sum(b.dblSettlementAmt),b.strCardName  "
		                    + "FROM tblqbillhd a,tblqbillsettlementdtl b,tblsettelmenthd c,tblposmaster d "
		                    + "WHERE a.strBillNo=b.strBillNo    and a.strClientCode=b.strClientCode    "
		                    + "AND b.strSettlementCode=c.strSettelmentCode  "
		                    + "AND a.strPOSCode=d.strPosCode  "
		                    + "and b.dblSettlementAmt>0 "
		                    + "and date(a.dteBillDate) between '" + fromDate + "' and '" + toDate + "' ";
					if (!strOperationType.equalsIgnoreCase("All")) {
						sqlGrandTotal += "and a.strOperationType='" + strOperationType
								+ "' ";
					}
					if (!strPOSCode.equalsIgnoreCase("All")) {
						sqlGrandTotal = sqlGrandTotal + " and a.strPOSCode='"
								+ strPOSCode + "' ";
					}
					if (!strSettlementCode.equalsIgnoreCase("All")) {
						sqlGrandTotal=sqlGrandTotal+" and c.strSettelmentCode='" + strSettlementCode + "' ";
					}
					sqlGrandTotal = sqlGrandTotal
							+ "GROUP BY a.strClientCode,a.strBillNo "
							+ "ORDER BY a.strClientCode,a.strBillNo; ";
					
					querySql = webPOSSessionFactory.getCurrentSession().createSQLQuery(
							sqlGrandTotal);
					listSql = querySql.list();
					int size = listSql.size();

					for (int tblRow = 0; tblRow < jBillNoArr.length(); tblRow++) {
						JSONArray jRowArr = new JSONArray();
						jRowArr.put(jBillNoArr.get(tblRow));
						jRowArr.put(jDateArr.get(tblRow));
						jRowArr.put(strPOSName);
						for (int i = 3; i < colCount; i++) {
							jRowArr.put(i, 0.00);
							for (int j = 0; j < size; j++) {
								Object[] obj = (Object[]) listSql.get(j);
								if (jColHeaderArr.get(i).toString()
										.equalsIgnoreCase("GRAND Total")
										&& jRowArr.get(0).toString()
												.equalsIgnoreCase(obj[0].toString()))
									jRowArr.put(i, obj[1].toString());
								else if (jColHeaderArr.get(i).toString()
										.equalsIgnoreCase("CARD NO")
										&& jRowArr.get(0).toString()
												.equalsIgnoreCase(obj[0].toString()))
									jRowArr.put(i, obj[2].toString());

							}

						}

						map.put(tblRow, jRowArr);
					}
					}
					else
					{
						
						 sqlGrandTotal = "SELECT a.strBillNo,sum(b.dblSettlementAmt) "
								+ "FROM tblqbillhd a,tblqbillsettlementdtl b,tblsettelmenthd c,tblposmaster d "
								+ "WHERE a.strBillNo=b.strBillNo  "
								+ "AND b.strSettlementCode=c.strSettelmentCode  "
								+ "AND a.strPOSCode=d.strPosCode  "
								+ "and b.dblSettlementAmt>0 "
								+ "and date(a.dteBillDate) between '"
								+ fromDate
								+ "' and '" + toDate + "' ";
						
						
						
						
						if (!strOperationType.equalsIgnoreCase("All")) {
							sqlGrandTotal += "and a.strOperationType='" + strOperationType
									+ "' ";
						}
						if (!strPOSCode.equalsIgnoreCase("All")) {
							sqlGrandTotal = sqlGrandTotal + " and a.strPOSCode='"
									+ strPOSCode + "' ";
						}
						if (!strSettlementCode.equalsIgnoreCase("All")) {
							sqlGrandTotal = sqlGrandTotal +" and c.strSettelmentCode='"
									+ strSettlementCode + "' ";
						}
						sqlGrandTotal = sqlGrandTotal + "GROUP BY a.strBillNo "
								+ "ORDER BY a.strBillNo;";
						
						querySql = webPOSSessionFactory.getCurrentSession().createSQLQuery(
								sqlGrandTotal);
						listSql = querySql.list();
						int size = listSql.size();

						for (int tblRow = 0; tblRow < jBillNoArr.length(); tblRow++) {
							JSONArray jRowArr = new JSONArray();
							jRowArr.put(jBillNoArr.get(tblRow));
							jRowArr.put(jDateArr.get(tblRow));
							jRowArr.put(strPOSName);
							for (int i = 3; i < colCount; i++) {
								jRowArr.put(i, 0.00);
								for (int j = 0; j < size; j++) {
									Object[] obj = (Object[]) listSql.get(j);
									if (jColHeaderArr.get(i).toString()
											.equalsIgnoreCase("GRAND Total")
											&& jRowArr.get(0).toString()
													.equalsIgnoreCase(obj[0].toString()))
										jRowArr.put(i, obj[1].toString());

								}

							}

							map.put(tblRow, jRowArr);
						}
					}
				

					// Live
					if(viewBy.equalsIgnoreCase("ITEM'S GROUP WISE"))
					{
					sqlGrandTotal = "SELECT a.strBillNo,sum(b.dblSettlementAmt),b.strCardName  "
		                    + "FROM tblbillhd a,tblbillsettlementdtl b,tblsettelmenthd c,tblposmaster d "
		                    + "WHERE a.strBillNo=b.strBillNo  and a.strClientCode=b.strClientCode   "
		                    + "AND b.strSettlementCode=c.strSettelmentCode  "
		                    + "AND a.strPOSCode=d.strPosCode  "
		                    + "and b.dblSettlementAmt>0 "
		                    + "and date(a.dteBillDate) between '" + fromDate + "' and '" + toDate + "' ";;
					if (!strOperationType.equalsIgnoreCase("All")) {
						sqlGrandTotal += "and a.strOperationType='" + strOperationType
								+ "' ";
					}
					if (!strPOSCode.equalsIgnoreCase("All")) {
						sqlGrandTotal = sqlGrandTotal + " and a.strPOSCode='"
								+ strPOSCode + "' ";
					}
					if (!strSettlementCode.equalsIgnoreCase("All")) {
						sqlGrandTotal=sqlGrandTotal+" and c.strSettelmentCode='" + strSettlementCode + "' ";
					}
					sqlGrandTotal = sqlGrandTotal
							+ "GROUP BY a.strClientCode,a.strBillNo "
							+ "ORDER BY a.strClientCode,a.strBillNo; ";

					querySql = webPOSSessionFactory.getCurrentSession().createSQLQuery(
							sqlGrandTotal);
					listSql = querySql.list();
					int size = listSql.size();

					for (int tblRow = 0; tblRow < jBillNoArr.length(); tblRow++) {

						JSONArray jRowArr = (JSONArray) map.get(tblRow);
						for (int i = 3; i < colCount; i++) {

							for (int j = 0; j < size; j++) {
								Object[] obj = (Object[]) listSql.get(j);
								if (jColHeaderArr.get(i).toString()
										.equalsIgnoreCase("GRAND Total")
										&& jRowArr.get(0).toString()
												.equalsIgnoreCase(obj[0].toString())) {
									Double value = Double
											.parseDouble(obj[1].toString())
											+ jRowArr.getDouble(i);
									jRowArr.put(i, value);
									map.put(tblRow, jRowArr);
								} else if (jColHeaderArr.get(i).toString()
										.equalsIgnoreCase("CARD NO")
										&& jRowArr.get(0).toString()
												.equalsIgnoreCase(obj[0].toString())) {
									if (!obj[2].toString().equalsIgnoreCase("")) {
										Double value = Double.parseDouble(obj[2]
												.toString()) + jRowArr.getDouble(i);
										jRowArr.put(i, value);
									}

								}

							}

						}
						map.put(tblRow, jRowArr);
					}
					}
					else
					{
						sqlGrandTotal = "SELECT a.strBillNo,sum(b.dblSettlementAmt) "
								+ "FROM tblbillhd a,tblbillsettlementdtl b,tblsettelmenthd c,tblposmaster d "
								+ "WHERE a.strBillNo=b.strBillNo  "
								+ "AND b.strSettlementCode=c.strSettelmentCode  "
								+ "AND a.strPOSCode=d.strPosCode  "
								+ "and b.dblSettlementAmt>0 "
								+ "and date(a.dteBillDate) between '" + fromDate
								+ "' and '" + toDate + "' ";
						if (!strOperationType.equalsIgnoreCase("All")) {
							sqlGrandTotal += "and a.strOperationType='" + strOperationType
									+ "' ";
						}
						if (!strPOSCode.equalsIgnoreCase("All")) {
							sqlGrandTotal = sqlGrandTotal + " and a.strPOSCode='"
									+ strPOSCode + "' ";
						}
						if (!strSettlementCode.equalsIgnoreCase("All")) {
							sqlGrandTotal = sqlGrandTotal +" and c.strSettelmentCode='"
									+ strSettlementCode + "' ";
						}
						sqlGrandTotal = sqlGrandTotal + "GROUP BY a.strBillNo "
								+ "ORDER BY a.strBillNo;";

						querySql = webPOSSessionFactory.getCurrentSession().createSQLQuery(
								sqlGrandTotal);
						listSql = querySql.list();
						int size = listSql.size();

						for (int tblRow = 0; tblRow < jBillNoArr.length(); tblRow++) {

							JSONArray jRowArr = (JSONArray) map.get(tblRow);
							for (int i = 3; i < colCount; i++) {
								for (int j = 0; j < size; j++) {
									Object[] obj = (Object[]) listSql.get(j);
									if (jColHeaderArr.get(i).toString()
											.equalsIgnoreCase("GRAND Total")
											&& jRowArr.get(0).toString()
													.equalsIgnoreCase(obj[0].toString())) {
										double value = Double
												.parseDouble(obj[1].toString())
												+ jRowArr.getDouble(i);
										jRowArr.put(i, value);

									}

								}

							}
							map.put(tblRow, jRowArr);
						}
					}
					if(viewBy.equalsIgnoreCase("ITEM'S GROUP WISE"))
					{
					String columnNameForBillDtl = "sum(b.dblAmount)-sum(b.dblDiscountAmt)";
		            if (taxCalType.equalsIgnoreCase("Backward"))
		            {
		                columnNameForBillDtl = "sum(b.dblAmount)-sum(b.dblDiscountAmt)-sum(b.dblTaxAmount)";
		            }
					// fill Q data group
					sbSql.setLength(0);
					sbSql.append("select a.strBillNo,g.strGroupName," + columnNameForBillDtl + " "
		                    + "from tblqbillhd a,tblqbilldtl b,tblitemmaster e "
		                    + ",tblsubgrouphd f ,tblgrouphd g "
		                    + "where a.strBillNo=b.strBillNo  and a.strClientCode=b.strClientCode  "
		                    + "and b.strItemCode=e.strItemCode "
		                    + "and e.strSubGroupCode=f.strSubGroupCode "
		                    + "and f.strGroupCode=g.strGroupCode "
		                    + "AND b.dblAmount>0  "
		                    + "AND DATE(a.dteBillDate) BETWEEN '" + fromDate + "' and '" + toDate + "' ");
					if (!strOperationType.equalsIgnoreCase("All")) {
						sbSql.append("and a.strOperationType='" + strOperationType
								+ "' ");
					}
					if (!strPOSCode.equalsIgnoreCase("All")) {
						sbSql.append(" and a.strPOSCode='" + strPOSCode + "' ");
					}
					sbSql.append("GROUP BY a.strClientCode,a.strBillNo,g.strGroupCode,g.strGroupName ");

					querySql = webPOSSessionFactory.getCurrentSession().createSQLQuery(
							sbSql.toString());
					listSql = querySql.list();

					if (listSql.size() > 0) {
						for (int i = 0; i < listSql.size(); i++) {
							Object[] obj = (Object[]) listSql.get(i);
							for (int tblRow = 0; tblRow < jBillNoArr.length(); tblRow++) {
								JSONArray jRowArr = (JSONArray) map.get(tblRow);
								if (jBillNoArr.get(tblRow).toString()
										.equalsIgnoreCase(obj[0].toString())) {
									for (int tblCol = 3; tblCol < colCount; tblCol++) {

										if (jColHeaderArr.get(tblCol).toString()
												.equalsIgnoreCase(obj[1].toString()))

										{
											if (0.00 == jRowArr.getDouble(tblCol)) {
												jRowArr.put(tblCol, obj[2].toString());
												map.put(tblRow, jRowArr);
											} else {
												Double value = Double
														.parseDouble(obj[2].toString())
														+ jRowArr.getDouble(tblCol);
												jRowArr.put(tblCol, value);
												map.put(tblRow, jRowArr);
											}

										}
									}

								} else {
									continue;
								}
							}

						}

					}
					// Q Modifier Group data
					sbSql.setLength(0);
					sbSql.append("SELECT a.strBillNo,g.strGroupName, SUM(h.dblAmount)- SUM(h.dblDiscAmt) "
		                    +"FROM tblqbillhd a,tblitemmaster e,tblsubgrouphd f,tblgrouphd g,tblqbillmodifierdtl h "
		                    +"WHERE a.strBillNo=h.strBillNo  "
		                    +"AND a.strClientCode=h.strClientCode "
		                    +"AND e.strSubGroupCode=f.strSubGroupCode "
		                    +"AND f.strGroupCode=g.strGroupCode "
		                    +"AND a.strBillNo=h.strBillNo "
		                    +"AND e.strItemCode=LEFT(h.strItemCode,7) "
		                    +"and h.dblAmount>0 "
		                    +"AND DATE(a.dteBillDate) BETWEEN '" + fromDate + "' and '" + toDate + "' ");
					if (!strOperationType.equalsIgnoreCase("All")) {
						sbSql.append("and a.strOperationType='" + strOperationType
								+ "' ");
					}
					if (!strPOSCode.equalsIgnoreCase("All")) {
						sbSql.append(" and a.strPOSCode='" + strPOSCode + "' ");
					}
					sbSql.append("GROUP BY a.strClientCode,a.strBillNo,g.strGroupCode,g.strGroupName ");
					querySql = webPOSSessionFactory.getCurrentSession().createSQLQuery(
							sbSql.toString());
					listSql = querySql.list();

					if (listSql.size() > 0) {
						for (int i = 0; i < listSql.size(); i++) {
							Object[] obj = (Object[]) listSql.get(i);
							for (int tblRow = 0; tblRow < jBillNoArr.length(); tblRow++) {
								JSONArray jRowArr = (JSONArray) map.get(tblRow);
								if (jBillNoArr.get(tblRow).toString()
										.equalsIgnoreCase(obj[0].toString())) {
									for (int tblCol = 3; tblCol < colCount; tblCol++) {

										if (jColHeaderArr.get(tblCol).toString()
												.equalsIgnoreCase(obj[1].toString()))

										{
											if (0.00 == jRowArr.getDouble(tblCol)) {
												jRowArr.put(tblCol, obj[2].toString());
												map.put(tblRow, jRowArr);
											} else {
												Double value = Double
														.parseDouble(obj[2].toString())
														+ jRowArr.getDouble(tblCol);
												jRowArr.put(tblCol, value);
												map.put(tblRow, jRowArr);
											}
											break;
										}
									}

								} else {
									continue;
								}
							}

						}

					}
					// Live Group Data
					sqlGroups = "select a.strBillNo,g.strGroupName," + columnNameForBillDtl + " "
		                    + "from tblbillhd a,tblbilldtl b,tblitemmaster e "
		                    + ",tblsubgrouphd f ,tblgrouphd g "
		                    + "where a.strBillNo=b.strBillNo  and a.strClientCode=b.strClientCode  "
		                    + "and b.strItemCode=e.strItemCode "
		                    + "and e.strSubGroupCode=f.strSubGroupCode "
		                    + "and f.strGroupCode=g.strGroupCode "
		                    + "AND b.dblAmount>0  "
		                    + "AND DATE(a.dteBillDate) BETWEEN '" + fromDate + "' and '" + toDate + "' ";
					if (!strOperationType.equalsIgnoreCase("All")) {
						sqlGroups += "and a.strOperationType='" + strOperationType
								+ "' ";
					}
					if (!strPOSCode.equalsIgnoreCase("All")) {
						sqlGroups = sqlGroups + " and a.strPOSCode='" + strPOSCode
								+ "' ";
					}
					sqlGroups = sqlGroups
							+ "GROUP BY a.strClientCode,a.strBillNo,g.strGroupCode,g.strGroupName ";

					querySql = webPOSSessionFactory.getCurrentSession().createSQLQuery(
							sqlGroups);
					listSql = querySql.list();

					if (listSql.size() > 0) {
						for (int i = 0; i < listSql.size(); i++) {
							Object[] obj = (Object[]) listSql.get(i);
							for (int tblRow = 0; tblRow < jBillNoArr.length(); tblRow++) {
								JSONArray jRowArr = (JSONArray) map.get(tblRow);
								if (jBillNoArr.get(tblRow).toString()
										.equalsIgnoreCase(obj[0].toString())) {
									for (int tblCol = 3; tblCol < colCount; tblCol++) {
										if (jColHeaderArr.get(tblCol).toString()
												.equalsIgnoreCase(obj[1].toString()))

										{
											if (0.00 == jRowArr.getDouble(tblCol)) {
												jRowArr.put(tblCol, obj[2].toString());
												map.put(tblRow, jRowArr);
											} else {
												Double value = Double
														.parseDouble(obj[2].toString())
														+ jRowArr.getDouble(tblCol);
												jRowArr.put(tblCol, value);
												map.put(tblRow, jRowArr);
											}
											break;
										}
									}

								} else {
									continue;
								}
							}
						}
					}

					// Live Modifier Group Data
					sqlGroups = "SELECT a.strBillNo,g.strGroupName, SUM(h.dblAmount)- SUM(h.dblDiscAmt) "
		                    +"FROM tblbillhd a,tblitemmaster e,tblsubgrouphd f,tblgrouphd g,tblbillmodifierdtl h "
		                    +"WHERE a.strBillNo=h.strBillNo  "
		                    +"AND a.strClientCode=h.strClientCode "
		                    +"AND e.strSubGroupCode=f.strSubGroupCode "
		                    +"AND f.strGroupCode=g.strGroupCode "
		                    +"AND a.strBillNo=h.strBillNo "
		                    +"AND e.strItemCode=LEFT(h.strItemCode,7) "
		                    +"and h.dblAmount>0 "
		                    +"AND DATE(a.dteBillDate) BETWEEN '" + fromDate + "' and '" + toDate + "' ";
					if (!strOperationType.equalsIgnoreCase("All")) {
						sqlGroups += "and a.strOperationType='" + strOperationType
								+ "' ";
					}
					if (!strPOSCode.equalsIgnoreCase("All")) {
						sqlGroups = sqlGroups + " and a.strPOSCode='" + strPOSCode
								+ "' ";
					}
					sqlGroups = sqlGroups
							+ "GROUP BY a.strClientCode,a.strBillNo,g.strGroupCode,g.strGroupName ";

					querySql = webPOSSessionFactory.getCurrentSession().createSQLQuery(
							sqlGroups);
					listSql = querySql.list();

					if (listSql.size() > 0) {
						for (int i = 0; i < listSql.size(); i++) {
							Object[] obj = (Object[]) listSql.get(i);
							for (int tblRow = 0; tblRow < jBillNoArr.length(); tblRow++) {
								JSONArray jRowArr = (JSONArray) map.get(tblRow);
								if (jBillNoArr.get(tblRow).toString()
										.equalsIgnoreCase(obj[0].toString())) {
									for (int tblCol = 3; tblCol < colCount; tblCol++) {
										if (jColHeaderArr.get(tblCol).toString()
												.equalsIgnoreCase(obj[1].toString()))

										{
											if (0.00 == jRowArr.getDouble(tblCol)) {
												jRowArr.put(tblCol, obj[2].toString());
												map.put(tblRow, jRowArr);
											} else {
												Double value = Double
														.parseDouble(obj[2].toString())
														+ jRowArr.getDouble(tblCol);
												jRowArr.put(tblCol, value);
												map.put(tblRow, jRowArr);
											}
											break;
										}
									}

								} else {
									continue;
								}
							}
						}
					}
					}
					// Settlement Data
					String sqlTransRecords ="select a.strBillNo,c.strSettelmentDesc,sum(b.dblSettlementAmt) "
		                    + "from "
		                    + "tblqbillhd a,tblqbillsettlementdtl b,tblsettelmenthd c "
		                    + "where  "
		                    + "a.strBillNo=b.strBillNo  and a.strClientCode=b.strClientCode   "
		                    + "and b.strSettlementCode=c.strSettelmentCode "
		                    + "and b.dblSettlementAmt>0 "
		                    + "and date(a.dteBillDate) between '" + fromDate + "' and '" + toDate + "' ";
					if (!strOperationType.equalsIgnoreCase("All")) {
						sqlTransRecords += "and a.strOperationType='"
								+ strOperationType + "' ";
					}
					if (!strPOSCode.equalsIgnoreCase("All")) {
						sqlTransRecords = sqlTransRecords + " and a.strPOSCode='"
								+ strPOSCode + "' ";
					}
					if (!strSettlementCode.equalsIgnoreCase("All")) {
						sqlTransRecords = sqlTransRecords + " and c.strSettelmentCode='" + strSettlementCode + "' ";
					}
					sqlTransRecords = sqlTransRecords
							+ "group by a.strClientCode,a.strBillNo,b.strSettlementCode "
							+ "order by a.strBillNo,b.strSettlementCode;";
					querySql = webPOSSessionFactory.getCurrentSession().createSQLQuery(
							sqlTransRecords);
					listSql = querySql.list();

					if (listSql.size() > 0) {
						for (int i = 0; i < listSql.size(); i++) {
							Object[] obj = (Object[]) listSql.get(i);
							for (int tblRow = 0; tblRow < jBillNoArr.length(); tblRow++) {
								JSONArray jRowArr = (JSONArray) map.get(tblRow);
								if (jBillNoArr.get(tblRow).toString()
										.equalsIgnoreCase(obj[0].toString())) {
									for (int tblCol = 3; tblCol < colCount; tblCol++) {
										if (jColHeaderArr.get(tblCol).toString()
												.equalsIgnoreCase(obj[1].toString()))

										{
											if (0.00 == jRowArr.getDouble(tblCol)) {
												jRowArr.put(tblCol, obj[2].toString());
												map.put(tblRow, jRowArr);
											} else {
												Double value = Double
														.parseDouble(obj[2].toString())
														+ jRowArr.getDouble(tblCol);
												jRowArr.put(tblCol, value);
												map.put(tblRow, jRowArr);
											}
											break;
										}
									}

								} else {
									continue;
								}
							}

						}

					}

					// Tax Data
					if(viewBy.equalsIgnoreCase("ITEM'S GROUP WISE"))
					{
					sqlTax =  "select a.strBillNo,c.strTaxDesc,sum(b.dblTaxAmount) "
		                    + "from "
		                    + "tblqbillhd a,tblqbilltaxdtl b,tbltaxhd c "
		                    + "where a.strBillNo=b.strBillNo  and a.strClientCode=b.strClientCode   "
		                    + "and b.strTaxCode=c.strTaxCode "
		                    + "and date(a.dteBillDate) between '" + fromDate + "' and '" + toDate + "' ";
					if (!strOperationType.equalsIgnoreCase("All")) {
						sqlTax += "and a.strOperationType='" + strOperationType + "' ";
					}
					if (!strPOSCode.equalsIgnoreCase("All")) {
						sqlTax = sqlTax + " and a.strPOSCode='" + strPOSCode + "' ";
					}
					sqlTax = sqlTax
							+ "group by a.strClientCode,a.strBillNo,b.strTaxCode "
							+ "order by a.strClientCode,a.strBillNo,b.strTaxCode;  ";
				}
					else{
						sqlTax = "select a.strBillNo,c.strTaxDesc,sum(b.dblTaxAmount) "
			                    + "from "
			                    + "tblqbillhd a,tblqbilltaxdtl b,tbltaxhd c,tblqbillsettlementdtl d,tblsettelmenthd e "
			                    + "where a.strBillNo=b.strBillNo "
			                    + "and b.strTaxCode=c.strTaxCode "
			                    + "and a.strBillNo=d.strBillNo "
			                    + "and d.strSettlementCode=e.strSettelmentCode "
			                    + "and date(a.dteBillDate) between '" + fromDate + "' and '" + toDate + "' ";
						if (!strOperationType.equalsIgnoreCase("All")) {
							sqlTax += "and a.strOperationType='" + strOperationType + "' ";
						}
						if (!strPOSCode.equalsIgnoreCase("All")) {
							sqlTax = sqlTax + " and a.strPOSCode='" + strPOSCode + "' ";
						}
						if (!strSettlementCode.equalsIgnoreCase("All")) {
							sqlTax=sqlTax+" and c.strSettelmentCode='"
									+ strSettlementCode + "' ";
						}
						sqlTax = sqlTax + "group by a.strBillNo,b.strTaxCode "
								+ "order by a.strBillNo,b.strTaxCode; ";
						
					}
					querySql = webPOSSessionFactory.getCurrentSession().createSQLQuery(
							sqlTax);
					listSql = querySql.list();

					if (listSql.size() > 0) {
						for (int i = 0; i < listSql.size(); i++) {
							Object[] obj = (Object[]) listSql.get(i);
							for (int tblRow = 0; tblRow < jBillNoArr.length(); tblRow++) {
								JSONArray jRowArr = (JSONArray) map.get(tblRow);
								if (jBillNoArr.get(tblRow).toString()
										.equalsIgnoreCase(obj[0].toString())) {
									for (int tblCol = 3; tblCol < colCount; tblCol++) {
										if (jColHeaderArr.get(tblCol).toString()
												.equalsIgnoreCase(obj[1].toString()))

										{
											if (0.00 == jRowArr.getDouble(tblCol)) {
												jRowArr.put(tblCol, obj[2].toString());
												map.put(tblRow, jRowArr);
											} else {
												Double value = Double
														.parseDouble(obj[2].toString())
														+ jRowArr.getDouble(tblCol);
												jRowArr.put(tblCol, value);
												map.put(tblRow, jRowArr);
											}
											break;
										}
									}

								} else {
									continue;
								}
							}
						}
					}

			//live settlement data

					sqlTransRecords ="select a.strBillNo,c.strSettelmentDesc,sum(b.dblSettlementAmt) "
		                    + "from "
		                    + "tblbillhd a,tblbillsettlementdtl b,tblsettelmenthd c "
		                    + "where  "
		                    + "a.strBillNo=b.strBillNo  and a.strClientCode=b.strClientCode   "
		                    + "and b.strSettlementCode=c.strSettelmentCode "
		                    + "and b.dblSettlementAmt>0 "
		                    + "and date(a.dteBillDate) between '" + fromDate + "' and '" + toDate + "' ";
					if (!strOperationType.equalsIgnoreCase("All")) {
						sqlTransRecords += "and a.strOperationType='"
								+ strOperationType + "' ";
					}
					if (!strPOSCode.equalsIgnoreCase("All")) {
						sqlTransRecords = sqlTransRecords + " and a.strPOSCode='"
								+ strPOSCode + "' ";
					}
					if (!strSettlementCode.equalsIgnoreCase("All")) {
						sqlTransRecords = sqlTransRecords + " and c.strSettelmentCode='"
								+ strSettlementCode + "' ";
					}
					sqlTransRecords = sqlTransRecords
							+ "group by a.strClientCode,a.strBillNo,b.strSettlementCode "
							+ "order by a.strClientCode,a.strBillNo,b.strSettlementCode;";

					querySql = webPOSSessionFactory.getCurrentSession().createSQLQuery(
							sqlTransRecords);
					listSql = querySql.list();

					if (listSql.size() > 0) {
						for (int i = 0; i < listSql.size(); i++) {
							Object[] obj = (Object[]) listSql.get(i);
							for (int tblRow = 0; tblRow < jBillNoArr.length(); tblRow++) {
								JSONArray jRowArr = (JSONArray) map.get(tblRow);
								if (jBillNoArr.get(tblRow).toString()
										.equalsIgnoreCase(obj[0].toString())) {
									for (int tblCol = 3; tblCol < colCount; tblCol++) {
										if (jColHeaderArr.get(tblCol).toString()
												.equalsIgnoreCase(obj[1].toString()))

										{
											if (0.00 == jRowArr.getDouble(tblCol)) {
												jRowArr.put(tblCol, obj[2].toString());
												map.put(tblRow, jRowArr);
											} else {
												Double value = Double
														.parseDouble(obj[2].toString())
														+ jRowArr.getDouble(tblCol);
												jRowArr.put(tblCol, value);
												map.put(tblRow, jRowArr);
											}
											break;
										}
									}

								} else {
									continue;
								}
							}
						}
					}

					// live tax data
					if(viewBy.equalsIgnoreCase("ITEM'S GROUP WISE"))
					{
					sqlTax = "select a.strBillNo,c.strTaxDesc,sum(b.dblTaxAmount) "
		                    + "from "
		                    + "tblbillhd a,tblbilltaxdtl b,tbltaxhd c  "
		                    + "where a.strBillNo=b.strBillNo  and a.strClientCode=b.strClientCode   "
		                    + "and b.strTaxCode=c.strTaxCode "
		                    + "and date(a.dteBillDate) between '" + fromDate + "' and '" + toDate + "' ";
					if (!strOperationType.equalsIgnoreCase("All")) {
						sqlTax += "and a.strOperationType='" + strOperationType + "' ";
					}
					if (!strPOSCode.equalsIgnoreCase("All")) {
						sqlTax = sqlTax + " and a.strPOSCode='" + strPOSCode + "' ";
					}
					sqlTax = sqlTax
							+ "group by a.strClientCode,a.strBillNo,b.strTaxCode "
							+ "order by a.strClientCode,a.strBillNo,b.strTaxCode;  ";
					}
					else
					{
						sqlTax ="select a.strBillNo,c.strTaxDesc,sum(b.dblTaxAmount) "
			                    + "from "
			                    + "tblbillhd a,tblbilltaxdtl b,tbltaxhd c,tblbillsettlementdtl d,tblsettelmenthd e "
			                    + "where a.strBillNo=b.strBillNo "
			                    + "and b.strTaxCode=c.strTaxCode "
			                    + "and a.strBillNo=d.strBillNo "
			                    + "and d.strSettlementCode=e.strSettelmentCode "
			                    + "and date(a.dteBillDate) between '" + fromDate + "' and '" + toDate + "' ";;
						if (!strOperationType.equalsIgnoreCase("All")) {
							sqlTax += "and a.strOperationType='" + strOperationType + "' ";
						}
						if (!strPOSCode.equalsIgnoreCase("All")) {
							sqlTax = sqlTax + " and a.strPOSCode='" + strPOSCode + "' ";
						}
						if (!strSettlementCode.equalsIgnoreCase("All")) {
							sqlTax=sqlTax+" and c.strSettelmentCode='"
									+ strSettlementCode + "' ";
						}
						sqlTax = sqlTax + "group by a.strBillNo,b.strTaxCode "
								+ "order by a.strBillNo,b.strTaxCode;   ";
					}
					querySql = webPOSSessionFactory.getCurrentSession().createSQLQuery(
							sqlTax);
					listSql = querySql.list();

					if (listSql.size() > 0) {
						for (int i = 0; i < listSql.size(); i++) {
							Object[] obj = (Object[]) listSql.get(i);
							for (int tblRow = 0; tblRow < jBillNoArr.length(); tblRow++) {
								JSONArray jRowArr = (JSONArray) map.get(tblRow);
								if (jBillNoArr.get(tblRow).toString()
										.equalsIgnoreCase(obj[0].toString())) {
									for (int tblCol = 3; tblCol < colCount; tblCol++) {

										if (jColHeaderArr.get(tblCol).toString()
												.equalsIgnoreCase(obj[1].toString()))

										{
											if (0.00 == jRowArr.getDouble(tblCol)) {
												jRowArr.put(tblCol, obj[2].toString());
												map.put(tblRow, jRowArr);
											} else {
												Double value = Double
														.parseDouble(obj[2].toString())
														+ jRowArr.getDouble(tblCol);
												jRowArr.put(tblCol, value);
												map.put(tblRow, jRowArr);
											}
											break;
										}
									}

								} else {
									continue;
								}
							}

						}

					}
					jOBjRet.put("Col Header", jColHeaderArr);
					jOBjRet.put("Col Count", colCount);
					jOBjRet.put("Row Count", jBillNoArr.length());
					for (int tblRow = 0; tblRow < jBillNoArr.length(); tblRow++) {
						JSONArray jArr = (JSONArray) map.get(tblRow);
						jOBjRet.put("" + tblRow, jArr);
					}

				} catch (Exception ex) {
					ex.printStackTrace();
				}

				return jOBjRet;

			}
			
	
			
			public JSONObject funRemotePrintUsingTextFile(String tableNo, String KOTNo, String billNo, String reprint, String type, String printYN,String POSCode,String clientCode,String posName,String webStockUserCode)
			{
				JSONObject jObjRet=new JSONObject();
				JSONObject jObj1=new JSONObject();
			    try
			    {
			        String sql = "";
			        String p2="",p3="",p4="",p5="",p6="",p7="";
			        String c2="",c3="",c4="",c5="",c6="";
			        
				       
			         JSONArray jArr =new JSONArray();
			        
			        switch (type)
			        {
			            case "Dina":

			                String areaCodeForAll = "";
			                String sql_AreaCode = "select strAreaCode from tblareamaster where strAreaName='All';";
			                Query query = webPOSSessionFactory.getCurrentSession().createSQLQuery(sql_AreaCode);
			       			
			       			List rsAreaCode = query.list();
			               
			       		 if (rsAreaCode!=null)
							{
								for(int i=0; i<rsAreaCode.size(); i++)
								{
			                
			                    areaCodeForAll =(String) rsAreaCode.get(i);
			                }
							}
			                sql = "select a.strItemName,a.strNCKotYN,d.strCostCenterCode,d.strPrimaryPrinterPort,d.strSecondaryPrinterPort,d.strCostCenterName "
			                        + " ,ifnull(e.strLabelOnKOT,'KOT') strLabelOnKOT "
			                        + " from tblitemrtemp a "
			                        + " left outer join tblmenuitempricingdtl c on a.strItemCode = c.strItemCode "
			                        + " left outer join tblprintersetup d on c.strCostCenterCode=d.strCostCenterCode "
			                        + " left outer join tblcostcentermaster e on c.strCostCenterCode=e.strCostCenterCode  "
			                        + " where a.strKOTNo='"+KOTNo+"' and a.strTableNo='"+tableNo+"' and (c.strPosCode='"+POSCode+"' or c.strPosCode='All') "
			                        + " and (c.strAreaCode IN (SELECT strAreaCode FROM tbltablemaster where strTableNo='"+tableNo+"' ) "
			                        + " OR c.strAreaCode ='"+areaCodeForAll+"') "
			                        + " group by d.strCostCenterCode";
			                query = webPOSSessionFactory.getCurrentSession().createSQLQuery(sql);
			          
			              List list1 =  query.list();
			              if (list1!=null)
								{
			            	  for(int i=0; i<list1.size(); i++)
									{
			            		  Object[] obj = (Object[]) list1.get(i);
									
									
			            	  	p3 = (String) Array.get(obj, 2);
			            	  	p2 = (String) Array.get(obj, 1);
			            	  	p4 = (String) Array.get(obj, 3);
			            	  	p5 = (String) Array.get(obj, 4);
			            	  	p6 = (String) Array.get(obj, 5);
			            	  	p7 = (String) Array.get(obj, 6);
									}	
							 	
			            	  	
			            	  
			            	  	JSONObject objSetupParameter=objSetupService.funGetParameterValuePOSWise(clientCode, POSCode, "gPrintType");
			     			    
			     			    if(objSetupParameter.get("gPrintType").toString().equalsIgnoreCase("Jasper"))
			                     {
			     			    	
			     			    //	jObj1=funGenerateJasperForTableWiseKOT("Dina", tableNo, p3, "", areaCodeForAll, KOTNo, reprint, p4, p5, p6, printYN, p2, p7,posName,POSCode,clientCode,webStockUserCode);
			     			    	//jArr.put(jObj1);
			                     }
			                    else
			                    {
			                        //funGenerateTextFileForTableWiseKOT(tableNo,p3, areaCodeForAll, KOTNo, reprint, p4, p5, p6, printYN, p2, p7,posName,POSCode,clientCode,webStockUserCode);
			                    }
			     			    
			                }
			              // jObjRet.put("DinajArr", jArr);
			                break;

			            case "DirectBiller":

			                sql = "select a.strItemName,c.strCostCenterCode,c.strPrimaryPrinterPort "
			                        + ",c.strSecondaryPrinterPort,c.strCostCenterName,d.strLabelOnKOT "
			                        + " from tblbilldtl  a,tblmenuitempricingdtl b,tblprintersetup c,tblcostcentermaster d   "
			                        + " where a.strBillNo='"+billNo+"' "
			                        + " and  a.strItemCode=b.strItemCode "
			                        + " and b.strCostCenterCode=c.strCostCenterCode "
			                        + " and b.strCostCenterCode=d.strCostCenterCode "
			                        + " and (b.strPosCode='"+POSCode+"' or b.strPosCode='All') "
			                        + " group by c.strCostCenterCode;";
			                query = webPOSSessionFactory.getCurrentSession().createSQLQuery(sql);
			               
			              List rsPrintDirect =query.list();
			              if (rsPrintDirect!=null)
								{
			            	  for(int i=0; i<rsPrintDirect.size(); i++)
									{
			          		  Object[] obj = (Object[]) rsPrintDirect.get(i);
								
			            		 c2 = (String) Array.get(obj,2);
			            	  	 c3 = (String) Array.get(obj,3);
			            	  	c4 = (String) Array.get(obj,4);
			            	  	 c5 = (String) Array.get(obj,5);
			            	  	 c6 = (String) Array.get(obj,6);
									} 	
			            	  	JSONObject objSetupParameter=objSetupService.funGetParameterValuePOSWise(clientCode, POSCode, "gDirectAreaCode");
			     			    
			     			   String directAreaCode = objSetupParameter.get("gDirectAreaCode").toString();
			                    //funGenerateTextFileForKOTDirectBiller(rsPrintDirect.getString(2), "", clsGlobalVarClass.gDirectAreaCode, billNo, reprint, rsPrintDirect.getString(3), rsPrintDirect.getString(4), rsPrintDirect.getString(5));
			            	  	objSetupParameter=objSetupService.funGetParameterValuePOSWise(clientCode, POSCode, "gPrintType");
			     			    
			     			    if(objSetupParameter.get("gPrintType").toString().equalsIgnoreCase("Jasper"))
			                    {
			     			    	//JSONObject jObj1=new JSONObject();
			                      
			                    }
			                    else
			                    {
			                        //funGenerateTextFileForKOTDirectBiller(c2, directAreaCode, billNo, reprint, c3, c4, c5, c6,posName,POSCode,clientCode,webStockUserCode);
			                    }
			                }
			                
			                break;
			        }
			    }
			        catch (Exception ex)
					{
						ex.printStackTrace();
					}
			    return jObj1;
			}


			

			public JSONObject funDailySaleReport(String fromDate,String toDate,String posCode,String shiftNo,String strUserCode)
			{
				
				JSONObject jObj=new JSONObject();
						
		        try
		        {
		        	//JSONObject JSONEnableShiftYN = objSetupDao.funGetParameterValuePOSWise(strUserCode,posCode, "gEnableShiftYN");
					//String gEnableShiftYN=JSONEnableShiftYN.get("gEnableShiftYN").toString();
					
					//clsBillItemDtlBean
		            List<clsBillItemDtlBean> listOfDailySaleData = new ArrayList<clsBillItemDtlBean>();
		            StringBuilder sbSqlBillWise = new StringBuilder();
		            StringBuilder sbSqlBillWiseQFile = new StringBuilder();

		            sbSqlBillWise.setLength(0);
		            sbSqlBillWise.append("select a.strBillNo,left(a.dteBillDate,10),left(right(a.dteDateCreated,8),5) as BillTime"
		                    + ",ifnull(b.strTableName,'') as TableName,f.strPOSName, ifnull(d.strSettelmentDesc,'') as payMode"
		                    + ",ifnull(a.dblSubTotal,0.00),a.dblDiscountPer,a.dblDiscountAmt,a.dblTaxAmt"
		                    + ",ifnull(c.dblSettlementAmt,0.00),a.strUserCreated,a.strUserEdited,a.dteDateCreated"
		                    + ",a.dteDateEdited,a.strClientCode,a.strWaiterNo,a.strCustomerCode,a.dblDeliveryCharges"
		                    + ",ifnull(c.strRemark,''),ifnull(e.strCustomerName ,'NA')"
		                    + ",a.dblTipAmount,'" + strUserCode + "',a.strDiscountRemark,'' "
		                    + "from tblbillhd  a left outer join  tbltablemaster b on a.strTableNo=b.strTableNo "
		                    + "left outer join tblposmaster f on a.strPOSCode=f.strPOSCode "
		                    + "left outer join tblbillsettlementdtl c on a.strBillNo=c.strBillNo "
		                    + "left outer join tblsettelmenthd d on c.strSettlementCode=d.strSettelmentCode "
		                    + "left outer join tblcustomermaster e on a.strCustomerCode=e.strCustomerCode "
		                    + "where date(a.dteBillDate) between '" + fromDate + "' and '" + toDate + "'");

		            if (!posCode.equals("All"))
		            {
		                sbSqlBillWise.append(" and a.strPOSCode='" + posCode + "' ");
		            }
		            sbSqlBillWise.append(" AND a.intShiftCode = '" + shiftNo + "' ");
		           /* if (gEnableShiftYN.equals("Y"))
		            {
		                if (gEnableShiftYN.equals("Y") && (!shiftNo.equalsIgnoreCase("All")))
		                {
		                    sbSqlBillWise.append(" AND a.intShiftCode = '" + shiftNo + "' ");
		                }
		            }*/

		            sbSqlBillWise.append(" order by a.strBillNo desc");
		            //System.out.println("Bill Wise Report Live Query="+sbSqlBillWise);

		            sbSqlBillWiseQFile.setLength(0);
		            sbSqlBillWiseQFile.append("select a.strBillNo,left(a.dteBillDate,10),left(right(a.dteDateCreated,8),5) as BillTime "
		                    + ",ifnull(b.strTableName,'') as TableName,f.strPOSName, ifnull(d.strSettelmentDesc,'') as payMode "
		                    + ",ifnull(a.dblSubTotal,0.00),a.dblDiscountPer,a.dblDiscountAmt,a.dblTaxAmt "
		                    + ",ifnull(c.dblSettlementAmt,0.00),a.strUserCreated,a.strUserEdited,a.dteDateCreated "
		                    + ",a.dteDateEdited,a.strClientCode,a.strWaiterNo,a.strCustomerCode,a.dblDeliveryCharges "
		                    + ",ifnull(c.strRemark,''),ifnull(e.strCustomerName ,'NA')"
		                    + ",a.dblTipAmount,'" + strUserCode + "',a.strDiscountRemark,'' "
		                    + "from tblqbillhd  a left outer join  tbltablemaster b on a.strTableNo=b.strTableNo "
		                    + "left outer join tblposmaster f on a.strPOSCode=f.strPOSCode "
		                    + "left outer join tblqbillsettlementdtl c on a.strBillNo=c.strBillNo "
		                    + "left outer join tblsettelmenthd d on c.strSettlementCode=d.strSettelmentCode "
		                    + "left outer join tblcustomermaster e on a.strCustomerCode=e.strCustomerCode "
		                    + "where date(a.dteBillDate) between '" + fromDate + "' and '" + toDate + "'");

		            if (!posCode.equals("All"))
		            {
		                sbSqlBillWiseQFile.append(" and a.strPOSCode='" + posCode + "' ");
		            }
		            sbSqlBillWiseQFile.append(" AND a.intShiftCode = '" + shiftNo + "' ");
		            /*if (gEnableShiftYN.equals("Y"))
		            {
		                if (gEnableShiftYN.equals("Y") && (!shiftNo.equalsIgnoreCase("All")))
		                {
		                    sbSqlBillWiseQFile.append(" AND a.intShiftCode = '" + shiftNo + "' ");
		                }
		            }*/
		            sbSqlBillWiseQFile.append(" order by a.strBillNo desc");

		            
		            Query querySql = webPOSSessionFactory.getCurrentSession().createSQLQuery(sbSqlBillWise.toString());
		     	    List listSqlLive = querySql.list();
		     	    if(listSqlLive.size()>0)
		     	    {
		     	    	
		     	    	for(int i=0 ;i<listSqlLive.size();i++ )
		     	    	{
		     	    		Object ob[]=(Object[])listSqlLive.get(i);
		     	    		clsBillItemDtlBean obj=new clsBillItemDtlBean();
		     	    		obj.setStrBillNo(ob[0].toString());          //BillNo
		 	                obj.setDteBillDate(ob[1].toString());        //Bill Date
		 	                obj.setStrItemCode(ob[3].toString());        //Table Name    
		 	                obj.setStrPosName(ob[4].toString());         //POS Name
		 	                obj.setStrSettelmentMode(ob[5].toString());  //Settle Mode
		 	                obj.setDblSubTotal(Double.parseDouble(ob[6].toString()));        //Sub Total
		 	                obj.setDblDiscountPer(Double.parseDouble(ob[7].toString()));     //Disc Per
		 	                obj.setDblDiscountAmt(Double.parseDouble(ob[8].toString()));     //Disc Amt
		 	                obj.setDblTaxAmt(Double.parseDouble(ob[9].toString()));         //Tax Amt
		 	                obj.setDblSettlementAmt(Double.parseDouble(ob[10].toString()));  //Settle Amt
		 	                obj.setStrDiscType(ob[11].toString());       //User Created
		 	                obj.setStrDiscValue(ob[13].toString());      //Date Created
		 	                obj.setStrItemName(ob[20].toString());       //Customer Name
		 	                obj.setDblAmount(Double.parseDouble(ob[18].toString()));         //Delivery Charges
		 	                listOfDailySaleData.add(obj);
		     	    	}
		     	    }
		            /*ResultSet rsLiveData = clsGlobalVarClass.dbMysql.executeResultSet(sbSqlBillWise.toString());
		            while (rsLiveData.next())
		            {
		                clsBillItemDtlBean obj = new clsBillItemDtlBean();
		              
		            }
		            rsLiveData.close();*/

		     	    querySql = webPOSSessionFactory.getCurrentSession().createSQLQuery(sbSqlBillWiseQFile.toString());
		    	    List listSqlQ = querySql.list();
		    	    if(listSqlQ.size()>0)
		    	    {
		    	    	
		    	    	for(int i=0 ;i<listSqlQ.size();i++ )
		    	    	{
		    	    		Object ob[]=(Object[])listSqlQ.get(i);
		     	    		clsBillItemDtlBean obj=new clsBillItemDtlBean();
		     	    		obj.setStrBillNo(ob[0].toString());          //BillNo
		 	                obj.setDteBillDate(ob[1].toString());        //Bill Date
		 	                obj.setStrItemCode(ob[3].toString());        //Table Name    
		 	                obj.setStrPosName(ob[4].toString());         //POS Name
		 	                obj.setStrSettelmentMode(ob[5].toString());  //Settle Mode
		 	                obj.setDblSubTotal(Double.parseDouble(ob[6].toString()));        //Sub Total
		 	                obj.setDblDiscountPer(Double.parseDouble(ob[7].toString()));     //Disc Per
		 	                obj.setDblDiscountAmt(Double.parseDouble(ob[8].toString()));     //Disc Amt
		 	                obj.setDblTaxAmt(Double.parseDouble(ob[9].toString()));         //Tax Amt
		 	                obj.setDblSettlementAmt(Double.parseDouble(ob[10].toString()));  //Settle Amt
		 	                obj.setStrDiscType(ob[11].toString());       //User Created
		 	                obj.setStrDiscValue(ob[13].toString());      //Date Created
		 	                obj.setStrItemName(ob[20].toString());       //Customer Name
		 	                obj.setDblAmount(Double.parseDouble(ob[18].toString()));         //Delivery Charges
		 	                listOfDailySaleData.add(obj);
		    	    	}
		    	    }//call for view report
		            //funViewJasperReportForBeanCollectionDataSource(is, hm, listOfDailySaleData);
		    	    try
			 	    {
				 	     Gson gson = new Gson();
				 	    Type type = new TypeToken<List<clsBillItemDtlBean>>() {}.getType();
			            String gsonDailySales=gson.toJson(listOfDailySaleData, type);
			            jObj.put("listOfDailySaleData",gsonDailySales);
			            
			 	    }
		            catch (Exception e) 
		            {
		            		e.printStackTrace();
		            }
		        }
		        catch (Exception e)
		        {
		            e.printStackTrace();
		        }
				return jObj;
			}
			
			public JSONObject funGuestCreditReport(String fromDate,String toDate,String posCode,String shiftNo,String strUserCode)
			{
				JSONObject jObj=new JSONObject();
				try
		        {
		            
		            StringBuilder sqlLiveBuilder = new StringBuilder();
		            StringBuilder sqlQBuilder = new StringBuilder();

		            sqlLiveBuilder.append("select a.strBillNo,a.strItemCode,a.strItemName,a.dblRate,a.dblQuantity,a.dblAmount,date(a.dteBillDate) "
		                    + ",h.strPosName,d.strSettelmentType,a.strKOTNo,b.strPOSCode,b.strRemarks,ifnull(e.strTableName,'') as strTableName"
		                    + ",f.strCustomerName,ifnull(g.strWShortName,'') as strWShortName "
		                    + "from tblbilldtl a "
		                    + "left outer join tblbillhd b on a.strBillNo=b.strBillNo "
		                    + "left outer join tblbillsettlementdtl c on a.strBillNo=c.strBillNo "
		                    + "left outer join tblsettelmenthd d on c.strSettlementCode=d.strSettelmentCode "
		                    + "left outer join tbltablemaster e on b.strTableNo=e.strTableNo "
		                    + "left outer join tblcustomermaster f on b.strCustomerCode=f.strCustomerCode "
		                    + "left outer join tblwaitermaster g on b.strWaiterNo=g.strWaiterNo "
		                    + "left outer join tblposmaster h on b.strPOSCode=h.strPosCode "
		                    + "where date(a.dteBillDate) Between '" + fromDate + "' and '" + toDate + "'  "
		                    + "and d.strSettelmentType='Credit' ");

		            sqlQBuilder.append("select a.strBillNo,a.strItemCode,a.strItemName,a.dblRate,a.dblQuantity,a.dblAmount,date(a.dteBillDate) "
		                    + ",h.strPosName,d.strSettelmentType,a.strKOTNo,b.strPOSCode,b.strRemarks,ifnull(e.strTableName,'') as strTableName"
		                    + ",f.strCustomerName,ifnull(g.strWShortName,'') as strWShortName "
		                    + "from tblqbilldtl a "
		                    + "left outer join tblqbillhd b on a.strBillNo=b.strBillNo "
		                    + "left outer join tblqbillsettlementdtl c on a.strBillNo=c.strBillNo "
		                    + "left outer join tblsettelmenthd d on c.strSettlementCode=d.strSettelmentCode "
		                    + "left outer join tbltablemaster e on b.strTableNo=e.strTableNo "
		                    + "left outer join tblcustomermaster f on b.strCustomerCode=f.strCustomerCode "
		                    + "left outer join tblwaitermaster g on b.strWaiterNo=g.strWaiterNo "
		                    + "left outer join tblposmaster h on b.strPOSCode=h.strPosCode "
		                    + "where date(a.dteBillDate) Between '" + fromDate + "' and '" + toDate + "'  "
		                    + "and d.strSettelmentType='Credit' ");

		            if (!posCode.equalsIgnoreCase("All"))
		            {
		                sqlLiveBuilder.append("and b.strPOSCode='" + posCode + "' ");
		                sqlQBuilder.append("and b.strPOSCode='" + posCode + "' ");
		            }

		            sqlLiveBuilder.append("group by b.strPOSCode,a.strBillNo,a.strKOTNo,a.strItemCode "
		                    + "order by b.strPOSCode,a.strBillNo,a.strKOTNo,a.strItemCode ");
		            sqlQBuilder.append("group by b.strPOSCode,a.strBillNo,a.strKOTNo,a.strItemCode "
		                    + "order by b.strPOSCode,a.strBillNo,a.strKOTNo,a.strItemCode ");

		            List<clsBillDtl> listOfGuestCreditData = new ArrayList<>();

		            //live
		            Query querySql = webPOSSessionFactory.getCurrentSession().createSQLQuery(sqlLiveBuilder.toString());
		     	    List listSql = querySql.list();
		     	    if(listSql.size()>0)
		     	    {
		     	    	
		     	    	for(int i=0 ;i<listSql.size();i++ )
		     	    	{
		     	    		Object ob[]=(Object[])listSql.get(i);
		     	    		clsBillDtl obj = new clsBillDtl();

		                    obj.setStrBillNo(ob[0].toString());
		                    obj.setStrItemCode(ob[1].toString());
		                    obj.setStrItemName(ob[2].toString());
		                    obj.setDblRate(Double.parseDouble(ob[3].toString()));
		                    obj.setDblQuantity(Double.parseDouble(ob[4].toString()));
		                    obj.setDblAmount(Double.parseDouble(ob[5].toString()));
		                    obj.setDteBillDate(ob[6].toString());
		                    obj.setStrPosName(ob[7].toString());
		                    // obj.setStrSettlementType(rsData.getString(9));
		                    obj.setStrKOTNo(ob[9].toString());
		                    obj.setStrPOSCode(ob[10].toString());
		                    obj.setStrRemarks(ob[11].toString());
		                    obj.setStrTableName(ob[12].toString());
		                    obj.setStrCustomerName(ob[13].toString());
		                    obj.setStrWShortName(ob[14].toString());

		                    listOfGuestCreditData.add(obj);
		     	    	}
		     	    }
		     	    querySql = webPOSSessionFactory.getCurrentSession().createSQLQuery(sqlQBuilder.toString());
		    	    listSql = querySql.list();
		    	    if(listSql.size()>0)
		    	    {
		    	    	
		    	    	for(int i=0 ;i<listSql.size();i++ )
			    	    {
			    	    	Object ob[]=(Object[])listSql.get(i);
			    	    	clsBillDtl obj = new clsBillDtl();
			    	    	obj.setStrBillNo(ob[0].toString());
		                    obj.setStrItemCode(ob[1].toString());
		                    obj.setStrItemName(ob[2].toString());
		                    obj.setDblRate(Double.parseDouble(ob[3].toString()));
		                    obj.setDblQuantity(Double.parseDouble(ob[4].toString()));
		                    obj.setDblAmount(Double.parseDouble(ob[5].toString()));
		                    obj.setDteBillDate(ob[6].toString());
		                    obj.setStrPosName(ob[7].toString());
		                    // obj.setStrSettlementType(rsData.getString(9));
		                    obj.setStrKOTNo(ob[9].toString());
		                    obj.setStrPOSCode(ob[10].toString());
		                    obj.setStrRemarks(ob[11].toString());
		                    obj.setStrTableName(ob[12].toString());
		                    obj.setStrCustomerName(ob[13].toString());
		                    obj.setStrWShortName(ob[14].toString());
			                listOfGuestCreditData.add(obj);
			    	    }
		            }
		         
		            //call for view report
		           // funViewJasperReportForBeanCollectionDataSource(is, hm, listOfGuestCreditData);
		    	    try
			 	    {
				 	     Gson gson = new Gson();
				 	    Type type = new TypeToken<List<clsBillDtl>>() {}.getType();
			            String gsonGuestCredit=gson.toJson(listOfGuestCreditData, type);
			            jObj.put("listOfGuestCreditData",gsonGuestCredit);
			            
			 	    }
		            catch (Exception e) 
		            {
		            		e.printStackTrace();
		            }
		        }
		        catch (Exception e)
		        {
		            e.printStackTrace();
		        }
				
				return jObj;
			}
				
			public JSONObject funUnusedCardBalanceReport(String fromDate,String toDate,String posCode,String shiftNo,String strUserCode)
			{
				JSONObject jObj=new JSONObject(); 
				 try
			        {
			            
			            StringBuilder sqlBuilder = new StringBuilder();
			            List<clsGenericBean> listOfUnUsedBalance = new ArrayList<>();

			            //Q Data
			            sqlBuilder.setLength(0);
			            sqlBuilder.append("select DATE_FORMAT(date(a.dtePOSDate),'%d-%m-%Y'),ifnull(sum(a.dblCardAmt),0.00) as dblUnUsedBalance "
			                    + "from tbldebitcardrevenue a "
			                    + "where date(a.dtePOSDate) between '" + fromDate + "' and '" + toDate + "' "
			                    + "group by a.dtePOSDate "
			                    + "order by a.dtePOSDate ");
			            if (!posCode.equalsIgnoreCase("All"))
			            {
			                sqlBuilder.append("and a.strPOSCode='" + posCode + "' ");
			            }
//			                if (clsGlobalVarClass.gEnableShiftYN && (!cmbShiftNo.getSelectedItem().toString().equalsIgnoreCase("All")))
//			                {
//			                    sqlBuilder.append("and c.intShiftCode='" + shiftNo + "' ");
//			                }                

			            Query querySql = webPOSSessionFactory.getCurrentSession().createSQLQuery(sqlBuilder.toString());
			     	    List listSql = querySql.list();
			     	    if(listSql.size()>0)
			     	    {
			     	    	
			     	    	for(int i=0 ;i<listSql.size();i++ )
			     	    	{
			     	    		Object ob[]=(Object[])listSql.get(i);
			     	    		clsGenericBean obj = new clsGenericBean();
				                obj.setDtePOSDate(ob[0].toString());
				                obj.setDblUnUsedBalance(Double.parseDouble(ob[1].toString()));

				                listOfUnUsedBalance.add(obj);
			     	    	}
			     	    }
			     	    	/*select ifnull(sum(a.dblCardAmt),0.00) as balance,a.dtePOSDate   as posDate
								from tbldebitcardrevenue a
								where date(a.dtePOSDate) between $P{fromDate} and $P{toDate}
								group by a.dtePOSDate*/
			            //call for view report
			            //funViewJasperReportForBeanCollectionDataSource(is, hm, listOfUnUsedBalance);
			     	   try
				 	    {
					 	     Gson gson = new Gson();
					 	    Type type = new TypeToken<List<clsGenericBean>>() {}.getType();
				            String gsonUnused=gson.toJson(listOfUnUsedBalance, type);
				            jObj.put("listOfUnUsedBalance",gsonUnused);
				            
				 	    }
			            catch (Exception e) 
			            {
			            		e.printStackTrace();
			            }
			        }
			        catch (Exception e)
			        {
			            e.printStackTrace();
			        }
				return jObj;
			}
			
			private String kotFor;
		    private String KOTType, sql;
		    private final String Line = "  --------------------------------------";
		    private static Map<String, String> hmTakeAway;
		    public static String gCounterWise, gCounterName;




					
					public JSONObject funViewButtonPressed(String code,String transactionType,String kotFor,String posCode,String clientCode,String posName,String webStockUserCode,String POSDate,String PrintVatNoPOS,String vatNo,String printServiceTaxNo,String serviceTaxNo)
					{
					
					 List list = null;
					 String TableNo =null;
					 JSONObject jObjRet=new JSONObject();
				     JSONArray jArr =new JSONArray();
				     JSONObject jObj1=new JSONObject();
				     
				     JSONObject objSetupParameter=objSetupService.funGetParameterValuePOSWise(clientCode, posCode, "gPrintType");
					 if (transactionType.equalsIgnoreCase("KOT"))
				     {
				         if (kotFor.equalsIgnoreCase("Dina"))
				         {
				        	 try
				             {
				                 String sql = "select strTableNo from tblitemrtemp "
				                         + "where strKOTNo='" + code + "' "
				                         + "group by strKOTNo ;";
				                 Query query = webPOSSessionFactory.getCurrentSession().createSQLQuery(sql);
				        			
				        			list = query.list();
				     			 
				     			 if (list!=null)
				     				{
				     					for(int i=0; i<list.size(); i++)
				     					{
				     						
				     						TableNo =(String) list.get(i);
				                     
				     					}
				     				}
				 			    
				 			    if(objSetupParameter.get("gPrintType").toString().equalsIgnoreCase("Text File"))
				 			    {
				 			    	jObj1=funRemotePrintUsingTextFile(TableNo, code.trim(), "", "Reprint", "Dina", "N",posCode,clientCode,posName,webStockUserCode);
				 			    	
				                 }
				                 else
				                 {
				                	 jObj1=funRemotePrintUsingTextFile(TableNo, code.trim(), "", "Reprint", "Dina", "N",posCode,clientCode,posName,webStockUserCode);
				                	
				                 }
				 			  
				             }
				        	 catch (Exception e)
				             {
				                 e.printStackTrace();
				             }
				        	 code = "";
				         }
				         else if (kotFor.equalsIgnoreCase("DirectBiller"))
				         {
				 			    
				 			    try {
									if(objSetupParameter.get("gPrintType").toString().equalsIgnoreCase("Text File"))
									 {
									     // funTextFilePrintingBill(selectedBill.trim(),clsGlobalVarClass.getPOSDateForTransaction());                          
									//jObj1 = objUtilityFunctions.funPrintBill(code.trim(), POSDate, true, posCode,clientCode,posName,webStockUserCode);
									 }
									 else
									 {
									jObj1 = objUtilityFunctions.funPrintBill(code.trim(), POSDate, true, posCode,clientCode,posName,webStockUserCode,PrintVatNoPOS,vatNo,printServiceTaxNo,serviceTaxNo);
									}
								} catch (JSONException e) {
									
									e.printStackTrace();
								}
				        	 code = "";
				          }
				   } 
				         else if (transactionType.equalsIgnoreCase("Bill"))
				         {
				                 try {
									if (objSetupParameter.get("gPrintType").toString().equalsIgnoreCase("Text File"))
									 {
									    // funTextFilePreviewBill(docNo);
									 }
									 else
									 {
										 jObj1 = objUtilityFunctions.funPrintBill(code.trim(), POSDate, true, posCode,clientCode,posName,webStockUserCode,PrintVatNoPOS,vatNo,printServiceTaxNo,serviceTaxNo);
									 }
								} catch (JSONException e) {
									
									e.printStackTrace();
								}
				        	 code = "";
				         }
				         else 
				         {
				             String gDayEndReportForm = "ReprintDayEndReport";
				             try
				             {

				                 if (objSetupParameter.get("gPrintType").toString().equalsIgnoreCase("Text File"))
				                 {
				                	// jObj1 = objUtilityFunctions.funGenerateTextDayEndReportPreview(code, POSDate, "reprint");
				                 }
				                 else
				                 {
				                	 jObj1 = objUtilityFunctions.funGenerateTextDayEndReportPreview(posCode, code, "reprint",clientCode,gDayEndReportForm,webStockUserCode);
				                 }
				             }
				             catch (Exception e)
				             {
				                 e.printStackTrace();
				             }
				         }
				         
				   
					return jObj1;
					 
				}	

		private JSONObject funGenerateJasperForTableWiseKOT(String billingType, String tableNo, String CostCenterCode, String ShowKOT, String AreaCode, String KOTNO, String Reprint, String primaryPrinterName, String secondaryPrinterName, String CostCenterName, String printYN, String NCKotYN, String labelOnKOT,String posName,String POSCode,String clientCode,String webStockUserCode)
		{
		    HashMap hm = new HashMap();
		    JSONObject jObjRet=new JSONObject();
		   
		     JSONArray jArr =new JSONArray();
		     JSONArray jArr1 =new JSONArray();
		     
		    String sql="";
		    List<List<clsBillDtl>> listData = new ArrayList<>();
		    try
		    {
		    	JSONObject jObj1=new JSONObject(); 
		        boolean isReprint = false;
		        if ("Reprint".equalsIgnoreCase(Reprint))
		        {
		        	 
		        	isReprint = true;
		            jObj1.put("dublicate", "[DUPLICATE]");
		           // jArr.put(jObj1);
		        }
		        
		        if ("Y".equalsIgnoreCase(NCKotYN))
		        {
		        	
		        	jObj1.put("KOTorNC", "NCKOT");
		        	//jArr.put(jObj1);
		        }
		        else
		        {
		        	
		        	jObj1.put("KOTorNC", labelOnKOT);
		        	//jArr.put(jObj1);
		        }
		        jObj1.put("POS", posName);
		        jObj1.put("costCenter", CostCenterName);
		        //jArr.put(jObj1);
		        
		        String tableName = "";
		        int pax = 0;
		        String SQL_KOT_Dina_tableName = "select strTableName,intPaxNo "
		                + " from tbltablemaster "
		                + " where strTableNo='"+tableNo+"' and strOperational='Y'";
		        Query query = webPOSSessionFactory.getCurrentSession().createSQLQuery(SQL_KOT_Dina_tableName);
		       List rs_Dina_Table = query.list();
		       
		        if(rs_Dina_Table!=null)
		        {
		        	for(int i=0; i<rs_Dina_Table.size(); i++)
						{
		  		  Object[] obj = (Object[]) rs_Dina_Table.get(i);
					
		    		
		            tableName = (String) Array.get(obj,0);
		            pax = (int) Array.get(obj,1);
		            }
		        }
		        String itemName = "b.strItemName";
		        JSONObject objSetupParameter=objSetupService.funGetParameterValuePOSWise(clientCode, POSCode, "gPrintShortNameOnKOT");
			    String pringShortNameOnKOT = (String) objSetupParameter.get("gPrintShortNameOnKOT");
			    if ("gPrintShortNameOnKOT".equalsIgnoreCase(pringShortNameOnKOT))
		        {
		            itemName = "d.strShortName";
		        }
		        String sqlKOTItems = "";
		      //  List<clsBillDtl> listOfKOTDetail = new ArrayList<>();
		        JSONArray listOfKOTDetail =new JSONArray();
		        objSetupParameter=objSetupService.funGetParameterValuePOSWise(clientCode, POSCode, "gAreaWisePricing");
			    
		       
		        if (objSetupParameter.get("gAreaWisePricing").equals("Y"))
		        {
		            sqlKOTItems = "select LEFT(a.strItemCode,7)," + itemName + ",a.dblItemQuantity,a.strKOTNo,a.strSerialNo "
		                    + " from tblitemrtemp a,tblmenuitempricingdtl b,tblprintersetup c,tblitemmaster d "
		                    + " where a.strTableNo=? and a.strKOTNo=? and b.strCostCenterCode=c.strCostCenterCode "
		                    + " and b.strCostCenterCode=? and a.strItemCode=d.strItemCode "
		                    + " and (b.strPOSCode=? or b.strPOSCode='All') "
		                    + " and (b.strAreaCode IN (SELECT strAreaCode FROM tbltablemaster where strTableNo=? )) "
		                    + " and LEFT(a.strItemCode,7)=b.strItemCode and b.strHourlyPricing='No' "
		                    + " order by a.strSerialNo ";
		        }
		        else
		        {
		            sqlKOTItems = "select LEFT(a.strItemCode,7)," + itemName + ",a.dblItemQuantity,a.strKOTNo,a.strSerialNo "
		                    + " from tblitemrtemp a,tblmenuitempricingdtl b,tblprintersetup c,tblitemmaster d "
		                    + " where a.strTableNo='"+tableNo+"' and a.strKOTNo='"+KOTNO+"' and b.strCostCenterCode=c.strCostCenterCode "
		                    + " and b.strCostCenterCode='"+CostCenterCode+"' and a.strItemCode=d.strItemCode "
		                    + " and (b.strPOSCode='"+POSCode+"' or b.strPOSCode='All') "
		                    + " and (b.strAreaCode IN (SELECT strAreaCode FROM tbltablemaster where strTableNo='"+tableNo+"' ) "
		                    + " OR b.strAreaCode ='" + AreaCode + "') "
		                    + " and LEFT(a.strItemCode,7)=b.strItemCode and b.strHourlyPricing='No' "
		                    + " order by a.strSerialNo ";
		        }
		     Query query1 = webPOSSessionFactory.getCurrentSession().createSQLQuery(sqlKOTItems);
		        KOTType = "DINE";
		      
		        hmTakeAway = new HashMap<String, String>();
		        sql = "select strTableNo from tblitemrtemp where strTakeAwayYesNo='Yes'";
		      query = webPOSSessionFactory.getCurrentSession().createSQLQuery(sql);
		      List rsTakeAway = query.list();
		      if(rsTakeAway!=null)
		      { 	
		          hmTakeAway.put((String) rsTakeAway.get(0), "Yes");
		     }
		      if (null != hmTakeAway.get(tableNo))
		       {
		            KOTType = "Take Away";
		        }
		      
		      	String gCounterWise = "No";
		      	
		      	jObj1.put("KOTType", KOTType);
		      	jArr.put(jObj1);
		        if (gCounterWise.equals("Yes"))
		        {
		        	jObj1.put("CounterName", gCounterName);
		        	jArr.put(jObj1);
		        }
		        jObj1.put("KOT", KOTNO);
		        jObj1.put("tableNo", tableName);
		      //  jArr.put(jObj1);
		        if (clientCode.equals("124.001"))
		        {
		        	
		        	jObj1.put("124.001", tableName);
		           // jArr.put(jObj1);
		        }
		        jObj1.put("PAX", String.valueOf(pax));
		        //jArr.put(jObj1);
		        
		        String sqlWaiterDtl = "select strWaiterNo from tblitemrtemp where strKOTNo='"+KOTNO+"'  and strTableNo='"+tableNo+"' group by strKOTNo ;";
		        query = webPOSSessionFactory.getCurrentSession().createSQLQuery(sqlWaiterDtl);
		       List rsWaiterDtl =query.list();
		       String waiterNo="",waiterName="";
		        if (rsWaiterDtl!=null)
		        {
		        	JSONObject jObj2=new JSONObject();
		        	for(int i=0; i<rsWaiterDtl.size(); i++)
					{
		        		waiterNo =(String) rsWaiterDtl.get(i);
				
						}
		            if (!"null".equalsIgnoreCase(waiterNo) && waiterNo.trim().length() > 0)
		            {
		                sqlWaiterDtl = "select strWShortName from tblwaitermaster where strWaiterNo='"+waiterNo+"' ;";
		                query = webPOSSessionFactory.getCurrentSession().createSQLQuery(sqlWaiterDtl);
		                
		               List rs = query.list();
		               if (rs!=null)
			            {
		            	   for(int i=0; i<rs.size(); i++)
							{
		            		   waiterName=(String) rs.get(i);
		            		   jObj1.put("waiterName",waiterName);
							}
			            }
		               
		              // jArr.put(jObj1);
		            }
		        }
		        
		        String sql_KOTDate = "select date(dteDateCreated),time(dteDateCreated) from tblitemrtemp where strKOTNo='"+KOTNO+"'  and strTableNo='"+tableNo+"' group by strKOTNo ;";
		        query = webPOSSessionFactory.getCurrentSession().createSQLQuery(sql_KOTDate);
		        List rs_KOTDate = query.list();
		        Date dt = null;
		        Time ti = null;
		        if(rs_KOTDate!=null)
		        {
		        	for(int i=0; i<rs_KOTDate.size(); i++)
					{
		        		Object[] obj = (Object[]) rs_KOTDate.get(i);
				
				
		        		dt = (Date) Array.get(obj,0);
		        		ti=(Time)Array.get(obj,1);
		        	}
		        	jObj1.put("DATE_TIME", dt + " " + ti);
		        	// jArr.put(jObj1);
		        }
		        InetAddress ipAddress = InetAddress.getLocalHost();
		        String hostName = ipAddress.getHostName();
		        jObj1.put("KOTFrom", hostName);
		        
		        BigDecimal itemQty=null;
		        String itemNam="",serialNo="",itemCode="";
		        String modifierName="";
		        List rs_KOT_Items = query1.list();
		       if (rs_KOT_Items!=null)
		        {
		    	   for(int i=0; i<rs_KOT_Items.size(); i++)
					{
		       		Object[] obj = (Object[]) rs_KOT_Items.get(i);
				
				
		       		itemQty = (BigDecimal) Array.get(obj,2);
		    	   itemNam=(String)Array.get(obj,1);
		    	   serialNo=(String)Array.get(obj,4);
		    	   itemCode=(String)Array.get(obj, 0);
					}
		    	   double d1=itemQty.doubleValue();
		           JSONObject jObj=new JSONObject();
		           jObj.put("itemQty",d1 );
		           jObj.put("itemName",itemNam );
//		            objBillDtl.setDblQuantity(d1);
//		            objBillDtl.setStrItemName(itemNam);
		          //  listOfKOTDetail.put(jObj);
		            String sql_Modifier = "select a.strItemName,sum(a.dblItemQuantity) from tblitemrtemp a "
		                    + " where a.strItemCode like'" + itemCode + "M%' and a.strKOTNo='" + KOTNO + "' "
		                    + " and strSerialNo like'" + serialNo + ".%' "
		                    + " group by a.strItemCode,a.strItemName ";
		            //System.out.println(sql_Modifier);
		            query = webPOSSessionFactory.getCurrentSession().createSQLQuery(sql_Modifier);
		           List rsModifierItems = query.list();
		           if (rsModifierItems!=null)
		            {
		        	   for(int i=0; i<rsModifierItems.size(); i++)
						{
		          		Object[] obj = (Object[]) rsModifierItems.get(i);
					
		  		
		          		modifierName = (String) Array.get(obj,0);
		          		itemQty = (BigDecimal) Array.get(obj,1);
		            }
		        	   d1=itemQty.doubleValue();
		               // objBillDtl = new clsBillDtl();
		               
		                if (modifierName.startsWith("-->"))
		                {
		                	
		                	objSetupParameter=objSetupService.funGetParameterValuePOSWise(clientCode, POSCode, "gPrintModQtyOnKOT");
		        		    
		                   
		                  
		                  if ((boolean)objSetupParameter.get("gPrintModQtyOnKOT"))
		                   {
		                	  jObj.put("itemQty",d1 );
				               jObj.put("itemName",modifierName );  
//		                	  objBillDtl.setDblQuantity(d1);
//		                        objBillDtl.setStrItemName(modifierName);
		                    }
		                    else
		                    {
		                    	jObj.put("itemQty",0 );
		                    	jObj.put("itemName",modifierName );  
		                        //objBillDtl.setDblQuantity(0);
		                       // objBillDtl.setStrItemName(modifierName);
		                    }
		                }
		                listOfKOTDetail.put(jObj);
		            }
		        }
		     objSetupParameter=objSetupService.funGetParameterValuePOSWise(clientCode, POSCode, "gNoOfLinesInKOTPrint");
		    String noOfLinesOnKOTPrint = (String) objSetupParameter.get("gNoOfLinesInKOTPrint");
		     
			    String gPrintOS = "windows";
			    String gPrinterType="Inbuild";
//		        for (int cntLines = 0; cntLines < Integer.parseInt(noOfLinesOnKOTPrint); cntLines++)
//		        {
//		        	JSONObject jobj=new JSONObject();
//		           // clsBillDtl objBillDtl = new clsBillDtl();
//		        	jobj.put("itemQty",0 );
//		        	jobj.put("itemName","" );  
////		            objBillDtl.setDblQuantity(0);
////		            objBillDtl.setStrItemName("");
//		            listOfKOTDetail.put(jobj);
//		        }

//		        jObj1.put("listOfItemDtl", listOfKOTDetail);
//		        jArr1.put(jObj1);
		        jArr.put(jObj1);
		        jObjRet.put("jArr", jArr);
		        jObjRet.put("listOfItemDtl", listOfKOTDetail);
		        jObjRet.put("gNoOfLinesInKOTPrint", noOfLinesOnKOTPrint);
		       // listData.add(listOfKOTDetail);
		       
		        
		        //--- Set print properties
		        PrintRequestAttributeSet printRequestAttributeSet = new HashPrintRequestAttributeSet();
		        printRequestAttributeSet.add(MediaSizeName.ISO_A4);
		        objSetupParameter=objSetupService.funGetParameterValuePOSWise(clientCode, POSCode, "gMultipleKOTPrint");
			    String multipleKOTPrint = (String) objSetupParameter.get("gMultipleKOTPrint");
		       
		        if ("gMultipleKOTPrint".equalsIgnoreCase(multipleKOTPrint))
		        {
		            printRequestAttributeSet.add(new Copies(2));
		        }

		        //----------------------------------------------------     
		        //printRequestAttributeSet.add(new Destination(new java.net.URI("file:d:/output/report.ps")));
		        //----------------------------------------------------     
		        PrintServiceAttributeSet printServiceAttributeSet = new HashPrintServiceAttributeSet();

		      
		     sql="select a.strPrinterPort,a.strSecondaryPrinterPort,a.strPrintOnBothPrinters from tblcostcentermaster  a where a.strCostCenterCode='" + CostCenterCode + "' ";
		     query = webPOSSessionFactory.getCurrentSession().createSQLQuery(sql);
		       List rsPrinter=query.list();
		     String kotPrinterName = "";
		        if (rsPrinter!=null)
		        {
		        	 for(int i=0; i<rsPrinter.size(); i++)
						{
		           		Object[] obj = (Object[]) rsPrinter.get(i);
					
		   		
		           		kotPrinterName = (String) Array.get(obj,0);
		        
						}
		        }
		       

		        kotPrinterName = kotPrinterName.replaceAll("#", "\\\\");
		        printServiceAttributeSet.add(new PrinterName(kotPrinterName, null));
		    }
		    catch (Exception e)
		    {
		        e.printStackTrace();
		    }
			return jObjRet;
		}

		



			
			
			
			
			
			

}
